
RFS_SENSOR.elf:     file format elf32-littlenios2
RFS_SENSOR.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001ed60 memsz 0x0001ed60 flags r-x
    LOAD off    0x0001fd80 vaddr 0x0001ed80 paddr 0x00020944 align 2**12
         filesz 0x00001bc4 memsz 0x00001bc4 flags rw-
    LOAD off    0x00022508 vaddr 0x00022508 paddr 0x00022508 align 2**12
         filesz 0x00000000 memsz 0x00000234 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001dd30  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000e20  0001df60  0001df60  0001ef60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bc4  0001ed80  00020944  0001fd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000234  00022508  00022508  00022508  2**2
                  ALLOC, SMALL_DATA
  6 .nios_system_onchip_memory2 00000000  0002273c  0002273c  00021944  2**0
                  CONTENTS
  7 .nios_system_shared_memory 00000000  00040000  00040000  00021944  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00021944  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001678  00000000  00000000  00021968  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003a696  00000000  00000000  00022fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ebf7  00000000  00000000  0005d676  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013687  00000000  00000000  0006c26d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003acc  00000000  00000000  0007f8f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000575c  00000000  00000000  000833c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002bc48  00000000  00000000  00088b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000b4764  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002988  00000000  00000000  000b47a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000bbd0a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000016  00000000  00000000  000bbd0d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000bbd23  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000bbd24  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000bbd25  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000bbd29  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000bbd2d  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000015  00000000  00000000  000bbd31  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000015  00000000  00000000  000bbd46  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000015  00000000  00000000  000bbd5b  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000bbd70  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000041  00000000  00000000  000bbd78  2**0
                  CONTENTS, READONLY
 30 .jdi          0000fb5a  00000000  00000000  000bbdb9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00353cf5  00000000  00000000  000cb913  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0001df60 l    d  .rodata	00000000 .rodata
0001ed80 l    d  .rwdata	00000000 .rwdata
00022508 l    d  .bss	00000000 .bss
0002273c l    d  .nios_system_onchip_memory2	00000000 .nios_system_onchip_memory2
00040000 l    d  .nios_system_shared_memory	00000000 .nios_system_shared_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../RFS_SENSOR_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 esp8266.c
00000000 l    df *ABS*	00000000 light_sensor.c
000208f0 l     O .rwdata	00000004 Light_I2C_Controller_Base
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 rh_temp.c
00000000 l    df *ABS*	00000000 main.c
00022558 l     O .bss	00000080 thresh
000208f4 l     O .rwdata	00000001 g_clear_OOR_flag
00022518 l     O .bss	00000004 out_of_range.4523
00000000 l    df *ABS*	00000000 wf_pow.c
00000000 l    df *ABS*	00000000 ef_pow.c
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_rint.c
0001e8ac l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 sf_fabs.c
00000000 l    df *ABS*	00000000 sf_finite.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 sf_scalbn.c
00000000 l    df *ABS*	00000000 sf_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 fileno.c
00000000 l    df *ABS*	00000000 findfp.c
00009660 l     F .text	00000008 __fp_unlock
00009674 l     F .text	0000019c __sinit.part.1
00009810 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001ed80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0000b4dc l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strstr.c
0000bb24 l     F .text	00000104 critical_factorization
0000bc28 l     F .text	000003b0 two_way_long_needle
00000000 l    df *ABS*	00000000 strtod.c
0000c388 l     F .text	00000064 sulp
0001e9d0 l     O .rodata	00000014 fpinan.2773
0001e9e4 l     O .rodata	00000014 fpi.2737
0001e9f8 l     O .rodata	00000028 tinytens
00000000 l    df *ABS*	00000000 vfprintf.c
0001ea5f l     O .rodata	00000010 zeroes.4389
0001ea6f l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0001ea7f l     O .rodata	00000010 zeroes.4404
0001209c l     F .text	000000bc __sbprintf
0001ea8f l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00012360 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
00014288 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
0001f5cc l     O .rwdata	00000020 lc_ctype_charset
0001f5ac l     O .rwdata	00000020 lc_message_charset
0001f5ec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001ebbc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001ece0 l     O .rodata	00000010 zeroes.4333
0001ecf0 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 vfprintf.c
00018198 l     F .text	000000fc __sprint_r.part.0
0001ed00 l     O .rodata	00000010 zeroes.4349
000197d4 l     F .text	000000bc __sbprintf
0001ed10 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001ac10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001ad24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
0001ad50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_fstat.c
0001aeb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0001afa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001b090 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001b17c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0001b358 l     F .text	0000003c alt_get_errno
0001b394 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0001b5dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00020934 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0001ba24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001bb60 l     F .text	00000034 alt_dev_reg
0001f7cc l     O .rwdata	00001060 nios_system_jtag_uart
0002082c l     O .rwdata	000000c4 nios_system_wifi_uart0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001be74 l     F .text	0000020c altera_avalon_jtag_uart_irq
0001c080 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001c6fc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0001c9ac l     F .text	0000009c altera_avalon_uart_irq
0001ca48 l     F .text	000000e4 altera_avalon_uart_rxirq
0001cb2c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0001ccc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0001cee0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001d36c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001da28 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00022554 g     O .bss	00000004 alt_instruction_exception_handler
0000b3f0 g     F .text	00000018 putchar
000160dc g     F .text	00000074 _mprec_log10
000161c8 g     F .text	0000008c __any_on
00014e34 g     F .text	00000054 _isatty_r
0001ebc8 g     O .rodata	00000028 __mprec_tinytens
0001b294 g     F .text	0000007c alt_main
0000b9fc g     F .text	00000090 strcpy
0000b408 g     F .text	000000c0 _puts_r
0002263c g     O .bss	00000100 alt_irq
00014f64 g     F .text	00000060 _lseek_r
00000420 g     F .text	00000044 ACK_check
00020944 g       *ABS*	00000000 __flash_rwdata_start
000003bc g     F .text	00000064 ACK_single_check
00013d14 g     F .text	000000ac __sflags
00007a28 g     F .text	00000088 .hidden __eqdf2
0002273c g       *ABS*	00000000 __alt_heap_start
00040000 g       *ABS*	00000000 __alt_mem_nios_system_shared_memory
000014e8 g     F .text	00000034 I2C_Write_Light
0000b3ac g     F .text	0000003c printf
00019ccc g     F .text	0000009c _wcrtomb_r
0000b8bc g     F .text	0000005c __sseek
000099c0 g     F .text	00000010 __sinit
00019890 g     F .text	00000140 __swbuf_r
000019cc g     F .text	00000164 MPU9250_initialize
00000ee4 g     F .text	000000c4 esp8266_send_data
00014e88 g     F .text	0000007c _setlocale_r
00009818 g     F .text	00000078 __sfmoreglue
00022600 g     O .bss	0000000c accelerometer_data
0001b334 g     F .text	00000024 __malloc_unlock
0000c3ec g     F .text	000015e4 _strtod_r
00005648 g     F .text	00000440 .hidden __divsf3
00001640 g     F .text	00000030 ReadRegs
00001408 g     F .text	00000030 Light_SetThreshHigh
00015040 g     F .text	0000015c memmove
00000464 g     F .text	0000014c OC_I2C_Write
000099a8 g     F .text	00000018 _cleanup
00003ab0 g     F .text	000004a4 powf
0001519c g     F .text	000000a8 _Balloc
00007ab0 g     F .text	000000dc .hidden __gtdf2
0001db88 g     F .text	00000024 altera_nios2_gen2_irq_init
000091e0 g     F .text	00000010 __errno
000022b4 g     F .text	000000a8 RH_Temp_Init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000a41c g     F .text	0000005c _fstat_r
00022520 g     O .bss	00000004 errno
0000b838 g     F .text	00000008 __seofread
00016df8 g     F .text	000013a0 ___svfiprintf_internal_r
00000000 g       *ABS*	00000000 __alt_mem_nios_system_onchip_memory2
00022540 g     O .bss	00000004 alt_argv
000288f0 g       *ABS*	00000000 _gp
000011f0 g     F .text	0000009c Light_Get_ADCData0
0001b9f4 g     F .text	00000030 usleep
000060b4 g     F .text	000004e4 .hidden __subsf3
00001d38 g     F .text	00000094 read_temp
000095dc g     F .text	0000001c fgets
0001f64c g     O .rwdata	00000180 alt_fd_list
00003280 g     F .text	000006c8 Sensor_Report
00002fe0 g     F .text	00000090 check_temp_hm_threshold
0000b3e8 g     F .text	00000008 _putchar_r
00002454 g     F .text	00000010 RH_Temp_Sensor_Init
0001d50c g     F .text	00000090 alt_find_dev
0000b0ac g     F .text	00000148 memcpy
00014bd8 g     F .text	0000025c __hexnan
000002a0 g     F .text	000000b4 oc_i2c_init_ex
00009668 g     F .text	0000000c _cleanup_r
00008de8 g     F .text	000000dc .hidden __floatsidf
0001db0c g     F .text	0000007c alt_io_redirect
00007b8c g     F .text	000000f4 .hidden __ltdf2
0001df60 g       *ABS*	00000000 __DTOR_END__
0000b4c8 g     F .text	00000014 puts
0001dbac g     F .text	0000009c alt_exception_cause_generated_bad_addr
000011a8 g     F .text	00000048 Light_PowerSwitch
00016980 g     F .text	00000074 __fpclassifyd
00016038 g     F .text	000000a4 __ratio
000197b8 g     F .text	0000001c __vfiprintf_internal
0001c278 g     F .text	0000021c altera_avalon_jtag_uart_read
0000b37c g     F .text	00000030 _printf_r
0000509c g     F .text	00000064 .hidden __udivsi3
0001afe4 g     F .text	000000ac isatty
0001ec18 g     O .rodata	000000c8 __mprec_tens
00014f04 g     F .text	0000000c __locale_charset
00005bbc g     F .text	000000c8 .hidden __lesf2
00019eb4 g     F .text	00000074 .hidden __fixunsdfsi
0002252c g     O .bss	00000004 __malloc_top_pad
000018f4 g     F .text	000000d8 calib_mag
00004de8 g     F .text	00000058 __fpclassifyf
00003218 g     F .text	00000068 check_sp_temperature_threshold
00020914 g     O .rwdata	00000004 __mb_cur_max
00014f34 g     F .text	0000000c _localeconv_r
000155d0 g     F .text	0000003c __i2b
00013dc0 g     F .text	000004c8 __sfvwrite_r
00004dd0 g     F .text	00000018 finitef
0000b6cc g     F .text	00000054 _sbrk_r
00004dc0 g     F .text	00000010 fabsf
000163bc g     F .text	00000060 _read_r
0002092c g     O .rwdata	00000004 alt_max_fd
00013c10 g     F .text	000000f0 _fclose_r
00009468 g     F .text	00000030 fflush
00022528 g     O .bss	00000004 __malloc_max_sbrked_mem
0000154c g     F .text	00000030 I2C_Read_Light
00008ec4 g     F .text	00000110 .hidden __extendsfdf2
0002250c g     O .bss	00000004 temperature
000067ac g     F .text	000008ac .hidden __adddf3
00005a88 g     F .text	00000078 .hidden __nesf2
00015de0 g     F .text	0000010c __b2d
0001a524 g     F .text	000005c4 .hidden __umoddi3
0001b1b8 g     F .text	000000dc lseek
00020900 g     O .rwdata	00000004 __fdlib_version
00020904 g     O .rwdata	00000004 _global_impure_ptr
0001641c g     F .text	00000564 _realloc_r
0002273c g       *ABS*	00000000 __bss_end
0001d938 g     F .text	000000f0 alt_iic_isr_register
0001b8ec g     F .text	00000108 alt_tick
00002804 g     F .text	000000c0 th_dump_chip_info
0001eab0 g     O .rodata	00000100 __hexdig
00019f28 g     F .text	000005fc .hidden __udivdi3
00019c28 g     F .text	00000024 _fputwc_r
0001ebf0 g     O .rodata	00000028 __mprec_bigtens
000153b4 g     F .text	00000104 __s2b
0001ab68 g     F .text	000000a8 .hidden __floatunsidf
00015b20 g     F .text	00000060 __mcmp
0001c900 g     F .text	000000ac altera_avalon_uart_init
000099e0 g     F .text	00000018 __fp_lock_all
0001d8ec g     F .text	0000004c alt_ic_irq_enabled
00002464 g     F .text	000000d8 th_Read_Measure_Data
000009ec g     F .text	00000190 OC_I2CL_Write
0001b850 g     F .text	0000009c alt_alarm_stop
00022550 g     O .bss	00000004 alt_irq_active
00009fbc g     F .text	00000444 _fseeko_r
0000146c g     F .text	00000048 Light_GetInterrupt
000005b0 g     F .text	00000038 ACK_judge_for_read
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001f624 g     O .rwdata	00000028 alt_dev_null
0000026c g     F .text	00000018 Write32_Data
00002f78 g     F .text	00000068 check_light_threshold
00002d34 g     F .text	00000244 set_thresh
00004bd4 g     F .text	000001ec rint
00001160 g     F .text	00000048 Light_GetTiming
0001d34c g     F .text	00000020 alt_dcache_flush_all
000154b8 g     F .text	00000068 __hi0bits
0001aae8 g     F .text	00000080 .hidden __fixdfsi
000208f8 g     O .rwdata	00000004 get_time_request
00002164 g     F .text	000000bc getMotion9
0000d9d0 g     F .text	00000018 strtod
00020944 g       *ABS*	00000000 __ram_rwdata_end
00020924 g     O .rwdata	00000008 alt_dev_list
0001ba60 g     F .text	00000100 write
00016254 g     F .text	000000a0 _putc_r
00005b00 g     F .text	000000bc .hidden __gtsf2
0002260c g     O .bss	0000000c calib_data
0001ed80 g       *ABS*	00000000 __ram_rodata_end
0001aef0 g     F .text	000000b8 fstat
00009b44 g     F .text	00000024 fprintf
00007b8c g     F .text	000000f4 .hidden __ledf2
00015898 g     F .text	00000140 __pow5mult
000182ac g     F .text	0000150c ___vfiprintf_internal_r
00022538 g     O .bss	00000004 __nlocale_changed
00005100 g     F .text	00000058 .hidden __umodsi3
0002273c g       *ABS*	00000000 end
00001dcc g     F .text	000000f0 read_mag
0000a400 g     F .text	0000001c fseeko
0001cf1c g     F .text	000001ac altera_avalon_uart_write
00009fa0 g     F .text	0000001c fseek
0001bdb4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0002251c g     O .bss	00000004 sp_themperature_out
0001df60 g       *ABS*	00000000 __CTOR_LIST__
0002bf20 g       *ABS*	00000000 __alt_stack_pointer
000031b0 g     F .text	00000068 check_gas_cn0395_threshold
0001c774 g     F .text	0000007c alt_avalon_timer_sc_init
0001c850 g     F .text	00000060 altera_avalon_uart_write_fd
0000917c g     F .text	00000064 .hidden __clzsi2
0001c8b0 g     F .text	00000050 altera_avalon_uart_close_fd
0001c494 g     F .text	00000268 altera_avalon_jtag_uart_write
000099d0 g     F .text	00000004 __sfp_lock_acquire
0000afc8 g     F .text	000000e4 memchr
0000fda4 g     F .text	000022dc ___vfprintf_internal_r
0000b720 g     F .text	00000058 _sprintf_r
00009c8c g     F .text	00000310 _free_r
00014f10 g     F .text	00000010 __locale_mb_cur_max
0001ddac g     F .text	00000180 __call_exitprocs
0000235c g     F .text	0000007c RH_Temp_Read_Device_ID
00022534 g     O .bss	00000004 __mlocale_changed
0002090c g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00022548 g     O .bss	00000004 _alt_tick_rate
0000bfd8 g     F .text	000003b0 strstr
000159d8 g     F .text	00000148 __lshift
000028c4 g     F .text	0000014c get_gppm
0002254c g     O .bss	00000004 _alt_nticks
0001b618 g     F .text	00000104 read
00001608 g     F .text	00000038 ReadReg
0001bbcc g     F .text	00000084 alt_sys_init
00006598 g     F .text	00000124 .hidden __floatsisf
00016c28 g     F .text	000001d0 __ssprint_r
0000b31c g     F .text	00000060 _open_r
0001dc94 g     F .text	00000118 __register_exitproc
0000151c g     F .text	00000030 I2C_Write_Light16
00016b58 g     F .text	000000d0 strncmp
00022618 g     O .bss	0000000c gyroscope_data
00000d84 g     F .text	00000064 set_esp8266_file_blocking
0001560c g     F .text	0000028c __multiply
00022624 g     O .bss	0000000c magnetometer_ASA
0001c120 g     F .text	00000068 altera_avalon_jtag_uart_close
00005158 g     F .text	00000028 .hidden __mulsi3
0001ed80 g       *ABS*	00000000 __ram_rwdata_start
0001df60 g       *ABS*	00000000 __ram_rodata_start
000225d8 g     O .bss	00000028 __malloc_current_mallinfo
00005a88 g     F .text	00000078 .hidden __eqsf2
00015eec g     F .text	0000014c __d2b
00002658 g     F .text	00000044 th_write_register
00001670 g     F .text	000000e4 set_acc_scale
0001bc50 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001d6a4 g     F .text	000000c4 alt_get_fd
0001d1f4 g     F .text	00000158 alt_busy_sleep
00003070 g     F .text	00000140 check_temp_ax9_threshold
0001230c g     F .text	00000054 _close_r
00001100 g     F .text	00000018 Light_Init
00022630 g     O .bss	0000000c magnetometer_data
00014fc4 g     F .text	0000007c memcmp
0001bd10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002273c g       *ABS*	00000000 __alt_stack_base
0001bd60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000121b8 g     F .text	00000154 __swsetup_r
00000354 g     F .text	00000014 oc_i2c_init
00001118 g     F .text	00000048 Light_GetID
00007058 g     F .text	000009d0 .hidden __divdf3
00009890 g     F .text	00000118 __sfp
00016150 g     F .text	00000078 __copybits
0001f1a4 g     O .rwdata	00000408 __malloc_av_
000099dc g     F .text	00000004 __sinit_lock_release
00007c80 g     F .text	0000086c .hidden __muldf3
00003f54 g     F .text	00000b24 __ieee754_powf
0000b7e4 g     F .text	00000054 __sread
0001d59c g     F .text	00000108 alt_find_file
0001d3a8 g     F .text	000000a4 alt_dev_llist_insert
0000269c g     F .text	0000005c th_read_register
0001b310 g     F .text	00000024 __malloc_lock
00009b1c g     F .text	00000028 _fprintf_r
0001b7a0 g     F .text	000000b0 sbrk
0000dae8 g     F .text	000022bc ___svfprintf_internal_r
00004e48 g     F .text	00000144 scalbnf
0000940c g     F .text	0000005c _fflush_r
000199e8 g     F .text	000000dc _calloc_r
0000253c g     F .text	000000e0 RH_Temp_Sensor_Read
000013d8 g     F .text	00000030 Light_SetThreshLow
00009b04 g     F .text	00000018 fopen
00022508 g       *ABS*	00000000 __bss_start
0000b1f4 g     F .text	00000128 memset
00004a78 g     F .text	00000154 __ieee754_sqrtf
00003948 g     F .text	00000168 main
00022544 g     O .bss	00000004 alt_envp
00022524 g     O .bss	00000004 __malloc_max_total_mem
0001bcb0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000199d0 g     F .text	00000018 __swbuf
00005bbc g     F .text	000000c8 .hidden __ltsf2
0000b918 g     F .text	00000008 __sclose
00004bcc g     F .text	00000008 matherr
0002bf20 g       *ABS*	00000000 __alt_heap_limit
00013d00 g     F .text	00000014 fclose
00008fd4 g     F .text	000001a8 .hidden __truncdfsf2
00012588 g     F .text	00001688 _dtoa_r
0000a7bc g     F .text	0000080c _malloc_r
00019e28 g     F .text	00000030 __ascii_wctomb
00020930 g     O .rwdata	00000004 alt_errno
00001328 g     F .text	000000b0 Get_light
0000a478 g     F .text	000000c4 _fwalk
00009498 g     F .text	00000144 _fgets_r
000026f8 g     F .text	0000010c Read_Configuration
000162f4 g     F .text	000000c8 putc
00004fa4 g     F .text	00000084 .hidden __divsi3
00001ebc g     F .text	000002a8 read_all
00000368 g     F .text	00000054 oc_i2c_uninit
00009b68 g     F .text	00000124 _malloc_trim_r
0001df60 g       *ABS*	00000000 __CTOR_END__
00005c84 g     F .text	00000430 .hidden __mulsf3
0000b920 g     F .text	000000dc strcmp
0001df60 g       *ABS*	00000000 __flash_rodata_start
00000fa8 g     F .text	00000044 esp8266_dump_rx
0001df60 g       *ABS*	00000000 __DTOR_LIST__
00000de8 g     F .text	00000008 esp8266_gets
00007a28 g     F .text	00000088 .hidden __nedf2
0001bb94 g     F .text	00000038 alt_irq_init
0001b71c g     F .text	00000084 alt_release_fd
00004f8c g     F .text	00000018 copysignf
0000b778 g     F .text	0000006c sprintf
0001e8bc g     O .rodata	00000100 .hidden __clz_tab
00022530 g     O .bss	00000004 _PathLocale
0000d9e8 g     F .text	00000100 strtof
0001dc48 g     F .text	00000014 atexit
00005b00 g     F .text	000000bc .hidden __gesf2
00012158 g     F .text	00000060 _write_r
00014f40 g     F .text	00000018 setlocale
0000261c g     F .text	0000003c th_reset
00004e40 g     F .text	00000008 nanf
00020908 g     O .rwdata	00000004 _impure_ptr
0002253c g     O .bss	00000004 alt_argc
000091f0 g     F .text	0000021c __sflush_r
0001d4ac g     F .text	00000060 _do_dtors
00014f2c g     F .text	00000008 __locale_cjk_lang
00022508 g     O .bss	00000004 esp8266_file
00009f9c g     F .text	00000004 _fseek_r
0000b4f8 g     F .text	000001d4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00015d7c g     F .text	00000064 __ulp
000099f8 g     F .text	00000018 __fp_unlock_all
0000128c g     F .text	0000009c Light_Get_ADCData1
00022510 g     O .bss	00000004 gyro_divider
0002091c g     O .rwdata	00000008 alt_fs_list
00000284 g     F .text	0000001c Read32_Data
00002220 g     F .text	00000094 getMotion6
00001754 g     F .text	000000ec set_gyro_scale
000005e8 g     F .text	000001c8 OC_I2C_Read
00000020 g       *ABS*	00000000 __ram_exceptions_start
00014f58 g     F .text	0000000c localeconv
00000df0 g     F .text	000000f4 esp8266_send_command
0001d788 g     F .text	00000050 alt_ic_isr_register
000014b4 g     F .text	00000034 Light_SetTiming
00020944 g       *ABS*	00000000 _edata
0001c7f0 g     F .text	00000060 altera_avalon_uart_read_fd
000208fc g     O .rwdata	00000004 time_server_domain
0002273c g       *ABS*	00000000 _end
00019ac4 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0001c188 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00002a10 g     F .text	00000324 convert_light_lux
00001590 g     F .text	00000078 WriteReg
0001d860 g     F .text	0000008c alt_ic_irq_disable
0000b840 g     F .text	0000007c __swrite
00020910 g     O .rwdata	00000004 __malloc_trim_threshold
000008ac g     F .text	00000140 OC_I2C_Read_Continue
00014f20 g     F .text	0000000c __locale_msgcharset
0001dc5c g     F .text	00000038 exit
0000a53c g     F .text	000000c4 _fwalk_reent
000066bc g     F .text	000000f0 .hidden __floatunsisf
00015b80 g     F .text	000001fc __mdiff
00005028 g     F .text	00000074 .hidden __modsi3
0002bf20 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000099d4 g     F .text	00000004 __sfp_lock_release
00001c34 g     F .text	00000104 read_gyro
0000157c g     F .text	00000014 MPU9250_Init
000023d8 g     F .text	0000007c Write_Configuration
000095f8 g     F .text	00000068 fileno
0001cc74 g     F .text	00000054 altera_avalon_uart_close
00000b7c g     F .text	00000208 OC_I2CL_Read
00009a10 g     F .text	000000f4 _fopen_r
0001df2c g     F .text	00000034 _exit
0001d0c8 g     F .text	0000012c alt_alarm_start
0000a600 g     F .text	000001bc __smakebuf_r
0000ba8c g     F .text	00000098 strlen
0001b480 g     F .text	0000015c open
00000fec g     F .text	00000114 esp8266_init
00007ab0 g     F .text	000000dc .hidden __gedf2
00022514 g     O .bss	00000004 acc_divider
00014388 g     F .text	00000850 __gethex
00020918 g     O .rwdata	00000004 __wctomb
00018294 g     F .text	00000018 __sprint_r
0001d768 g     F .text	00000020 alt_icache_flush_all
000169f4 g     F .text	00000164 strchr
00001b30 g     F .text	00000104 read_acc
00020940 g     O .rwdata	00000004 alt_priority_mask
00001840 g     F .text	000000b4 calib_acc
0001d7d8 g     F .text	00000088 alt_ic_irq_enable
000007b0 g     F .text	000000fc OC_I2C_Write_Addr
00012080 g     F .text	0000001c __vfprintf_internal
0001cd04 g     F .text	000001dc altera_avalon_uart_read
00019e58 g     F .text	0000005c _wctomb_r
000084ec g     F .text	000008fc .hidden __subdf3
0001ad8c g     F .text	00000128 fcntl
00015520 g     F .text	000000b0 __lo0bits
00020938 g     O .rwdata	00000008 alt_alarm_list
0001d44c g     F .text	00000060 _do_ctors
00019d68 g     F .text	000000c0 wcrtomb
0001ac4c g     F .text	000000d8 close
00005180 g     F .text	000004c8 .hidden __addsf3
00001438 g     F .text	00000034 Light_SetInterrupt
0001b0f8 g     F .text	00000084 alt_load
00019c4c g     F .text	00000080 fputwc
000099d8 g     F .text	00000004 __sinit_lock_acquire
0001526c g     F .text	00000148 __multadd
00015244 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	10898f04 	addi	r2,r2,9788
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	10898f04 	addi	r2,r2,9788
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_nios_system_shared_memory+0xfffc012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_nios_system_shared_memory+0xfffc0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a71917 	ldw	r2,-25500(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a71917 	ldw	r2,-25500(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	deefc814 	ori	sp,sp,48928
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d6a23c14 	ori	gp,gp,35056
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     244:	10894214 	ori	r2,r2,9480

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18c9cf14 	ori	r3,r3,10044

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_mem_nios_system_shared_memory+0xfffc0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	001b0f80 	call	1b0f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	001b2940 	call	1b294 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_mem_nios_system_shared_memory+0xfffc0268>

0000026c <Write32_Data>:
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     26c:	294b883a 	add	r5,r5,r5
     270:	294b883a 	add	r5,r5,r5
     274:	2909883a 	add	r4,r5,r4
     278:	21800035 	stwio	r6,0(r4)
    bPass=TRUE;
    return bPass;
}
     27c:	00800044 	movi	r2,1
     280:	f800283a 	ret

00000284 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     284:	294b883a 	add	r5,r5,r5
     288:	294b883a 	add	r5,r5,r5
     28c:	2909883a 	add	r4,r5,r4
     290:	20c00037 	ldwio	r3,0(r4)
	bPass=TRUE;
    return bPass;
}
     294:	00800044 	movi	r2,1



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     298:	30c00015 	stw	r3,0(r6)
	bPass=TRUE;
    return bPass;
}
     29c:	f800283a 	ret

000002a0 <oc_i2c_init_ex>:

	return bSuccess;
}

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
     2a0:	defffd04 	addi	sp,sp,-12
     2a4:	dc400115 	stw	r17,4(sp)
     2a8:	dc000015 	stw	r16,0(sp)
     2ac:	2823883a 	mov	r17,r5
     2b0:	2021883a 	mov	r16,r4
	const alt_u8 ControlValue = 0x80;

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
     2b4:	01400144 	movi	r5,5
     2b8:	3009883a 	mov	r4,r6

	return bSuccess;
}

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
     2bc:	dfc00215 	stw	ra,8(sp)
	const alt_u8 ControlValue = 0x80;

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
     2c0:	00051580 	call	5158 <__mulsi3>
     2c4:	8809883a 	mov	r4,r17
     2c8:	100b883a 	mov	r5,r2
     2cc:	0004fa40 	call	4fa4 <__divsi3>
     2d0:	10bfffc4 	addi	r2,r2,-1
     2d4:	11003fcc 	andi	r4,r2,255
	prescale_low = prescale & 0xFF;
	prescale_high = (prescale >> 8) & 0xFF;

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
     2d8:	81000035 	stwio	r4,0(r16)
     2dc:	1005d23a 	srai	r2,r2,8
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
     2e0:	81c00104 	addi	r7,r16,4
     2e4:	10803fcc 	andi	r2,r2,255
     2e8:	38800035 	stwio	r2,0(r7)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
     2ec:	81800204 	addi	r6,r16,8
     2f0:	01402004 	movi	r5,128
     2f4:	31400035 	stwio	r5,0(r6)


    // check prescale low byte
    if (bSuccess){
    	read_data =IORD(i2c_base, 0);
     2f8:	80c00037 	ldwio	r3,0(r16)
        if( (read_data & 0x00ff) != prescale_low ){
     2fc:	18c03fcc 	andi	r3,r3,255
     300:	20c00926 	beq	r4,r3,328 <oc_i2c_init_ex+0x88>
    }

   if (bSuccess)
       printf("\nI2C core is enabled! \r\n");
   else
       printf("\nI2C core is not enabled successfully! \r\n");
     304:	010000b4 	movhi	r4,2
     308:	2137d804 	addi	r4,r4,-8352
     30c:	000b4c80 	call	b4c8 <puts>
     310:	0005883a 	mov	r2,zero

   return bSuccess;

}
     314:	dfc00217 	ldw	ra,8(sp)
     318:	dc400117 	ldw	r17,4(sp)
     31c:	dc000017 	ldw	r16,0(sp)
     320:	dec00304 	addi	sp,sp,12
     324:	f800283a 	ret
        }
    }

    // check prescale high byte
    if (bSuccess){
    	read_data =IORD(i2c_base, 1);
     328:	38c00037 	ldwio	r3,0(r7)
        if( (read_data & 0x00ff) != prescale_high ){
     32c:	18c03fcc 	andi	r3,r3,255
     330:	10fff41e 	bne	r2,r3,304 <__alt_mem_nios_system_shared_memory+0xfffc0304>
        }
    }

    // check control
    if (bSuccess){
    	read_data =IORD(i2c_base, 2);
     334:	30800037 	ldwio	r2,0(r6)
        if( (read_data & 0x00ff) != ControlValue ){
     338:	10803fcc 	andi	r2,r2,255
     33c:	117ff11e 	bne	r2,r5,304 <__alt_mem_nios_system_shared_memory+0xfffc0304>
            bSuccess = FALSE;
        }
    }

   if (bSuccess)
       printf("\nI2C core is enabled! \r\n");
     340:	010000b4 	movhi	r4,2
     344:	2137e304 	addi	r4,r4,-8308
     348:	000b4c80 	call	b4c8 <puts>
     34c:	00800044 	movi	r2,1
   else
       printf("\nI2C core is not enabled successfully! \r\n");

   return bSuccess;
     350:	003ff006 	br	314 <__alt_mem_nios_system_shared_memory+0xfffc0314>

00000354 <oc_i2c_init>:
bool oc_i2c_init(alt_32 i2c_base){
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
	const alt_32 i2c_clk = 400*1000; // 400KHz

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
     354:	018001b4 	movhi	r6,6
     358:	0140bef4 	movhi	r5,763
     35c:	3186a004 	addi	r6,r6,6784
     360:	297c2004 	addi	r5,r5,-3968
     364:	00002a01 	jmpi	2a0 <oc_i2c_init_ex>

00000368 <oc_i2c_uninit>:
   return bSuccess;

}

bool oc_i2c_uninit(alt_32 i2c_base)
{
     368:	deffff04 	addi	sp,sp,-4
     36c:	dfc00015 	stw	ra,0(sp)
	bool bSuccess=TRUE;
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;

    IOWR( i2c_base, 2, ControlValue);
     370:	21000204 	addi	r4,r4,8
     374:	20000035 	stwio	zero,0(r4)
   	read_data =IORD(i2c_base, 2);
     378:	20800037 	ldwio	r2,0(r4)
	if( (read_data & 0x00ff) != ControlValue ){
     37c:	10803fcc 	andi	r2,r2,255
     380:	1000071e 	bne	r2,zero,3a0 <oc_i2c_uninit+0x38>
            bSuccess = FALSE;
    }

   if (bSuccess)
       printf("\nI2C core  is disabled! \r\n");
     384:	010000b4 	movhi	r4,2
     388:	2137e904 	addi	r4,r4,-8284
     38c:	000b4c80 	call	b4c8 <puts>

}

bool oc_i2c_uninit(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
     390:	00800044 	movi	r2,1
   else
       printf("\nI2C core is failed to disable! \r\n");

   return bSuccess;

}
     394:	dfc00017 	ldw	ra,0(sp)
     398:	dec00104 	addi	sp,sp,4
     39c:	f800283a 	ret
    }

   if (bSuccess)
       printf("\nI2C core  is disabled! \r\n");
   else
       printf("\nI2C core is failed to disable! \r\n");
     3a0:	010000b4 	movhi	r4,2
     3a4:	2137f004 	addi	r4,r4,-8256
     3a8:	000b4c80 	call	b4c8 <puts>
	const alt_u8 ControlValue = 0x00;

    IOWR( i2c_base, 2, ControlValue);
   	read_data =IORD(i2c_base, 2);
	if( (read_data & 0x00ff) != ControlValue ){
            bSuccess = FALSE;
     3ac:	0005883a 	mov	r2,zero
   else
       printf("\nI2C core is failed to disable! \r\n");

   return bSuccess;

}
     3b0:	dfc00017 	ldw	ra,0(sp)
     3b4:	dec00104 	addi	sp,sp,4
     3b8:	f800283a 	ret

000003bc <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
     3bc:	defffe04 	addi	sp,sp,-8
     3c0:	dc000015 	stw	r16,0(sp)
     3c4:	2021883a 	mov	r16,r4
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
     3c8:	01003e84 	movi	r4,250




bool  ACK_single_check(alt_32 i2c_base)
{
     3cc:	dfc00115 	stw	ra,4(sp)
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
    read_data =IORD(i2c_base, 4);
     3d0:	84000404 	addi	r16,r16,16
bool  ACK_single_check(alt_32 i2c_base)
{
	bool bSuccess=TRUE;
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
     3d4:	001b9f40 	call	1b9f4 <usleep>
    read_data =IORD(i2c_base, 4);
     3d8:	80800037 	ldwio	r2,0(r16)
    if(read_data & 0x02)
     3dc:	1080008c 	andi	r2,r2,2
     3e0:	10000526 	beq	r2,zero,3f8 <ACK_single_check+0x3c>
     3e4:	0005883a 	mov	r2,zero
            read_data =IORD(i2c_base, 4);
                if(read_data & 0x80)
                    bSuccess = FALSE;
     }
    return bSuccess;
}
     3e8:	dfc00117 	ldw	ra,4(sp)
     3ec:	dc000017 	ldw	r16,0(sp)
     3f0:	dec00204 	addi	sp,sp,8
     3f4:	f800283a 	ret
    usleep(ACK_SLEEP_TIME);
    read_data =IORD(i2c_base, 4);
    if(read_data & 0x02)
            bSuccess = FALSE;
     if (bSuccess){
            usleep(ACK_SLEEP_TIME);
     3f8:	01003e84 	movi	r4,250
     3fc:	001b9f40 	call	1b9f4 <usleep>
            read_data =IORD(i2c_base, 4);
     400:	80800037 	ldwio	r2,0(r16)
                if(read_data & 0x80)
     404:	1004d1fa 	srli	r2,r2,7
     408:	1080005c 	xori	r2,r2,1
     40c:	1080004c 	andi	r2,r2,1
                    bSuccess = FALSE;
     }
    return bSuccess;
}
     410:	dfc00117 	ldw	ra,4(sp)
     414:	dc000017 	ldw	r16,0(sp)
     418:	dec00204 	addi	sp,sp,8
     41c:	f800283a 	ret

00000420 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
     420:	defffd04 	addi	sp,sp,-12
     424:	dc400115 	stw	r17,4(sp)
     428:	dc000015 	stw	r16,0(sp)
     42c:	dfc00215 	stw	ra,8(sp)
     430:	2023883a 	mov	r17,r4
     434:	04000284 	movi	r16,10
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     438:	8809883a 	mov	r4,r17
     43c:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     440:	10c03fcc 	andi	r3,r2,255
     444:	843fffc4 	addi	r16,r16,-1
     448:	1800011e 	bne	r3,zero,450 <ACK_check+0x30>
     44c:	803ffa1e 	bne	r16,zero,438 <__alt_mem_nios_system_shared_memory+0xfffc0438>
    //	printf("no ack2 !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);

    }

    return bSuccess;
}
     450:	dfc00217 	ldw	ra,8(sp)
     454:	dc400117 	ldw	r17,4(sp)
     458:	dc000017 	ldw	r16,0(sp)
     45c:	dec00304 	addi	sp,sp,12
     460:	f800283a 	ret

00000464 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
     464:	defff804 	addi	sp,sp,-32
     468:	dd400515 	stw	r21,20(sp)
     46c:	dd000415 	stw	r20,16(sp)
     470:	dcc00315 	stw	r19,12(sp)
     474:	dc400115 	stw	r17,4(sp)
     478:	dfc00715 	stw	ra,28(sp)
     47c:	dd800615 	stw	r22,24(sp)
     480:	dc800215 	stw	r18,8(sp)
     484:	dc000015 	stw	r16,0(sp)
     488:	2023883a 	mov	r17,r4
     48c:	302b883a 	mov	r21,r6
     490:	3829883a 	mov	r20,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     494:	24c00304 	addi	r19,r4,12
     498:	29403fcc 	andi	r5,r5,255
     49c:	99400035 	stwio	r5,0(r19)
     4a0:	24800404 	addi	r18,r4,16
     4a4:	00802404 	movi	r2,144
     4a8:	90800035 	stwio	r2,0(r18)
     4ac:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     4b0:	8809883a 	mov	r4,r17
     4b4:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     4b8:	10803fcc 	andi	r2,r2,255
     4bc:	843fffc4 	addi	r16,r16,-1
     4c0:	10000f1e 	bne	r2,zero,500 <OC_I2C_Write+0x9c>
     4c4:	803ffa1e 	bne	r16,zero,4b0 <__alt_mem_nios_system_shared_memory+0xfffc04b0>
       return FALSE;
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2C_Write error[2]\r\n");
     4c8:	010000b4 	movhi	r4,2
     4cc:	2137f904 	addi	r4,r4,-8220
     4d0:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     4d4:	0005883a 	mov	r2,zero

  // printf("\n receive ACK-data! \n");

     return TRUE;

}
     4d8:	dfc00717 	ldw	ra,28(sp)
     4dc:	dd800617 	ldw	r22,24(sp)
     4e0:	dd400517 	ldw	r21,20(sp)
     4e4:	dd000417 	ldw	r20,16(sp)
     4e8:	dcc00317 	ldw	r19,12(sp)
     4ec:	dc800217 	ldw	r18,8(sp)
     4f0:	dc400117 	ldw	r17,4(sp)
     4f4:	dc000017 	ldw	r16,0(sp)
     4f8:	dec00804 	addi	sp,sp,32
     4fc:	f800283a 	ret
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     500:	ad403fcc 	andi	r21,r21,255
     504:	9d400035 	stwio	r21,0(r19)
     508:	00800404 	movi	r2,16
     50c:	90800035 	stwio	r2,0(r18)
     510:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     514:	8809883a 	mov	r4,r17
     518:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     51c:	10803fcc 	andi	r2,r2,255
     520:	843fffc4 	addi	r16,r16,-1
     524:	1000061e 	bne	r2,zero,540 <OC_I2C_Write+0xdc>
     528:	803ffa1e 	bne	r16,zero,514 <__alt_mem_nios_system_shared_memory+0xfffc0514>
        return FALSE;
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2C_Write error[5]\r\n");
     52c:	010000b4 	movhi	r4,2
     530:	2137ff04 	addi	r4,r4,-8196
     534:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     538:	0005883a 	mov	r2,zero
     53c:	003fe606 	br	4d8 <__alt_mem_nios_system_shared_memory+0xfffc04d8>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
     540:	d8800817 	ldw	r2,32(sp)
     544:	0080140e 	bge	zero,r2,598 <OC_I2C_Write+0x134>
     548:	d8800817 	ldw	r2,32(sp)
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     54c:	05800404 	movi	r22,16
     550:	a0ab883a 	add	r21,r20,r2
     554:	a0800003 	ldbu	r2,0(r20)
     558:	98800035 	stwio	r2,0(r19)
     55c:	95800035 	stwio	r22,0(r18)
     560:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     564:	8809883a 	mov	r4,r17
     568:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     56c:	10803fcc 	andi	r2,r2,255
     570:	843fffc4 	addi	r16,r16,-1
     574:	1000061e 	bne	r2,zero,590 <OC_I2C_Write+0x12c>
     578:	803ffa1e 	bne	r16,zero,564 <__alt_mem_nios_system_shared_memory+0xfffc0564>
              return FALSE;
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
              printf("OC_I2C_Write error[8]\r\n");
     57c:	010000b4 	movhi	r4,2
     580:	21380504 	addi	r4,r4,-8172
     584:	000b4c80 	call	b4c8 <puts>
              return FALSE;
     588:	0005883a 	mov	r2,zero
     58c:	003fd206 	br	4d8 <__alt_mem_nios_system_shared_memory+0xfffc04d8>
     590:	a5000044 	addi	r20,r20,1
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
     594:	a57fef1e 	bne	r20,r21,554 <__alt_mem_nios_system_shared_memory+0xfffc0554>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     598:	00801004 	movi	r2,64
     59c:	90800035 	stwio	r2,0(r18)
         printf("OC_I2C_Write error[9]\r\n");
         return FALSE;
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
     5a0:	01003e84 	movi	r4,250
     5a4:	001b9f40 	call	1b9f4 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
     5a8:	00800044 	movi	r2,1
     5ac:	003fca06 	br	4d8 <__alt_mem_nios_system_shared_memory+0xfffc04d8>

000005b0 <ACK_judge_for_read>:

}


bool ACK_judge_for_read(alt_32 i2c_base)
{
     5b0:	defffe04 	addi	sp,sp,-8
     5b4:	dc000015 	stw	r16,0(sp)
     5b8:	2021883a 	mov	r16,r4
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     5bc:	01003e84 	movi	r4,250

}


bool ACK_judge_for_read(alt_32 i2c_base)
{
     5c0:	dfc00115 	stw	ra,4(sp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     5c4:	001b9f40 	call	1b9f4 <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     5c8:	80800437 	ldwio	r2,16(r16)
        if(this_data & 0x02)
            bSuccess = FALSE;
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
     5cc:	1004d07a 	srli	r2,r2,1
     5d0:	1080005c 	xori	r2,r2,1

}
     5d4:	1080004c 	andi	r2,r2,1
     5d8:	dfc00117 	ldw	ra,4(sp)
     5dc:	dc000017 	ldw	r16,0(sp)
     5e0:	dec00204 	addi	sp,sp,8
     5e4:	f800283a 	ret

000005e8 <OC_I2C_Read>:





bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
     5e8:	defff704 	addi	sp,sp,-36
     5ec:	dd400515 	stw	r21,20(sp)
     5f0:	dd400917 	ldw	r21,36(sp)
     5f4:	ddc00715 	stw	r23,28(sp)
     5f8:	dd800615 	stw	r22,24(sp)
     5fc:	dd000415 	stw	r20,16(sp)
     600:	dcc00315 	stw	r19,12(sp)
     604:	dc400115 	stw	r17,4(sp)
     608:	dfc00815 	stw	ra,32(sp)
     60c:	dc800215 	stw	r18,8(sp)
     610:	dc000015 	stw	r16,0(sp)
     614:	2023883a 	mov	r17,r4
     618:	2829883a 	mov	r20,r5
     61c:	302f883a 	mov	r23,r6
     620:	382d883a 	mov	r22,r7
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
     624:	24c00304 	addi	r19,r4,12
     628:	28803fcc 	andi	r2,r5,255
     62c:	98800035 	stwio	r2,0(r19)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
     630:	24800404 	addi	r18,r4,16
     634:	00802404 	movi	r2,144
     638:	90800035 	stwio	r2,0(r18)
     63c:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     640:	8809883a 	mov	r4,r17
     644:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     648:	10803fcc 	andi	r2,r2,255
     64c:	843fffc4 	addi	r16,r16,-1
     650:	1000101e 	bne	r2,zero,694 <OC_I2C_Read+0xac>
     654:	803ffa1e 	bne	r16,zero,640 <__alt_mem_nios_system_shared_memory+0xfffc0640>
   IOWR( i2c_base, 3,device_address);
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
       printf("OC_I2C_Read error[2]\r\n");
     658:	010000b4 	movhi	r4,2
     65c:	21380b04 	addi	r4,r4,-8148
     660:	000b4c80 	call	b4c8 <puts>
       return FALSE;
     664:	0005883a 	mov	r2,zero
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;

}
     668:	dfc00817 	ldw	ra,32(sp)
     66c:	ddc00717 	ldw	r23,28(sp)
     670:	dd800617 	ldw	r22,24(sp)
     674:	dd400517 	ldw	r21,20(sp)
     678:	dd000417 	ldw	r20,16(sp)
     67c:	dcc00317 	ldw	r19,12(sp)
     680:	dc800217 	ldw	r18,8(sp)
     684:	dc400117 	ldw	r17,4(sp)
     688:	dc000017 	ldw	r16,0(sp)
     68c:	dec00904 	addi	sp,sp,36
     690:	f800283a 	ret
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
       printf("OC_I2C_Read error[2]\r\n");
       return FALSE;
   }
   IOWR(i2c_base, 3,sub_address);
     694:	bdc03fcc 	andi	r23,r23,255
     698:	9dc00035 	stwio	r23,0(r19)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
     69c:	00800404 	movi	r2,16
     6a0:	90800035 	stwio	r2,0(r18)
     6a4:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     6a8:	8809883a 	mov	r4,r17
     6ac:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     6b0:	10803fcc 	andi	r2,r2,255
     6b4:	843fffc4 	addi	r16,r16,-1
     6b8:	1000061e 	bne	r2,zero,6d4 <OC_I2C_Read+0xec>
     6bc:	803ffa1e 	bne	r16,zero,6a8 <__alt_mem_nios_system_shared_memory+0xfffc06a8>

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[5]\r\n");
     6c0:	010000b4 	movhi	r4,2
     6c4:	21381104 	addi	r4,r4,-8124
     6c8:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     6cc:	0005883a 	mov	r2,zero
     6d0:	003fe506 	br	668 <__alt_mem_nios_system_shared_memory+0xfffc0668>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
     6d4:	a5000054 	ori	r20,r20,1
     6d8:	a5003fcc 	andi	r20,r20,255
     6dc:	9d000035 	stwio	r20,0(r19)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
     6e0:	00802404 	movi	r2,144
     6e4:	90800035 	stwio	r2,0(r18)
     6e8:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     6ec:	8809883a 	mov	r4,r17
     6f0:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     6f4:	10803fcc 	andi	r2,r2,255
     6f8:	843fffc4 	addi	r16,r16,-1
     6fc:	1000061e 	bne	r2,zero,718 <OC_I2C_Read+0x130>
     700:	803ffa1e 	bne	r16,zero,6ec <__alt_mem_nios_system_shared_memory+0xfffc06ec>
   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
     704:	010000b4 	movhi	r4,2
     708:	21381704 	addi	r4,r4,-8100
     70c:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     710:	0005883a 	mov	r2,zero
     714:	003fd406 	br	668 <__alt_mem_nios_system_shared_memory+0xfffc0668>
    }

    for(i=0;i<nReadLength;i++){
     718:	05401f0e 	bge	zero,r21,798 <OC_I2C_Read+0x1b0>
     71c:	b021883a 	mov	r16,r22
     720:	002f883a 	mov	r23,zero
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
     724:	05000804 	movi	r20,32
     728:	bc400044 	addi	r17,r23,1
     72c:	ac401026 	beq	r21,r17,770 <OC_I2C_Read+0x188>
     730:	95000035 	stwio	r20,0(r18)
{
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     734:	01003e84 	movi	r4,250
     738:	001b9f40 	call	1b9f4 <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     73c:	90800037 	ldwio	r2,0(r18)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    if (bSuccess){
        if(this_data & 0x02)
     740:	1080008c 	andi	r2,r2,2
     744:	10000526 	beq	r2,zero,75c <OC_I2C_Read+0x174>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);

        if (!ACK_judge_for_read( i2c_base)){
            printf("OC_I2C_Read error[10]\r\n");
     748:	010000b4 	movhi	r4,2
     74c:	21381d04 	addi	r4,r4,-8076
     750:	000b4c80 	call	b4c8 <puts>
            return FALSE;
     754:	0005883a 	mov	r2,zero
     758:	003fc306 	br	668 <__alt_mem_nios_system_shared_memory+0xfffc0668>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
     75c:	98800037 	ldwio	r2,0(r19)
//        printf("Data32_%d: %d\n", i, Data32);
        *(pData8+i) =  Data32 & 0xff;
     760:	80800005 	stb	r2,0(r16)
     764:	882f883a 	mov	r23,r17
     768:	84000044 	addi	r16,r16,1
     76c:	003fee06 	br	728 <__alt_mem_nios_system_shared_memory+0xfffc0728>
    }

    for(i=0;i<nReadLength;i++){
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
     770:	00800a04 	movi	r2,40
     774:	90800035 	stwio	r2,0(r18)
{
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     778:	01003e84 	movi	r4,250
     77c:	001b9f40 	call	1b9f4 <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     780:	90800037 	ldwio	r2,0(r18)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    if (bSuccess){
        if(this_data & 0x02)
     784:	1080008c 	andi	r2,r2,2
     788:	103fef1e 	bne	r2,zero,748 <__alt_mem_nios_system_shared_memory+0xfffc0748>
            printf("OC_I2C_Read error[10]\r\n");
            return FALSE;
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
     78c:	98800037 	ldwio	r2,0(r19)
//        printf("Data32_%d: %d\n", i, Data32);
        *(pData8+i) =  Data32 & 0xff;
     790:	b5ed883a 	add	r22,r22,r23
     794:	b0800005 	stb	r2,0(r22)
    }

    IOWR( i2c_base, 4,0x40);
     798:	00801004 	movi	r2,64
     79c:	90800035 	stwio	r2,0(r18)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
     7a0:	01003e84 	movi	r4,250
     7a4:	001b9f40 	call	1b9f4 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
     7a8:	00800044 	movi	r2,1
     7ac:	003fae06 	br	668 <__alt_mem_nios_system_shared_memory+0xfffc0668>

000007b0 <OC_I2C_Write_Addr>:

}

bool  OC_I2C_Write_Addr(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, bool bStop){
     7b0:	defff904 	addi	sp,sp,-28
     7b4:	dd400515 	stw	r21,20(sp)
     7b8:	dd000415 	stw	r20,16(sp)
     7bc:	dc800215 	stw	r18,8(sp)
     7c0:	dc400115 	stw	r17,4(sp)
     7c4:	dfc00615 	stw	ra,24(sp)
     7c8:	dcc00315 	stw	r19,12(sp)
     7cc:	dc000015 	stw	r16,0(sp)
     7d0:	2023883a 	mov	r17,r4
     7d4:	3025883a 	mov	r18,r6
     7d8:	3829883a 	mov	r20,r7
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
     7dc:	25400304 	addi	r21,r4,12
     7e0:	29403fcc 	andi	r5,r5,255
     7e4:	a9400035 	stwio	r5,0(r21)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
     7e8:	24c00404 	addi	r19,r4,16
     7ec:	00802404 	movi	r2,144
     7f0:	98800035 	stwio	r2,0(r19)
     7f4:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     7f8:	8809883a 	mov	r4,r17
     7fc:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     800:	10803fcc 	andi	r2,r2,255
     804:	843fffc4 	addi	r16,r16,-1
     808:	10000e1e 	bne	r2,zero,844 <OC_I2C_Write_Addr+0x94>
     80c:	803ffa1e 	bne	r16,zero,7f8 <__alt_mem_nios_system_shared_memory+0xfffc07f8>
   IOWR( i2c_base, 3,device_address);
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
       printf("OC_I2C_Read error[2]\r\n");
     810:	010000b4 	movhi	r4,2
     814:	21380b04 	addi	r4,r4,-8148
     818:	000b4c80 	call	b4c8 <puts>
       return FALSE;
     81c:	0005883a 	mov	r2,zero
        usleep(SLEEP_TIME);
    }

   return TRUE;

}
     820:	dfc00617 	ldw	ra,24(sp)
     824:	dd400517 	ldw	r21,20(sp)
     828:	dd000417 	ldw	r20,16(sp)
     82c:	dcc00317 	ldw	r19,12(sp)
     830:	dc800217 	ldw	r18,8(sp)
     834:	dc400117 	ldw	r17,4(sp)
     838:	dc000017 	ldw	r16,0(sp)
     83c:	dec00704 	addi	sp,sp,28
     840:	f800283a 	ret
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
       printf("OC_I2C_Read error[2]\r\n");
       return FALSE;
   }
   IOWR(i2c_base, 3,sub_address);
     844:	94803fcc 	andi	r18,r18,255
     848:	ac800035 	stwio	r18,0(r21)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
     84c:	00800404 	movi	r2,16
     850:	98800035 	stwio	r2,0(r19)
     854:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     858:	8809883a 	mov	r4,r17
     85c:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     860:	10803fcc 	andi	r2,r2,255
     864:	843fffc4 	addi	r16,r16,-1
     868:	1000061e 	bne	r2,zero,884 <OC_I2C_Write_Addr+0xd4>
     86c:	803ffa1e 	bne	r16,zero,858 <__alt_mem_nios_system_shared_memory+0xfffc0858>

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[5]\r\n");
     870:	010000b4 	movhi	r4,2
     874:	21381104 	addi	r4,r4,-8124
     878:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     87c:	0005883a 	mov	r2,zero
     880:	003fe706 	br	820 <__alt_mem_nios_system_shared_memory+0xfffc0820>
    }

    if (bStop){
     884:	a5003fcc 	andi	r20,r20,255
     888:	a000021e 	bne	r20,zero,894 <OC_I2C_Write_Addr+0xe4>
        IOWR( i2c_base, 4,0x40);
        usleep(SLEEP_TIME);
    }

   return TRUE;
     88c:	00800044 	movi	r2,1
     890:	003fe306 	br	820 <__alt_mem_nios_system_shared_memory+0xfffc0820>
        printf("OC_I2C_Read error[5]\r\n");
        return FALSE;
    }

    if (bStop){
        IOWR( i2c_base, 4,0x40);
     894:	00801004 	movi	r2,64
     898:	98800035 	stwio	r2,0(r19)
        usleep(SLEEP_TIME);
     89c:	01003e84 	movi	r4,250
     8a0:	001b9f40 	call	1b9f4 <usleep>
    }

   return TRUE;
     8a4:	00800044 	movi	r2,1
     8a8:	003fdd06 	br	820 <__alt_mem_nios_system_shared_memory+0xfffc0820>

000008ac <OC_I2C_Read_Continue>:

}



bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
     8ac:	defff704 	addi	sp,sp,-36
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
     8b0:	29400054 	ori	r5,r5,1

}



bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
     8b4:	dd400515 	stw	r21,20(sp)
     8b8:	dd000415 	stw	r20,16(sp)
     8bc:	dcc00315 	stw	r19,12(sp)
     8c0:	dc800215 	stw	r18,8(sp)
     8c4:	dfc00815 	stw	ra,32(sp)
     8c8:	ddc00715 	stw	r23,28(sp)
     8cc:	dd800615 	stw	r22,24(sp)
     8d0:	dc400115 	stw	r17,4(sp)
     8d4:	dc000015 	stw	r16,0(sp)
     8d8:	202b883a 	mov	r21,r4
     8dc:	3029883a 	mov	r20,r6
     8e0:	3827883a 	mov	r19,r7
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
     8e4:	24800304 	addi	r18,r4,12
     8e8:	29403fcc 	andi	r5,r5,255
     8ec:	91400035 	stwio	r5,0(r18)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
     8f0:	24400404 	addi	r17,r4,16
     8f4:	00802404 	movi	r2,144
     8f8:	88800035 	stwio	r2,0(r17)
     8fc:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     900:	a809883a 	mov	r4,r21
     904:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     908:	10803fcc 	andi	r2,r2,255
     90c:	843fffc4 	addi	r16,r16,-1
     910:	1000101e 	bne	r2,zero,954 <OC_I2C_Read_Continue+0xa8>
     914:	803ffa1e 	bne	r16,zero,900 <__alt_mem_nios_system_shared_memory+0xfffc0900>
   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
     918:	010000b4 	movhi	r4,2
     91c:	21381704 	addi	r4,r4,-8100
     920:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     924:	0005883a 	mov	r2,zero
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;

}
     928:	dfc00817 	ldw	ra,32(sp)
     92c:	ddc00717 	ldw	r23,28(sp)
     930:	dd800617 	ldw	r22,24(sp)
     934:	dd400517 	ldw	r21,20(sp)
     938:	dd000417 	ldw	r20,16(sp)
     93c:	dcc00317 	ldw	r19,12(sp)
     940:	dc800217 	ldw	r18,8(sp)
     944:	dc400117 	ldw	r17,4(sp)
     948:	dc000017 	ldw	r16,0(sp)
     94c:	dec00904 	addi	sp,sp,36
     950:	f800283a 	ret
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
     954:	04c01f0e 	bge	zero,r19,9d4 <OC_I2C_Read_Continue+0x128>
     958:	a021883a 	mov	r16,r20
     95c:	002f883a 	mov	r23,zero
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
     960:	05800804 	movi	r22,32
     964:	bd400044 	addi	r21,r23,1
     968:	9d401026 	beq	r19,r21,9ac <OC_I2C_Read_Continue+0x100>
     96c:	8d800035 	stwio	r22,0(r17)
{
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     970:	01003e84 	movi	r4,250
     974:	001b9f40 	call	1b9f4 <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     978:	88800037 	ldwio	r2,0(r17)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    if (bSuccess){
        if(this_data & 0x02)
     97c:	1080008c 	andi	r2,r2,2
     980:	10000526 	beq	r2,zero,998 <OC_I2C_Read_Continue+0xec>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);

        if (!ACK_judge_for_read( i2c_base)){
            printf("OC_I2C_Read error[10]\r\n");
     984:	010000b4 	movhi	r4,2
     988:	21381d04 	addi	r4,r4,-8076
     98c:	000b4c80 	call	b4c8 <puts>
            return FALSE;
     990:	0005883a 	mov	r2,zero
     994:	003fe406 	br	928 <__alt_mem_nios_system_shared_memory+0xfffc0928>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
     998:	90800037 	ldwio	r2,0(r18)
        *(pData8+i) =  Data32 & 0xff;
     99c:	80800005 	stb	r2,0(r16)
     9a0:	a82f883a 	mov	r23,r21
     9a4:	84000044 	addi	r16,r16,1
     9a8:	003fee06 	br	964 <__alt_mem_nios_system_shared_memory+0xfffc0964>
    }

    for(i=0;i<nReadLength;i++){
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
     9ac:	00800a04 	movi	r2,40
     9b0:	88800035 	stwio	r2,0(r17)
{
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     9b4:	01003e84 	movi	r4,250
     9b8:	001b9f40 	call	1b9f4 <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     9bc:	88800037 	ldwio	r2,0(r17)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    if (bSuccess){
        if(this_data & 0x02)
     9c0:	1080008c 	andi	r2,r2,2
     9c4:	103fef1e 	bne	r2,zero,984 <__alt_mem_nios_system_shared_memory+0xfffc0984>
            printf("OC_I2C_Read error[10]\r\n");
            return FALSE;
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
     9c8:	90800037 	ldwio	r2,0(r18)
        *(pData8+i) =  Data32 & 0xff;
     9cc:	a5e9883a 	add	r20,r20,r23
     9d0:	a0800005 	stb	r2,0(r20)
    }

    IOWR( i2c_base, 4,0x40);
     9d4:	00801004 	movi	r2,64
     9d8:	88800035 	stwio	r2,0(r17)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
     9dc:	01003e84 	movi	r4,250
     9e0:	001b9f40 	call	1b9f4 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
     9e4:	00800044 	movi	r2,1
     9e8:	003fcf06 	br	928 <__alt_mem_nios_system_shared_memory+0xfffc0928>

000009ec <OC_I2CL_Write>:
}


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
     9ec:	defff804 	addi	sp,sp,-32
     9f0:	dd400515 	stw	r21,20(sp)
     9f4:	dd000415 	stw	r20,16(sp)
     9f8:	dcc00315 	stw	r19,12(sp)
     9fc:	dc400115 	stw	r17,4(sp)
     a00:	dfc00715 	stw	ra,28(sp)
     a04:	dd800615 	stw	r22,24(sp)
     a08:	dc800215 	stw	r18,8(sp)
     a0c:	dc000015 	stw	r16,0(sp)
     a10:	2023883a 	mov	r17,r4
     a14:	302b883a 	mov	r21,r6
     a18:	3829883a 	mov	r20,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     a1c:	24c00304 	addi	r19,r4,12
     a20:	29403fcc 	andi	r5,r5,255
     a24:	99400035 	stwio	r5,0(r19)
     a28:	24800404 	addi	r18,r4,16
     a2c:	00802404 	movi	r2,144
     a30:	90800035 	stwio	r2,0(r18)
     a34:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     a38:	8809883a 	mov	r4,r17
     a3c:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     a40:	10803fcc 	andi	r2,r2,255
     a44:	843fffc4 	addi	r16,r16,-1
     a48:	10000f1e 	bne	r2,zero,a88 <OC_I2CL_Write+0x9c>
     a4c:	803ffa1e 	bne	r16,zero,a38 <__alt_mem_nios_system_shared_memory+0xfffc0a38>
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2CL_Write error[0]\r\n");
     a50:	010000b4 	movhi	r4,2
     a54:	21382304 	addi	r4,r4,-8052
     a58:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     a5c:	0005883a 	mov	r2,zero
     //OS_msleep(1);
      usleep(SLEEP_TIME);
  //  printf("\n receive ACK-data! \n");

     return TRUE;
}
     a60:	dfc00717 	ldw	ra,28(sp)
     a64:	dd800617 	ldw	r22,24(sp)
     a68:	dd400517 	ldw	r21,20(sp)
     a6c:	dd000417 	ldw	r20,16(sp)
     a70:	dcc00317 	ldw	r19,12(sp)
     a74:	dc800217 	ldw	r18,8(sp)
     a78:	dc400117 	ldw	r17,4(sp)
     a7c:	dc000017 	ldw	r16,0(sp)
     a80:	dec00804 	addi	sp,sp,32
     a84:	f800283a 	ret
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     a88:	a8bfffcc 	andi	r2,r21,65535
     a8c:	1004d23a 	srli	r2,r2,8
     a90:	98800035 	stwio	r2,0(r19)
     a94:	00800404 	movi	r2,16
     a98:	90800035 	stwio	r2,0(r18)
     a9c:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     aa0:	8809883a 	mov	r4,r17
     aa4:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     aa8:	10803fcc 	andi	r2,r2,255
     aac:	843fffc4 	addi	r16,r16,-1
     ab0:	1000061e 	bne	r2,zero,acc <OC_I2CL_Write+0xe0>
     ab4:	803ffa1e 	bne	r16,zero,aa0 <__alt_mem_nios_system_shared_memory+0xfffc0aa0>
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2CL_Write error[1]\r\n");
     ab8:	010000b4 	movhi	r4,2
     abc:	21382904 	addi	r4,r4,-8028
     ac0:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     ac4:	0005883a 	mov	r2,zero
     ac8:	003fe506 	br	a60 <__alt_mem_nios_system_shared_memory+0xfffc0a60>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     acc:	ad403fcc 	andi	r21,r21,255
     ad0:	9d400035 	stwio	r21,0(r19)
     ad4:	00800404 	movi	r2,16
     ad8:	90800035 	stwio	r2,0(r18)
     adc:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     ae0:	8809883a 	mov	r4,r17
     ae4:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     ae8:	10803fcc 	andi	r2,r2,255
     aec:	843fffc4 	addi	r16,r16,-1
     af0:	1000061e 	bne	r2,zero,b0c <OC_I2CL_Write+0x120>
     af4:	803ffa1e 	bne	r16,zero,ae0 <__alt_mem_nios_system_shared_memory+0xfffc0ae0>
   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2CL_Write error[2]\r\n");
     af8:	010000b4 	movhi	r4,2
     afc:	21382f04 	addi	r4,r4,-8004
     b00:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     b04:	0005883a 	mov	r2,zero
     b08:	003fd506 	br	a60 <__alt_mem_nios_system_shared_memory+0xfffc0a60>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
     b0c:	d8800817 	ldw	r2,32(sp)
     b10:	0080140e 	bge	zero,r2,b64 <OC_I2CL_Write+0x178>
     b14:	d8800817 	ldw	r2,32(sp)
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     b18:	05800404 	movi	r22,16
     b1c:	a0ab883a 	add	r21,r20,r2
     b20:	a0800003 	ldbu	r2,0(r20)
     b24:	98800035 	stwio	r2,0(r19)
     b28:	95800035 	stwio	r22,0(r18)
     b2c:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     b30:	8809883a 	mov	r4,r17
     b34:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     b38:	10803fcc 	andi	r2,r2,255
     b3c:	843fffc4 	addi	r16,r16,-1
     b40:	1000061e 	bne	r2,zero,b5c <OC_I2CL_Write+0x170>
     b44:	803ffa1e 	bne	r16,zero,b30 <__alt_mem_nios_system_shared_memory+0xfffc0b30>
        if (!Write32_Data( i2c_base, 4,0x10))
            return FALSE;

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
             printf("OC_I2CL_Write error[3]\r\n");
     b48:	010000b4 	movhi	r4,2
     b4c:	21383504 	addi	r4,r4,-7980
     b50:	000b4c80 	call	b4c8 <puts>
             return FALSE;
     b54:	0005883a 	mov	r2,zero
     b58:	003fc106 	br	a60 <__alt_mem_nios_system_shared_memory+0xfffc0a60>
     b5c:	a5000044 	addi	r20,r20,1
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
     b60:	a57fef1e 	bne	r20,r21,b20 <__alt_mem_nios_system_shared_memory+0xfffc0b20>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     b64:	00801004 	movi	r2,64
     b68:	90800035 	stwio	r2,0(r18)
#endif
    if (!Write32_Data( i2c_base, 4,0x40))
         return FALSE;

     //OS_msleep(1);
      usleep(SLEEP_TIME);
     b6c:	01003e84 	movi	r4,250
     b70:	001b9f40 	call	1b9f4 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
     b74:	00800044 	movi	r2,1
     b78:	003fb906 	br	a60 <__alt_mem_nios_system_shared_memory+0xfffc0a60>

00000b7c <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
     b7c:	defff804 	addi	sp,sp,-32
     b80:	dd800615 	stw	r22,24(sp)
     b84:	dd400515 	stw	r21,20(sp)
     b88:	dd000415 	stw	r20,16(sp)
     b8c:	dcc00315 	stw	r19,12(sp)
     b90:	dc400115 	stw	r17,4(sp)
     b94:	dfc00715 	stw	ra,28(sp)
     b98:	dc800215 	stw	r18,8(sp)
     b9c:	dc000015 	stw	r16,0(sp)
     ba0:	2023883a 	mov	r17,r4
     ba4:	2829883a 	mov	r20,r5
     ba8:	302b883a 	mov	r21,r6
     bac:	382d883a 	mov	r22,r7
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     bb0:	24c00304 	addi	r19,r4,12
     bb4:	28803fcc 	andi	r2,r5,255
     bb8:	98800035 	stwio	r2,0(r19)
     bbc:	24800404 	addi	r18,r4,16
     bc0:	00802404 	movi	r2,144
     bc4:	90800035 	stwio	r2,0(r18)
     bc8:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     bcc:	8809883a 	mov	r4,r17
     bd0:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     bd4:	10803fcc 	andi	r2,r2,255
     bd8:	843fffc4 	addi	r16,r16,-1
     bdc:	10000f1e 	bne	r2,zero,c1c <OC_I2CL_Read+0xa0>
     be0:	803ffa1e 	bne	r16,zero,bcc <__alt_mem_nios_system_shared_memory+0xfffc0bcc>
   if (!Write32_Data( i2c_base, 4,0x90))
       return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2CL_Read error[0]\r\n");
     be4:	010000b4 	movhi	r4,2
     be8:	21383b04 	addi	r4,r4,-7956
     bec:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     bf0:	0005883a 	mov	r2,zero
   //OS_msleep(1);
    usleep(SLEEP_TIME);

   return TRUE;

}
     bf4:	dfc00717 	ldw	ra,28(sp)
     bf8:	dd800617 	ldw	r22,24(sp)
     bfc:	dd400517 	ldw	r21,20(sp)
     c00:	dd000417 	ldw	r20,16(sp)
     c04:	dcc00317 	ldw	r19,12(sp)
     c08:	dc800217 	ldw	r18,8(sp)
     c0c:	dc400117 	ldw	r17,4(sp)
     c10:	dc000017 	ldw	r16,0(sp)
     c14:	dec00804 	addi	sp,sp,32
     c18:	f800283a 	ret
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     c1c:	a8bfffcc 	andi	r2,r21,65535
     c20:	1004d23a 	srli	r2,r2,8
     c24:	98800035 	stwio	r2,0(r19)
     c28:	00800404 	movi	r2,16
     c2c:	90800035 	stwio	r2,0(r18)
     c30:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     c34:	8809883a 	mov	r4,r17
     c38:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     c3c:	10803fcc 	andi	r2,r2,255
     c40:	843fffc4 	addi	r16,r16,-1
     c44:	1000061e 	bne	r2,zero,c60 <OC_I2CL_Read+0xe4>
     c48:	803ffa1e 	bne	r16,zero,c34 <__alt_mem_nios_system_shared_memory+0xfffc0c34>
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2CL_Read error[1]\r\n");
     c4c:	010000b4 	movhi	r4,2
     c50:	21384104 	addi	r4,r4,-7932
     c54:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     c58:	0005883a 	mov	r2,zero
     c5c:	003fe506 	br	bf4 <__alt_mem_nios_system_shared_memory+0xfffc0bf4>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     c60:	ad403fcc 	andi	r21,r21,255
     c64:	9d400035 	stwio	r21,0(r19)
     c68:	00800404 	movi	r2,16
     c6c:	90800035 	stwio	r2,0(r18)
     c70:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     c74:	8809883a 	mov	r4,r17
     c78:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     c7c:	10803fcc 	andi	r2,r2,255
     c80:	843fffc4 	addi	r16,r16,-1
     c84:	1000061e 	bne	r2,zero,ca0 <OC_I2CL_Read+0x124>
     c88:	803ffa1e 	bne	r16,zero,c74 <__alt_mem_nios_system_shared_memory+0xfffc0c74>
    if (!Write32_Data( i2c_base, 4,0x10))
        return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2CL_Read error[2]\r\n");
     c8c:	010000b4 	movhi	r4,2
     c90:	21384704 	addi	r4,r4,-7908
     c94:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     c98:	0005883a 	mov	r2,zero
     c9c:	003fd506 	br	bf4 <__alt_mem_nios_system_shared_memory+0xfffc0bf4>
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     ca0:	a5000054 	ori	r20,r20,1
     ca4:	a5003fcc 	andi	r20,r20,255
     ca8:	9d000035 	stwio	r20,0(r19)
     cac:	00802404 	movi	r2,144
     cb0:	90800035 	stwio	r2,0(r18)
     cb4:	04000284 	movi	r16,10
bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
        bSuccess = ACK_single_check(i2c_base);
     cb8:	8809883a 	mov	r4,r17
     cbc:	00003bc0 	call	3bc <ACK_single_check>

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
     cc0:	10803fcc 	andi	r2,r2,255
     cc4:	843fffc4 	addi	r16,r16,-1
     cc8:	1000061e 	bne	r2,zero,ce4 <OC_I2CL_Read+0x168>
     ccc:	803ffa1e 	bne	r16,zero,cb8 <__alt_mem_nios_system_shared_memory+0xfffc0cb8>
     if (!Write32_Data( i2c_base, 4,0x90))
         return FALSE;

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
        printf("OC_I2CL_Read error[3]\r\n");
     cd0:	010000b4 	movhi	r4,2
     cd4:	21384d04 	addi	r4,r4,-7884
     cd8:	000b4c80 	call	b4c8 <puts>
        return FALSE;
     cdc:	0005883a 	mov	r2,zero
     ce0:	003fc406 	br	bf4 <__alt_mem_nios_system_shared_memory+0xfffc0bf4>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
     ce4:	d8800817 	ldw	r2,32(sp)
     ce8:	0080200e 	bge	zero,r2,d6c <OC_I2CL_Read+0x1f0>
     cec:	b021883a 	mov	r16,r22
     cf0:	0029883a 	mov	r20,zero
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
     cf4:	05400804 	movi	r21,32
     cf8:	d8800817 	ldw	r2,32(sp)
     cfc:	a4400044 	addi	r17,r20,1
     d00:	14401026 	beq	r2,r17,d44 <OC_I2CL_Read+0x1c8>
     d04:	95400035 	stwio	r21,0(r18)
{
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     d08:	01003e84 	movi	r4,250
     d0c:	001b9f40 	call	1b9f4 <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     d10:	90800037 	ldwio	r2,0(r18)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    if (bSuccess){
        if(this_data & 0x02)
     d14:	1080008c 	andi	r2,r2,2
     d18:	10000526 	beq	r2,zero,d30 <OC_I2CL_Read+0x1b4>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);

        if (!ACK_judge_for_read( i2c_base)){
            printf("OC_I2CL_Read error[4]\r\n");
     d1c:	010000b4 	movhi	r4,2
     d20:	21385304 	addi	r4,r4,-7860
     d24:	000b4c80 	call	b4c8 <puts>
            return FALSE;
     d28:	0005883a 	mov	r2,zero
     d2c:	003fb106 	br	bf4 <__alt_mem_nios_system_shared_memory+0xfffc0bf4>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
     d30:	98800037 	ldwio	r2,0(r19)
        *(pData8+i) =  Data32 & 0xff;
     d34:	80800005 	stb	r2,0(r16)
     d38:	8829883a 	mov	r20,r17
     d3c:	84000044 	addi	r16,r16,1
     d40:	003fed06 	br	cf8 <__alt_mem_nios_system_shared_memory+0xfffc0cf8>

#if 1
    for(i=0;i<nReadLength;i++){
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
     d44:	00800a04 	movi	r2,40
     d48:	90800035 	stwio	r2,0(r18)
{
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
     d4c:	01003e84 	movi	r4,250
     d50:	001b9f40 	call	1b9f4 <usleep>



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
     d54:	90800037 	ldwio	r2,0(r18)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
    if (bSuccess){
        if(this_data & 0x02)
     d58:	1080008c 	andi	r2,r2,2
     d5c:	103fef1e 	bne	r2,zero,d1c <__alt_mem_nios_system_shared_memory+0xfffc0d1c>
            printf("OC_I2CL_Read error[4]\r\n");
            return FALSE;
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
     d60:	98800037 	ldwio	r2,0(r19)
        *(pData8+i) =  Data32 & 0xff;
     d64:	b529883a 	add	r20,r22,r20
     d68:	a0800005 	stb	r2,0(r20)
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
	bool bPass;
    IOWR(base_address, offset_address,Data);
     d6c:	00801004 	movi	r2,64
     d70:	90800035 	stwio	r2,0(r18)

   if (!Write32_Data( i2c_base, 4,0x40))
       return FALSE;

   //OS_msleep(1);
    usleep(SLEEP_TIME);
     d74:	01003e84 	movi	r4,250
     d78:	001b9f40 	call	1b9f4 <usleep>

   return TRUE;
     d7c:	00800044 	movi	r2,1
     d80:	003f9c06 	br	bf4 <__alt_mem_nios_system_shared_memory+0xfffc0bf4>

00000d84 <set_esp8266_file_blocking>:
#define passwd "Hu6H79s7m6q8sgaBXH25"

FILE *esp8266_file;

void set_esp8266_file_blocking(bool blocking)
{
     d84:	defffe04 	addi	sp,sp,-8
     d88:	dfc00115 	stw	ra,4(sp)
     d8c:	dc000015 	stw	r16,0(sp)
    if (blocking == false) {
     d90:	21003fcc 	andi	r4,r4,255
     d94:	20001026 	beq	r4,zero,dd8 <set_esp8266_file_blocking+0x54>
        fcntl(fileno(esp8266_file), F_SETFL, O_NONBLOCK);
    } else {
        int file_fl = fcntl(fileno(esp8266_file), F_GETFL);
     d98:	d1270617 	ldw	r4,-25576(gp)
     d9c:	00095f80 	call	95f8 <fileno>
     da0:	014000c4 	movi	r5,3
     da4:	1009883a 	mov	r4,r2
     da8:	001ad8c0 	call	1ad8c <fcntl>
        file_fl = file_fl & ~O_NONBLOCK;
        fcntl(fileno(esp8266_file), F_SETFL, file_fl);
     dac:	d1270617 	ldw	r4,-25576(gp)
void set_esp8266_file_blocking(bool blocking)
{
    if (blocking == false) {
        fcntl(fileno(esp8266_file), F_SETFL, O_NONBLOCK);
    } else {
        int file_fl = fcntl(fileno(esp8266_file), F_GETFL);
     db0:	1021883a 	mov	r16,r2
        file_fl = file_fl & ~O_NONBLOCK;
        fcntl(fileno(esp8266_file), F_SETFL, file_fl);
     db4:	00095f80 	call	95f8 <fileno>
     db8:	01afffc4 	movi	r6,-16385
     dbc:	818c703a 	and	r6,r16,r6
     dc0:	01400104 	movi	r5,4
     dc4:	1009883a 	mov	r4,r2
    }
}
     dc8:	dfc00117 	ldw	ra,4(sp)
     dcc:	dc000017 	ldw	r16,0(sp)
     dd0:	dec00204 	addi	sp,sp,8
    if (blocking == false) {
        fcntl(fileno(esp8266_file), F_SETFL, O_NONBLOCK);
    } else {
        int file_fl = fcntl(fileno(esp8266_file), F_GETFL);
        file_fl = file_fl & ~O_NONBLOCK;
        fcntl(fileno(esp8266_file), F_SETFL, file_fl);
     dd4:	001ad8c1 	jmpi	1ad8c <fcntl>
FILE *esp8266_file;

void set_esp8266_file_blocking(bool blocking)
{
    if (blocking == false) {
        fcntl(fileno(esp8266_file), F_SETFL, O_NONBLOCK);
     dd8:	d1270617 	ldw	r4,-25576(gp)
     ddc:	00095f80 	call	95f8 <fileno>
     de0:	01900004 	movi	r6,16384
     de4:	003ff606 	br	dc0 <__alt_mem_nios_system_shared_memory+0xfffc0dc0>

00000de8 <esp8266_gets>:
    return bSuccess;
}

char *esp8266_gets(char *buffer, int buffer_size)
{
    return fgets(buffer, buffer_size, esp8266_file);
     de8:	d1a70617 	ldw	r6,-25576(gp)
     dec:	00095dc1 	jmpi	95dc <fgets>

00000df0 <esp8266_send_command>:
}

bool esp8266_send_command(const char *cmd)
{
     df0:	deff0104 	addi	sp,sp,-1020
     df4:	dcc0fd15 	stw	r19,1012(sp)
     df8:	2027883a 	mov	r19,r4
	fprintf(esp8266_file, "%s\r\n", cmd);
     dfc:	d1270617 	ldw	r4,-25576(gp)
     e00:	014000b4 	movhi	r5,2
     e04:	29785904 	addi	r5,r5,-7836
     e08:	980d883a 	mov	r6,r19
{
    return fgets(buffer, buffer_size, esp8266_file);
}

bool esp8266_send_command(const char *cmd)
{
     e0c:	dc80fc15 	stw	r18,1008(sp)
     e10:	dc40fb15 	stw	r17,1004(sp)
     e14:	dc00fa15 	stw	r16,1000(sp)
     e18:	dfc0fe15 	stw	ra,1016(sp)
	fprintf(esp8266_file, "%s\r\n", cmd);
   	int length = 0;
     e1c:	0023883a 	mov	r17,zero
    return fgets(buffer, buffer_size, esp8266_file);
}

bool esp8266_send_command(const char *cmd)
{
	fprintf(esp8266_file, "%s\r\n", cmd);
     e20:	0009b440 	call	9b44 <fprintf>
     e24:	d821883a 	mov	r16,sp
   	int length = 0;
    char buffer[1000];
    int i=0;
    while (1) {
    	if (fgets(buffer + length, sizeof(buffer) - length,
     e28:	0480fa04 	movi	r18,1000
     e2c:	d1a70617 	ldw	r6,-25576(gp)
     e30:	944bc83a 	sub	r5,r18,r17
     e34:	8009883a 	mov	r4,r16
     e38:	00095dc0 	call	95dc <fgets>
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "OK") != NULL) {
     e3c:	014000b4 	movhi	r5,2
     e40:	29785b04 	addi	r5,r5,-7828
     e44:	8009883a 	mov	r4,r16
	fprintf(esp8266_file, "%s\r\n", cmd);
   	int length = 0;
    char buffer[1000];
    int i=0;
    while (1) {
    	if (fgets(buffer + length, sizeof(buffer) - length,
     e48:	103ff826 	beq	r2,zero,e2c <__alt_mem_nios_system_shared_memory+0xfffc0e2c>
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "OK") != NULL) {
     e4c:	000bfd80 	call	bfd8 <strstr>
                if (strcmp("AT+CWLAP", cmd) == 0) {
                    printf("%s", buffer);
                }
                return true;
            } else if (strstr(buffer + length, "ERROR") != NULL) {
     e50:	014000b4 	movhi	r5,2
     e54:	29786004 	addi	r5,r5,-7808
     e58:	8009883a 	mov	r4,r16
    	if (fgets(buffer + length, sizeof(buffer) - length,
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "OK") != NULL) {
     e5c:	1000141e 	bne	r2,zero,eb0 <esp8266_send_command+0xc0>
                if (strcmp("AT+CWLAP", cmd) == 0) {
                    printf("%s", buffer);
                }
                return true;
            } else if (strstr(buffer + length, "ERROR") != NULL) {
     e60:	000bfd80 	call	bfd8 <strstr>
                return false;
            } else if (strstr(buffer + length, "FAIL") != NULL) {
     e64:	014000b4 	movhi	r5,2
     e68:	29786204 	addi	r5,r5,-7800
     e6c:	8009883a 	mov	r4,r16
            if (strstr(buffer + length, "OK") != NULL) {
                if (strcmp("AT+CWLAP", cmd) == 0) {
                    printf("%s", buffer);
                }
                return true;
            } else if (strstr(buffer + length, "ERROR") != NULL) {
     e70:	1000071e 	bne	r2,zero,e90 <esp8266_send_command+0xa0>
                return false;
            } else if (strstr(buffer + length, "FAIL") != NULL) {
     e74:	000bfd80 	call	bfd8 <strstr>
                return false;
            }
            length += strlen(buffer + length);
     e78:	8009883a 	mov	r4,r16
                    printf("%s", buffer);
                }
                return true;
            } else if (strstr(buffer + length, "ERROR") != NULL) {
                return false;
            } else if (strstr(buffer + length, "FAIL") != NULL) {
     e7c:	1000041e 	bne	r2,zero,e90 <esp8266_send_command+0xa0>
                return false;
            }
            length += strlen(buffer + length);
     e80:	000ba8c0 	call	ba8c <strlen>
     e84:	88a3883a 	add	r17,r17,r2
     e88:	dc61883a 	add	r16,sp,r17
     e8c:	003fe706 	br	e2c <__alt_mem_nios_system_shared_memory+0xfffc0e2c>
                if (strcmp("AT+CWLAP", cmd) == 0) {
                    printf("%s", buffer);
                }
                return true;
            } else if (strstr(buffer + length, "ERROR") != NULL) {
                return false;
     e90:	0005883a 	mov	r2,zero
            }
            length += strlen(buffer + length);
        }
    }
    return false;
}
     e94:	dfc0fe17 	ldw	ra,1016(sp)
     e98:	dcc0fd17 	ldw	r19,1012(sp)
     e9c:	dc80fc17 	ldw	r18,1008(sp)
     ea0:	dc40fb17 	ldw	r17,1004(sp)
     ea4:	dc00fa17 	ldw	r16,1000(sp)
     ea8:	dec0ff04 	addi	sp,sp,1020
     eac:	f800283a 	ret
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "OK") != NULL) {
                if (strcmp("AT+CWLAP", cmd) == 0) {
     eb0:	010000b4 	movhi	r4,2
     eb4:	21385c04 	addi	r4,r4,-7824
     eb8:	980b883a 	mov	r5,r19
     ebc:	000b9200 	call	b920 <strcmp>
     ec0:	10000226 	beq	r2,zero,ecc <esp8266_send_command+0xdc>
                    printf("%s", buffer);
                }
                return true;
     ec4:	00800044 	movi	r2,1
     ec8:	003ff206 	br	e94 <__alt_mem_nios_system_shared_memory+0xfffc0e94>
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "OK") != NULL) {
                if (strcmp("AT+CWLAP", cmd) == 0) {
                    printf("%s", buffer);
     ecc:	010000b4 	movhi	r4,2
     ed0:	21385f04 	addi	r4,r4,-7812
     ed4:	d80b883a 	mov	r5,sp
     ed8:	000b3ac0 	call	b3ac <printf>
                }
                return true;
     edc:	00800044 	movi	r2,1
     ee0:	003fec06 	br	e94 <__alt_mem_nios_system_shared_memory+0xfffc0e94>

00000ee4 <esp8266_send_data>:
    }
    return false;
}

bool esp8266_send_data(const char *data, int length)
{
     ee4:	deff0204 	addi	sp,sp,-1016
     ee8:	dc00fa15 	stw	r16,1000(sp)
     eec:	2021883a 	mov	r16,r4
    write(fileno(esp8266_file), data, length);
     ef0:	d1270617 	ldw	r4,-25576(gp)
    }
    return false;
}

bool esp8266_send_data(const char *data, int length)
{
     ef4:	dfc0fd15 	stw	ra,1012(sp)
     ef8:	dc80fc15 	stw	r18,1008(sp)
     efc:	dc40fb15 	stw	r17,1004(sp)
     f00:	2825883a 	mov	r18,r5
    write(fileno(esp8266_file), data, length);
     f04:	00095f80 	call	95f8 <fileno>
     f08:	900d883a 	mov	r6,r18
     f0c:	800b883a 	mov	r5,r16
     f10:	1009883a 	mov	r4,r2

    length = 0;
     f14:	0023883a 	mov	r17,zero
    return false;
}

bool esp8266_send_data(const char *data, int length)
{
    write(fileno(esp8266_file), data, length);
     f18:	001ba600 	call	1ba60 <write>
     f1c:	d821883a 	mov	r16,sp

    length = 0;
    char buffer[1000];
    while (1) {
        if (fgets(buffer + length, sizeof(buffer) - length,
     f20:	0480fa04 	movi	r18,1000
     f24:	d1a70617 	ldw	r6,-25576(gp)
     f28:	944bc83a 	sub	r5,r18,r17
     f2c:	8009883a 	mov	r4,r16
     f30:	00095dc0 	call	95dc <fgets>
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "SEND OK") != NULL) {
     f34:	014000b4 	movhi	r5,2
     f38:	29786404 	addi	r5,r5,-7792
     f3c:	8009883a 	mov	r4,r16
    write(fileno(esp8266_file), data, length);

    length = 0;
    char buffer[1000];
    while (1) {
        if (fgets(buffer + length, sizeof(buffer) - length,
     f40:	103ff826 	beq	r2,zero,f24 <__alt_mem_nios_system_shared_memory+0xfffc0f24>
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "SEND OK") != NULL) {
     f44:	000bfd80 	call	bfd8 <strstr>
                return true;
            } else if (strstr(buffer + length, "SEND FAIL") != NULL) {
     f48:	014000b4 	movhi	r5,2
     f4c:	29786604 	addi	r5,r5,-7784
     f50:	8009883a 	mov	r4,r16
        if (fgets(buffer + length, sizeof(buffer) - length,
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "SEND OK") != NULL) {
     f54:	1000071e 	bne	r2,zero,f74 <esp8266_send_data+0x90>
                return true;
            } else if (strstr(buffer + length, "SEND FAIL") != NULL) {
     f58:	000bfd80 	call	bfd8 <strstr>
                printf("%s", buffer);
                return false;
            }
            length += strlen(buffer + length);
     f5c:	8009883a 	mov	r4,r16
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "SEND OK") != NULL) {
                return true;
            } else if (strstr(buffer + length, "SEND FAIL") != NULL) {
     f60:	10000b1e 	bne	r2,zero,f90 <esp8266_send_data+0xac>
                printf("%s", buffer);
                return false;
            }
            length += strlen(buffer + length);
     f64:	000ba8c0 	call	ba8c <strlen>
     f68:	88a3883a 	add	r17,r17,r2
     f6c:	dc61883a 	add	r16,sp,r17
     f70:	003fec06 	br	f24 <__alt_mem_nios_system_shared_memory+0xfffc0f24>
                esp8266_file) != NULL) {
#ifdef ESP8266_DEBUG
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "SEND OK") != NULL) {
                return true;
     f74:	00800044 	movi	r2,1
            }
            length += strlen(buffer + length);
        }
    }
    return false;
}
     f78:	dfc0fd17 	ldw	ra,1012(sp)
     f7c:	dc80fc17 	ldw	r18,1008(sp)
     f80:	dc40fb17 	ldw	r17,1004(sp)
     f84:	dc00fa17 	ldw	r16,1000(sp)
     f88:	dec0fe04 	addi	sp,sp,1016
     f8c:	f800283a 	ret
            printf("%s", buffer + length);
#endif
            if (strstr(buffer + length, "SEND OK") != NULL) {
                return true;
            } else if (strstr(buffer + length, "SEND FAIL") != NULL) {
                printf("%s", buffer);
     f90:	010000b4 	movhi	r4,2
     f94:	21385f04 	addi	r4,r4,-7812
     f98:	d80b883a 	mov	r5,sp
     f9c:	000b3ac0 	call	b3ac <printf>
                return false;
     fa0:	0005883a 	mov	r2,zero
     fa4:	003ff406 	br	f78 <__alt_mem_nios_system_shared_memory+0xfffc0f78>

00000fa8 <esp8266_dump_rx>:
    }
    return false;
}

void esp8266_dump_rx()
{
     fa8:	deff0504 	addi	sp,sp,-1004
    char buffer[1000];
    set_esp8266_file_blocking(false);
     fac:	0009883a 	mov	r4,zero
    }
    return false;
}

void esp8266_dump_rx()
{
     fb0:	dfc0fa15 	stw	ra,1000(sp)
    char buffer[1000];
    set_esp8266_file_blocking(false);
     fb4:	0000d840 	call	d84 <set_esp8266_file_blocking>
    return bSuccess;
}

char *esp8266_gets(char *buffer, int buffer_size)
{
    return fgets(buffer, buffer_size, esp8266_file);
     fb8:	d1a70617 	ldw	r6,-25576(gp)
     fbc:	0140fa04 	movi	r5,1000
     fc0:	d809883a 	mov	r4,sp
     fc4:	00095dc0 	call	95dc <fgets>

void esp8266_dump_rx()
{
    char buffer[1000];
    set_esp8266_file_blocking(false);
    while (esp8266_gets(buffer, sizeof(buffer)) != NULL) {
     fc8:	103ffb1e 	bne	r2,zero,fb8 <__alt_mem_nios_system_shared_memory+0xfffc0fb8>
#ifdef ESP8266_DEBUG
        printf("%s", buffer);
#endif
    }
    set_esp8266_file_blocking(true);
     fcc:	01000044 	movi	r4,1
     fd0:	0000d840 	call	d84 <set_esp8266_file_blocking>
    fflush(stdout);
     fd4:	d0a00617 	ldw	r2,-32744(gp)
     fd8:	11000217 	ldw	r4,8(r2)
     fdc:	00094680 	call	9468 <fflush>
}
     fe0:	dfc0fa17 	ldw	ra,1000(sp)
     fe4:	dec0fb04 	addi	sp,sp,1004
     fe8:	f800283a 	ret

00000fec <esp8266_init>:
        fcntl(fileno(esp8266_file), F_SETFL, file_fl);
    }
}

bool esp8266_init(bool reset)
{
     fec:	deffe504 	addi	sp,sp,-108
     ff0:	dc001915 	stw	r16,100(sp)
    bool bSuccess = true;
    esp8266_file = fopen(esp8266_uart, "rw+");
     ff4:	014000b4 	movhi	r5,2
        fcntl(fileno(esp8266_file), F_SETFL, file_fl);
    }
}

bool esp8266_init(bool reset)
{
     ff8:	2021883a 	mov	r16,r4
    bool bSuccess = true;
    esp8266_file = fopen(esp8266_uart, "rw+");
     ffc:	010000b4 	movhi	r4,2
    1000:	29786904 	addi	r5,r5,-7772
    1004:	21386a04 	addi	r4,r4,-7768
        fcntl(fileno(esp8266_file), F_SETFL, file_fl);
    }
}

bool esp8266_init(bool reset)
{
    1008:	dfc01a15 	stw	ra,104(sp)
    bool bSuccess = true;
    esp8266_file = fopen(esp8266_uart, "rw+");
    100c:	0009b040 	call	9b04 <fopen>
    1010:	d0a70615 	stw	r2,-25576(gp)
    if (esp8266_file == NULL) {
    1014:	10003526 	beq	r2,zero,10ec <esp8266_init+0x100>
        printf("Open UART_0 failed\n");
        return false;
    }
    if (reset) {
    1018:	84003fcc 	andi	r16,r16,255
    101c:	8000271e 	bne	r16,zero,10bc <esp8266_init+0xd0>
        IOWR_ALTERA_AVALON_PIO_DATA(NIOS_SYSTEM_WIFI_RESET_PIO_BASE, 1);
        usleep(3 * 1000 * 1000);
        esp8266_dump_rx();
    }
    //char ssid[20], passwd[20];
    esp8266_send_command("AT+CWMODE_CUR=1");
    1020:	010000b4 	movhi	r4,2
    1024:	21387604 	addi	r4,r4,-7720
    1028:	0000df00 	call	df0 <esp8266_send_command>
    esp8266_send_command("AT+CWLAPOPT=1,0x2");
    102c:	010000b4 	movhi	r4,2
    1030:	21387a04 	addi	r4,r4,-7704
    1034:	0000df00 	call	df0 <esp8266_send_command>
    //printf("\n");
    //printf("Enter the Password of Network Name (SSID): ");
    //scanf("%s", passwd);
    //printf("\n");

    printf("Connecting to WiFi AP (SSID: %s)\n", ssid);
    1038:	014000b4 	movhi	r5,2
    103c:	010000b4 	movhi	r4,2
    1040:	29787f04 	addi	r5,r5,-7684
    1044:	21388204 	addi	r4,r4,-7672
    1048:	000b3ac0 	call	b3ac <printf>
    char cmd[100];
    sprintf(cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"", ssid, passwd);
    104c:	01c000b4 	movhi	r7,2
    1050:	018000b4 	movhi	r6,2
    1054:	014000b4 	movhi	r5,2
    1058:	39f88b04 	addi	r7,r7,-7636
    105c:	31b87f04 	addi	r6,r6,-7684
    1060:	29789104 	addi	r5,r5,-7612
    1064:	d809883a 	mov	r4,sp
    1068:	000b7780 	call	b778 <sprintf>
    bSuccess = esp8266_send_command(cmd);
    106c:	d809883a 	mov	r4,sp
    1070:	0000df00 	call	df0 <esp8266_send_command>
    if (bSuccess) {
    1074:	10803fcc 	andi	r2,r2,255
    1078:	1000081e 	bne	r2,zero,109c <esp8266_init+0xb0>
        printf("Connect to WiFi AP successfully\n");
    } else {
        printf("Connect to WiFi AP failed\n");
    107c:	010000b4 	movhi	r4,2
    1080:	21389f04 	addi	r4,r4,-7556
    1084:	000b4c80 	call	b4c8 <puts>
    1088:	0005883a 	mov	r2,zero
    }

    return bSuccess;
}
    108c:	dfc01a17 	ldw	ra,104(sp)
    1090:	dc001917 	ldw	r16,100(sp)
    1094:	dec01b04 	addi	sp,sp,108
    1098:	f800283a 	ret
    printf("Connecting to WiFi AP (SSID: %s)\n", ssid);
    char cmd[100];
    sprintf(cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"", ssid, passwd);
    bSuccess = esp8266_send_command(cmd);
    if (bSuccess) {
        printf("Connect to WiFi AP successfully\n");
    109c:	010000b4 	movhi	r4,2
    10a0:	21389704 	addi	r4,r4,-7588
    10a4:	000b4c80 	call	b4c8 <puts>
    10a8:	00800044 	movi	r2,1
    } else {
        printf("Connect to WiFi AP failed\n");
    }

    return bSuccess;
}
    10ac:	dfc01a17 	ldw	ra,104(sp)
    10b0:	dc001917 	ldw	r16,100(sp)
    10b4:	dec01b04 	addi	sp,sp,108
    10b8:	f800283a 	ret
    if (esp8266_file == NULL) {
        printf("Open UART_0 failed\n");
        return false;
    }
    if (reset) {
        IOWR_ALTERA_AVALON_PIO_DATA(NIOS_SYSTEM_WIFI_RESET_PIO_BASE, 0);
    10bc:	04000134 	movhi	r16,4
    10c0:	84042804 	addi	r16,r16,4256
    10c4:	80000035 	stwio	zero,0(r16)
        usleep(50);
    10c8:	01000c84 	movi	r4,50
    10cc:	001b9f40 	call	1b9f4 <usleep>
        IOWR_ALTERA_AVALON_PIO_DATA(NIOS_SYSTEM_WIFI_RESET_PIO_BASE, 1);
    10d0:	00800044 	movi	r2,1
    10d4:	80800035 	stwio	r2,0(r16)
        usleep(3 * 1000 * 1000);
    10d8:	01000bb4 	movhi	r4,46
    10dc:	2131b004 	addi	r4,r4,-14656
    10e0:	001b9f40 	call	1b9f4 <usleep>
        esp8266_dump_rx();
    10e4:	0000fa80 	call	fa8 <esp8266_dump_rx>
    10e8:	003fcd06 	br	1020 <__alt_mem_nios_system_shared_memory+0xfffc1020>
bool esp8266_init(bool reset)
{
    bool bSuccess = true;
    esp8266_file = fopen(esp8266_uart, "rw+");
    if (esp8266_file == NULL) {
        printf("Open UART_0 failed\n");
    10ec:	010000b4 	movhi	r4,2
    10f0:	21387104 	addi	r4,r4,-7740
    10f4:	000b4c80 	call	b4c8 <puts>
        return false;
    10f8:	0005883a 	mov	r2,zero
    10fc:	003fe306 	br	108c <__alt_mem_nios_system_shared_memory+0xfffc108c>

00001100 <Light_Init>:
void Light_Init(alt_u32 I2C_Controller_Base){
	const int Ref_CLK = 50*1000*1000; // 50MHz
	const int I2C_CLK = 400*1000; // 400KHz

	Light_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
    1100:	018001b4 	movhi	r6,6
    1104:	0140bef4 	movhi	r5,763
    1108:	3186a004 	addi	r6,r6,6784
    110c:	297c2004 	addi	r5,r5,-3968

void Light_Init(alt_u32 I2C_Controller_Base){
	const int Ref_CLK = 50*1000*1000; // 50MHz
	const int I2C_CLK = 400*1000; // 400KHz

	Light_I2C_Controller_Base = I2C_Controller_Base;
    1110:	d1200015 	stw	r4,-32768(gp)
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
    1114:	00002a01 	jmpi	2a0 <oc_i2c_init_ex>

00001118 <Light_GetID>:
}

void Light_GetID(alt_u8 *data)
{
    1118:	defffd04 	addi	sp,sp,-12
    111c:	dc000115 	stw	r16,4(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1120:	200f883a 	mov	r7,r4
	Light_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
}

void Light_GetID(alt_u8 *data)
{
    1124:	2021883a 	mov	r16,r4
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1128:	d1200017 	ldw	r4,-32768(gp)
    112c:	00800044 	movi	r2,1
    1130:	d8800015 	stw	r2,0(sp)
    1134:	01802284 	movi	r6,138
    1138:	01401484 	movi	r5,82
	Light_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
}

void Light_GetID(alt_u8 *data)
{
    113c:	dfc00215 	stw	ra,8(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1140:	00005e80 	call	5e8 <OC_I2C_Read>
{
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | ID_REG ;
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
    if(!bPass)  *data = 0;
    1144:	10803fcc 	andi	r2,r2,255
    1148:	1000011e 	bne	r2,zero,1150 <Light_GetID+0x38>
    114c:	80000005 	stb	zero,0(r16)

}
    1150:	dfc00217 	ldw	ra,8(sp)
    1154:	dc000117 	ldw	r16,4(sp)
    1158:	dec00304 	addi	sp,sp,12
    115c:	f800283a 	ret

00001160 <Light_GetTiming>:

void Light_GetTiming(alt_u8 *data)
{
    1160:	defffd04 	addi	sp,sp,-12
    1164:	dc000115 	stw	r16,4(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1168:	200f883a 	mov	r7,r4
    if(!bPass)  *data = 0;

}

void Light_GetTiming(alt_u8 *data)
{
    116c:	2021883a 	mov	r16,r4
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1170:	d1200017 	ldw	r4,-32768(gp)
    1174:	00800044 	movi	r2,1
    1178:	d8800015 	stw	r2,0(sp)
    117c:	01802044 	movi	r6,129
    1180:	01401484 	movi	r5,82
    if(!bPass)  *data = 0;

}

void Light_GetTiming(alt_u8 *data)
{
    1184:	dfc00215 	stw	ra,8(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1188:	00005e80 	call	5e8 <OC_I2C_Read>
{
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
    if(!bPass)  *data = 0;
    118c:	10803fcc 	andi	r2,r2,255
    1190:	1000011e 	bne	r2,zero,1198 <Light_GetTiming+0x38>
    1194:	80000005 	stb	zero,0(r16)

}
    1198:	dfc00217 	ldw	ra,8(sp)
    119c:	dc000117 	ldw	r16,4(sp)
    11a0:	dec00304 	addi	sp,sp,12
    11a4:	f800283a 	ret

000011a8 <Light_PowerSwitch>:

bool Light_PowerSwitch(bool bSwitch)
{
    11a8:	defffd04 	addi	sp,sp,-12
    11ac:	dfc00215 	stw	ra,8(sp)
    bool bPass;
    alt_u8 data = 0;
    alt_u8 CommandCode = COMMAND_CMD | CONTROL_REG ;

    data = bSwitch ? 0x03 : 0x00 ;
    11b0:	21003fcc 	andi	r4,r4,255
    11b4:	20000c1e 	bne	r4,zero,11e8 <Light_PowerSwitch+0x40>
    11b8:	0005883a 	mov	r2,zero
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
    11bc:	d1200017 	ldw	r4,-32768(gp)
    11c0:	00c00044 	movi	r3,1
    11c4:	d8c00015 	stw	r3,0(sp)
    11c8:	d9c00104 	addi	r7,sp,4
    11cc:	01802004 	movi	r6,128
    11d0:	01401484 	movi	r5,82
    11d4:	d8800105 	stb	r2,4(sp)
    11d8:	00004640 	call	464 <OC_I2C_Write>
    data = bSwitch ? 0x03 : 0x00 ;

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);

    return bPass;
}
    11dc:	dfc00217 	ldw	ra,8(sp)
    11e0:	dec00304 	addi	sp,sp,12
    11e4:	f800283a 	ret
{
    bool bPass;
    alt_u8 data = 0;
    alt_u8 CommandCode = COMMAND_CMD | CONTROL_REG ;

    data = bSwitch ? 0x03 : 0x00 ;
    11e8:	008000c4 	movi	r2,3
    11ec:	003ff306 	br	11bc <__alt_mem_nios_system_shared_memory+0xfffc11bc>

000011f0 <Light_Get_ADCData0>:

    return bPass;
}

bool Light_Get_ADCData0(alt_u16 *pChannelData)
{
    11f0:	defffb04 	addi	sp,sp,-20
    11f4:	dc400315 	stw	r17,12(sp)
    11f8:	2023883a 	mov	r17,r4
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    11fc:	d1200017 	ldw	r4,-32768(gp)

    return bPass;
}

bool Light_Get_ADCData0(alt_u16 *pChannelData)
{
    1200:	dc000215 	stw	r16,8(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1204:	04000044 	movi	r16,1
    1208:	dc000015 	stw	r16,0(sp)
    120c:	d9c00144 	addi	r7,sp,5
    1210:	01802304 	movi	r6,140
    1214:	01401484 	movi	r5,82

    return bPass;
}

bool Light_Get_ADCData0(alt_u16 *pChannelData)
{
    1218:	dfc00415 	stw	ra,16(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    121c:	00005e80 	call	5e8 <OC_I2C_Read>
    alt_u8 Data0Low, Data0High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA0LOW ;
    //alt_u8 CommandCode = 0x8C;

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0Low);
    if(!bPass)
    1220:	10803fcc 	andi	r2,r2,255
    1224:	10001726 	beq	r2,zero,1284 <Light_Get_ADCData0+0x94>
    {
         return FALSE;
    }
    else *pChannelData = Data0Low;
    1228:	d8800143 	ldbu	r2,5(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    122c:	d1200017 	ldw	r4,-32768(gp)
    1230:	dc000015 	stw	r16,0(sp)
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0Low);
    if(!bPass)
    {
         return FALSE;
    }
    else *pChannelData = Data0Low;
    1234:	8880000d 	sth	r2,0(r17)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1238:	d9c00104 	addi	r7,sp,4
    123c:	01802344 	movi	r6,141
    1240:	01401484 	movi	r5,82
    1244:	00005e80 	call	5e8 <OC_I2C_Read>
    {
        CommandCode = COMMAND_CMD |  DATA0HIGH ;
        //CommandCode = 0x8D;

        bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0High);
        if(!bPass)
    1248:	10803fcc 	andi	r2,r2,255
    124c:	10000d26 	beq	r2,zero,1284 <Light_Get_ADCData0+0x94>
            return FALSE;
        }
        else *(pChannelData+1) = Data0High;
    }

    *pChannelData = (Data0High << 8) | Data0Low;
    1250:	d8c00103 	ldbu	r3,4(sp)
    1254:	d9000143 	ldbu	r4,5(sp)

    return TRUE;
    1258:	8005883a 	mov	r2,r16
            return FALSE;
        }
        else *(pChannelData+1) = Data0High;
    }

    *pChannelData = (Data0High << 8) | Data0Low;
    125c:	180a923a 	slli	r5,r3,8
        bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0High);
        if(!bPass)
        {
            return FALSE;
        }
        else *(pChannelData+1) = Data0High;
    1260:	d8c00103 	ldbu	r3,4(sp)
    1264:	88c0008d 	sth	r3,2(r17)
    }

    *pChannelData = (Data0High << 8) | Data0Low;
    1268:	2906b03a 	or	r3,r5,r4
    126c:	88c0000d 	sth	r3,0(r17)

    return TRUE;
}
    1270:	dfc00417 	ldw	ra,16(sp)
    1274:	dc400317 	ldw	r17,12(sp)
    1278:	dc000217 	ldw	r16,8(sp)
    127c:	dec00504 	addi	sp,sp,20
    1280:	f800283a 	ret
    //alt_u8 CommandCode = 0x8C;

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0Low);
    if(!bPass)
    {
         return FALSE;
    1284:	0005883a 	mov	r2,zero
    1288:	003ff906 	br	1270 <__alt_mem_nios_system_shared_memory+0xfffc1270>

0000128c <Light_Get_ADCData1>:

    return TRUE;
}

bool Light_Get_ADCData1(alt_u16 *pChannelData)
{
    128c:	defffb04 	addi	sp,sp,-20
    1290:	dc400315 	stw	r17,12(sp)
    1294:	2023883a 	mov	r17,r4
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1298:	d1200017 	ldw	r4,-32768(gp)

    return TRUE;
}

bool Light_Get_ADCData1(alt_u16 *pChannelData)
{
    129c:	dc000215 	stw	r16,8(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    12a0:	04000044 	movi	r16,1
    12a4:	dc000015 	stw	r16,0(sp)
    12a8:	d9c00144 	addi	r7,sp,5
    12ac:	01802384 	movi	r6,142
    12b0:	01401484 	movi	r5,82

    return TRUE;
}

bool Light_Get_ADCData1(alt_u16 *pChannelData)
{
    12b4:	dfc00415 	stw	ra,16(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    12b8:	00005e80 	call	5e8 <OC_I2C_Read>
    bool bPass;
    alt_u8 Data1Low, Data1High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA1LOW ;

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data1Low);
    if(!bPass)
    12bc:	10803fcc 	andi	r2,r2,255
    12c0:	10001726 	beq	r2,zero,1320 <Light_Get_ADCData1+0x94>
    {
         return FALSE;
    }
    else *pChannelData = Data1Low;
    12c4:	d8800143 	ldbu	r2,5(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    12c8:	d1200017 	ldw	r4,-32768(gp)
    12cc:	dc000015 	stw	r16,0(sp)
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data1Low);
    if(!bPass)
    {
         return FALSE;
    }
    else *pChannelData = Data1Low;
    12d0:	8880000d 	sth	r2,0(r17)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    12d4:	d9c00104 	addi	r7,sp,4
    12d8:	018023c4 	movi	r6,143
    12dc:	01401484 	movi	r5,82
    12e0:	00005e80 	call	5e8 <OC_I2C_Read>
    if(bPass)
    {
        CommandCode = COMMAND_CMD |  DATA1HIGH ;

        bPass = I2C_Read_Light(DEVICE_ADDR,CommandCode , &Data1High);
        if(!bPass)
    12e4:	10803fcc 	andi	r2,r2,255
    12e8:	10000d26 	beq	r2,zero,1320 <Light_Get_ADCData1+0x94>
            return FALSE;
        }
        else *(pChannelData+1) = Data1High;
    }

    *pChannelData = (Data1High << 8) | Data1Low;
    12ec:	d8c00103 	ldbu	r3,4(sp)
    12f0:	d9000143 	ldbu	r4,5(sp)

    return TRUE;
    12f4:	8005883a 	mov	r2,r16
            return FALSE;
        }
        else *(pChannelData+1) = Data1High;
    }

    *pChannelData = (Data1High << 8) | Data1Low;
    12f8:	180a923a 	slli	r5,r3,8
        bPass = I2C_Read_Light(DEVICE_ADDR,CommandCode , &Data1High);
        if(!bPass)
        {
            return FALSE;
        }
        else *(pChannelData+1) = Data1High;
    12fc:	d8c00103 	ldbu	r3,4(sp)
    1300:	88c0008d 	sth	r3,2(r17)
    }

    *pChannelData = (Data1High << 8) | Data1Low;
    1304:	2906b03a 	or	r3,r5,r4
    1308:	88c0000d 	sth	r3,0(r17)

    return TRUE;
}
    130c:	dfc00417 	ldw	ra,16(sp)
    1310:	dc400317 	ldw	r17,12(sp)
    1314:	dc000217 	ldw	r16,8(sp)
    1318:	dec00504 	addi	sp,sp,20
    131c:	f800283a 	ret
    alt_u8 CommandCode = COMMAND_CMD |  DATA1LOW ;

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data1Low);
    if(!bPass)
    {
         return FALSE;
    1320:	0005883a 	mov	r2,zero
    1324:	003ff906 	br	130c <__alt_mem_nios_system_shared_memory+0xfffc130c>

00001328 <Get_light>:

    return TRUE;
}

bool Get_light(alt_u16 *light0, alt_u16 *light1)
{
    1328:	defffb04 	addi	sp,sp,-20
    132c:	dc000215 	stw	r16,8(sp)
    1330:	2021883a 	mov	r16,r4

    alt_u16 ChannelData0;
    alt_u16 ChannelData1;

    //get light sensor Id
    Light_GetID(&device_Id);
    1334:	d9000104 	addi	r4,sp,4

    return TRUE;
}

bool Get_light(alt_u16 *light0, alt_u16 *light1)
{
    1338:	dc400315 	stw	r17,12(sp)
    133c:	dfc00415 	stw	ra,16(sp)
    1340:	2823883a 	mov	r17,r5
    bool bPass = FALSE;
    alt_u8 device_Id = 0;
    1344:	d8000105 	stb	zero,4(sp)

    alt_u16 ChannelData0;
    alt_u16 ChannelData1;

    //get light sensor Id
    Light_GetID(&device_Id);
    1348:	00011180 	call	1118 <Light_GetID>
    if(device_Id == 0)
    134c:	d8800103 	ldbu	r2,4(sp)
    1350:	10001726 	beq	r2,zero,13b0 <Get_light+0x88>
    	//printf("Light Sensor ID=%xh\r\n", device_Id); //
    }


    //get adc channel 0 data
    bPass = Light_Get_ADCData0(&ChannelData0);
    1354:	d9000084 	addi	r4,sp,2
    1358:	00011f00 	call	11f0 <Light_Get_ADCData0>
    if(!bPass)
    135c:	10803fcc 	andi	r2,r2,255
    1360:	10000e26 	beq	r2,zero,139c <Get_light+0x74>
    {
        printf("Get ADC Channle 0 data fail \n");
        return FALSE;
    }
    *light0 = ChannelData0;
    1364:	d880008b 	ldhu	r2,2(sp)

    //get adc channel 1 data
    bPass = Light_Get_ADCData1(&ChannelData1);
    1368:	d809883a 	mov	r4,sp
    if(!bPass)
    {
        printf("Get ADC Channle 0 data fail \n");
        return FALSE;
    }
    *light0 = ChannelData0;
    136c:	8080000d 	sth	r2,0(r16)

    //get adc channel 1 data
    bPass = Light_Get_ADCData1(&ChannelData1);
    1370:	000128c0 	call	128c <Light_Get_ADCData1>
    if(!bPass)
    1374:	10803fcc 	andi	r2,r2,255
    1378:	10001226 	beq	r2,zero,13c4 <Get_light+0x9c>
    {
        printf("Get ADC Channle 1 data fail \n");
        return FALSE;
    }
    *light1 = ChannelData1;
    137c:	d8c0000b 	ldhu	r3,0(sp)
    return TRUE;
    1380:	00800044 	movi	r2,1
    if(!bPass)
    {
        printf("Get ADC Channle 1 data fail \n");
        return FALSE;
    }
    *light1 = ChannelData1;
    1384:	88c0000d 	sth	r3,0(r17)
    return TRUE;
}
    1388:	dfc00417 	ldw	ra,16(sp)
    138c:	dc400317 	ldw	r17,12(sp)
    1390:	dc000217 	ldw	r16,8(sp)
    1394:	dec00504 	addi	sp,sp,20
    1398:	f800283a 	ret

    //get adc channel 0 data
    bPass = Light_Get_ADCData0(&ChannelData0);
    if(!bPass)
    {
        printf("Get ADC Channle 0 data fail \n");
    139c:	010000b4 	movhi	r4,2
    13a0:	2138aa04 	addi	r4,r4,-7512
    13a4:	000b4c80 	call	b4c8 <puts>
        return FALSE;
    13a8:	0005883a 	mov	r2,zero
    13ac:	003ff606 	br	1388 <__alt_mem_nios_system_shared_memory+0xfffc1388>

    //get light sensor Id
    Light_GetID(&device_Id);
    if(device_Id == 0)
    {
        printf("read id fail \n");
    13b0:	010000b4 	movhi	r4,2
    13b4:	2138a604 	addi	r4,r4,-7528
    13b8:	000b4c80 	call	b4c8 <puts>
        return FALSE;
    13bc:	0005883a 	mov	r2,zero
    13c0:	003ff106 	br	1388 <__alt_mem_nios_system_shared_memory+0xfffc1388>

    //get adc channel 1 data
    bPass = Light_Get_ADCData1(&ChannelData1);
    if(!bPass)
    {
        printf("Get ADC Channle 1 data fail \n");
    13c4:	010000b4 	movhi	r4,2
    13c8:	2138b204 	addi	r4,r4,-7480
    13cc:	000b4c80 	call	b4c8 <puts>
        return FALSE;
    13d0:	0005883a 	mov	r2,zero
    13d4:	003fec06 	br	1388 <__alt_mem_nios_system_shared_memory+0xfffc1388>

000013d8 <Light_SetThreshLow>:
}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    13d8:	200f883a 	mov	r7,r4
    13dc:	d1200017 	ldw	r4,-32768(gp)
    return TRUE;
}


bool Light_SetThreshLow(alt_u8 *pData)
{
    13e0:	defffe04 	addi	sp,sp,-8
}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    13e4:	00800084 	movi	r2,2
    13e8:	d8800015 	stw	r2,0(sp)
    13ec:	01802884 	movi	r6,162
    13f0:	01401484 	movi	r5,82
    return TRUE;
}


bool Light_SetThreshLow(alt_u8 *pData)
{
    13f4:	dfc00115 	stw	ra,4(sp)
}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    13f8:	00004640 	call	464 <OC_I2C_Write>
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
}
    13fc:	dfc00117 	ldw	ra,4(sp)
    1400:	dec00204 	addi	sp,sp,8
    1404:	f800283a 	ret

00001408 <Light_SetThreshHigh>:
}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    1408:	200f883a 	mov	r7,r4
    140c:	d1200017 	ldw	r4,-32768(gp)

    return bPass;
}

bool Light_SetThreshHigh(alt_u8 *pData)
{
    1410:	defffe04 	addi	sp,sp,-8
}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    1414:	00800084 	movi	r2,2
    1418:	d8800015 	stw	r2,0(sp)
    141c:	01802904 	movi	r6,164
    1420:	01401484 	movi	r5,82

    return bPass;
}

bool Light_SetThreshHigh(alt_u8 *pData)
{
    1424:	dfc00115 	stw	ra,4(sp)
}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    1428:	00004640 	call	464 <OC_I2C_Write>
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
}
    142c:	dfc00117 	ldw	ra,4(sp)
    1430:	dec00204 	addi	sp,sp,8
    1434:	f800283a 	ret

00001438 <Light_SetInterrupt>:

bool Light_SetInterrupt(alt_u8 data)
{
    1438:	defffd04 	addi	sp,sp,-12
    143c:	d9000105 	stb	r4,4(sp)
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
    1440:	d1200017 	ldw	r4,-32768(gp)
    1444:	00800044 	movi	r2,1
    1448:	d8800015 	stw	r2,0(sp)
    144c:	d9c00104 	addi	r7,sp,4
    1450:	01802184 	movi	r6,134
    1454:	01401484 	movi	r5,82

    return bPass;
}

bool Light_SetInterrupt(alt_u8 data)
{
    1458:	dfc00215 	stw	ra,8(sp)
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
    145c:	00004640 	call	464 <OC_I2C_Write>
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;

    bPass = I2C_Write_Light(DEVICE_ADDR,CommandCode , data);

    return bPass;
}
    1460:	dfc00217 	ldw	ra,8(sp)
    1464:	dec00304 	addi	sp,sp,12
    1468:	f800283a 	ret

0000146c <Light_GetInterrupt>:

void Light_GetInterrupt(alt_u8 *data)
{
    146c:	defffd04 	addi	sp,sp,-12
    1470:	dc000115 	stw	r16,4(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1474:	200f883a 	mov	r7,r4

    return bPass;
}

void Light_GetInterrupt(alt_u8 *data)
{
    1478:	2021883a 	mov	r16,r4
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    147c:	d1200017 	ldw	r4,-32768(gp)
    1480:	00800044 	movi	r2,1
    1484:	d8800015 	stw	r2,0(sp)
    1488:	01802184 	movi	r6,134
    148c:	01401484 	movi	r5,82

    return bPass;
}

void Light_GetInterrupt(alt_u8 *data)
{
    1490:	dfc00215 	stw	ra,8(sp)
}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1494:	00005e80 	call	5e8 <OC_I2C_Read>
{
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
    if(!bPass)  *data = 0;
    1498:	10803fcc 	andi	r2,r2,255
    149c:	1000011e 	bne	r2,zero,14a4 <Light_GetInterrupt+0x38>
    14a0:	80000005 	stb	zero,0(r16)
}
    14a4:	dfc00217 	ldw	ra,8(sp)
    14a8:	dc000117 	ldw	r16,4(sp)
    14ac:	dec00304 	addi	sp,sp,12
    14b0:	f800283a 	ret

000014b4 <Light_SetTiming>:

bool Light_SetTiming(alt_u8 data)
{
    14b4:	defffd04 	addi	sp,sp,-12
    14b8:	d9000105 	stb	r4,4(sp)
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
    14bc:	d1200017 	ldw	r4,-32768(gp)
    14c0:	00800044 	movi	r2,1
    14c4:	d8800015 	stw	r2,0(sp)
    14c8:	d9c00104 	addi	r7,sp,4
    14cc:	01802044 	movi	r6,129
    14d0:	01401484 	movi	r5,82
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
    if(!bPass)  *data = 0;
}

bool Light_SetTiming(alt_u8 data)
{
    14d4:	dfc00215 	stw	ra,8(sp)
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
    14d8:	00004640 	call	464 <OC_I2C_Write>
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);

    return bPass;
}
    14dc:	dfc00217 	ldw	ra,8(sp)
    14e0:	dec00304 	addi	sp,sp,12
    14e4:	f800283a 	ret

000014e8 <I2C_Write_Light>:

/////////////////////////////////////////////
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
    14e8:	defffd04 	addi	sp,sp,-12
    14ec:	d9800105 	stb	r6,4(sp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
    14f0:	29803fcc 	andi	r6,r5,255
    14f4:	21403fcc 	andi	r5,r4,255
    14f8:	d1200017 	ldw	r4,-32768(gp)
    14fc:	00800044 	movi	r2,1
    1500:	d8800015 	stw	r2,0(sp)
    1504:	d9c00104 	addi	r7,sp,4
}

/////////////////////////////////////////////
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
    1508:	dfc00215 	stw	ra,8(sp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
    150c:	00004640 	call	464 <OC_I2C_Write>

    return bSuccess;


}
    1510:	dfc00217 	ldw	ra,8(sp)
    1514:	dec00304 	addi	sp,sp,12
    1518:	f800283a 	ret

0000151c <I2C_Write_Light16>:

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    151c:	300f883a 	mov	r7,r6
    1520:	29803fcc 	andi	r6,r5,255
    1524:	21403fcc 	andi	r5,r4,255
    1528:	d1200017 	ldw	r4,-32768(gp)
    return bSuccess;


}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    152c:	defffe04 	addi	sp,sp,-8
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    1530:	00800084 	movi	r2,2
    1534:	d8800015 	stw	r2,0(sp)
    return bSuccess;


}

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    1538:	dfc00115 	stw	ra,4(sp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
    153c:	00004640 	call	464 <OC_I2C_Write>

    return bSuccess;


}
    1540:	dfc00117 	ldw	ra,4(sp)
    1544:	dec00204 	addi	sp,sp,8
    1548:	f800283a 	ret

0000154c <I2C_Read_Light>:

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    154c:	300f883a 	mov	r7,r6
    1550:	29803fcc 	andi	r6,r5,255
    1554:	21403fcc 	andi	r5,r4,255
    1558:	d1200017 	ldw	r4,-32768(gp)
    return bSuccess;


}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    155c:	defffe04 	addi	sp,sp,-8
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    1560:	00800044 	movi	r2,1
    1564:	d8800015 	stw	r2,0(sp)
    return bSuccess;


}

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
    1568:	dfc00115 	stw	ra,4(sp)
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
    156c:	00005e80 	call	5e8 <OC_I2C_Read>

    return bSuccess;
}
    1570:	dfc00117 	ldw	ra,4(sp)
    1574:	dec00204 	addi	sp,sp,8
    1578:	f800283a 	ret

0000157c <MPU9250_Init>:
void MPU9250_Init(alt_u32 I2C_Controller_Base)
{
	const int ref_clk = 50*1000*1000; // 50Mhz
	const int i2c_clk = 400*1000; // 400KHz
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
    157c:	018001b4 	movhi	r6,6
    1580:	0140bef4 	movhi	r5,763
    1584:	3186a004 	addi	r6,r6,6784
    1588:	297c2004 	addi	r5,r5,-3968
    158c:	00002a01 	jmpi	2a0 <oc_i2c_init_ex>

00001590 <WriteReg>:
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
#if 1
	if (WriteAddr & READ_FLAG)
    1590:	20803fcc 	andi	r2,r4,255
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
    1594:	defffc04 	addi	sp,sp,-16
#if 1
	if (WriteAddr & READ_FLAG)
    1598:	1080201c 	xori	r2,r2,128
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
    159c:	200d883a 	mov	r6,r4
    15a0:	dfc00315 	stw	ra,12(sp)

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
    15a4:	01000134 	movhi	r4,4
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
    15a8:	d9400205 	stb	r5,8(sp)
#if 1
	if (WriteAddr & READ_FLAG)
    15ac:	10bfe004 	addi	r2,r2,-128

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
    15b0:	21042004 	addi	r4,r4,4224
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
#if 1
	if (WriteAddr & READ_FLAG)
    15b4:	10000a16 	blt	r2,zero,15e0 <WriteReg+0x50>
		return ReadReg(WriteAddr, WriteData);
	OC_I2C_Write(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &WriteData, sizeof(WriteData));
    15b8:	00800044 	movi	r2,1
    15bc:	d8800015 	stw	r2,0(sp)
    15c0:	d9c00204 	addi	r7,sp,8
    15c4:	31803fcc 	andi	r6,r6,255
    15c8:	01403404 	movi	r5,208
    15cc:	00004640 	call	464 <OC_I2C_Write>
	return 0x00;
    15d0:	0005883a 	mov	r2,zero

	SPIdev::transfer("/dev/spidev0.1", tx, rx, 2);

    return rx[1];
#endif
}
    15d4:	dfc00317 	ldw	ra,12(sp)
    15d8:	dec00404 	addi	sp,sp,16
    15dc:	f800283a 	ret

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
    15e0:	00800044 	movi	r2,1
    15e4:	d8800015 	stw	r2,0(sp)
    15e8:	d9c00104 	addi	r7,sp,4
    15ec:	31803fcc 	andi	r6,r6,255
    15f0:	01403404 	movi	r5,208
    15f4:	00005e80 	call	5e8 <OC_I2C_Read>
	return ReadData;
    15f8:	d8800103 	ldbu	r2,4(sp)

	SPIdev::transfer("/dev/spidev0.1", tx, rx, 2);

    return rx[1];
#endif
}
    15fc:	dfc00317 	ldw	ra,12(sp)
    1600:	dec00404 	addi	sp,sp,16
    1604:	f800283a 	ret

00001608 <ReadReg>:

//-----------------------------------------------------------------------------------------------

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
    1608:	defffd04 	addi	sp,sp,-12
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
    160c:	21803fcc 	andi	r6,r4,255
    1610:	00800044 	movi	r2,1
    1614:	01000134 	movhi	r4,4
    1618:	21042004 	addi	r4,r4,4224
    161c:	d8800015 	stw	r2,0(sp)
    1620:	d9c00104 	addi	r7,sp,4
    1624:	01403404 	movi	r5,208
}

//-----------------------------------------------------------------------------------------------

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
    1628:	dfc00215 	stw	ra,8(sp)
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
    162c:	00005e80 	call	5e8 <OC_I2C_Read>
	return ReadData;
#else
    return WriteReg(WriteAddr | READ_FLAG, WriteData);
#endif
}
    1630:	d8800103 	ldbu	r2,4(sp)
    1634:	dfc00217 	ldw	ra,8(sp)
    1638:	dec00304 	addi	sp,sp,12
    163c:	f800283a 	ret

00001640 <ReadRegs>:

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
    1640:	defffe04 	addi	sp,sp,-8
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1644:	d9800015 	stw	r6,0(sp)
    1648:	21803fcc 	andi	r6,r4,255
    164c:	01000134 	movhi	r4,4
    1650:	280f883a 	mov	r7,r5
    1654:	21042004 	addi	r4,r4,4224
    1658:	01403404 	movi	r5,208
#endif
}

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
    165c:	dfc00115 	stw	ra,4(sp)
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1660:	00005e80 	call	5e8 <OC_I2C_Read>
    for(i=0; i<Bytes; i++)
    	ReadBuf[i] = rx[i + 1];

    usleep(50);
#endif
}
    1664:	dfc00117 	ldw	ra,4(sp)
    1668:	dec00204 	addi	sp,sp,8
    166c:	f800283a 	ret

00001670 <set_acc_scale>:
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int set_acc_scale(int scale)
{
    1670:	defffe04 	addi	sp,sp,-8
    1674:	dc000015 	stw	r16,0(sp)
	unsigned int temp_scale;
//	I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, scale);
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
    1678:	21403fcc 	andi	r5,r4,255
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int set_acc_scale(int scale)
{
    167c:	2021883a 	mov	r16,r4
	unsigned int temp_scale;
//	I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, scale);
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
    1680:	01000704 	movi	r4,28
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int set_acc_scale(int scale)
{
    1684:	dfc00115 	stw	ra,4(sp)
	unsigned int temp_scale;
//	I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, scale);
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
    1688:	00015900 	call	1590 <WriteReg>

    switch (scale){
    168c:	00800204 	movi	r2,8
    1690:	80802326 	beq	r16,r2,1720 <set_acc_scale+0xb0>
    1694:	14001e0e 	bge	r2,r16,1710 <set_acc_scale+0xa0>
    1698:	00800404 	movi	r2,16
    169c:	80801326 	beq	r16,r2,16ec <set_acc_scale+0x7c>
    16a0:	00800604 	movi	r2,24
    16a4:	8080021e 	bne	r16,r2,16b0 <set_acc_scale+0x40>
        break;
        case BITS_FS_8G:
            acc_divider=4096;
        break;
        case BITS_FS_16G:
            acc_divider=2048;
    16a8:	00914034 	movhi	r2,17664
    16ac:	d0a70915 	stw	r2,-25564(gp)
        break;
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
	temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
    16b0:	000b883a 	mov	r5,zero
    16b4:	01002704 	movi	r4,156
    16b8:	00015900 	call	1590 <WriteReg>

    switch (temp_scale){
    16bc:	00c00204 	movi	r3,8
    16c0:	10c01a26 	beq	r2,r3,172c <set_acc_scale+0xbc>
    16c4:	18800c2e 	bgeu	r3,r2,16f8 <set_acc_scale+0x88>
    16c8:	01000404 	movi	r4,16
    16cc:	11001c26 	beq	r2,r4,1740 <set_acc_scale+0xd0>
    16d0:	00c00604 	movi	r3,24
    16d4:	10c0011e 	bne	r2,r3,16dc <set_acc_scale+0x6c>
        break;
        case BITS_FS_8G:
            temp_scale=8;
        break;
        case BITS_FS_16G:
            temp_scale=16;
    16d8:	2005883a 	mov	r2,r4
        break;
    }
    return temp_scale;
}
    16dc:	dfc00117 	ldw	ra,4(sp)
    16e0:	dc000017 	ldw	r16,0(sp)
    16e4:	dec00204 	addi	sp,sp,8
    16e8:	f800283a 	ret
        break;
        case BITS_FS_4G:
            acc_divider=8192;
        break;
        case BITS_FS_8G:
            acc_divider=4096;
    16ec:	00916034 	movhi	r2,17792
    16f0:	d0a70915 	stw	r2,-25564(gp)
        break;
    16f4:	003fee06 	br	16b0 <__alt_mem_nios_system_shared_memory+0xfffc16b0>
        break;
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
	temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);

    switch (temp_scale){
    16f8:	103ff81e 	bne	r2,zero,16dc <__alt_mem_nios_system_shared_memory+0xfffc16dc>
        case BITS_FS_2G:
            temp_scale=2;
    16fc:	00800084 	movi	r2,2
        case BITS_FS_16G:
            temp_scale=16;
        break;
    }
    return temp_scale;
}
    1700:	dfc00117 	ldw	ra,4(sp)
    1704:	dc000017 	ldw	r16,0(sp)
    1708:	dec00204 	addi	sp,sp,8
    170c:	f800283a 	ret
{
	unsigned int temp_scale;
//	I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, scale);
    WriteReg(MPUREG_ACCEL_CONFIG, scale);

    switch (scale){
    1710:	803fe71e 	bne	r16,zero,16b0 <__alt_mem_nios_system_shared_memory+0xfffc16b0>
        case BITS_FS_2G:
            acc_divider=16384;
    1714:	0091a034 	movhi	r2,18048
    1718:	d0a70915 	stw	r2,-25564(gp)
        break;
    171c:	003fe406 	br	16b0 <__alt_mem_nios_system_shared_memory+0xfffc16b0>
        case BITS_FS_4G:
            acc_divider=8192;
    1720:	00918034 	movhi	r2,17920
    1724:	d0a70915 	stw	r2,-25564(gp)
        break;
    1728:	003fe106 	br	16b0 <__alt_mem_nios_system_shared_memory+0xfffc16b0>
    switch (temp_scale){
        case BITS_FS_2G:
            temp_scale=2;
        break;
        case BITS_FS_4G:
            temp_scale=4;
    172c:	00800104 	movi	r2,4
        case BITS_FS_16G:
            temp_scale=16;
        break;
    }
    return temp_scale;
}
    1730:	dfc00117 	ldw	ra,4(sp)
    1734:	dc000017 	ldw	r16,0(sp)
    1738:	dec00204 	addi	sp,sp,8
    173c:	f800283a 	ret
        break;
        case BITS_FS_4G:
            temp_scale=4;
        break;
        case BITS_FS_8G:
            temp_scale=8;
    1740:	1805883a 	mov	r2,r3
        case BITS_FS_16G:
            temp_scale=16;
        break;
    }
    return temp_scale;
}
    1744:	dfc00117 	ldw	ra,4(sp)
    1748:	dc000017 	ldw	r16,0(sp)
    174c:	dec00204 	addi	sp,sp,8
    1750:	f800283a 	ret

00001754 <set_gyro_scale>:
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int set_gyro_scale(int scale)
{
    1754:	defffe04 	addi	sp,sp,-8
    1758:	dc000015 	stw	r16,0(sp)
    unsigned int temp_scale;
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, scale);
    WriteReg(MPUREG_GYRO_CONFIG, scale);
    175c:	21403fcc 	andi	r5,r4,255
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int set_gyro_scale(int scale)
{
    1760:	2021883a 	mov	r16,r4
    unsigned int temp_scale;
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, scale);
    WriteReg(MPUREG_GYRO_CONFIG, scale);
    1764:	010006c4 	movi	r4,27
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int set_gyro_scale(int scale)
{
    1768:	dfc00115 	stw	ra,4(sp)
    unsigned int temp_scale;
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, scale);
    WriteReg(MPUREG_GYRO_CONFIG, scale);
    176c:	00015900 	call	1590 <WriteReg>
    switch (scale){
    1770:	00800204 	movi	r2,8
    1774:	80802526 	beq	r16,r2,180c <set_gyro_scale+0xb8>
    1778:	1400200e 	bge	r2,r16,17fc <set_gyro_scale+0xa8>
    177c:	00800404 	movi	r2,16
    1780:	80801426 	beq	r16,r2,17d4 <set_gyro_scale+0x80>
    1784:	00800604 	movi	r2,24
    1788:	8080031e 	bne	r16,r2,1798 <set_gyro_scale+0x44>
        break;
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
        break;
        case BITS_FS_2000DPS:
            gyro_divider=16.4;
    178c:	009060f4 	movhi	r2,16771
    1790:	108cccc4 	addi	r2,r2,13107
    1794:	d0a70815 	stw	r2,-25568(gp)
        break;
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
    1798:	000b883a 	mov	r5,zero
    179c:	010026c4 	movi	r4,155
    17a0:	00015900 	call	1590 <WriteReg>
    switch (temp_scale){
    17a4:	00c00204 	movi	r3,8
    17a8:	10c01b26 	beq	r2,r3,1818 <set_gyro_scale+0xc4>
    17ac:	18800d2e 	bgeu	r3,r2,17e4 <set_gyro_scale+0x90>
    17b0:	00c00404 	movi	r3,16
    17b4:	10c01d26 	beq	r2,r3,182c <set_gyro_scale+0xd8>
    17b8:	00c00604 	movi	r3,24
    17bc:	10c0011e 	bne	r2,r3,17c4 <set_gyro_scale+0x70>
        break;
        case BITS_FS_1000DPS:
            temp_scale=1000;
        break;
        case BITS_FS_2000DPS:
            temp_scale=2000;
    17c0:	0081f404 	movi	r2,2000
        break;
    }
    return temp_scale;
}
    17c4:	dfc00117 	ldw	ra,4(sp)
    17c8:	dc000017 	ldw	r16,0(sp)
    17cc:	dec00204 	addi	sp,sp,8
    17d0:	f800283a 	ret
        break;
        case BITS_FS_500DPS:
            gyro_divider=65.5;
        break;
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
    17d4:	009080f4 	movhi	r2,16899
    17d8:	108cccc4 	addi	r2,r2,13107
    17dc:	d0a70815 	stw	r2,-25568(gp)
        break;
    17e0:	003fed06 	br	1798 <__alt_mem_nios_system_shared_memory+0xfffc1798>
            gyro_divider=16.4;
        break;
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
    switch (temp_scale){
    17e4:	103ff71e 	bne	r2,zero,17c4 <__alt_mem_nios_system_shared_memory+0xfffc17c4>
        case BITS_FS_250DPS:
            temp_scale=250;
    17e8:	00803e84 	movi	r2,250
        case BITS_FS_2000DPS:
            temp_scale=2000;
        break;
    }
    return temp_scale;
}
    17ec:	dfc00117 	ldw	ra,4(sp)
    17f0:	dc000017 	ldw	r16,0(sp)
    17f4:	dec00204 	addi	sp,sp,8
    17f8:	f800283a 	ret
unsigned int set_gyro_scale(int scale)
{
    unsigned int temp_scale;
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, scale);
    WriteReg(MPUREG_GYRO_CONFIG, scale);
    switch (scale){
    17fc:	803fe61e 	bne	r16,zero,1798 <__alt_mem_nios_system_shared_memory+0xfffc1798>
        case BITS_FS_250DPS:
            gyro_divider=131;
    1800:	0090c0f4 	movhi	r2,17155
    1804:	d0a70815 	stw	r2,-25568(gp)
        break;
    1808:	003fe306 	br	1798 <__alt_mem_nios_system_shared_memory+0xfffc1798>
        case BITS_FS_500DPS:
            gyro_divider=65.5;
    180c:	0090a0f4 	movhi	r2,17027
    1810:	d0a70815 	stw	r2,-25568(gp)
        break;
    1814:	003fe006 	br	1798 <__alt_mem_nios_system_shared_memory+0xfffc1798>
    switch (temp_scale){
        case BITS_FS_250DPS:
            temp_scale=250;
        break;
        case BITS_FS_500DPS:
            temp_scale=500;
    1818:	00807d04 	movi	r2,500
        case BITS_FS_2000DPS:
            temp_scale=2000;
        break;
    }
    return temp_scale;
}
    181c:	dfc00117 	ldw	ra,4(sp)
    1820:	dc000017 	ldw	r16,0(sp)
    1824:	dec00204 	addi	sp,sp,8
    1828:	f800283a 	ret
        break;
        case BITS_FS_500DPS:
            temp_scale=500;
        break;
        case BITS_FS_1000DPS:
            temp_scale=1000;
    182c:	0080fa04 	movi	r2,1000
        case BITS_FS_2000DPS:
            temp_scale=2000;
        break;
    }
    return temp_scale;
}
    1830:	dfc00117 	ldw	ra,4(sp)
    1834:	dc000017 	ldw	r16,0(sp)
    1838:	dec00204 	addi	sp,sp,8
    183c:	f800283a 	ret

00001840 <calib_acc>:
2 -> Z axis
returns Factory Trim value
-----------------------------------------------------------------------------------------------*/

void calib_acc()
{
    1840:	defffc04 	addi	sp,sp,-16
	alt_u8 response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE

//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
    1844:	000b883a 	mov	r5,zero
    1848:	01002704 	movi	r4,156
2 -> Z axis
returns Factory Trim value
-----------------------------------------------------------------------------------------------*/

void calib_acc()
{
    184c:	dfc00315 	stw	ra,12(sp)
    1850:	dc000215 	stw	r16,8(sp)
	alt_u8 response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE

//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
    1854:	00015900 	call	1590 <WriteReg>
    set_acc_scale(BITS_FS_8G);
    1858:	01000404 	movi	r4,16
	alt_u8 response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE

//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
    185c:	1021883a 	mov	r16,r2
    set_acc_scale(BITS_FS_8G);
    1860:	00016700 	call	1670 <set_acc_scale>

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1864:	00800104 	movi	r2,4
    1868:	01000134 	movhi	r4,4
    186c:	d88f883a 	add	r7,sp,r2
    1870:	21042004 	addi	r4,r4,4224
    1874:	d8800015 	stw	r2,0(sp)
    1878:	01800344 	movi	r6,13
    187c:	01403404 	movi	r5,208
    1880:	00005e80 	call	5e8 <OC_I2C_Read>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
    1884:	d8c001c3 	ldbu	r3,7(sp)
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
    1888:	d9400143 	ldbu	r5,5(sp)
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
    188c:	d9800183 	ldbu	r6,6(sp)
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
    1890:	d9c00103 	ldbu	r7,4(sp)
    1894:	00802a74 	movhi	r2,169
    1898:	1097d804 	addi	r2,r2,24416
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
    189c:	288a703a 	and	r5,r5,r2
    18a0:	1900100c 	andi	r4,r3,64
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
    18a4:	308c703a 	and	r6,r6,r2
    18a8:	300dd0fa 	srai	r6,r6,3
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
    18ac:	3884703a 	and	r2,r7,r2
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
    18b0:	2009d0ba 	srai	r4,r4,2
    18b4:	280bd0fa 	srai	r5,r5,3
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
    18b8:	1005d0fa 	srai	r2,r2,3
    18bc:	01c000b4 	movhi	r7,2
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
    18c0:	18c0024c 	andi	r3,r3,9
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
    18c4:	39c98304 	addi	r7,r7,9740
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
    18c8:	290ab03a 	or	r5,r5,r4
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
    18cc:	30c6b03a 	or	r3,r6,r3

    set_acc_scale(temp_scale);
    18d0:	8009883a 	mov	r4,r16
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
    18d4:	38800015 	stw	r2,0(r7)
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
    18d8:	39400115 	stw	r5,4(r7)
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
    18dc:	38c00215 	stw	r3,8(r7)

    set_acc_scale(temp_scale);
    18e0:	00016700 	call	1670 <set_acc_scale>
}
    18e4:	dfc00317 	ldw	ra,12(sp)
    18e8:	dc000217 	ldw	r16,8(sp)
    18ec:	dec00404 	addi	sp,sp,16
    18f0:	f800283a 	ret

000018f4 <calib_mag>:

//-----------------------------------------------------------------------------------------------

void calib_mag()
{
    18f4:	defffa04 	addi	sp,sp,-24
	alt_u8 response[3];
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
    18f8:	01402304 	movi	r5,140
    18fc:	01000944 	movi	r4,37
}

//-----------------------------------------------------------------------------------------------

void calib_mag()
{
    1900:	dfc00515 	stw	ra,20(sp)
    1904:	dc800415 	stw	r18,16(sp)
    1908:	dc400315 	stw	r17,12(sp)
    190c:	dc000215 	stw	r16,8(sp)
	alt_u8 response[3];
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
    1910:	00015900 	call	1590 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_ASAX); //I2C slave 0 register address from where to begin data transfer
    1914:	01400404 	movi	r5,16
    1918:	01000984 	movi	r4,38
    191c:	00015900 	call	1590 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x83); //Read 3 bytes from the magnetometer
    1920:	014020c4 	movi	r5,131
    1924:	010009c4 	movi	r4,39
    1928:	00015900 	call	1590 <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_ASAX);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x83);


    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
    192c:	0109c404 	movi	r4,10000
    1930:	001b9f40 	call	1b9f4 <usleep>

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1934:	01000134 	movhi	r4,4
    1938:	048000c4 	movi	r18,3
    193c:	21042004 	addi	r4,r4,4224
    1940:	044000b4 	movhi	r17,2
    1944:	dc800015 	stw	r18,0(sp)
    1948:	d9c00104 	addi	r7,sp,4
    194c:	01801244 	movi	r6,73
    1950:	01403404 	movi	r5,208
    1954:	8c498904 	addi	r17,r17,9764
    1958:	00005e80 	call	5e8 <OC_I2C_Read>
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
    195c:	0021883a 	mov	r16,zero
        data=response[i];
    1960:	d8c00104 	addi	r3,sp,4
    1964:	1c05883a 	add	r2,r3,r16
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
    1968:	11000003 	ldbu	r4,0(r2)
    196c:	8c400104 	addi	r17,r17,4
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
    1970:	84000044 	addi	r16,r16,1
        data=response[i];
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
    1974:	00066bc0 	call	66bc <__floatunsisf>
    1978:	0150c034 	movhi	r5,17152
    197c:	1009883a 	mov	r4,r2
    1980:	00060b40 	call	60b4 <__subsf3>
    1984:	014ee034 	movhi	r5,15232
    1988:	1009883a 	mov	r4,r2
    198c:	0005c840 	call	5c84 <__mulsf3>
    1990:	014fe034 	movhi	r5,16256
    1994:	1009883a 	mov	r4,r2
    1998:	00051800 	call	5180 <__addsf3>
    199c:	014f86b4 	movhi	r5,15898
    19a0:	29666684 	addi	r5,r5,-26214
    19a4:	1009883a 	mov	r4,r2
    19a8:	0005c840 	call	5c84 <__mulsf3>
    19ac:	88bfff15 	stw	r2,-4(r17)
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
    19b0:	84bfeb1e 	bne	r16,r18,1960 <__alt_mem_nios_system_shared_memory+0xfffc1960>
        data=response[i];
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
    }
}
    19b4:	dfc00517 	ldw	ra,20(sp)
    19b8:	dc800417 	ldw	r18,16(sp)
    19bc:	dc400317 	ldw	r17,12(sp)
    19c0:	dc000217 	ldw	r16,8(sp)
    19c4:	dec00604 	addi	sp,sp,24
    19c8:	f800283a 	ret

000019cc <MPU9250_initialize>:
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250_initialize()
{
    19cc:	defff404 	addi	sp,sp,-48
	alt_u8 i = 0;
	int low_pass_filter = 0x01;
	alt_u8 MPU_Init_Data[MPU_InitRegNum][2] =
    19d0:	02001b04 	movi	r8,108
    19d4:	da0000c5 	stb	r8,3(sp)
    19d8:	02000684 	movi	r8,26
    19dc:	da000145 	stb	r8,5(sp)
    19e0:	02000604 	movi	r8,24
    19e4:	da000185 	stb	r8,6(sp)
    19e8:	020006c4 	movi	r8,27
    19ec:	da0001c5 	stb	r8,7(sp)
    19f0:	02000204 	movi	r8,8
    19f4:	da000205 	stb	r8,8(sp)
    19f8:	02000704 	movi	r8,28
    19fc:	da000245 	stb	r8,9(sp)
    1a00:	02000244 	movi	r8,9
    1a04:	da000285 	stb	r8,10(sp)
    1a08:	02000744 	movi	r8,29
    1a0c:	da0002c5 	stb	r8,11(sp)
    1a10:	02000c04 	movi	r8,48
    1a14:	da000305 	stb	r8,12(sp)
    1a18:	02000dc4 	movi	r8,55
    1a1c:	da000345 	stb	r8,13(sp)
    1a20:	02000804 	movi	r8,32
    1a24:	da000385 	stb	r8,14(sp)
    1a28:	02001a84 	movi	r8,106
    1a2c:	da0003c5 	stb	r8,15(sp)
    1a30:	02000344 	movi	r8,13
    1a34:	da000405 	stb	r8,16(sp)
    1a38:	02000904 	movi	r8,36
    1a3c:	da000445 	stb	r8,17(sp)
    1a40:	02000304 	movi	r8,12
    1a44:	da000485 	stb	r8,18(sp)
    1a48:	02000944 	movi	r8,37
    1a4c:	da0004c5 	stb	r8,19(sp)
    1a50:	020002c4 	movi	r8,11
    1a54:	01400044 	movi	r5,1
    1a58:	01c00984 	movi	r7,38
    1a5c:	018018c4 	movi	r6,99
    1a60:	00ffe044 	movi	r3,-127
    1a64:	008009c4 	movi	r2,39
    1a68:	da000505 	stb	r8,20(sp)
    1a6c:	01001ac4 	movi	r4,107
    1a70:	02000284 	movi	r8,10
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250_initialize()
{
    1a74:	dc800a15 	stw	r18,40(sp)
    1a78:	dc400915 	stw	r17,36(sp)
    1a7c:	dc000815 	stw	r16,32(sp)
	alt_u8 i = 0;
	int low_pass_filter = 0x01;
	alt_u8 MPU_Init_Data[MPU_InitRegNum][2] =
    1a80:	d9c00545 	stb	r7,21(sp)
    1a84:	d9c006c5 	stb	r7,27(sp)
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250_initialize()
{
    1a88:	dfc00b15 	stw	ra,44(sp)
	alt_u8 i = 0;
	int low_pass_filter = 0x01;
	alt_u8 MPU_Init_Data[MPU_InitRegNum][2] =
    1a8c:	d9400005 	stb	r5,0(sp)
    1a90:	d9000045 	stb	r4,1(sp)
    1a94:	d8000085 	stb	zero,2(sp)
    1a98:	d9400105 	stb	r5,4(sp)
    1a9c:	d9400585 	stb	r5,22(sp)
    1aa0:	d98005c5 	stb	r6,23(sp)
    1aa4:	d8c00605 	stb	r3,24(sp)
    1aa8:	d8800645 	stb	r2,25(sp)
    1aac:	da000685 	stb	r8,26(sp)
    1ab0:	01c00484 	movi	r7,18
    1ab4:	d9c00705 	stb	r7,28(sp)
    1ab8:	dc0000c4 	addi	r16,sp,3
    1abc:	d9800745 	stb	r6,29(sp)
    1ac0:	d8c00785 	stb	r3,30(sp)
    1ac4:	d88007c5 	stb	r2,31(sp)
    1ac8:	d823883a 	mov	r17,sp
    1acc:	dc800844 	addi	r18,sp,33
    1ad0:	00000306 	br	1ae0 <MPU9250_initialize+0x114>
    1ad4:	89400003 	ldbu	r5,0(r17)
    1ad8:	81000003 	ldbu	r4,0(r16)
    1adc:	84000084 	addi	r16,r16,2
	};

	for(i = 0; i < MPU_InitRegNum; i++)
	{
//		I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
		WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
    1ae0:	21003fcc 	andi	r4,r4,255
    1ae4:	29403fcc 	andi	r5,r5,255
    1ae8:	00015900 	call	1590 <WriteReg>
	    usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
    1aec:	010000b4 	movhi	r4,2
    1af0:	2121a804 	addi	r4,r4,-31072
    1af4:	8c400084 	addi	r17,r17,2
    1af8:	001b9f40 	call	1b9f4 <usleep>
	        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
	        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
	        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte
	};

	for(i = 0; i < MPU_InitRegNum; i++)
    1afc:	84bff51e 	bne	r16,r18,1ad4 <__alt_mem_nios_system_shared_memory+0xfffc1ad4>
//		I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
		WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
	    usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
	}

	set_acc_scale(BITS_FS_16G);
    1b00:	01000604 	movi	r4,24
    1b04:	00016700 	call	1670 <set_acc_scale>
	set_gyro_scale(BITS_FS_2000DPS);
    1b08:	01000604 	movi	r4,24
    1b0c:	00017540 	call	1754 <set_gyro_scale>

	calib_mag();
    1b10:	00018f40 	call	18f4 <calib_mag>

	return 0;
}
    1b14:	0005883a 	mov	r2,zero
    1b18:	dfc00b17 	ldw	ra,44(sp)
    1b1c:	dc800a17 	ldw	r18,40(sp)
    1b20:	dc400917 	ldw	r17,36(sp)
    1b24:	dc000817 	ldw	r16,32(sp)
    1b28:	dec00c04 	addi	sp,sp,48
    1b2c:	f800283a 	ret

00001b30 <read_acc>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_acc()
{
    1b30:	defff604 	addi	sp,sp,-40
    1b34:	dc800515 	stw	r18,20(sp)

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1b38:	01000134 	movhi	r4,4
    1b3c:	04800184 	movi	r18,6
    1b40:	21042004 	addi	r4,r4,4224
    1b44:	d9c00104 	addi	r7,sp,4
    1b48:	01800ec4 	movi	r6,59
    1b4c:	01403404 	movi	r5,208
    1b50:	dc800015 	stw	r18,0(sp)
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_acc()
{
    1b54:	dfc00915 	stw	ra,36(sp)
    1b58:	dd400815 	stw	r21,32(sp)
    1b5c:	dd000715 	stw	r20,28(sp)
    1b60:	dcc00615 	stw	r19,24(sp)
    1b64:	dc400415 	stw	r17,16(sp)
    1b68:	dc000315 	stw	r16,12(sp)

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1b6c:	00005e80 	call	5e8 <OC_I2C_Read>
    1b70:	d1270917 	ldw	r4,-25564(gp)
    1b74:	054000b4 	movhi	r21,2
    1b78:	ad498004 	addi	r21,r21,9728
    1b7c:	0008ec40 	call	8ec4 <__extendsfdf2>
    1b80:	dc400144 	addi	r17,sp,5
    1b84:	1029883a 	mov	r20,r2
    1b88:	1827883a 	mov	r19,r3
    1b8c:	0021883a 	mov	r16,zero
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 6);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
    for(i=0; i<3; i++) {
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
    1b90:	d8c00104 	addi	r3,sp,4
    1b94:	1c05883a 	add	r2,r3,r16
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    1b98:	11000003 	ldbu	r4,0(r2)
    1b9c:	88800003 	ldbu	r2,0(r17)
    1ba0:	ad400104 	addi	r21,r21,4
    1ba4:	2008923a 	slli	r4,r4,8
    1ba8:	84000084 	addi	r16,r16,2
    1bac:	8c400084 	addi	r17,r17,2
    1bb0:	2088b03a 	or	r4,r4,r2
    1bb4:	213fffcc 	andi	r4,r4,65535
    1bb8:	2120001c 	xori	r4,r4,32768
    1bbc:	21200004 	addi	r4,r4,-32768
    1bc0:	00065980 	call	6598 <__floatsisf>
    1bc4:	1009883a 	mov	r4,r2
    1bc8:	0008ec40 	call	8ec4 <__extendsfdf2>
    1bcc:	018ea4f4 	movhi	r6,14995
    1bd0:	01d00934 	movhi	r7,16420
    1bd4:	31a8c144 	addi	r6,r6,-23803
    1bd8:	39e74044 	addi	r7,r7,-25343
    1bdc:	1009883a 	mov	r4,r2
    1be0:	180b883a 	mov	r5,r3
    1be4:	0007c800 	call	7c80 <__muldf3>
    1be8:	a00d883a 	mov	r6,r20
    1bec:	980f883a 	mov	r7,r19
    1bf0:	1009883a 	mov	r4,r2
    1bf4:	180b883a 	mov	r5,r3
    1bf8:	00070580 	call	7058 <__divdf3>
    1bfc:	1009883a 	mov	r4,r2
    1c00:	180b883a 	mov	r5,r3
    1c04:	0008fd40 	call	8fd4 <__truncdfsf2>
    1c08:	a8bfff15 	stw	r2,-4(r21)
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 6);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
    for(i=0; i<3; i++) {
    1c0c:	84bfe01e 	bne	r16,r18,1b90 <__alt_mem_nios_system_shared_memory+0xfffc1b90>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }

}
    1c10:	dfc00917 	ldw	ra,36(sp)
    1c14:	dd400817 	ldw	r21,32(sp)
    1c18:	dd000717 	ldw	r20,28(sp)
    1c1c:	dcc00617 	ldw	r19,24(sp)
    1c20:	dc800517 	ldw	r18,20(sp)
    1c24:	dc400417 	ldw	r17,16(sp)
    1c28:	dc000317 	ldw	r16,12(sp)
    1c2c:	dec00a04 	addi	sp,sp,40
    1c30:	f800283a 	ret

00001c34 <read_gyro>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_gyro()
{
    1c34:	defff604 	addi	sp,sp,-40
    1c38:	dc800515 	stw	r18,20(sp)

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1c3c:	01000134 	movhi	r4,4
    1c40:	04800184 	movi	r18,6
    1c44:	21042004 	addi	r4,r4,4224
    1c48:	d9c00104 	addi	r7,sp,4
    1c4c:	018010c4 	movi	r6,67
    1c50:	01403404 	movi	r5,208
    1c54:	dc800015 	stw	r18,0(sp)
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_gyro()
{
    1c58:	dfc00915 	stw	ra,36(sp)
    1c5c:	dd400815 	stw	r21,32(sp)
    1c60:	dd000715 	stw	r20,28(sp)
    1c64:	dcc00615 	stw	r19,24(sp)
    1c68:	dc400415 	stw	r17,16(sp)
    1c6c:	dc000315 	stw	r16,12(sp)

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1c70:	00005e80 	call	5e8 <OC_I2C_Read>
    1c74:	d1270817 	ldw	r4,-25568(gp)
    1c78:	054000b4 	movhi	r21,2
    1c7c:	ad498604 	addi	r21,r21,9752
    1c80:	0008ec40 	call	8ec4 <__extendsfdf2>
    1c84:	dc400144 	addi	r17,sp,5
    1c88:	1029883a 	mov	r20,r2
    1c8c:	1827883a 	mov	r19,r3
    1c90:	0021883a 	mov	r16,zero
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_XOUT_H, response, 6);
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
    for(i=0; i<3; i++) {
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
    1c94:	d8c00104 	addi	r3,sp,4
    1c98:	1c05883a 	add	r2,r3,r16
        data = (float)bit_data;
        gyroscope_data[i] = (M_PI / 180) * data / gyro_divider;
    1c9c:	11000003 	ldbu	r4,0(r2)
    1ca0:	88800003 	ldbu	r2,0(r17)
    1ca4:	ad400104 	addi	r21,r21,4
    1ca8:	2008923a 	slli	r4,r4,8
    1cac:	84000084 	addi	r16,r16,2
    1cb0:	8c400084 	addi	r17,r17,2
    1cb4:	2088b03a 	or	r4,r4,r2
    1cb8:	213fffcc 	andi	r4,r4,65535
    1cbc:	2120001c 	xori	r4,r4,32768
    1cc0:	21200004 	addi	r4,r4,-32768
    1cc4:	00065980 	call	6598 <__floatsisf>
    1cc8:	1009883a 	mov	r4,r2
    1ccc:	0008ec40 	call	8ec4 <__extendsfdf2>
    1cd0:	01a894f4 	movhi	r6,41555
    1cd4:	01cfe4b4 	movhi	r7,16274
    1cd8:	31a74e44 	addi	r6,r6,-25287
    1cdc:	39f7d184 	addi	r7,r7,-8378
    1ce0:	1009883a 	mov	r4,r2
    1ce4:	180b883a 	mov	r5,r3
    1ce8:	0007c800 	call	7c80 <__muldf3>
    1cec:	a00d883a 	mov	r6,r20
    1cf0:	980f883a 	mov	r7,r19
    1cf4:	1009883a 	mov	r4,r2
    1cf8:	180b883a 	mov	r5,r3
    1cfc:	00070580 	call	7058 <__divdf3>
    1d00:	1009883a 	mov	r4,r2
    1d04:	180b883a 	mov	r5,r3
    1d08:	0008fd40 	call	8fd4 <__truncdfsf2>
    1d0c:	a8bfff15 	stw	r2,-4(r21)
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_XOUT_H, response, 6);
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
    for(i=0; i<3; i++) {
    1d10:	84bfe01e 	bne	r16,r18,1c94 <__alt_mem_nios_system_shared_memory+0xfffc1c94>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i] = (M_PI / 180) * data / gyro_divider;
    }

}
    1d14:	dfc00917 	ldw	ra,36(sp)
    1d18:	dd400817 	ldw	r21,32(sp)
    1d1c:	dd000717 	ldw	r20,28(sp)
    1d20:	dcc00617 	ldw	r19,24(sp)
    1d24:	dc800517 	ldw	r18,20(sp)
    1d28:	dc400417 	ldw	r17,16(sp)
    1d2c:	dc000317 	ldw	r16,12(sp)
    1d30:	dec00a04 	addi	sp,sp,40
    1d34:	f800283a 	ret

00001d38 <read_temp>:
usage: call this function to read temperature data.
returns the value in °C
-----------------------------------------------------------------------------------------------*/

void read_temp()
{
    1d38:	defffd04 	addi	sp,sp,-12

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1d3c:	00800084 	movi	r2,2
    1d40:	01000134 	movhi	r4,4
    1d44:	d9c00104 	addi	r7,sp,4
    1d48:	01801044 	movi	r6,65
    1d4c:	01403404 	movi	r5,208
    1d50:	21042004 	addi	r4,r4,4224
    1d54:	d8800015 	stw	r2,0(sp)
usage: call this function to read temperature data.
returns the value in °C
-----------------------------------------------------------------------------------------------*/

void read_temp()
{
    1d58:	dfc00215 	stw	ra,8(sp)

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1d5c:	00005e80 	call	5e8 <OC_I2C_Read>
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_TEMP_OUT_H, response, 2);
    ReadRegs(MPUREG_TEMP_OUT_H,response,2);

    bit_data=((alt_16)response[0]<<8)|response[1];
    data=(float)bit_data;
    temperature=(data/340)+36.53;
    1d60:	d9000103 	ldbu	r4,4(sp)
    1d64:	d8800143 	ldbu	r2,5(sp)
    1d68:	2008923a 	slli	r4,r4,8
    1d6c:	2088b03a 	or	r4,r4,r2
    1d70:	213fffcc 	andi	r4,r4,65535
    1d74:	2120001c 	xori	r4,r4,32768
    1d78:	21200004 	addi	r4,r4,-32768
    1d7c:	00065980 	call	6598 <__floatsisf>
    1d80:	0150eab4 	movhi	r5,17322
    1d84:	1009883a 	mov	r4,r2
    1d88:	00056480 	call	5648 <__divsf3>
    1d8c:	1009883a 	mov	r4,r2
    1d90:	0008ec40 	call	8ec4 <__extendsfdf2>
    1d94:	01828f74 	movhi	r6,2621
    1d98:	01d010b4 	movhi	r7,16450
    1d9c:	319c2904 	addi	r6,r6,28836
    1da0:	39d0f5c4 	addi	r7,r7,17367
    1da4:	1009883a 	mov	r4,r2
    1da8:	180b883a 	mov	r5,r3
    1dac:	00067ac0 	call	67ac <__adddf3>
    1db0:	1009883a 	mov	r4,r2
    1db4:	180b883a 	mov	r5,r3
    1db8:	0008fd40 	call	8fd4 <__truncdfsf2>
    1dbc:	d0a70715 	stw	r2,-25572(gp)
}
    1dc0:	dfc00217 	ldw	ra,8(sp)
    1dc4:	dec00304 	addi	sp,sp,12
    1dc8:	f800283a 	ret

00001dcc <read_mag>:

//-----------------------------------------------------------------------------------------------

void read_mag()
{
    1dcc:	defff704 	addi	sp,sp,-36
	alt_u8 response[7];
	alt_16 bit_data;
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
    1dd0:	01402304 	movi	r5,140
    1dd4:	01000944 	movi	r4,37
}

//-----------------------------------------------------------------------------------------------

void read_mag()
{
    1dd8:	dfc00815 	stw	ra,32(sp)
    1ddc:	dd000715 	stw	r20,28(sp)
    1de0:	dcc00615 	stw	r19,24(sp)
    1de4:	dc800515 	stw	r18,20(sp)
    1de8:	dc400415 	stw	r17,16(sp)
    1dec:	dc000315 	stw	r16,12(sp)
	alt_u8 response[7];
	alt_16 bit_data;
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
    1df0:	00015900 	call	1590 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
    1df4:	014000c4 	movi	r5,3
    1df8:	01000984 	movi	r4,38
    1dfc:	00015900 	call	1590 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer
    1e00:	014021c4 	movi	r5,135
    1e04:	010009c4 	movi	r4,39
    1e08:	00015900 	call	1590 <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR|READ_FLAG);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_HXL);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x87);

    usleep(10000);
    1e0c:	0109c404 	movi	r4,10000
    1e10:	001b9f40 	call	1b9f4 <usleep>

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1e14:	008001c4 	movi	r2,7
    1e18:	01000134 	movhi	r4,4
    1e1c:	21042004 	addi	r4,r4,4224
    1e20:	04c000b4 	movhi	r19,2
    1e24:	048000b4 	movhi	r18,2
    1e28:	d8800015 	stw	r2,0(sp)
    1e2c:	d9c00104 	addi	r7,sp,4
    1e30:	01801244 	movi	r6,73
    1e34:	01403404 	movi	r5,208
    1e38:	9cc98904 	addi	r19,r19,9764
    1e3c:	94898c04 	addi	r18,r18,9776
    1e40:	00005e80 	call	5e8 <OC_I2C_Read>
    1e44:	dc400144 	addi	r17,sp,5
    1e48:	0021883a 	mov	r16,zero

    usleep(10000);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
    1e4c:	05000184 	movi	r20,6
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
        data=(float)bit_data;
        magnetometer_data[i]=data*magnetometer_ASA[i];
    1e50:	89000003 	ldbu	r4,0(r17)
    usleep(10000);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
    1e54:	d8c00104 	addi	r3,sp,4
    1e58:	1c05883a 	add	r2,r3,r16
        data=(float)bit_data;
        magnetometer_data[i]=data*magnetometer_ASA[i];
    1e5c:	10800003 	ldbu	r2,0(r2)
    1e60:	2008923a 	slli	r4,r4,8
    1e64:	84000084 	addi	r16,r16,2
    1e68:	8c400084 	addi	r17,r17,2
    1e6c:	2088b03a 	or	r4,r4,r2
    1e70:	213fffcc 	andi	r4,r4,65535
    1e74:	2120001c 	xori	r4,r4,32768
    1e78:	21200004 	addi	r4,r4,-32768
    1e7c:	00065980 	call	6598 <__floatsisf>
    1e80:	99400017 	ldw	r5,0(r19)
    1e84:	1009883a 	mov	r4,r2
    1e88:	9cc00104 	addi	r19,r19,4
    1e8c:	0005c840 	call	5c84 <__mulsf3>
    1e90:	90800015 	stw	r2,0(r18)
    1e94:	94800104 	addi	r18,r18,4

    usleep(10000);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
    1e98:	853fed1e 	bne	r16,r20,1e50 <__alt_mem_nios_system_shared_memory+0xfffc1e50>
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
        data=(float)bit_data;
        magnetometer_data[i]=data*magnetometer_ASA[i];
    }
}
    1e9c:	dfc00817 	ldw	ra,32(sp)
    1ea0:	dd000717 	ldw	r20,28(sp)
    1ea4:	dcc00617 	ldw	r19,24(sp)
    1ea8:	dc800517 	ldw	r18,20(sp)
    1eac:	dc400417 	ldw	r17,16(sp)
    1eb0:	dc000317 	ldw	r16,12(sp)
    1eb4:	dec00904 	addi	sp,sp,36
    1eb8:	f800283a 	ret

00001ebc <read_all>:

//-----------------------------------------------------------------------------------------------

void read_all()
{
    1ebc:	defff104 	addi	sp,sp,-60
	alt_16 bit_data;
    float data;
    int i;

    //Send I2C command at first
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
    1ec0:	01402304 	movi	r5,140
    1ec4:	01000944 	movi	r4,37
}

//-----------------------------------------------------------------------------------------------

void read_all()
{
    1ec8:	dfc00e15 	stw	ra,56(sp)
    1ecc:	dd400c15 	stw	r21,48(sp)
    1ed0:	dd000b15 	stw	r20,44(sp)
    1ed4:	dcc00a15 	stw	r19,40(sp)
    1ed8:	dc800915 	stw	r18,36(sp)
    1edc:	dc400815 	stw	r17,32(sp)
    1ee0:	dc000715 	stw	r16,28(sp)
    1ee4:	dd800d15 	stw	r22,52(sp)
	alt_16 bit_data;
    float data;
    int i;

    //Send I2C command at first
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
    1ee8:	00015900 	call	1590 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
    1eec:	014000c4 	movi	r5,3
    1ef0:	01000984 	movi	r4,38
    1ef4:	00015900 	call	1590 <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 7 bytes from the magnetometer
    1ef8:	014021c4 	movi	r5,135
    1efc:	010009c4 	movi	r4,39
    1f00:	00015900 	call	1590 <WriteReg>

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
    1f04:	00800544 	movi	r2,21
    1f08:	01000134 	movhi	r4,4
    1f0c:	21042004 	addi	r4,r4,4224
    1f10:	d9c00104 	addi	r7,sp,4
    1f14:	01800ec4 	movi	r6,59
    1f18:	01403404 	movi	r5,208
    1f1c:	d8800015 	stw	r2,0(sp)
    1f20:	00005e80 	call	5e8 <OC_I2C_Read>
    1f24:	d1270917 	ldw	r4,-25564(gp)
    1f28:	054000b4 	movhi	r21,2
    1f2c:	ad498004 	addi	r21,r21,9728
    1f30:	0008ec40 	call	8ec4 <__extendsfdf2>
    1f34:	dc400144 	addi	r17,sp,5
    1f38:	1029883a 	mov	r20,r2
    1f3c:	1827883a 	mov	r19,r3
    1f40:	0021883a 	mov	r16,zero

    //wait(0.001);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 21);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
    //Get accelerometer value
    for(i=0; i<3; i++) {
    1f44:	04800184 	movi	r18,6
        bit_data = ((alt_16)response[i*2] << 8)|response[i*2+1];
    1f48:	d8c00104 	addi	r3,sp,4
    1f4c:	1c05883a 	add	r2,r3,r16
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    1f50:	11000003 	ldbu	r4,0(r2)
    1f54:	88800003 	ldbu	r2,0(r17)
    1f58:	ad400104 	addi	r21,r21,4
    1f5c:	2008923a 	slli	r4,r4,8
    1f60:	84000084 	addi	r16,r16,2
    1f64:	8c400084 	addi	r17,r17,2
    1f68:	2088b03a 	or	r4,r4,r2
    1f6c:	213fffcc 	andi	r4,r4,65535
    1f70:	2120001c 	xori	r4,r4,32768
    1f74:	21200004 	addi	r4,r4,-32768
    1f78:	00065980 	call	6598 <__floatsisf>
    1f7c:	1009883a 	mov	r4,r2
    1f80:	0008ec40 	call	8ec4 <__extendsfdf2>
    1f84:	018ea4f4 	movhi	r6,14995
    1f88:	01d00934 	movhi	r7,16420
    1f8c:	31a8c144 	addi	r6,r6,-23803
    1f90:	39e74044 	addi	r7,r7,-25343
    1f94:	1009883a 	mov	r4,r2
    1f98:	180b883a 	mov	r5,r3
    1f9c:	0007c800 	call	7c80 <__muldf3>
    1fa0:	a00d883a 	mov	r6,r20
    1fa4:	980f883a 	mov	r7,r19
    1fa8:	1009883a 	mov	r4,r2
    1fac:	180b883a 	mov	r5,r3
    1fb0:	00070580 	call	7058 <__divdf3>
    1fb4:	1009883a 	mov	r4,r2
    1fb8:	180b883a 	mov	r5,r3
    1fbc:	0008fd40 	call	8fd4 <__truncdfsf2>
    1fc0:	a8bfff15 	stw	r2,-4(r21)

    //wait(0.001);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 21);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
    //Get accelerometer value
    for(i=0; i<3; i++) {
    1fc4:	84bfe01e 	bne	r16,r18,1f48 <__alt_mem_nios_system_shared_memory+0xfffc1f48>
        accelerometer_data[i] = G_SI * data / acc_divider;
    }
    //Get temperature
    bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
    data = (float)bit_data;
    temperature = ((data - 21) / 333.87) + 21;
    1fc8:	d9000283 	ldbu	r4,10(sp)
    1fcc:	d88002c3 	ldbu	r2,11(sp)
    1fd0:	054000b4 	movhi	r21,2
    1fd4:	2008923a 	slli	r4,r4,8
    1fd8:	ad498604 	addi	r21,r21,9752
    1fdc:	dc000304 	addi	r16,sp,12
    1fe0:	2088b03a 	or	r4,r4,r2
    1fe4:	213fffcc 	andi	r4,r4,65535
    1fe8:	2120001c 	xori	r4,r4,32768
    1fec:	21200004 	addi	r4,r4,-32768
    1ff0:	00065980 	call	6598 <__floatsisf>
    1ff4:	01506a34 	movhi	r5,16808
    1ff8:	1009883a 	mov	r4,r2
    1ffc:	00060b40 	call	60b4 <__subsf3>
    2000:	1009883a 	mov	r4,r2
    2004:	0008ec40 	call	8ec4 <__extendsfdf2>
    2008:	01a147f4 	movhi	r6,34079
    200c:	01d01d74 	movhi	r7,16501
    2010:	31ae1484 	addi	r6,r6,-18350
    2014:	39f77ac4 	addi	r7,r7,-8725
    2018:	1009883a 	mov	r4,r2
    201c:	180b883a 	mov	r5,r3
    2020:	00070580 	call	7058 <__divdf3>
    2024:	000d883a 	mov	r6,zero
    2028:	01d00d74 	movhi	r7,16437
    202c:	1009883a 	mov	r4,r2
    2030:	180b883a 	mov	r5,r3
    2034:	00067ac0 	call	67ac <__adddf3>
    2038:	1009883a 	mov	r4,r2
    203c:	180b883a 	mov	r5,r3
    2040:	0008fd40 	call	8fd4 <__truncdfsf2>
    2044:	d1270817 	ldw	r4,-25568(gp)
    2048:	d0a70715 	stw	r2,-25572(gp)
    204c:	dc800344 	addi	r18,sp,13
    2050:	0008ec40 	call	8ec4 <__extendsfdf2>
    2054:	dc400484 	addi	r17,sp,18
    2058:	1029883a 	mov	r20,r2
    205c:	1827883a 	mov	r19,r3
    //Get gyroscope value
    for(i=4; i<7; i++) {
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
    2060:	81000003 	ldbu	r4,0(r16)
    2064:	90800003 	ldbu	r2,0(r18)
    2068:	ad400104 	addi	r21,r21,4
    206c:	2008923a 	slli	r4,r4,8
    2070:	84000084 	addi	r16,r16,2
    2074:	94800084 	addi	r18,r18,2
    2078:	2088b03a 	or	r4,r4,r2
    207c:	213fffcc 	andi	r4,r4,65535
    2080:	2120001c 	xori	r4,r4,32768
    2084:	21200004 	addi	r4,r4,-32768
    2088:	00065980 	call	6598 <__floatsisf>
    208c:	1009883a 	mov	r4,r2
    2090:	0008ec40 	call	8ec4 <__extendsfdf2>
    2094:	01a894f4 	movhi	r6,41555
    2098:	01cfe4b4 	movhi	r7,16274
    209c:	31a74e44 	addi	r6,r6,-25287
    20a0:	39f7d184 	addi	r7,r7,-8378
    20a4:	1009883a 	mov	r4,r2
    20a8:	180b883a 	mov	r5,r3
    20ac:	0007c800 	call	7c80 <__muldf3>
    20b0:	a00d883a 	mov	r6,r20
    20b4:	980f883a 	mov	r7,r19
    20b8:	1009883a 	mov	r4,r2
    20bc:	180b883a 	mov	r5,r3
    20c0:	00070580 	call	7058 <__divdf3>
    20c4:	1009883a 	mov	r4,r2
    20c8:	180b883a 	mov	r5,r3
    20cc:	0008fd40 	call	8fd4 <__truncdfsf2>
    20d0:	a8bfff15 	stw	r2,-4(r21)
    //Get temperature
    bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
    data = (float)bit_data;
    temperature = ((data - 21) / 333.87) + 21;
    //Get gyroscope value
    for(i=4; i<7; i++) {
    20d4:	847fe21e 	bne	r16,r17,2060 <__alt_mem_nios_system_shared_memory+0xfffc2060>
    20d8:	050000b4 	movhi	r20,2
    20dc:	04c000b4 	movhi	r19,2
    20e0:	a5098c04 	addi	r20,r20,9776
    20e4:	9cc98904 	addi	r19,r19,9764
    20e8:	dd4004c4 	addi	r21,sp,19
    20ec:	0021883a 	mov	r16,zero
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
    20f0:	04800304 	movi	r18,12
        bit_data = ((alt_16)response[i*2+1] << 8) | response[i*2];
        data = (float)bit_data;
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
    20f4:	a9000003 	ldbu	r4,0(r21)
    20f8:	88800003 	ldbu	r2,0(r17)
    20fc:	852d883a 	add	r22,r16,r20
    2100:	2008923a 	slli	r4,r4,8
    2104:	ad400084 	addi	r21,r21,2
    2108:	8c400084 	addi	r17,r17,2
    210c:	2088b03a 	or	r4,r4,r2
    2110:	213fffcc 	andi	r4,r4,65535
    2114:	2120001c 	xori	r4,r4,32768
    2118:	21200004 	addi	r4,r4,-32768
    211c:	00065980 	call	6598 <__floatsisf>
    2120:	84c7883a 	add	r3,r16,r19
    2124:	19400017 	ldw	r5,0(r3)
    2128:	1009883a 	mov	r4,r2
    212c:	84000104 	addi	r16,r16,4
    2130:	0005c840 	call	5c84 <__mulsf3>
    2134:	b0800015 	stw	r2,0(r22)
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
    2138:	84bfee1e 	bne	r16,r18,20f4 <__alt_mem_nios_system_shared_memory+0xfffc20f4>
        bit_data = ((alt_16)response[i*2+1] << 8) | response[i*2];
        data = (float)bit_data;
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
    }
}
    213c:	dfc00e17 	ldw	ra,56(sp)
    2140:	dd800d17 	ldw	r22,52(sp)
    2144:	dd400c17 	ldw	r21,48(sp)
    2148:	dd000b17 	ldw	r20,44(sp)
    214c:	dcc00a17 	ldw	r19,40(sp)
    2150:	dc800917 	ldw	r18,36(sp)
    2154:	dc400817 	ldw	r17,32(sp)
    2158:	dc000717 	ldw	r16,28(sp)
    215c:	dec00f04 	addi	sp,sp,60
    2160:	f800283a 	ret

00002164 <getMotion9>:
usage: call this functions to read and get values
returns accel, gyro and mag values
-----------------------------------------------------------------------------------------------*/

void getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
    2164:	defffb04 	addi	sp,sp,-20
    2168:	dcc00315 	stw	r19,12(sp)
    216c:	dc800215 	stw	r18,8(sp)
    2170:	2027883a 	mov	r19,r4
    2174:	2825883a 	mov	r18,r5
    2178:	dc400115 	stw	r17,4(sp)
    217c:	dc000015 	stw	r16,0(sp)
    2180:	3023883a 	mov	r17,r6
    2184:	3821883a 	mov	r16,r7
    2188:	dfc00415 	stw	ra,16(sp)
    read_all();
    218c:	0001ebc0 	call	1ebc <read_all>
    *ax = accelerometer_data[0];
    2190:	020000b4 	movhi	r8,2
    2194:	42098004 	addi	r8,r8,9728
    2198:	41000017 	ldw	r4,0(r8)
    *ay = accelerometer_data[1];
    *az = accelerometer_data[2];
    *gx = gyroscope_data[0];
    219c:	00c000b4 	movhi	r3,2
    21a0:	18c98604 	addi	r3,r3,9752
-----------------------------------------------------------------------------------------------*/

void getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
    read_all();
    *ax = accelerometer_data[0];
    21a4:	99000015 	stw	r4,0(r19)
    *ay = accelerometer_data[1];
    21a8:	41000117 	ldw	r4,4(r8)
    *az = accelerometer_data[2];
    *gx = gyroscope_data[0];
    *gy = gyroscope_data[1];
    *gz = gyroscope_data[2];
    *mx = magnetometer_data[0];
    21ac:	008000b4 	movhi	r2,2
    21b0:	10898c04 	addi	r2,r2,9776

void getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
    read_all();
    *ax = accelerometer_data[0];
    *ay = accelerometer_data[1];
    21b4:	91000015 	stw	r4,0(r18)
    *az = accelerometer_data[2];
    21b8:	41000217 	ldw	r4,8(r8)
    21bc:	89000015 	stw	r4,0(r17)
    *gx = gyroscope_data[0];
    21c0:	19000017 	ldw	r4,0(r3)
    21c4:	81000015 	stw	r4,0(r16)
    *gy = gyroscope_data[1];
    21c8:	19400117 	ldw	r5,4(r3)
    21cc:	d9000517 	ldw	r4,20(sp)
    21d0:	21400015 	stw	r5,0(r4)
    *gz = gyroscope_data[2];
    21d4:	19000217 	ldw	r4,8(r3)
    21d8:	d8c00617 	ldw	r3,24(sp)
    21dc:	19000015 	stw	r4,0(r3)
    *mx = magnetometer_data[0];
    21e0:	11000017 	ldw	r4,0(r2)
    21e4:	d8c00717 	ldw	r3,28(sp)
    21e8:	19000015 	stw	r4,0(r3)
    *my = magnetometer_data[1];
    21ec:	11000117 	ldw	r4,4(r2)
    21f0:	d8c00817 	ldw	r3,32(sp)
    21f4:	19000015 	stw	r4,0(r3)
    *mz = magnetometer_data[2];
    21f8:	10c00217 	ldw	r3,8(r2)
    21fc:	d8800917 	ldw	r2,36(sp)
    2200:	10c00015 	stw	r3,0(r2)
}
    2204:	dfc00417 	ldw	ra,16(sp)
    2208:	dcc00317 	ldw	r19,12(sp)
    220c:	dc800217 	ldw	r18,8(sp)
    2210:	dc400117 	ldw	r17,4(sp)
    2214:	dc000017 	ldw	r16,0(sp)
    2218:	dec00504 	addi	sp,sp,20
    221c:	f800283a 	ret

00002220 <getMotion6>:

//-----------------------------------------------------------------------------------------------

void getMotion6(float *ax, float *ay, float *az, float *gx, float *gy, float *gz)
{
    2220:	defffb04 	addi	sp,sp,-20
    2224:	dfc00415 	stw	ra,16(sp)
    2228:	dcc00315 	stw	r19,12(sp)
    222c:	dc800215 	stw	r18,8(sp)
    2230:	2027883a 	mov	r19,r4
    2234:	2825883a 	mov	r18,r5
    2238:	dc400115 	stw	r17,4(sp)
    223c:	dc000015 	stw	r16,0(sp)
    2240:	3023883a 	mov	r17,r6
    2244:	3821883a 	mov	r16,r7
    read_acc();
    2248:	0001b300 	call	1b30 <read_acc>
    read_gyro();
    224c:	0001c340 	call	1c34 <read_gyro>
    *ax = accelerometer_data[0];
    2250:	00c000b4 	movhi	r3,2
    2254:	18c98004 	addi	r3,r3,9728
    2258:	19000017 	ldw	r4,0(r3)
    *ay = accelerometer_data[1];
    *az = accelerometer_data[2];
    *gx = gyroscope_data[0];
    225c:	008000b4 	movhi	r2,2
    2260:	10898604 	addi	r2,r2,9752

void getMotion6(float *ax, float *ay, float *az, float *gx, float *gy, float *gz)
{
    read_acc();
    read_gyro();
    *ax = accelerometer_data[0];
    2264:	99000015 	stw	r4,0(r19)
    *ay = accelerometer_data[1];
    2268:	19000117 	ldw	r4,4(r3)
    226c:	91000015 	stw	r4,0(r18)
    *az = accelerometer_data[2];
    2270:	18c00217 	ldw	r3,8(r3)
    2274:	88c00015 	stw	r3,0(r17)
    *gx = gyroscope_data[0];
    2278:	10c00017 	ldw	r3,0(r2)
    227c:	80c00015 	stw	r3,0(r16)
    *gy = gyroscope_data[1];
    2280:	11000117 	ldw	r4,4(r2)
    2284:	d8c00517 	ldw	r3,20(sp)
    2288:	19000015 	stw	r4,0(r3)
    *gz = gyroscope_data[2];
    228c:	10c00217 	ldw	r3,8(r2)
    2290:	d8800617 	ldw	r2,24(sp)
    2294:	10c00015 	stw	r3,0(r2)
}
    2298:	dfc00417 	ldw	ra,16(sp)
    229c:	dcc00317 	ldw	r19,12(sp)
    22a0:	dc800217 	ldw	r18,8(sp)
    22a4:	dc400117 	ldw	r17,4(sp)
    22a8:	dc000017 	ldw	r16,0(sp)
    22ac:	dec00504 	addi	sp,sp,20
    22b0:	f800283a 	ret

000022b4 <RH_Temp_Init>:
void RH_Temp_Init(alt_u32 I2C_Controller_Base)
{
	const int ref_clk = 50*1000*1000; // 50Mhz
	const int i2c_clk = 400*1000; // 400KHz
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
    22b4:	018001b4 	movhi	r6,6
    22b8:	0140bef4 	movhi	r5,763

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16);
bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16);

void RH_Temp_Init(alt_u32 I2C_Controller_Base)
{
    22bc:	defffb04 	addi	sp,sp,-20
	const int ref_clk = 50*1000*1000; // 50Mhz
	const int i2c_clk = 400*1000; // 400KHz
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
    22c0:	3186a004 	addi	r6,r6,6784
    22c4:	297c2004 	addi	r5,r5,-3968

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16);
bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16);

void RH_Temp_Init(alt_u32 I2C_Controller_Base)
{
    22c8:	dfc00415 	stw	ra,16(sp)
    22cc:	dc400315 	stw	r17,12(sp)
    22d0:	dc000215 	stw	r16,8(sp)
	const int ref_clk = 50*1000*1000; // 50Mhz
	const int i2c_clk = 400*1000; // 400KHz
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
    22d4:	00002a00 	call	2a0 <oc_i2c_init_ex>
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
	szData8[1] = Data16 & 0xFF;
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    22d8:	04000084 	movi	r16,2
    22dc:	01000134 	movhi	r4,4

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    22e0:	047fe004 	movi	r17,-128
	szData8[1] = Data16 & 0xFF;
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    22e4:	21041004 	addi	r4,r4,4160
    22e8:	dc000015 	stw	r16,0(sp)
    22ec:	d9c00104 	addi	r7,sp,4
    22f0:	800d883a 	mov	r6,r16
    22f4:	01402004 	movi	r5,128

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    22f8:	dc400105 	stb	r17,4(sp)
	szData8[1] = Data16 & 0xFF;
    22fc:	d8000145 	stb	zero,5(sp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2300:	00004640 	call	464 <OC_I2C_Write>
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);

    // reset
	bool bPass;
    bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE);
    if (!bPass){
    2304:	10803fcc 	andi	r2,r2,255
    2308:	10000526 	beq	r2,zero,2320 <RH_Temp_Init+0x6c>
    }

    //th_dump_chip_info(RH_TEMP_I2C_OPENCORES_BASE);


}
    230c:	dfc00417 	ldw	ra,16(sp)
    2310:	dc400317 	ldw	r17,12(sp)
    2314:	dc000217 	ldw	r16,8(sp)
    2318:	dec00504 	addi	sp,sp,20
    231c:	f800283a 	ret
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
	szData8[1] = Data16 & 0xFF;
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2320:	01000134 	movhi	r4,4
    2324:	21041004 	addi	r4,r4,4160
    2328:	dc000015 	stw	r16,0(sp)
    232c:	d9c00104 	addi	r7,sp,4
    2330:	800d883a 	mov	r6,r16
    2334:	01402004 	movi	r5,128

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    2338:	dc400105 	stb	r17,4(sp)
	szData8[1] = Data16 & 0xFF;
    233c:	d8000145 	stb	zero,5(sp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2340:	00004640 	call	464 <OC_I2C_Write>
    // reset
	bool bPass;
    bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE);
    if (!bPass){
    	bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE); // try again
    	if (!bPass){
    2344:	10803fcc 	andi	r2,r2,255
    2348:	103ff01e 	bne	r2,zero,230c <__alt_mem_nios_system_shared_memory+0xfffc230c>
    		printf("Failed to reset!\r\n");
    234c:	010000b4 	movhi	r4,2
    2350:	2138ba04 	addi	r4,r4,-7448
    2354:	000b4c80 	call	b4c8 <puts>
    }

    //th_dump_chip_info(RH_TEMP_I2C_OPENCORES_BASE);


}
    2358:	003fec06 	br	230c <__alt_mem_nios_system_shared_memory+0xfffc230c>

0000235c <RH_Temp_Read_Device_ID>:

bool RH_Temp_Read_Device_ID(alt_u16 *pID16){
    235c:	defffb04 	addi	sp,sp,-20
    2360:	dc400315 	stw	r17,12(sp)
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
    2364:	00800084 	movi	r2,2
    //th_dump_chip_info(RH_TEMP_I2C_OPENCORES_BASE);


}

bool RH_Temp_Read_Device_ID(alt_u16 *pID16){
    2368:	2023883a 	mov	r17,r4
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
    236c:	01000134 	movhi	r4,4
    2370:	21041004 	addi	r4,r4,4160
    2374:	d8800015 	stw	r2,0(sp)
    2378:	d9c00104 	addi	r7,sp,4
    237c:	01803fc4 	movi	r6,255
    2380:	01402004 	movi	r5,128
    //th_dump_chip_info(RH_TEMP_I2C_OPENCORES_BASE);


}

bool RH_Temp_Read_Device_ID(alt_u16 *pID16){
    2384:	dc000215 	stw	r16,8(sp)
    2388:	dfc00415 	stw	ra,16(sp)
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
    238c:	00005e80 	call	5e8 <OC_I2C_Read>
    2390:	1021883a 	mov	r16,r2
	if (bPass){
    2394:	10803fcc 	andi	r2,r2,255
    2398:	10000926 	beq	r2,zero,23c0 <RH_Temp_Read_Device_ID+0x64>
		*pID16 = (szData8[0] << 8) | szData8[1];
    239c:	d9400103 	ldbu	r5,4(sp)
    23a0:	d8800143 	ldbu	r2,5(sp)
		printf("Device ID=%04xh\r\n", *pID16);
    23a4:	010000b4 	movhi	r4,2
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
	if (bPass){
		*pID16 = (szData8[0] << 8) | szData8[1];
    23a8:	280a923a 	slli	r5,r5,8
		printf("Device ID=%04xh\r\n", *pID16);
    23ac:	2138bf04 	addi	r4,r4,-7428
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
	if (bPass){
		*pID16 = (szData8[0] << 8) | szData8[1];
    23b0:	288ab03a 	or	r5,r5,r2
    23b4:	8940000d 	sth	r5,0(r17)
		printf("Device ID=%04xh\r\n", *pID16);
    23b8:	297fffcc 	andi	r5,r5,65535
    23bc:	000b3ac0 	call	b3ac <printf>
	}
	return bPass;


}
    23c0:	8005883a 	mov	r2,r16
    23c4:	dfc00417 	ldw	ra,16(sp)
    23c8:	dc400317 	ldw	r17,12(sp)
    23cc:	dc000217 	ldw	r16,8(sp)
    23d0:	dec00504 	addi	sp,sp,20
    23d4:	f800283a 	ret

000023d8 <Write_Configuration>:

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    23d8:	2940004c 	andi	r5,r5,1
    23dc:	318000cc 	andi	r6,r6,3
    23e0:	280492ba 	slli	r2,r5,10
    23e4:	300c923a 	slli	r6,r6,8
    23e8:	2100004c 	andi	r4,r4,1
    23ec:	2006933a 	slli	r3,r4,12
    23f0:	1185883a 	add	r2,r2,r6
}



bool Write_Configuration(alt_u8 acquisition_mode , alt_u8 temp_resolution,alt_u8 humidity_resolution)
{
    23f4:	defffc04 	addi	sp,sp,-16

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    23f8:	10c5883a 	add	r2,r2,r3
    23fc:	1004d23a 	srli	r2,r2,8
	szData8[1] = Data16 & 0xFF;
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2400:	01800084 	movi	r6,2
    2404:	01000134 	movhi	r4,4
    2408:	21041004 	addi	r4,r4,4160
    240c:	d9800015 	stw	r6,0(sp)
    2410:	d9c00104 	addi	r7,sp,4
    2414:	01402004 	movi	r5,128
}



bool Write_Configuration(alt_u8 acquisition_mode , alt_u8 temp_resolution,alt_u8 humidity_resolution)
{
    2418:	dc000215 	stw	r16,8(sp)
    241c:	dfc00315 	stw	ra,12(sp)

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    2420:	d8800105 	stb	r2,4(sp)
	szData8[1] = Data16 & 0xFF;
    2424:	d8000145 	stb	zero,5(sp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2428:	00004640 	call	464 <OC_I2C_Write>
    242c:	1021883a 	mov	r16,r2

	//printf("Write Configure Register: %04xh\r\n", Data16);

	bPass = th_write_register(R_CONFIGURATION, Data16);

	if (bPass)
    2430:	10803fcc 	andi	r2,r2,255
    2434:	10000226 	beq	r2,zero,2440 <Write_Configuration+0x68>
		usleep(20*1000); // wait ready
    2438:	01138804 	movi	r4,20000
    243c:	001b9f40 	call	1b9f4 <usleep>

	return bPass;
}
    2440:	8005883a 	mov	r2,r16
    2444:	dfc00317 	ldw	ra,12(sp)
    2448:	dc000217 	ldw	r16,8(sp)
    244c:	dec00404 	addi	sp,sp,16
    2450:	f800283a 	ret

00002454 <RH_Temp_Sensor_Init>:


    //Temperature and Humidity are acquired in sequence, Temperature first.
    //Temperature Measurement Resolution: 14 bits
    //Humidity Measurement Resolution: 14 bits
	bPass =  Write_Configuration(1,0,0);
    2454:	000d883a 	mov	r6,zero
    2458:	000b883a 	mov	r5,zero
    245c:	01000044 	movi	r4,1
    2460:	00023d81 	jmpi	23d8 <Write_Configuration>

00002464 <th_Read_Measure_Data>:
	return bPass;
}


bool th_Read_Measure_Data(int nRegisterNo, alt_u8 *pData8, int nReadLength)
{
    2464:	defffa04 	addi	sp,sp,-24
    2468:	dd000415 	stw	r20,16(sp)
    246c:	3029883a 	mov	r20,r6
	bool bPass;
	const bool bSTOP = TRUE; // need stop so the ready pin can assert when measure is done

	// write address
	bPass = OC_I2C_Write_Addr(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR,nRegisterNo, bSTOP);
    2470:	21803fcc 	andi	r6,r4,255
    2474:	01000134 	movhi	r4,4
	return bPass;
}


bool th_Read_Measure_Data(int nRegisterNo, alt_u8 *pData8, int nReadLength)
{
    2478:	dcc00315 	stw	r19,12(sp)
	bool bPass;
	const bool bSTOP = TRUE; // need stop so the ready pin can assert when measure is done

	// write address
	bPass = OC_I2C_Write_Addr(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR,nRegisterNo, bSTOP);
    247c:	21041004 	addi	r4,r4,4160
	return bPass;
}


bool th_Read_Measure_Data(int nRegisterNo, alt_u8 *pData8, int nReadLength)
{
    2480:	2827883a 	mov	r19,r5
	bool bPass;
	const bool bSTOP = TRUE; // need stop so the ready pin can assert when measure is done

	// write address
	bPass = OC_I2C_Write_Addr(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR,nRegisterNo, bSTOP);
    2484:	01c00044 	movi	r7,1
    2488:	01402004 	movi	r5,128
	return bPass;
}


bool th_Read_Measure_Data(int nRegisterNo, alt_u8 *pData8, int nReadLength)
{
    248c:	dfc00515 	stw	ra,20(sp)
    2490:	dc800215 	stw	r18,8(sp)
    2494:	dc400115 	stw	r17,4(sp)
    2498:	dc000015 	stw	r16,0(sp)
	bool bPass;
	const bool bSTOP = TRUE; // need stop so the ready pin can assert when measure is done

	// write address
	bPass = OC_I2C_Write_Addr(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR,nRegisterNo, bSTOP);
    249c:	00007b00 	call	7b0 <OC_I2C_Write_Addr>

	// check hardware pin DRDYn to make sure measure is done
	if (bPass){ // check ready hardware pin - DRDYn
    24a0:	10c03fcc 	andi	r3,r2,255
    24a4:	18001d26 	beq	r3,zero,251c <th_Read_Measure_Data+0xb8>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    24a8:	d4a71717 	ldw	r18,-25508(gp)

		bPass = false;
		TimeStart = alt_nticks();
		bTimeout = false;
		while(!bPass && !bTimeout){
			if ((IORD(RH_TEMP_DRDY_N_BASE, 0x00) & 0x01) == 0x00)
    24ac:	04400134 	movhi	r17,4
    24b0:	8c443404 	addi	r17,r17,4304
    24b4:	88800037 	ldwio	r2,0(r17)
		alt_u32 TimeStart;

		bPass = false;
		TimeStart = alt_nticks();
		bTimeout = false;
		while(!bPass && !bTimeout){
    24b8:	01400284 	movi	r5,10
			if ((IORD(RH_TEMP_DRDY_N_BASE, 0x00) & 0x01) == 0x00)
    24bc:	1080004c 	andi	r2,r2,1
    24c0:	10000d1e 	bne	r2,zero,24f8 <th_Read_Measure_Data+0x94>
		bPass = TRUE;
	}

	// read measured data
	if (bPass){
		bPass =  OC_I2C_Read_Continue(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR, pData8, nReadLength);
    24c4:	01000134 	movhi	r4,4
    24c8:	21041004 	addi	r4,r4,4160
    24cc:	a00f883a 	mov	r7,r20
    24d0:	980d883a 	mov	r6,r19
    24d4:	01402004 	movi	r5,128
	}



	return bPass;
}
    24d8:	dfc00517 	ldw	ra,20(sp)
    24dc:	dd000417 	ldw	r20,16(sp)
    24e0:	dcc00317 	ldw	r19,12(sp)
    24e4:	dc800217 	ldw	r18,8(sp)
    24e8:	dc400117 	ldw	r17,4(sp)
    24ec:	dc000017 	ldw	r16,0(sp)
    24f0:	dec00604 	addi	sp,sp,24
		bPass = TRUE;
	}

	// read measured data
	if (bPass){
		bPass =  OC_I2C_Read_Continue(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR, pData8, nReadLength);
    24f4:	00008ac1 	jmpi	8ac <OC_I2C_Read_Continue>
    24f8:	d4271717 	ldw	r16,-25508(gp)
		alt_u32 TimeStart;

		bPass = false;
		TimeStart = alt_nticks();
		bTimeout = false;
		while(!bPass && !bTimeout){
    24fc:	d1271617 	ldw	r4,-25512(gp)
    2500:	84a1c83a 	sub	r16,r16,r18
    2504:	000509c0 	call	509c <__udivsi3>
    2508:	143fea2e 	bgeu	r2,r16,24b4 <__alt_mem_nios_system_shared_memory+0xfffc24b4>
				bPass = TRUE;
			else if ((alt_nticks() - TimeStart) > alt_ticks_per_second()/10) // 0.1 second for timeout
				bTimeout = TRUE;
		}
		if (!bPass)
			printf("Warning: DRDYn pin not ready (high)!\r\n");
    250c:	010000b4 	movhi	r4,2
    2510:	2138c404 	addi	r4,r4,-7408
    2514:	000b4c80 	call	b4c8 <puts>
    2518:	003fea06 	br	24c4 <__alt_mem_nios_system_shared_memory+0xfffc24c4>
	}



	return bPass;
}
    251c:	dfc00517 	ldw	ra,20(sp)
    2520:	dd000417 	ldw	r20,16(sp)
    2524:	dcc00317 	ldw	r19,12(sp)
    2528:	dc800217 	ldw	r18,8(sp)
    252c:	dc400117 	ldw	r17,4(sp)
    2530:	dc000017 	ldw	r16,0(sp)
    2534:	dec00604 	addi	sp,sp,24
    2538:	f800283a 	ret

0000253c <RH_Temp_Sensor_Read>:

    return bPass;

}

bool RH_Temp_Sensor_Read(float *fTemperature, float *fHumidity){
    253c:	defffb04 	addi	sp,sp,-20
    2540:	dc800315 	stw	r18,12(sp)
    2544:	dc400215 	stw	r17,8(sp)
    2548:	2025883a 	mov	r18,r4
    254c:	2823883a 	mov	r17,r5
	bool bPass;
	alt_u8 szValue8[4];
	alt_u16 Value16;
	//int i;

	bPass =  th_Read_Measure_Data(R_TEMPERATURE, szValue8, sizeof(szValue8));
    2550:	01800104 	movi	r6,4
    2554:	d80b883a 	mov	r5,sp
    2558:	0009883a 	mov	r4,zero

    return bPass;

}

bool RH_Temp_Sensor_Read(float *fTemperature, float *fHumidity){
    255c:	dc000115 	stw	r16,4(sp)
    2560:	dfc00415 	stw	ra,16(sp)
	bool bPass;
	alt_u8 szValue8[4];
	alt_u16 Value16;
	//int i;

	bPass =  th_Read_Measure_Data(R_TEMPERATURE, szValue8, sizeof(szValue8));
    2564:	00024640 	call	2464 <th_Read_Measure_Data>
    2568:	1021883a 	mov	r16,r2
	if (bPass){
    256c:	10803fcc 	andi	r2,r2,255
    2570:	10002326 	beq	r2,zero,2600 <RH_Temp_Sensor_Read+0xc4>
		//for(i=0;i<4;i++)
		//	printf("%02XH ", szValue8[i]);

		// temperature
		Value16 = (szValue8[0] << 8) | szValue8[1];
		*fTemperature = (float)Value16/397.188 -40.0;
    2574:	d8800003 	ldbu	r2,0(sp)
    2578:	d9000043 	ldbu	r4,1(sp)
    257c:	1004923a 	slli	r2,r2,8
    2580:	1108b03a 	or	r4,r2,r4
    2584:	00066bc0 	call	66bc <__floatunsisf>
    2588:	1009883a 	mov	r4,r2
    258c:	0008ec40 	call	8ec4 <__extendsfdf2>
    2590:	018312b4 	movhi	r6,3146
    2594:	01d01e74 	movhi	r7,16505
    2598:	31ae9784 	addi	r6,r6,-17826
    259c:	39f4c084 	addi	r7,r7,-11518
    25a0:	1009883a 	mov	r4,r2
    25a4:	180b883a 	mov	r5,r3
    25a8:	00070580 	call	7058 <__divdf3>
    25ac:	000d883a 	mov	r6,zero
    25b0:	01d01134 	movhi	r7,16452
    25b4:	1009883a 	mov	r4,r2
    25b8:	180b883a 	mov	r5,r3
    25bc:	00084ec0 	call	84ec <__subdf3>
    25c0:	180b883a 	mov	r5,r3
    25c4:	1009883a 	mov	r4,r2
    25c8:	0008fd40 	call	8fd4 <__truncdfsf2>

		// humidity
		Value16 = (szValue8[2] << 8) | szValue8[3];
		*fHumidity = (float)((float)Value16/65536)*100;
    25cc:	d8c00083 	ldbu	r3,2(sp)
    25d0:	d90000c3 	ldbu	r4,3(sp)
		//for(i=0;i<4;i++)
		//	printf("%02XH ", szValue8[i]);

		// temperature
		Value16 = (szValue8[0] << 8) | szValue8[1];
		*fTemperature = (float)Value16/397.188 -40.0;
    25d4:	90800015 	stw	r2,0(r18)

		// humidity
		Value16 = (szValue8[2] << 8) | szValue8[3];
		*fHumidity = (float)((float)Value16/65536)*100;
    25d8:	1806923a 	slli	r3,r3,8
    25dc:	1908b03a 	or	r4,r3,r4
    25e0:	00066bc0 	call	66bc <__floatunsisf>
    25e4:	014de034 	movhi	r5,14208
    25e8:	1009883a 	mov	r4,r2
    25ec:	0005c840 	call	5c84 <__mulsf3>
    25f0:	0150b234 	movhi	r5,17096
    25f4:	1009883a 	mov	r4,r2
    25f8:	0005c840 	call	5c84 <__mulsf3>
    25fc:	88800015 	stw	r2,0(r17)
	}

	return bPass;

}
    2600:	8005883a 	mov	r2,r16
    2604:	dfc00417 	ldw	ra,16(sp)
    2608:	dc800317 	ldw	r18,12(sp)
    260c:	dc400217 	ldw	r17,8(sp)
    2610:	dc000117 	ldw	r16,4(sp)
    2614:	dec00504 	addi	sp,sp,20
    2618:	f800283a 	ret

0000261c <th_reset>:

	return bPass;
}


bool th_reset(alt_u32 I2C_Controller_Base){
    261c:	defffd04 	addi	sp,sp,-12
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
	szData8[1] = Data16 & 0xFF;
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2620:	01800084 	movi	r6,2
    2624:	01000134 	movhi	r4,4
    2628:	21041004 	addi	r4,r4,4160
    262c:	d9800015 	stw	r6,0(sp)
    2630:	d9c00104 	addi	r7,sp,4
    2634:	01402004 	movi	r5,128

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    2638:	00bfe004 	movi	r2,-128

	return bPass;
}


bool th_reset(alt_u32 I2C_Controller_Base){
    263c:	dfc00215 	stw	ra,8(sp)

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    2640:	d8800105 	stb	r2,4(sp)
	szData8[1] = Data16 & 0xFF;
    2644:	d8000145 	stb	zero,5(sp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2648:	00004640 	call	464 <OC_I2C_Write>
bool th_reset(alt_u32 I2C_Controller_Base){
	bool bPass;

	bPass = th_write_register(R_CONFIGURATION, 0x8000);
	return bPass;
}
    264c:	dfc00217 	ldw	ra,8(sp)
    2650:	dec00304 	addi	sp,sp,12
    2654:	f800283a 	ret

00002658 <th_write_register>:

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    2658:	2806d23a 	srli	r3,r5,8

	return bPass;
}


bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
    265c:	defffd04 	addi	sp,sp,-12
    2660:	2805883a 	mov	r2,r5
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
	szData8[1] = Data16 & 0xFF;
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    2664:	21803fcc 	andi	r6,r4,255
    2668:	01400084 	movi	r5,2
    266c:	01000134 	movhi	r4,4
    2670:	d9400015 	stw	r5,0(sp)
    2674:	21041004 	addi	r4,r4,4160
    2678:	d9c00104 	addi	r7,sp,4
    267c:	01402004 	movi	r5,128

	return bPass;
}


bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
    2680:	dfc00215 	stw	ra,8(sp)
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
    2684:	d8c00105 	stb	r3,4(sp)
	szData8[1] = Data16 & 0xFF;
    2688:	d8800145 	stb	r2,5(sp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    268c:	00004640 	call	464 <OC_I2C_Write>

	return bPass;

}
    2690:	dfc00217 	ldw	ra,8(sp)
    2694:	dec00304 	addi	sp,sp,12
    2698:	f800283a 	ret

0000269c <th_read_register>:


bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16){
    269c:	defffc04 	addi	sp,sp,-16
	bool bPass;
	alt_u8 szData8[2];

	bPass = OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    26a0:	21803fcc 	andi	r6,r4,255
    26a4:	00800084 	movi	r2,2
    26a8:	01000134 	movhi	r4,4
	return bPass;

}


bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16){
    26ac:	dc000215 	stw	r16,8(sp)
	bool bPass;
	alt_u8 szData8[2];

	bPass = OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    26b0:	21041004 	addi	r4,r4,4160
	return bPass;

}


bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16){
    26b4:	2821883a 	mov	r16,r5
	bool bPass;
	alt_u8 szData8[2];

	bPass = OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    26b8:	d8800015 	stw	r2,0(sp)
    26bc:	d9c00104 	addi	r7,sp,4
    26c0:	01402004 	movi	r5,128
	return bPass;

}


bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16){
    26c4:	dfc00315 	stw	ra,12(sp)
	bool bPass;
	alt_u8 szData8[2];

	bPass = OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
    26c8:	00005e80 	call	5e8 <OC_I2C_Read>
	if (bPass){
    26cc:	10c03fcc 	andi	r3,r2,255
    26d0:	18000526 	beq	r3,zero,26e8 <th_read_register+0x4c>
		*pData16 = (szData8[0] << 8) | szData8[1];
    26d4:	d8c00103 	ldbu	r3,4(sp)
    26d8:	d9000143 	ldbu	r4,5(sp)
    26dc:	1806923a 	slli	r3,r3,8
    26e0:	1906b03a 	or	r3,r3,r4
    26e4:	80c0000d 	sth	r3,0(r16)
	}

	return bPass;


}
    26e8:	dfc00317 	ldw	ra,12(sp)
    26ec:	dc000217 	ldw	r16,8(sp)
    26f0:	dec00404 	addi	sp,sp,16
    26f4:	f800283a 	ret

000026f8 <Read_Configuration>:
}



bool Read_Configuration(void)
{
    26f8:	defffd04 	addi	sp,sp,-12
	bool bPass;
	alt_u16 data;

	bPass = th_read_register(R_CONFIGURATION, &data);
    26fc:	d80b883a 	mov	r5,sp
    2700:	01000084 	movi	r4,2
}



bool Read_Configuration(void)
{
    2704:	dc000115 	stw	r16,4(sp)
    2708:	dfc00215 	stw	ra,8(sp)
	bool bPass;
	alt_u16 data;

	bPass = th_read_register(R_CONFIGURATION, &data);
    270c:	000269c0 	call	269c <th_read_register>
    2710:	1021883a 	mov	r16,r2


	if(bPass){
    2714:	10803fcc 	andi	r2,r2,255
    2718:	10001c26 	beq	r2,zero,278c <Read_Configuration+0x94>

		printf("Read Configuration Data = 0x%04X \r\n",data);
    271c:	d940000b 	ldhu	r5,0(sp)
    2720:	010000b4 	movhi	r4,2
    2724:	2138ce04 	addi	r4,r4,-7368
    2728:	000b3ac0 	call	b3ac <printf>

		if(((data>>12)&0x0001) == 0) printf("Acquisition mode:Temperature or Humidity is acquired.\r\n ");
    272c:	d880000b 	ldhu	r2,0(sp)
    2730:	1004d33a 	srli	r2,r2,12
    2734:	1080004c 	andi	r2,r2,1
    2738:	10001c26 	beq	r2,zero,27ac <Read_Configuration+0xb4>
		else printf("Acquisition mode:Temperature and Humidity are acquired in sequence,Temperature first.\r\n ");
    273c:	010000b4 	movhi	r4,2
    2740:	2138e604 	addi	r4,r4,-7272
    2744:	000b3ac0 	call	b3ac <printf>

		if(((data>>10)&0x0001) == 0) printf("Temperature Measurement Resolution: 14 bit.\r\n ");
    2748:	d880000b 	ldhu	r2,0(sp)
    274c:	1004d2ba 	srli	r2,r2,10
    2750:	1080004c 	andi	r2,r2,1
    2754:	10001c1e 	bne	r2,zero,27c8 <Read_Configuration+0xd0>
    2758:	010000b4 	movhi	r4,2
    275c:	2138fd04 	addi	r4,r4,-7180
    2760:	000b3ac0 	call	b3ac <printf>
    2764:	d880000b 	ldhu	r2,0(sp)
    2768:	1004d23a 	srli	r2,r2,8
		else  printf("Temperature Measurement Resolution: 11 bit.\r\n ");

		if(((data>> 8)&0x0003) == 0) printf("Humidity Measurement Resolution: 14 bit.\r\n ");
    276c:	108000cc 	andi	r2,r2,3
    2770:	10001c26 	beq	r2,zero,27e4 <Read_Configuration+0xec>
		else if(((data>> 8)&0x0003) == 1) printf("Humidity Measurement Resolution: 11 bit.\r\n ");
    2774:	00c00044 	movi	r3,1
    2778:	10c01e26 	beq	r2,r3,27f4 <Read_Configuration+0xfc>
		else  printf("Humidity Measurement Resolution: 8 bit.\r\n ");
    277c:	010000b4 	movhi	r4,2
    2780:	21392b04 	addi	r4,r4,-6996
    2784:	000b3ac0 	call	b3ac <printf>
    2788:	00000306 	br	2798 <Read_Configuration+0xa0>

	}else{
		printf("Failed to read configure data.\r\n");
    278c:	010000b4 	movhi	r4,2
    2790:	21393604 	addi	r4,r4,-6952
    2794:	000b4c80 	call	b4c8 <puts>
	}

	return bPass;
}
    2798:	8005883a 	mov	r2,r16
    279c:	dfc00217 	ldw	ra,8(sp)
    27a0:	dc000117 	ldw	r16,4(sp)
    27a4:	dec00304 	addi	sp,sp,12
    27a8:	f800283a 	ret

	if(bPass){

		printf("Read Configuration Data = 0x%04X \r\n",data);

		if(((data>>12)&0x0001) == 0) printf("Acquisition mode:Temperature or Humidity is acquired.\r\n ");
    27ac:	010000b4 	movhi	r4,2
    27b0:	2138d704 	addi	r4,r4,-7332
    27b4:	000b3ac0 	call	b3ac <printf>
		else printf("Acquisition mode:Temperature and Humidity are acquired in sequence,Temperature first.\r\n ");

		if(((data>>10)&0x0001) == 0) printf("Temperature Measurement Resolution: 14 bit.\r\n ");
    27b8:	d880000b 	ldhu	r2,0(sp)
    27bc:	1004d2ba 	srli	r2,r2,10
    27c0:	1080004c 	andi	r2,r2,1
    27c4:	103fe426 	beq	r2,zero,2758 <__alt_mem_nios_system_shared_memory+0xfffc2758>
		else  printf("Temperature Measurement Resolution: 11 bit.\r\n ");
    27c8:	010000b4 	movhi	r4,2
    27cc:	21390904 	addi	r4,r4,-7132
    27d0:	000b3ac0 	call	b3ac <printf>
    27d4:	d880000b 	ldhu	r2,0(sp)
    27d8:	1004d23a 	srli	r2,r2,8

		if(((data>> 8)&0x0003) == 0) printf("Humidity Measurement Resolution: 14 bit.\r\n ");
    27dc:	108000cc 	andi	r2,r2,3
    27e0:	103fe41e 	bne	r2,zero,2774 <__alt_mem_nios_system_shared_memory+0xfffc2774>
    27e4:	010000b4 	movhi	r4,2
    27e8:	21391504 	addi	r4,r4,-7084
    27ec:	000b3ac0 	call	b3ac <printf>
    27f0:	003fe906 	br	2798 <__alt_mem_nios_system_shared_memory+0xfffc2798>
		else if(((data>> 8)&0x0003) == 1) printf("Humidity Measurement Resolution: 11 bit.\r\n ");
    27f4:	010000b4 	movhi	r4,2
    27f8:	21392004 	addi	r4,r4,-7040
    27fc:	000b3ac0 	call	b3ac <printf>
    2800:	003fe506 	br	2798 <__alt_mem_nios_system_shared_memory+0xfffc2798>

00002804 <th_dump_chip_info>:
	bPass = th_write_register(R_CONFIGURATION, 0x8000);
	return bPass;
}


bool th_dump_chip_info(alt_u32 I2C_Controller_Base){
    2804:	defffd04 	addi	sp,sp,-12
	alt_u16 Data16;
	bool bPass;

	// R_DEVICE_ID
	bPass = th_read_register(R_DEVICE_ID, &Data16);
    2808:	d80b883a 	mov	r5,sp
    280c:	01003fc4 	movi	r4,255
	bPass = th_write_register(R_CONFIGURATION, 0x8000);
	return bPass;
}


bool th_dump_chip_info(alt_u32 I2C_Controller_Base){
    2810:	dfc00215 	stw	ra,8(sp)
    2814:	dc000115 	stw	r16,4(sp)
	alt_u16 Data16;
	bool bPass;

	// R_DEVICE_ID
	bPass = th_read_register(R_DEVICE_ID, &Data16);
    2818:	000269c0 	call	269c <th_read_register>
	if (bPass){
    281c:	10803fcc 	andi	r2,r2,255
    2820:	10001b26 	beq	r2,zero,2890 <th_dump_chip_info+0x8c>
		printf("DEVICE ID=%04xh(0x1000 expected)\r\n", Data16);
    2824:	d940000b 	ldhu	r5,0(sp)
    2828:	010000b4 	movhi	r4,2
    282c:	21393e04 	addi	r4,r4,-6920
    2830:	000b3ac0 	call	b3ac <printf>
	}else{
		printf("Failed to read DEVICE ID\r\n");
	}

	// R_DEVICE_ID
	bPass = th_read_register(R_MANUFACTURER_ID, &Data16);
    2834:	d80b883a 	mov	r5,sp
    2838:	01003f84 	movi	r4,254
    283c:	000269c0 	call	269c <th_read_register>
	if (bPass){
    2840:	10803fcc 	andi	r2,r2,255
    2844:	10001626 	beq	r2,zero,28a0 <th_dump_chip_info+0x9c>
		printf("MANUFACTURER ID=%04xh(0x5449 expected)\r\n", Data16);
    2848:	d940000b 	ldhu	r5,0(sp)
    284c:	010000b4 	movhi	r4,2
    2850:	21394e04 	addi	r4,r4,-6856
    2854:	000b3ac0 	call	b3ac <printf>
	}else{
		printf("Failed to read MANUFACTURER ID\r\n");
	}

	// configure Data
	bPass =  th_read_register(R_CONFIGURATION, &Data16);
    2858:	d80b883a 	mov	r5,sp
    285c:	01000084 	movi	r4,2
    2860:	000269c0 	call	269c <th_read_register>
    2864:	1021883a 	mov	r16,r2
	if (bPass){
    2868:	10803fcc 	andi	r2,r2,255
    286c:	1000101e 	bne	r2,zero,28b0 <th_dump_chip_info+0xac>
		printf("Configure Data=%04xh\r\n", Data16);
	}else{
		printf("Failed to read configure data\r\n");
    2870:	010000b4 	movhi	r4,2
    2874:	21396704 	addi	r4,r4,-6756
    2878:	000b4c80 	call	b4c8 <puts>
	}

	return bPass;
}
    287c:	8005883a 	mov	r2,r16
    2880:	dfc00217 	ldw	ra,8(sp)
    2884:	dc000117 	ldw	r16,4(sp)
    2888:	dec00304 	addi	sp,sp,12
    288c:	f800283a 	ret
	// R_DEVICE_ID
	bPass = th_read_register(R_DEVICE_ID, &Data16);
	if (bPass){
		printf("DEVICE ID=%04xh(0x1000 expected)\r\n", Data16);
	}else{
		printf("Failed to read DEVICE ID\r\n");
    2890:	010000b4 	movhi	r4,2
    2894:	21394704 	addi	r4,r4,-6884
    2898:	000b4c80 	call	b4c8 <puts>
    289c:	003fe506 	br	2834 <__alt_mem_nios_system_shared_memory+0xfffc2834>
	// R_DEVICE_ID
	bPass = th_read_register(R_MANUFACTURER_ID, &Data16);
	if (bPass){
		printf("MANUFACTURER ID=%04xh(0x5449 expected)\r\n", Data16);
	}else{
		printf("Failed to read MANUFACTURER ID\r\n");
    28a0:	010000b4 	movhi	r4,2
    28a4:	21395904 	addi	r4,r4,-6812
    28a8:	000b4c80 	call	b4c8 <puts>
    28ac:	003fea06 	br	2858 <__alt_mem_nios_system_shared_memory+0xfffc2858>
	}

	// configure Data
	bPass =  th_read_register(R_CONFIGURATION, &Data16);
	if (bPass){
		printf("Configure Data=%04xh\r\n", Data16);
    28b0:	d940000b 	ldhu	r5,0(sp)
    28b4:	010000b4 	movhi	r4,2
    28b8:	21396104 	addi	r4,r4,-6780
    28bc:	000b3ac0 	call	b3ac <printf>
    28c0:	003fee06 	br	287c <__alt_mem_nios_system_shared_memory+0xfffc287c>

000028c4 <get_gppm>:
    char str[100];
    char cmd_buffer[100];
    char buffer[1000];\
    char* pend;
    if (success) {
        sprintf(cmd_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80",
    28c4:	d1a00317 	ldw	r6,-32756(gp)

const char *get_time_request =
        "GET / HTTP/1.1\r\nHost: 192.168.1.19 \r\nConnection: close\r\n\r\n";

bool get_gppm(float *gas)
{
    28c8:	defecd04 	addi	sp,sp,-1228
    char str[100];
    char cmd_buffer[100];
    char buffer[1000];\
    char* pend;
    if (success) {
        sprintf(cmd_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80",
    28cc:	014000b4 	movhi	r5,2

const char *get_time_request =
        "GET / HTTP/1.1\r\nHost: 192.168.1.19 \r\nConnection: close\r\n\r\n";

bool get_gppm(float *gas)
{
    28d0:	dd013115 	stw	r20,1220(sp)
    char str[100];
    char cmd_buffer[100];
    char buffer[1000];\
    char* pend;
    if (success) {
        sprintf(cmd_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80",
    28d4:	29796f04 	addi	r5,r5,-6724

const char *get_time_request =
        "GET / HTTP/1.1\r\nHost: 192.168.1.19 \r\nConnection: close\r\n\r\n";

bool get_gppm(float *gas)
{
    28d8:	2029883a 	mov	r20,r4
    char str[100];
    char cmd_buffer[100];
    char buffer[1000];\
    char* pend;
    if (success) {
        sprintf(cmd_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80",
    28dc:	d900fa04 	addi	r4,sp,1000

const char *get_time_request =
        "GET / HTTP/1.1\r\nHost: 192.168.1.19 \r\nConnection: close\r\n\r\n";

bool get_gppm(float *gas)
{
    28e0:	dfc13215 	stw	ra,1224(sp)
    28e4:	dcc13015 	stw	r19,1216(sp)
    28e8:	dc812f15 	stw	r18,1212(sp)
    28ec:	dc412e15 	stw	r17,1208(sp)
    28f0:	dc012d15 	stw	r16,1204(sp)
    char str[100];
    char cmd_buffer[100];
    char buffer[1000];\
    char* pend;
    if (success) {
        sprintf(cmd_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80",
    28f4:	000b7780 	call	b778 <sprintf>
                time_server_domain);
        success = esp8266_send_command(cmd_buffer);
    28f8:	d900fa04 	addi	r4,sp,1000
    28fc:	0000df00 	call	df0 <esp8266_send_command>
    }
    if (success) {
    2900:	10803fcc 	andi	r2,r2,255
    2904:	10000a1e 	bne	r2,zero,2930 <get_gppm+0x6c>
        strcpy(str, buffer);

        *gas=strtof(str,&pend);

    } else {
    	success=false;
    2908:	0027883a 	mov	r19,zero

    }
    return success;
}
    290c:	9805883a 	mov	r2,r19
    2910:	dfc13217 	ldw	ra,1224(sp)
    2914:	dd013117 	ldw	r20,1220(sp)
    2918:	dcc13017 	ldw	r19,1216(sp)
    291c:	dc812f17 	ldw	r18,1212(sp)
    2920:	dc412e17 	ldw	r17,1208(sp)
    2924:	dc012d17 	ldw	r16,1204(sp)
    2928:	dec13304 	addi	sp,sp,1228
    292c:	f800283a 	ret
        sprintf(cmd_buffer, "AT+CIPSTART=\"TCP\",\"%s\",80",
                time_server_domain);
        success = esp8266_send_command(cmd_buffer);
    }
    if (success) {
        sprintf(cmd_buffer, "AT+CIPSEND=%d", strlen(get_time_request));
    2930:	d1200217 	ldw	r4,-32760(gp)
    2934:	000ba8c0 	call	ba8c <strlen>
    2938:	014000b4 	movhi	r5,2
    293c:	100d883a 	mov	r6,r2
    2940:	29797604 	addi	r5,r5,-6696
    2944:	d900fa04 	addi	r4,sp,1000
    2948:	000b7780 	call	b778 <sprintf>
        success = esp8266_send_command(cmd_buffer);
    294c:	d900fa04 	addi	r4,sp,1000
    2950:	0000df00 	call	df0 <esp8266_send_command>
    }
    if (success) {
    2954:	10803fcc 	andi	r2,r2,255
    2958:	103feb26 	beq	r2,zero,2908 <__alt_mem_nios_system_shared_memory+0xfffc2908>
        success = esp8266_send_data(get_time_request, strlen(get_time_request));
    295c:	d4200217 	ldw	r16,-32760(gp)
    2960:	8009883a 	mov	r4,r16
    2964:	000ba8c0 	call	ba8c <strlen>
    2968:	100b883a 	mov	r5,r2
    296c:	8009883a 	mov	r4,r16
    2970:	0000ee40 	call	ee4 <esp8266_send_data>
    2974:	1027883a 	mov	r19,r2
    }

    int length = 0;

    if (success) {
    2978:	10803fcc 	andi	r2,r2,255
    297c:	103fe226 	beq	r2,zero,2908 <__alt_mem_nios_system_shared_memory+0xfffc2908>
        while (1) {
            esp8266_gets(buffer, sizeof(buffer));
    2980:	0140fa04 	movi	r5,1000
    2984:	d809883a 	mov	r4,sp
    2988:	0000de80 	call	de8 <esp8266_gets>
            if (strstr(buffer, "+IPD") != NULL) {
    298c:	014000b4 	movhi	r5,2
    2990:	29797a04 	addi	r5,r5,-6680
    2994:	d809883a 	mov	r4,sp
    2998:	000bfd80 	call	bfd8 <strstr>
    299c:	103ff826 	beq	r2,zero,2980 <__alt_mem_nios_system_shared_memory+0xfffc2980>
                length = strlen(buffer);
    29a0:	d809883a 	mov	r4,sp
    29a4:	000ba8c0 	call	ba8c <strlen>
    29a8:	1023883a 	mov	r17,r2
                while (1) {
                    esp8266_gets(buffer + length, sizeof(buffer) - length);
    29ac:	0480fa04 	movi	r18,1000
    29b0:	00000206 	br	29bc <get_gppm+0xf8>
                    if (strcmp(buffer + length, "\r\n") == 0)
                        break;
                    length += strlen(buffer + length);
    29b4:	000ba8c0 	call	ba8c <strlen>
    29b8:	88a3883a 	add	r17,r17,r2
        while (1) {
            esp8266_gets(buffer, sizeof(buffer));
            if (strstr(buffer, "+IPD") != NULL) {
                length = strlen(buffer);
                while (1) {
                    esp8266_gets(buffer + length, sizeof(buffer) - length);
    29bc:	dc61883a 	add	r16,sp,r17
    29c0:	944bc83a 	sub	r5,r18,r17
    29c4:	8009883a 	mov	r4,r16
    29c8:	0000de80 	call	de8 <esp8266_gets>
                    if (strcmp(buffer + length, "\r\n") == 0)
    29cc:	014000b4 	movhi	r5,2
    29d0:	8009883a 	mov	r4,r16
    29d4:	297a2404 	addi	r5,r5,-6000
    29d8:	000b9200 	call	b920 <strcmp>
                        break;
                    length += strlen(buffer + length);
    29dc:	8009883a 	mov	r4,r16
            esp8266_gets(buffer, sizeof(buffer));
            if (strstr(buffer, "+IPD") != NULL) {
                length = strlen(buffer);
                while (1) {
                    esp8266_gets(buffer + length, sizeof(buffer) - length);
                    if (strcmp(buffer + length, "\r\n") == 0)
    29e0:	103ff41e 	bne	r2,zero,29b4 <__alt_mem_nios_system_shared_memory+0xfffc29b4>

                break;
            }
        }
        //printf("%d\n",length);
        esp8266_gets(buffer, 9);
    29e4:	01400244 	movi	r5,9
    29e8:	d809883a 	mov	r4,sp
    29ec:	0000de80 	call	de8 <esp8266_gets>
        //printf("time: %s\n", buffer);
    }

    if (success) {
        strcpy(str, buffer);
    29f0:	d80b883a 	mov	r5,sp
    29f4:	d9011304 	addi	r4,sp,1100
    29f8:	000b9fc0 	call	b9fc <strcpy>

        *gas=strtof(str,&pend);
    29fc:	d9412c04 	addi	r5,sp,1200
    2a00:	d9011304 	addi	r4,sp,1100
    2a04:	000d9e80 	call	d9e8 <strtof>
    2a08:	a0800015 	stw	r2,0(r20)
    2a0c:	003fbf06 	br	290c <__alt_mem_nios_system_shared_memory+0xfffc290c>

00002a10 <convert_light_lux>:
	float m[3][2];
	float gas[2];
	float spTemperature[2];
} thresh;

bool convert_light_lux(int light0, int light1, float *lux){
    2a10:	defff904 	addi	sp,sp,-28
    2a14:	dc800215 	stw	r18,8(sp)
    2a18:	2025883a 	mov	r18,r4
	float condition = (float)light1/(float)light0;
    2a1c:	2809883a 	mov	r4,r5
	float m[3][2];
	float gas[2];
	float spTemperature[2];
} thresh;

bool convert_light_lux(int light0, int light1, float *lux){
    2a20:	dfc00615 	stw	ra,24(sp)
    2a24:	dd000415 	stw	r20,16(sp)
    2a28:	dcc00315 	stw	r19,12(sp)
    2a2c:	dc000015 	stw	r16,0(sp)
    2a30:	2827883a 	mov	r19,r5
    2a34:	3029883a 	mov	r20,r6
    2a38:	dd400515 	stw	r21,20(sp)
    2a3c:	dc400115 	stw	r17,4(sp)
	float condition = (float)light1/(float)light0;
    2a40:	00065980 	call	6598 <__floatsisf>
    2a44:	9009883a 	mov	r4,r18
    2a48:	1021883a 	mov	r16,r2
    2a4c:	00065980 	call	6598 <__floatsisf>
    2a50:	8009883a 	mov	r4,r16
    2a54:	100b883a 	mov	r5,r2
    2a58:	00056480 	call	5648 <__divsf3>
	if 			(0 < condition    && condition <= 0.50) *lux = (0.0304 * light0) - (0.062 * light0 * powf(condition,1.4));
    2a5c:	000b883a 	mov	r5,zero
    2a60:	1009883a 	mov	r4,r2
	float gas[2];
	float spTemperature[2];
} thresh;

bool convert_light_lux(int light0, int light1, float *lux){
	float condition = (float)light1/(float)light0;
    2a64:	1021883a 	mov	r16,r2
	if 			(0 < condition    && condition <= 0.50) *lux = (0.0304 * light0) - (0.062 * light0 * powf(condition,1.4));
    2a68:	0005b000 	call	5b00 <__gesf2>
    2a6c:	0080040e 	bge	zero,r2,2a80 <convert_light_lux+0x70>
    2a70:	014fc034 	movhi	r5,16128
    2a74:	8009883a 	mov	r4,r16
    2a78:	0005bbc0 	call	5bbc <__lesf2>
    2a7c:	0080750e 	bge	zero,r2,2c54 <convert_light_lux+0x244>
	else if (0.50 < condition && condition <= 0.61) *lux = (0.0224 * light0) - (0.031 * light1);
    2a80:	8009883a 	mov	r4,r16
    2a84:	014fc034 	movhi	r5,16128
    2a88:	0005b000 	call	5b00 <__gesf2>
    2a8c:	8009883a 	mov	r4,r16
    2a90:	00802e16 	blt	zero,r2,2b4c <convert_light_lux+0x13c>
    2a94:	0008ec40 	call	8ec4 <__extendsfdf2>
    2a98:	1023883a 	mov	r17,r2
    2a9c:	1821883a 	mov	r16,r3
	else if (0.61 < condition && condition <= 0.80) *lux = (0.0128 * light0) - (0.0153 * light1);
    2aa0:	01ae14b4 	movhi	r6,47186
    2aa4:	01cff934 	movhi	r7,16356
    2aa8:	31bae144 	addi	r6,r6,-5243
    2aac:	39e14784 	addi	r7,r7,-31458
    2ab0:	8809883a 	mov	r4,r17
    2ab4:	800b883a 	mov	r5,r16
    2ab8:	0007ab00 	call	7ab0 <__gedf2>
    2abc:	0080080e 	bge	zero,r2,2ae0 <convert_light_lux+0xd0>
    2ac0:	01a666b4 	movhi	r6,39322
    2ac4:	01cffab4 	movhi	r7,16362
    2ac8:	31a66684 	addi	r6,r6,-26214
    2acc:	39e66644 	addi	r7,r7,-26215
    2ad0:	8809883a 	mov	r4,r17
    2ad4:	800b883a 	mov	r5,r16
    2ad8:	0007b8c0 	call	7b8c <__ledf2>
    2adc:	0080830e 	bge	zero,r2,2cec <convert_light_lux+0x2dc>
	else if (0.80 < condition && condition <= 1.30) *lux = (0.00146 * light1) - (0.00112 * light1);
    2ae0:	01a666b4 	movhi	r6,39322
    2ae4:	01cffab4 	movhi	r7,16362
    2ae8:	31a66684 	addi	r6,r6,-26214
    2aec:	39e66644 	addi	r7,r7,-26215
    2af0:	8809883a 	mov	r4,r17
    2af4:	800b883a 	mov	r5,r16
    2af8:	0007ab00 	call	7ab0 <__gedf2>
    2afc:	0080080e 	bge	zero,r2,2b20 <convert_light_lux+0x110>
    2b00:	01b33374 	movhi	r6,52429
    2b04:	01cffd74 	movhi	r7,16373
    2b08:	31b33344 	addi	r6,r6,-13107
    2b0c:	39f33304 	addi	r7,r7,-13108
    2b10:	8809883a 	mov	r4,r17
    2b14:	800b883a 	mov	r5,r16
    2b18:	0007b8c0 	call	7b8c <__ledf2>
    2b1c:	0080340e 	bge	zero,r2,2bf0 <convert_light_lux+0x1e0>
  else *lux = 0;
    2b20:	a0000015 	stw	zero,0(r20)
	return TRUE;
}
    2b24:	00800044 	movi	r2,1
    2b28:	dfc00617 	ldw	ra,24(sp)
    2b2c:	dd400517 	ldw	r21,20(sp)
    2b30:	dd000417 	ldw	r20,16(sp)
    2b34:	dcc00317 	ldw	r19,12(sp)
    2b38:	dc800217 	ldw	r18,8(sp)
    2b3c:	dc400117 	ldw	r17,4(sp)
    2b40:	dc000017 	ldw	r16,0(sp)
    2b44:	dec00704 	addi	sp,sp,28
    2b48:	f800283a 	ret
} thresh;

bool convert_light_lux(int light0, int light1, float *lux){
	float condition = (float)light1/(float)light0;
	if 			(0 < condition    && condition <= 0.50) *lux = (0.0304 * light0) - (0.062 * light0 * powf(condition,1.4));
	else if (0.50 < condition && condition <= 0.61) *lux = (0.0224 * light0) - (0.031 * light1);
    2b4c:	0008ec40 	call	8ec4 <__extendsfdf2>
    2b50:	01ae14b4 	movhi	r6,47186
    2b54:	01cff934 	movhi	r7,16356
    2b58:	31bae144 	addi	r6,r6,-5243
    2b5c:	39e14784 	addi	r7,r7,-31458
    2b60:	1009883a 	mov	r4,r2
    2b64:	180b883a 	mov	r5,r3
    2b68:	1023883a 	mov	r17,r2
    2b6c:	1821883a 	mov	r16,r3
    2b70:	0007b8c0 	call	7b8c <__ledf2>
    2b74:	00bfca16 	blt	zero,r2,2aa0 <__alt_mem_nios_system_shared_memory+0xfffc2aa0>
    2b78:	9009883a 	mov	r4,r18
    2b7c:	0008de80 	call	8de8 <__floatsidf>
    2b80:	01a36e74 	movhi	r6,36281
    2b84:	01cfe5f4 	movhi	r7,16279
    2b88:	31aeb1c4 	addi	r6,r6,-17721
    2b8c:	39fc0184 	addi	r7,r7,-4090
    2b90:	180b883a 	mov	r5,r3
    2b94:	1009883a 	mov	r4,r2
    2b98:	0007c800 	call	7c80 <__muldf3>
    2b9c:	9809883a 	mov	r4,r19
    2ba0:	1023883a 	mov	r17,r2
    2ba4:	1821883a 	mov	r16,r3
    2ba8:	0008de80 	call	8de8 <__floatsidf>
    2bac:	01b22d34 	movhi	r6,51380
    2bb0:	01cfe834 	movhi	r7,16288
    2bb4:	318e5604 	addi	r6,r6,14680
    2bb8:	39ef9d84 	addi	r7,r7,-16778
    2bbc:	1009883a 	mov	r4,r2
    2bc0:	180b883a 	mov	r5,r3
    2bc4:	0007c800 	call	7c80 <__muldf3>
    2bc8:	100d883a 	mov	r6,r2
    2bcc:	180f883a 	mov	r7,r3
    2bd0:	8809883a 	mov	r4,r17
    2bd4:	800b883a 	mov	r5,r16
    2bd8:	00084ec0 	call	84ec <__subdf3>
    2bdc:	1009883a 	mov	r4,r2
    2be0:	180b883a 	mov	r5,r3
    2be4:	0008fd40 	call	8fd4 <__truncdfsf2>
    2be8:	a0800015 	stw	r2,0(r20)
    2bec:	003fcd06 	br	2b24 <__alt_mem_nios_system_shared_memory+0xfffc2b24>
	else if (0.61 < condition && condition <= 0.80) *lux = (0.0128 * light0) - (0.0153 * light1);
	else if (0.80 < condition && condition <= 1.30) *lux = (0.00146 * light1) - (0.00112 * light1);
    2bf0:	9809883a 	mov	r4,r19
    2bf4:	0008de80 	call	8de8 <__floatsidf>
    2bf8:	018408f4 	movhi	r6,4131
    2bfc:	01cfd634 	movhi	r7,16216
    2c00:	3198ec84 	addi	r6,r6,25522
    2c04:	39faebc4 	addi	r7,r7,-5201
    2c08:	1009883a 	mov	r4,r2
    2c0c:	180b883a 	mov	r5,r3
    2c10:	1023883a 	mov	r17,r2
    2c14:	1821883a 	mov	r16,r3
    2c18:	0007c800 	call	7c80 <__muldf3>
    2c1c:	01b5f1f4 	movhi	r6,55239
    2c20:	01cfd4b4 	movhi	r7,16210
    2c24:	31bef484 	addi	r6,r6,-1070
    2c28:	39d66784 	addi	r7,r7,22942
    2c2c:	8809883a 	mov	r4,r17
    2c30:	800b883a 	mov	r5,r16
    2c34:	1027883a 	mov	r19,r2
    2c38:	1825883a 	mov	r18,r3
    2c3c:	0007c800 	call	7c80 <__muldf3>
    2c40:	100d883a 	mov	r6,r2
    2c44:	180f883a 	mov	r7,r3
    2c48:	9809883a 	mov	r4,r19
    2c4c:	900b883a 	mov	r5,r18
    2c50:	003fe106 	br	2bd8 <__alt_mem_nios_system_shared_memory+0xfffc2bd8>
	float spTemperature[2];
} thresh;

bool convert_light_lux(int light0, int light1, float *lux){
	float condition = (float)light1/(float)light0;
	if 			(0 < condition    && condition <= 0.50) *lux = (0.0304 * light0) - (0.062 * light0 * powf(condition,1.4));
    2c54:	9009883a 	mov	r4,r18
    2c58:	0008de80 	call	8de8 <__floatsidf>
    2c5c:	014fecf4 	movhi	r5,16307
    2c60:	8009883a 	mov	r4,r16
    2c64:	294cccc4 	addi	r5,r5,13107
    2c68:	1825883a 	mov	r18,r3
    2c6c:	1023883a 	mov	r17,r2
    2c70:	0003ab00 	call	3ab0 <powf>
    2c74:	019dccb4 	movhi	r6,30514
    2c78:	01cfe7f4 	movhi	r7,16287
    2c7c:	8809883a 	mov	r4,r17
    2c80:	900b883a 	mov	r5,r18
    2c84:	31a3f144 	addi	r6,r6,-28731
    2c88:	39c84b44 	addi	r7,r7,8493
    2c8c:	102b883a 	mov	r21,r2
    2c90:	0007c800 	call	7c80 <__muldf3>
    2c94:	01b22d34 	movhi	r6,51380
    2c98:	01cfec34 	movhi	r7,16304
    2c9c:	900b883a 	mov	r5,r18
    2ca0:	318e5604 	addi	r6,r6,14680
    2ca4:	39ef9d84 	addi	r7,r7,-16778
    2ca8:	8809883a 	mov	r4,r17
    2cac:	1027883a 	mov	r19,r2
    2cb0:	1821883a 	mov	r16,r3
    2cb4:	0007c800 	call	7c80 <__muldf3>
    2cb8:	a809883a 	mov	r4,r21
    2cbc:	1025883a 	mov	r18,r2
    2cc0:	1823883a 	mov	r17,r3
    2cc4:	0008ec40 	call	8ec4 <__extendsfdf2>
    2cc8:	100d883a 	mov	r6,r2
    2ccc:	180f883a 	mov	r7,r3
    2cd0:	9009883a 	mov	r4,r18
    2cd4:	880b883a 	mov	r5,r17
    2cd8:	0007c800 	call	7c80 <__muldf3>
    2cdc:	100d883a 	mov	r6,r2
    2ce0:	180f883a 	mov	r7,r3
    2ce4:	9809883a 	mov	r4,r19
    2ce8:	003fba06 	br	2bd4 <__alt_mem_nios_system_shared_memory+0xfffc2bd4>
	else if (0.50 < condition && condition <= 0.61) *lux = (0.0224 * light0) - (0.031 * light1);
	else if (0.61 < condition && condition <= 0.80) *lux = (0.0128 * light0) - (0.0153 * light1);
    2cec:	9009883a 	mov	r4,r18
    2cf0:	0008de80 	call	8de8 <__floatsidf>
    2cf4:	01bac734 	movhi	r6,60188
    2cf8:	01cfe2b4 	movhi	r7,16266
    2cfc:	3190cb44 	addi	r6,r6,17197
    2d00:	39cdb884 	addi	r7,r7,14050
    2d04:	180b883a 	mov	r5,r3
    2d08:	1009883a 	mov	r4,r2
    2d0c:	0007c800 	call	7c80 <__muldf3>
    2d10:	9809883a 	mov	r4,r19
    2d14:	1023883a 	mov	r17,r2
    2d18:	1821883a 	mov	r16,r3
    2d1c:	0008de80 	call	8de8 <__floatsidf>
    2d20:	018f4234 	movhi	r6,15624
    2d24:	01cfe3f4 	movhi	r7,16271
    2d28:	31b212c4 	addi	r6,r6,-14261
    2d2c:	39d566c4 	addi	r7,r7,21915
    2d30:	003fa206 	br	2bbc <__alt_mem_nios_system_shared_memory+0xfffc2bbc>

00002d34 <set_thresh>:
  // Light threshold
  //offst=128;
  offst = LIGHT0_SENSOR_L_THRESH>>2;

	for (int i=0; i<2 ; i++) {
		thresh.light[0][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2d34:	00800134 	movhi	r2,4
  else *lux = 0;
	return TRUE;
}


void  set_thresh( void ){
    2d38:	defffe04 	addi	sp,sp,-8
  // Light threshold
  //offst=128;
  offst = LIGHT0_SENSOR_L_THRESH>>2;

	for (int i=0; i<2 ; i++) {
		thresh.light[0][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2d3c:	10808004 	addi	r2,r2,512
  else *lux = 0;
	return TRUE;
}


void  set_thresh( void ){
    2d40:	dfc00115 	stw	ra,4(sp)
    2d44:	dc000015 	stw	r16,0(sp)
  // Light threshold
  //offst=128;
  offst = LIGHT0_SENSOR_L_THRESH>>2;

	for (int i=0; i<2 ; i++) {
		thresh.light[0][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2d48:	10800037 	ldwio	r2,0(r2)
    2d4c:	040000b4 	movhi	r16,2
    2d50:	84095604 	addi	r16,r16,9560
    2d54:	80800015 	stw	r2,0(r16)
    2d58:	00800134 	movhi	r2,4
    2d5c:	10808104 	addi	r2,r2,516
    2d60:	10800037 	ldwio	r2,0(r2)
    2d64:	80800115 	stw	r2,4(r16)
	}

  //offst=130
  offst = LIGHT1_SENSOR_L_THRESH>>2;
	for (int i=0; i<2 ; i++) {
		thresh.light[1][i] = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2d68:	00800134 	movhi	r2,4
    2d6c:	10808204 	addi	r2,r2,520
    2d70:	10800037 	ldwio	r2,0(r2)
    2d74:	80800215 	stw	r2,8(r16)
    2d78:	00800134 	movhi	r2,4
    2d7c:	10808304 	addi	r2,r2,524
    2d80:	10800037 	ldwio	r2,0(r2)
    2d84:	80800315 	stw	r2,12(r16)
	}

  //offst=132
  offst = LUX_SENSOR_L_THRESH >>2;
	for (int i=0; i<2 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2d88:	00800134 	movhi	r2,4
    2d8c:	10808404 	addi	r2,r2,528
    2d90:	10800037 	ldwio	r2,0(r2)
		thresh.lux[i] = uf.f;
    2d94:	80800415 	stw	r2,16(r16)
	}

  //offst=132
  offst = LUX_SENSOR_L_THRESH >>2;
	for (int i=0; i<2 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2d98:	00800134 	movhi	r2,4
    2d9c:	10808504 	addi	r2,r2,532
    2da0:	10800037 	ldwio	r2,0(r2)
		thresh.lux[i] = uf.f;
    2da4:	80800515 	stw	r2,20(r16)

  // Temp. HM. threshold
  //offst=134
  offst = HUMIDI_SENSOR_L_THRESH>>2;
	for (int i=0; i<2 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2da8:	00800134 	movhi	r2,4
    2dac:	10808604 	addi	r2,r2,536
    2db0:	10800037 	ldwio	r2,0(r2)
		thresh.fHumidity[i] = uf.f;
    2db4:	80800815 	stw	r2,32(r16)

  // Temp. HM. threshold
  //offst=134
  offst = HUMIDI_SENSOR_L_THRESH>>2;
	for (int i=0; i<2 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2db8:	00800134 	movhi	r2,4
    2dbc:	10808704 	addi	r2,r2,540
    2dc0:	10800037 	ldwio	r2,0(r2)
		thresh.fHumidity[i] = uf.f;
    2dc4:	80800915 	stw	r2,36(r16)
	}

  //offst=136
  offst = TEMPER_SENSOR_L_THRESH>>2;
	for (int i=0; i<2 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2dc8:	00800134 	movhi	r2,4
    2dcc:	10808804 	addi	r2,r2,544
    2dd0:	10800037 	ldwio	r2,0(r2)
		thresh.fTemperature[i] = uf.f;
    2dd4:	80800615 	stw	r2,24(r16)
	}

  //offst=136
  offst = TEMPER_SENSOR_L_THRESH>>2;
	for (int i=0; i<2 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2dd8:	00800134 	movhi	r2,4
    2ddc:	10808904 	addi	r2,r2,548
    2de0:	10800037 	ldwio	r2,0(r2)
		thresh.fTemperature[i] = uf.f;
    2de4:	80800715 	stw	r2,28(r16)
  // 9-axis threshold
  //offst=138
  offst = ACCEL_X_SENSOR_L_THRESH>>2;
  float *fp=&thresh.a[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2de8:	00800134 	movhi	r2,4
    2dec:	10808a04 	addi	r2,r2,552
    2df0:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2df4:	80800a15 	stw	r2,40(r16)
  // 9-axis threshold
  //offst=138
  offst = ACCEL_X_SENSOR_L_THRESH>>2;
  float *fp=&thresh.a[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2df8:	00800134 	movhi	r2,4
    2dfc:	10808b04 	addi	r2,r2,556
    2e00:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e04:	80800b15 	stw	r2,44(r16)
  // 9-axis threshold
  //offst=138
  offst = ACCEL_X_SENSOR_L_THRESH>>2;
  float *fp=&thresh.a[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e08:	00800134 	movhi	r2,4
    2e0c:	10808c04 	addi	r2,r2,560
    2e10:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e14:	80800c15 	stw	r2,48(r16)
  // 9-axis threshold
  //offst=138
  offst = ACCEL_X_SENSOR_L_THRESH>>2;
  float *fp=&thresh.a[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e18:	00800134 	movhi	r2,4
    2e1c:	10808d04 	addi	r2,r2,564
    2e20:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e24:	80800d15 	stw	r2,52(r16)
  // 9-axis threshold
  //offst=138
  offst = ACCEL_X_SENSOR_L_THRESH>>2;
  float *fp=&thresh.a[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e28:	00800134 	movhi	r2,4
    2e2c:	10808e04 	addi	r2,r2,568
    2e30:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e34:	80800e15 	stw	r2,56(r16)
  // 9-axis threshold
  //offst=138
  offst = ACCEL_X_SENSOR_L_THRESH>>2;
  float *fp=&thresh.a[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e38:	00800134 	movhi	r2,4
    2e3c:	10808f04 	addi	r2,r2,572
    2e40:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e44:	80800f15 	stw	r2,60(r16)
	}
  //offst=144
  offst = GYROS_X_SENSOR_L_THRESH>>2;
  fp=&thresh.g[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e48:	00800134 	movhi	r2,4
    2e4c:	10809004 	addi	r2,r2,576
    2e50:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e54:	80801015 	stw	r2,64(r16)
	}
  //offst=144
  offst = GYROS_X_SENSOR_L_THRESH>>2;
  fp=&thresh.g[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e58:	00800134 	movhi	r2,4
    2e5c:	10809104 	addi	r2,r2,580
    2e60:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e64:	80801115 	stw	r2,68(r16)
	}
  //offst=144
  offst = GYROS_X_SENSOR_L_THRESH>>2;
  fp=&thresh.g[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e68:	00800134 	movhi	r2,4
    2e6c:	10809204 	addi	r2,r2,584
    2e70:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e74:	80801215 	stw	r2,72(r16)
	}
  //offst=144
  offst = GYROS_X_SENSOR_L_THRESH>>2;
  fp=&thresh.g[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e78:	00800134 	movhi	r2,4
    2e7c:	10809304 	addi	r2,r2,588
    2e80:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e84:	80801315 	stw	r2,76(r16)
	}
  //offst=144
  offst = GYROS_X_SENSOR_L_THRESH>>2;
  fp=&thresh.g[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e88:	00800134 	movhi	r2,4
    2e8c:	10809404 	addi	r2,r2,592
    2e90:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2e94:	80801415 	stw	r2,80(r16)
	}
  //offst=144
  offst = GYROS_X_SENSOR_L_THRESH>>2;
  fp=&thresh.g[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2e98:	00800134 	movhi	r2,4
    2e9c:	10809504 	addi	r2,r2,596
    2ea0:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2ea4:	80801515 	stw	r2,84(r16)

  //offst=150
  offst = MAGNE_X_SENSOR_L_THRESH>>2;
  fp=&thresh.m[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2ea8:	00800134 	movhi	r2,4
    2eac:	10809604 	addi	r2,r2,600
    2eb0:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2eb4:	80801615 	stw	r2,88(r16)

  //offst=150
  offst = MAGNE_X_SENSOR_L_THRESH>>2;
  fp=&thresh.m[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2eb8:	00800134 	movhi	r2,4
    2ebc:	10809704 	addi	r2,r2,604
    2ec0:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2ec4:	80801715 	stw	r2,92(r16)

  //offst=150
  offst = MAGNE_X_SENSOR_L_THRESH>>2;
  fp=&thresh.m[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2ec8:	00800134 	movhi	r2,4
    2ecc:	10809804 	addi	r2,r2,608
    2ed0:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2ed4:	80801815 	stw	r2,96(r16)

  //offst=150
  offst = MAGNE_X_SENSOR_L_THRESH>>2;
  fp=&thresh.m[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2ed8:	00800134 	movhi	r2,4
    2edc:	10809904 	addi	r2,r2,612
    2ee0:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2ee4:	80801915 	stw	r2,100(r16)

  //offst=150
  offst = MAGNE_X_SENSOR_L_THRESH>>2;
  fp=&thresh.m[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2ee8:	00800134 	movhi	r2,4
    2eec:	10809a04 	addi	r2,r2,616
    2ef0:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2ef4:	80801a15 	stw	r2,104(r16)

  //offst=150
  offst = MAGNE_X_SENSOR_L_THRESH>>2;
  fp=&thresh.m[0][0];
	for (int i=0; i<6 ; i++) {
		uf.u = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2ef8:	00800134 	movhi	r2,4
    2efc:	10809b04 	addi	r2,r2,620
    2f00:	10800037 	ldwio	r2,0(r2)
		*fp++ = uf.f;
    2f04:	80801b15 	stw	r2,108(r16)

  //offst=156
  offst= GAS_CN0395_SENSOR_L_THRESH>>2;
  for (int i=0; i<2 ; i++) {
  		uf.f = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
  		thresh.gas[i] = uf.f;
    2f08:	00800134 	movhi	r2,4
    2f0c:	10809c04 	addi	r2,r2,624
    2f10:	11000037 	ldwio	r4,0(r2)
    2f14:	00065980 	call	6598 <__floatsisf>
    2f18:	80801c15 	stw	r2,112(r16)
    2f1c:	00800134 	movhi	r2,4
    2f20:	10809d04 	addi	r2,r2,628
    2f24:	11000037 	ldwio	r4,0(r2)
    2f28:	00065980 	call	6598 <__floatsisf>
    2f2c:	80801d15 	stw	r2,116(r16)

  //offst=162
  offst= SETPOINT_TEMPERATURE_TRESH>>2;
  for (int i=0; i<2 ; i++) {
  		uf.f = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
  		thresh.spTemperature[i] = uf.f;
    2f30:	00800134 	movhi	r2,4
    2f34:	10809e04 	addi	r2,r2,632
    2f38:	11000037 	ldwio	r4,0(r2)
    2f3c:	00065980 	call	6598 <__floatsisf>
    2f40:	80801e15 	stw	r2,120(r16)
    2f44:	00800134 	movhi	r2,4
    2f48:	10809f04 	addi	r2,r2,636
    2f4c:	11000037 	ldwio	r4,0(r2)
    2f50:	00065980 	call	6598 <__floatsisf>
    2f54:	80801f15 	stw	r2,124(r16)
  		//2000+156,2000+157
  	}
  sp_themperature_out = IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++);
    2f58:	00800134 	movhi	r2,4
    2f5c:	1080a004 	addi	r2,r2,640
    2f60:	10800037 	ldwio	r2,0(r2)
    2f64:	d0a70b15 	stw	r2,-25556(gp)
}
    2f68:	dfc00117 	ldw	ra,4(sp)
    2f6c:	dc000017 	ldw	r16,0(sp)
    2f70:	dec00204 	addi	sp,sp,8
    2f74:	f800283a 	ret

00002f78 <check_light_threshold>:


#define is_OutOfRange(a,THptr) ( ((a) < ((THptr)[0])) || ((a)>(((THptr)[1]))) )
#define SET_OUT_OF_RANGE_LED(v)  IOWR(NIOS_SYSTEM_LED_PIO_BASE, 0, (v) )

bool check_light_threshold(int light0, int light1,float lux){
    2f78:	defffd04 	addi	sp,sp,-12
    2f7c:	dc400115 	stw	r17,4(sp)
	bool rv=false;
	if (
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
    2f80:	044000b4 	movhi	r17,2
    2f84:	8c495604 	addi	r17,r17,9560
#define is_OutOfRange(a,THptr) ( ((a) < ((THptr)[0])) || ((a)>(((THptr)[1]))) )
#define SET_OUT_OF_RANGE_LED(v)  IOWR(NIOS_SYSTEM_LED_PIO_BASE, 0, (v) )

bool check_light_threshold(int light0, int light1,float lux){
	bool rv=false;
	if (
    2f88:	89000417 	ldw	r4,16(r17)
    2f8c:	300b883a 	mov	r5,r6


#define is_OutOfRange(a,THptr) ( ((a) < ((THptr)[0])) || ((a)>(((THptr)[1]))) )
#define SET_OUT_OF_RANGE_LED(v)  IOWR(NIOS_SYSTEM_LED_PIO_BASE, 0, (v) )

bool check_light_threshold(int light0, int light1,float lux){
    2f90:	dc000015 	stw	r16,0(sp)
    2f94:	dfc00215 	stw	ra,8(sp)
    2f98:	3021883a 	mov	r16,r6
	bool rv=false;
	if (
    2f9c:	0005b000 	call	5b00 <__gesf2>
    2fa0:	00800b16 	blt	zero,r2,2fd0 <check_light_threshold+0x58>
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
    2fa4:	89400517 	ldw	r5,20(r17)
    2fa8:	8009883a 	mov	r4,r16
    2fac:	04000044 	movi	r16,1
    2fb0:	0005b000 	call	5b00 <__gesf2>
    2fb4:	0080080e 	bge	zero,r2,2fd8 <check_light_threshold+0x60>
		rv = true;
	}
	return rv;
}
    2fb8:	8005883a 	mov	r2,r16
    2fbc:	dfc00217 	ldw	ra,8(sp)
    2fc0:	dc400117 	ldw	r17,4(sp)
    2fc4:	dc000017 	ldw	r16,0(sp)
    2fc8:	dec00304 	addi	sp,sp,12
    2fcc:	f800283a 	ret

bool check_light_threshold(int light0, int light1,float lux){
	bool rv=false;
	if (
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
		rv = true;
    2fd0:	04000044 	movi	r16,1
    2fd4:	003ff806 	br	2fb8 <__alt_mem_nios_system_shared_memory+0xfffc2fb8>
#define SET_OUT_OF_RANGE_LED(v)  IOWR(NIOS_SYSTEM_LED_PIO_BASE, 0, (v) )

bool check_light_threshold(int light0, int light1,float lux){
	bool rv=false;
	if (
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
    2fd8:	0021883a 	mov	r16,zero
    2fdc:	003ff606 	br	2fb8 <__alt_mem_nios_system_shared_memory+0xfffc2fb8>

00002fe0 <check_temp_hm_threshold>:
		rv = true;
	}
	return rv;
}
bool check_temp_hm_threshold(float temp, float hm){
    2fe0:	defffc04 	addi	sp,sp,-16
    2fe4:	dc000015 	stw	r16,0(sp)
	bool rv=false;
	if ( is_OutOfRange(temp, &thresh.fTemperature[0] ) ||
    2fe8:	040000b4 	movhi	r16,2
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
		rv = true;
	}
	return rv;
}
bool check_temp_hm_threshold(float temp, float hm){
    2fec:	dc800215 	stw	r18,8(sp)
    2ff0:	dc400115 	stw	r17,4(sp)
    2ff4:	dfc00315 	stw	ra,12(sp)
	bool rv=false;
	if ( is_OutOfRange(temp, &thresh.fTemperature[0] ) ||
    2ff8:	84095604 	addi	r16,r16,9560
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
		rv = true;
	}
	return rv;
}
bool check_temp_hm_threshold(float temp, float hm){
    2ffc:	2023883a 	mov	r17,r4
	bool rv=false;
	if ( is_OutOfRange(temp, &thresh.fTemperature[0] ) ||
    3000:	81000617 	ldw	r4,24(r16)
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
		rv = true;
	}
	return rv;
}
bool check_temp_hm_threshold(float temp, float hm){
    3004:	2825883a 	mov	r18,r5
	bool rv=false;
	if ( is_OutOfRange(temp, &thresh.fTemperature[0] ) ||
    3008:	880b883a 	mov	r5,r17
    300c:	0005b000 	call	5b00 <__gesf2>
    3010:	00800416 	blt	zero,r2,3024 <check_temp_hm_threshold+0x44>
    3014:	81400717 	ldw	r5,28(r16)
    3018:	8809883a 	mov	r4,r17
    301c:	0005b000 	call	5b00 <__gesf2>
    3020:	0080080e 	bge	zero,r2,3044 <check_temp_hm_threshold+0x64>
	     is_OutOfRange(hm,   &thresh.fHumidity[0]    ) ) {
		rv = true;
    3024:	04000044 	movi	r16,1
	}
	return rv;
}
    3028:	8005883a 	mov	r2,r16
    302c:	dfc00317 	ldw	ra,12(sp)
    3030:	dc800217 	ldw	r18,8(sp)
    3034:	dc400117 	ldw	r17,4(sp)
    3038:	dc000017 	ldw	r16,0(sp)
    303c:	dec00404 	addi	sp,sp,16
    3040:	f800283a 	ret
	}
	return rv;
}
bool check_temp_hm_threshold(float temp, float hm){
	bool rv=false;
	if ( is_OutOfRange(temp, &thresh.fTemperature[0] ) ||
    3044:	81000817 	ldw	r4,32(r16)
    3048:	900b883a 	mov	r5,r18
    304c:	0005b000 	call	5b00 <__gesf2>
    3050:	00bff416 	blt	zero,r2,3024 <__alt_mem_nios_system_shared_memory+0xfffc3024>
	     is_OutOfRange(hm,   &thresh.fHumidity[0]    ) ) {
    3054:	81400917 	ldw	r5,36(r16)
    3058:	9009883a 	mov	r4,r18
    305c:	04000044 	movi	r16,1
    3060:	0005b000 	call	5b00 <__gesf2>
    3064:	00bff016 	blt	zero,r2,3028 <__alt_mem_nios_system_shared_memory+0xfffc3028>
    3068:	0021883a 	mov	r16,zero
    306c:	003fee06 	br	3028 <__alt_mem_nios_system_shared_memory+0xfffc3028>

00003070 <check_temp_ax9_threshold>:
		rv = true;
	}
	return rv;
}

bool check_temp_ax9_threshold(float a[3], float g[3], float m[3]){
    3070:	defff704 	addi	sp,sp,-36
    3074:	dd000415 	stw	r20,16(sp)
    3078:	050000b4 	movhi	r20,2
    307c:	a5096004 	addi	r20,r20,9600
    3080:	ddc00715 	stw	r23,28(sp)
    3084:	dd800615 	stw	r22,24(sp)
    3088:	dcc00315 	stw	r19,12(sp)
    308c:	dc800215 	stw	r18,8(sp)
    3090:	dc400115 	stw	r17,4(sp)
    3094:	dc000015 	stw	r16,0(sp)
    3098:	dfc00815 	stw	ra,32(sp)
    309c:	dd400515 	stw	r21,20(sp)
    30a0:	2027883a 	mov	r19,r4
    30a4:	2825883a 	mov	r18,r5
    30a8:	3023883a 	mov	r17,r6
    30ac:	a5800104 	addi	r22,r20,4
    30b0:	25c00304 	addi	r23,r4,12
	bool rv=false;
	int err=0;
    30b4:	0021883a 	mov	r16,zero
	for ( int i=0;i<3; i++){
		if ( is_OutOfRange(a[i], &thresh.a[i][0]))
    30b8:	9d400017 	ldw	r21,0(r19)
    30bc:	a1400017 	ldw	r5,0(r20)
    30c0:	9cc00104 	addi	r19,r19,4
    30c4:	a809883a 	mov	r4,r21
    30c8:	0005bbc0 	call	5bbc <__lesf2>
    30cc:	a809883a 	mov	r4,r21
    30d0:	10000316 	blt	r2,zero,30e0 <check_temp_ax9_threshold+0x70>
    30d4:	b1400017 	ldw	r5,0(r22)
    30d8:	0005b000 	call	5b00 <__gesf2>
    30dc:	0080010e 	bge	zero,r2,30e4 <check_temp_ax9_threshold+0x74>
			err++;
    30e0:	84000044 	addi	r16,r16,1
    30e4:	a5000204 	addi	r20,r20,8
    30e8:	b5800204 	addi	r22,r22,8
}

bool check_temp_ax9_threshold(float a[3], float g[3], float m[3]){
	bool rv=false;
	int err=0;
	for ( int i=0;i<3; i++){
    30ec:	9dfff21e 	bne	r19,r23,30b8 <__alt_mem_nios_system_shared_memory+0xfffc30b8>
    30f0:	04c000b4 	movhi	r19,2
    30f4:	9cc96604 	addi	r19,r19,9624
    30f8:	95800304 	addi	r22,r18,12
    30fc:	9d400104 	addi	r21,r19,4
		if ( is_OutOfRange(a[i], &thresh.a[i][0]))
			err++;
	}
	for ( int i=0;i<3; i++){
		if ( is_OutOfRange(g[i], &thresh.g[i][0]))
    3100:	95000017 	ldw	r20,0(r18)
    3104:	99400017 	ldw	r5,0(r19)
    3108:	94800104 	addi	r18,r18,4
    310c:	a009883a 	mov	r4,r20
    3110:	0005bbc0 	call	5bbc <__lesf2>
    3114:	a009883a 	mov	r4,r20
    3118:	10000316 	blt	r2,zero,3128 <check_temp_ax9_threshold+0xb8>
    311c:	a9400017 	ldw	r5,0(r21)
    3120:	0005b000 	call	5b00 <__gesf2>
    3124:	0080010e 	bge	zero,r2,312c <check_temp_ax9_threshold+0xbc>
			err++;
    3128:	84000044 	addi	r16,r16,1
    312c:	9cc00204 	addi	r19,r19,8
    3130:	ad400204 	addi	r21,r21,8
	int err=0;
	for ( int i=0;i<3; i++){
		if ( is_OutOfRange(a[i], &thresh.a[i][0]))
			err++;
	}
	for ( int i=0;i<3; i++){
    3134:	95bff21e 	bne	r18,r22,3100 <__alt_mem_nios_system_shared_memory+0xfffc3100>
    3138:	048000b4 	movhi	r18,2
    313c:	94896c04 	addi	r18,r18,9648
    3140:	8d400304 	addi	r21,r17,12
    3144:	95000104 	addi	r20,r18,4
		if ( is_OutOfRange(g[i], &thresh.g[i][0]))
			err++;
	}
	for ( int i=0;i<3; i++){
		if ( is_OutOfRange(m[i], &thresh.m[i][0]))
    3148:	8cc00017 	ldw	r19,0(r17)
    314c:	91400017 	ldw	r5,0(r18)
    3150:	8c400104 	addi	r17,r17,4
    3154:	9809883a 	mov	r4,r19
    3158:	0005bbc0 	call	5bbc <__lesf2>
    315c:	9809883a 	mov	r4,r19
    3160:	10000316 	blt	r2,zero,3170 <check_temp_ax9_threshold+0x100>
    3164:	a1400017 	ldw	r5,0(r20)
    3168:	0005b000 	call	5b00 <__gesf2>
    316c:	0080010e 	bge	zero,r2,3174 <check_temp_ax9_threshold+0x104>
			err++;
    3170:	84000044 	addi	r16,r16,1
    3174:	94800204 	addi	r18,r18,8
    3178:	a5000204 	addi	r20,r20,8
	}
	for ( int i=0;i<3; i++){
		if ( is_OutOfRange(g[i], &thresh.g[i][0]))
			err++;
	}
	for ( int i=0;i<3; i++){
    317c:	8d7ff21e 	bne	r17,r21,3148 <__alt_mem_nios_system_shared_memory+0xfffc3148>
	}

	if (err) {
		rv=true;
	}
	return rv;
    3180:	8004c03a 	cmpne	r2,r16,zero
}
    3184:	dfc00817 	ldw	ra,32(sp)
    3188:	ddc00717 	ldw	r23,28(sp)
    318c:	dd800617 	ldw	r22,24(sp)
    3190:	dd400517 	ldw	r21,20(sp)
    3194:	dd000417 	ldw	r20,16(sp)
    3198:	dcc00317 	ldw	r19,12(sp)
    319c:	dc800217 	ldw	r18,8(sp)
    31a0:	dc400117 	ldw	r17,4(sp)
    31a4:	dc000017 	ldw	r16,0(sp)
    31a8:	dec00904 	addi	sp,sp,36
    31ac:	f800283a 	ret

000031b0 <check_gas_cn0395_threshold>:

bool check_gas_cn0395_threshold(float gas){
    31b0:	defffd04 	addi	sp,sp,-12
    31b4:	dc400115 	stw	r17,4(sp)
	bool rv=false;
	if ( is_OutOfRange(gas, &thresh.gas[0]))  {
    31b8:	044000b4 	movhi	r17,2
    31bc:	8c495604 	addi	r17,r17,9560
		rv=true;
	}
	return rv;
}

bool check_gas_cn0395_threshold(float gas){
    31c0:	dc000015 	stw	r16,0(sp)
	bool rv=false;
	if ( is_OutOfRange(gas, &thresh.gas[0]))  {
    31c4:	200b883a 	mov	r5,r4
		rv=true;
	}
	return rv;
}

bool check_gas_cn0395_threshold(float gas){
    31c8:	2021883a 	mov	r16,r4
	bool rv=false;
	if ( is_OutOfRange(gas, &thresh.gas[0]))  {
    31cc:	89001c17 	ldw	r4,112(r17)
		rv=true;
	}
	return rv;
}

bool check_gas_cn0395_threshold(float gas){
    31d0:	dfc00215 	stw	ra,8(sp)
	bool rv=false;
	if ( is_OutOfRange(gas, &thresh.gas[0]))  {
    31d4:	0005b000 	call	5b00 <__gesf2>
    31d8:	00800b16 	blt	zero,r2,3208 <check_gas_cn0395_threshold+0x58>
    31dc:	89401d17 	ldw	r5,116(r17)
    31e0:	8009883a 	mov	r4,r16
    31e4:	04000044 	movi	r16,1
    31e8:	0005b000 	call	5b00 <__gesf2>
    31ec:	0080080e 	bge	zero,r2,3210 <check_gas_cn0395_threshold+0x60>
		rv = true;
	}
	return rv;
}
    31f0:	8005883a 	mov	r2,r16
    31f4:	dfc00217 	ldw	ra,8(sp)
    31f8:	dc400117 	ldw	r17,4(sp)
    31fc:	dc000017 	ldw	r16,0(sp)
    3200:	dec00304 	addi	sp,sp,12
    3204:	f800283a 	ret
}

bool check_gas_cn0395_threshold(float gas){
	bool rv=false;
	if ( is_OutOfRange(gas, &thresh.gas[0]))  {
		rv = true;
    3208:	04000044 	movi	r16,1
    320c:	003ff806 	br	31f0 <__alt_mem_nios_system_shared_memory+0xfffc31f0>
	return rv;
}

bool check_gas_cn0395_threshold(float gas){
	bool rv=false;
	if ( is_OutOfRange(gas, &thresh.gas[0]))  {
    3210:	0021883a 	mov	r16,zero
    3214:	003ff606 	br	31f0 <__alt_mem_nios_system_shared_memory+0xfffc31f0>

00003218 <check_sp_temperature_threshold>:
	}
	return rv;
}


bool check_sp_temperature_threshold(float spTemperature){
    3218:	defffd04 	addi	sp,sp,-12
    321c:	dc400115 	stw	r17,4(sp)
	bool rv=false;
	if ( is_OutOfRange(spTemperature, &thresh.spTemperature[0]))  {
    3220:	044000b4 	movhi	r17,2
    3224:	8c495604 	addi	r17,r17,9560
	}
	return rv;
}


bool check_sp_temperature_threshold(float spTemperature){
    3228:	dc000015 	stw	r16,0(sp)
	bool rv=false;
	if ( is_OutOfRange(spTemperature, &thresh.spTemperature[0]))  {
    322c:	200b883a 	mov	r5,r4
	}
	return rv;
}


bool check_sp_temperature_threshold(float spTemperature){
    3230:	2021883a 	mov	r16,r4
	bool rv=false;
	if ( is_OutOfRange(spTemperature, &thresh.spTemperature[0]))  {
    3234:	89001e17 	ldw	r4,120(r17)
	}
	return rv;
}


bool check_sp_temperature_threshold(float spTemperature){
    3238:	dfc00215 	stw	ra,8(sp)
	bool rv=false;
	if ( is_OutOfRange(spTemperature, &thresh.spTemperature[0]))  {
    323c:	0005b000 	call	5b00 <__gesf2>
    3240:	00800b16 	blt	zero,r2,3270 <check_sp_temperature_threshold+0x58>
    3244:	89401f17 	ldw	r5,124(r17)
    3248:	8009883a 	mov	r4,r16
    324c:	04000044 	movi	r16,1
    3250:	0005b000 	call	5b00 <__gesf2>
    3254:	0080080e 	bge	zero,r2,3278 <check_sp_temperature_threshold+0x60>
		rv = true;
	}
	return rv;
}
    3258:	8005883a 	mov	r2,r16
    325c:	dfc00217 	ldw	ra,8(sp)
    3260:	dc400117 	ldw	r17,4(sp)
    3264:	dc000017 	ldw	r16,0(sp)
    3268:	dec00304 	addi	sp,sp,12
    326c:	f800283a 	ret


bool check_sp_temperature_threshold(float spTemperature){
	bool rv=false;
	if ( is_OutOfRange(spTemperature, &thresh.spTemperature[0]))  {
		rv = true;
    3270:	04000044 	movi	r16,1
    3274:	003ff806 	br	3258 <__alt_mem_nios_system_shared_memory+0xfffc3258>
}


bool check_sp_temperature_threshold(float spTemperature){
	bool rv=false;
	if ( is_OutOfRange(spTemperature, &thresh.spTemperature[0]))  {
    3278:	0021883a 	mov	r16,zero
    327c:	003ff606 	br	3258 <__alt_mem_nios_system_shared_memory+0xfffc3258>

00003280 <Sensor_Report>:

#define DEBUG

static bool g_clear_OOR_flag=true;

void Sensor_Report(bool print_flag){
    3280:	deffe504 	addi	sp,sp,-108
    3284:	dc401415 	stw	r17,80(sp)

  	////////////////////////////////
  	// report light sensor
  	alt_u16 light0 = 0, light1 = 0;
		float lux = 0;
  	bPass = Get_light(&light0, &light1);
    3288:	d9401204 	addi	r5,sp,72

#define DEBUG

static bool g_clear_OOR_flag=true;

void Sensor_Report(bool print_flag){
    328c:	2023883a 	mov	r17,r4

  	////////////////////////////////
  	// report light sensor
  	alt_u16 light0 = 0, light1 = 0;
		float lux = 0;
  	bPass = Get_light(&light0, &light1);
    3290:	d9001284 	addi	r4,sp,74

#define DEBUG

static bool g_clear_OOR_flag=true;

void Sensor_Report(bool print_flag){
    3294:	dfc01a15 	stw	ra,104(sp)
    3298:	dd801915 	stw	r22,100(sp)
    329c:	dd401815 	stw	r21,96(sp)
    32a0:	dd001715 	stw	r20,92(sp)
    32a4:	dcc01615 	stw	r19,88(sp)
    32a8:	dc801515 	stw	r18,84(sp)
    32ac:	dc001315 	stw	r16,76(sp)
  	bool bPass, bPass2;

  	////////////////////////////////
  	// report light sensor
  	alt_u16 light0 = 0, light1 = 0;
    32b0:	d800128d 	sth	zero,74(sp)
    32b4:	d800120d 	sth	zero,72(sp)
		float lux = 0;
    32b8:	d8001115 	stw	zero,68(sp)
  	bPass = Get_light(&light0, &light1);
    32bc:	00013280 	call	1328 <Get_light>
	  if(bPass) {
    32c0:	10803fcc 	andi	r2,r2,255
    32c4:	1000241e 	bne	r2,zero,3358 <Sensor_Report+0xd8>
			bPass2 = convert_light_lux(light0, light1, &lux);
		}
		else bPass2 = FALSE;

  	if (print_flag) {
    32c8:	8c403fcc 	andi	r17,r17,255
    32cc:	88002826 	beq	r17,zero,3370 <Sensor_Report+0xf0>
			}
			else if (bPass) {
	  		printf("light0 = %d, light1 = %d,but getting lux value failed\r\n", light0, light1);
			}
	  	else{
	  		printf("get light0 and light1 values failed!\r\n");
    32d0:	010000b4 	movhi	r4,2
    32d4:	2139ee04 	addi	r4,r4,-6216
    32d8:	000b4c80 	call	b4c8 <puts>
  	}

  	////////////////////////////////
  	// report HDC1000 temperature & humidity sensor
  	float fTemperature, fHumidity;
  	bPass = RH_Temp_Sensor_Read(&fTemperature, &fHumidity);
    32dc:	d9400f04 	addi	r5,sp,60
    32e0:	d9001004 	addi	r4,sp,64
    32e4:	000253c0 	call	253c <RH_Temp_Sensor_Read>
  	if (print_flag) {
	  	if (bPass){
    32e8:	10803fcc 	andi	r2,r2,255
    32ec:	10018026 	beq	r2,zero,38f0 <Sensor_Report+0x670>
			printf("Temperature: %.3f*C\r\n", fTemperature);
    32f0:	d9001017 	ldw	r4,64(sp)
    32f4:	0008ec40 	call	8ec4 <__extendsfdf2>
    32f8:	010000b4 	movhi	r4,2
    32fc:	100b883a 	mov	r5,r2
    3300:	180d883a 	mov	r6,r3
    3304:	21398604 	addi	r4,r4,-6632
    3308:	000b3ac0 	call	b3ac <printf>
	    	printf("Humidity: %.3f%%\r\n",fHumidity);
    330c:	d9000f17 	ldw	r4,60(sp)
    3310:	0008ec40 	call	8ec4 <__extendsfdf2>
    3314:	010000b4 	movhi	r4,2
    3318:	100b883a 	mov	r5,r2
    331c:	180d883a 	mov	r6,r3
    3320:	21398c04 	addi	r4,r4,-6608
    3324:	000b3ac0 	call	b3ac <printf>
	  	}else{
	  		printf("Failed to ready Temperature/Humidity sensor!\r\n");
	  	}
  	}
  	float fgas;
  	bPass = get_gppm(&fgas);
    3328:	d9000e04 	addi	r4,sp,56
    332c:	00028c40 	call	28c4 <get_gppm>
  	if (print_flag) {
  		  	if (bPass){
    3330:	10803fcc 	andi	r2,r2,255
    3334:	10016a26 	beq	r2,zero,38e0 <Sensor_Report+0x660>
  				printf("Gas: %.2f\r\n", fgas);
    3338:	d9000e17 	ldw	r4,56(sp)
    333c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3340:	010000b4 	movhi	r4,2
    3344:	100b883a 	mov	r5,r2
    3348:	180d883a 	mov	r6,r3
    334c:	21399d04 	addi	r4,r4,-6540
    3350:	000b3ac0 	call	b3ac <printf>
    3354:	00000b06 	br	3384 <Sensor_Report+0x104>
  	// report light sensor
  	alt_u16 light0 = 0, light1 = 0;
		float lux = 0;
  	bPass = Get_light(&light0, &light1);
	  if(bPass) {
			bPass2 = convert_light_lux(light0, light1, &lux);
    3358:	d940120b 	ldhu	r5,72(sp)
    335c:	d900128b 	ldhu	r4,74(sp)
		}
		else bPass2 = FALSE;

  	if (print_flag) {
    3360:	8c403fcc 	andi	r17,r17,255
  	// report light sensor
  	alt_u16 light0 = 0, light1 = 0;
		float lux = 0;
  	bPass = Get_light(&light0, &light1);
	  if(bPass) {
			bPass2 = convert_light_lux(light0, light1, &lux);
    3364:	d9801104 	addi	r6,sp,68
    3368:	0002a100 	call	2a10 <convert_light_lux>
		}
		else bPass2 = FALSE;

  	if (print_flag) {
    336c:	8801641e 	bne	r17,zero,3900 <Sensor_Report+0x680>
  	}

  	////////////////////////////////
  	// report HDC1000 temperature & humidity sensor
  	float fTemperature, fHumidity;
  	bPass = RH_Temp_Sensor_Read(&fTemperature, &fHumidity);
    3370:	d9001004 	addi	r4,sp,64
    3374:	d9400f04 	addi	r5,sp,60
    3378:	000253c0 	call	253c <RH_Temp_Sensor_Read>
	  	}else{
	  		printf("Failed to ready Temperature/Humidity sensor!\r\n");
	  	}
  	}
  	float fgas;
  	bPass = get_gppm(&fgas);
    337c:	d9000e04 	addi	r4,sp,56
    3380:	00028c40 	call	28c4 <get_gppm>
  	////////////////////////////////
  	// report mpu9250 9-axis sensor
  	float a[3];
  	float g[3];
  	float m[3];
  	getMotion9(
    3384:	d8800704 	addi	r2,sp,28
    3388:	d8800415 	stw	r2,16(sp)
    338c:	d8800604 	addi	r2,sp,24
    3390:	d8800315 	stw	r2,12(sp)
    3394:	d8800504 	addi	r2,sp,20
    3398:	d8800215 	stw	r2,8(sp)
    339c:	d8800a04 	addi	r2,sp,40
    33a0:	d8800115 	stw	r2,4(sp)
    33a4:	d8800904 	addi	r2,sp,36
    33a8:	d8800015 	stw	r2,0(sp)
    33ac:	d9c00804 	addi	r7,sp,32
    33b0:	d9800d04 	addi	r6,sp,52
    33b4:	d9400c04 	addi	r5,sp,48
    33b8:	d9000b04 	addi	r4,sp,44
    33bc:	00021640 	call	2164 <getMotion9>


  	////////////////////////////////
    // Check out of range, and set LED
	static int out_of_range=0;
	if ( g_clear_OOR_flag ) out_of_range=0;
    33c0:	d0a00103 	ldbu	r2,-32764(gp)
    33c4:	10006e1e 	bne	r2,zero,3580 <Sensor_Report+0x300>
    33c8:	d4270a17 	ldw	r16,-25560(gp)
#define SET_OUT_OF_RANGE_LED(v)  IOWR(NIOS_SYSTEM_LED_PIO_BASE, 0, (v) )

bool check_light_threshold(int light0, int light1,float lux){
	bool rv=false;
	if (
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
    33cc:	048000b4 	movhi	r18,2
    33d0:	94895604 	addi	r18,r18,9560

  	////////////////////////////////
    // Check out of range, and set LED
	static int out_of_range=0;
	if ( g_clear_OOR_flag ) out_of_range=0;
	if ( check_light_threshold(light0, light1,lux) )
    33d4:	dcc01117 	ldw	r19,68(sp)
#define is_OutOfRange(a,THptr) ( ((a) < ((THptr)[0])) || ((a)>(((THptr)[1]))) )
#define SET_OUT_OF_RANGE_LED(v)  IOWR(NIOS_SYSTEM_LED_PIO_BASE, 0, (v) )

bool check_light_threshold(int light0, int light1,float lux){
	bool rv=false;
	if (
    33d8:	91400417 	ldw	r5,16(r18)
    33dc:	9809883a 	mov	r4,r19
    33e0:	0005bbc0 	call	5bbc <__lesf2>
    33e4:	10006316 	blt	r2,zero,3574 <Sensor_Report+0x2f4>
	     is_OutOfRange(lux, &thresh.lux[0]         ) ) {
    33e8:	91400517 	ldw	r5,20(r18)
    33ec:	9809883a 	mov	r4,r19
    33f0:	0005b000 	call	5b00 <__gesf2>
    33f4:	00805f16 	blt	zero,r2,3574 <Sensor_Report+0x2f4>
    // Check out of range, and set LED
	static int out_of_range=0;
	if ( g_clear_OOR_flag ) out_of_range=0;
	if ( check_light_threshold(light0, light1,lux) )
		out_of_range |= 1<<0;
	if ( check_temp_hm_threshold(fTemperature, fHumidity) )
    33f8:	dcc01017 	ldw	r19,64(sp)
	}
	return rv;
}
bool check_temp_hm_threshold(float temp, float hm){
	bool rv=false;
	if ( is_OutOfRange(temp, &thresh.fTemperature[0] ) ||
    33fc:	91400617 	ldw	r5,24(r18)
    3400:	050000b4 	movhi	r20,2
    3404:	9809883a 	mov	r4,r19
    3408:	a5095604 	addi	r20,r20,9560
    340c:	0005bbc0 	call	5bbc <__lesf2>
    3410:	10000416 	blt	r2,zero,3424 <Sensor_Report+0x1a4>
    3414:	a1400717 	ldw	r5,28(r20)
    3418:	9809883a 	mov	r4,r19
    341c:	0005b000 	call	5b00 <__gesf2>
    3420:	00805a0e 	bge	zero,r2,358c <Sensor_Report+0x30c>
	static int out_of_range=0;
	if ( g_clear_OOR_flag ) out_of_range=0;
	if ( check_light_threshold(light0, light1,lux) )
		out_of_range |= 1<<0;
	if ( check_temp_hm_threshold(fTemperature, fHumidity) )
		out_of_range |= 1<<1;
    3424:	84000094 	ori	r16,r16,2
    3428:	d4270a15 	stw	r16,-25560(gp)
	if ( check_temp_ax9_threshold( a, g, m) )
    342c:	d9800504 	addi	r6,sp,20
    3430:	d9400804 	addi	r5,sp,32
    3434:	d9000b04 	addi	r4,sp,44
    3438:	00030700 	call	3070 <check_temp_ax9_threshold>
    343c:	10803fcc 	andi	r2,r2,255
    3440:	10000226 	beq	r2,zero,344c <Sensor_Report+0x1cc>
		out_of_range |= 1<<2;
    3444:	84000114 	ori	r16,r16,4
    3448:	d4270a15 	stw	r16,-25560(gp)
	SET_OUT_OF_RANGE_LED(out_of_range);
    344c:	00800134 	movhi	r2,4
    3450:	10843004 	addi	r2,r2,4288
    3454:	14000035 	stwio	r16,0(r2)


  	////////////////////////////////
    // Print out sensor values
  	if (print_flag) {
    3458:	8800561e 	bne	r17,zero,35b4 <Sensor_Report+0x334>
  	unsigned offst;

  	// Light0,1
  	//offst=64
  	offst = LIGHT0_SENSOR_VALUE>>2;
  	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, light0);
    345c:	d8c0128b 	ldhu	r3,74(sp)
    3460:	00800134 	movhi	r2,4
    3464:	10804004 	addi	r2,r2,256
    3468:	10c00035 	stwio	r3,0(r2)
  	//offst=65
  	offst = LIGHT1_SENSOR_VALUE>>2;
  	IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, light1);
    346c:	d8c0120b 	ldhu	r3,72(sp)
    3470:	00800134 	movhi	r2,4
    3474:	10804104 	addi	r2,r2,260
    3478:	10c00035 	stwio	r3,0(r2)

  	unsigned *p;
  	//offst=66
		offst = LUX_SENSOR_VALUE>>2;
  	p =(unsigned *)&lux;    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, *p);
    347c:	d8c01117 	ldw	r3,68(sp)
    3480:	00800134 	movhi	r2,4
    3484:	10804204 	addi	r2,r2,264
    3488:	10c00035 	stwio	r3,0(r2)

  	// Temp. and Humidity
  	offst = HUMIDI_SENSOR_VALUE>>2;
  	p =(unsigned *)&fHumidity;    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, *p);
    348c:	d8c00f17 	ldw	r3,60(sp)
    3490:	00800134 	movhi	r2,4
    3494:	10804304 	addi	r2,r2,268
    3498:	10c00035 	stwio	r3,0(r2)
  	offst = TEMPER_SENSOR_VALUE>>2;
  	p =(unsigned *)&fTemperature; IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, *p);
    349c:	d8c01017 	ldw	r3,64(sp)
    34a0:	00800134 	movhi	r2,4
    34a4:	10804404 	addi	r2,r2,272
    34a8:	10c00035 	stwio	r3,0(r2)

  	// 9-Axes
  	offst = ACCEL_X_SENSOR_VALUE>>2;
  	p =(unsigned *)&a[0];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    34ac:	d8c00b17 	ldw	r3,44(sp)
    34b0:	00800134 	movhi	r2,4
    34b4:	10804504 	addi	r2,r2,276
    34b8:	10c00035 	stwio	r3,0(r2)
  	p =(unsigned *)&a[1];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    34bc:	d8c00c17 	ldw	r3,48(sp)
    34c0:	00800134 	movhi	r2,4
    34c4:	10804604 	addi	r2,r2,280
    34c8:	10c00035 	stwio	r3,0(r2)
  	p =(unsigned *)&a[2];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    34cc:	d8c00d17 	ldw	r3,52(sp)
    34d0:	00800134 	movhi	r2,4
    34d4:	10804704 	addi	r2,r2,284
    34d8:	10c00035 	stwio	r3,0(r2)
  	offst = GYROS_X_SENSOR_VALUE>>2;
  	p =(unsigned *)&g[0];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    34dc:	d8c00817 	ldw	r3,32(sp)
    34e0:	00800134 	movhi	r2,4
    34e4:	10804804 	addi	r2,r2,288
    34e8:	10c00035 	stwio	r3,0(r2)
  	p =(unsigned *)&g[1];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    34ec:	d8c00917 	ldw	r3,36(sp)
    34f0:	00800134 	movhi	r2,4
    34f4:	10804904 	addi	r2,r2,292
    34f8:	10c00035 	stwio	r3,0(r2)
  	p =(unsigned *)&g[2];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    34fc:	d8c00a17 	ldw	r3,40(sp)
    3500:	00800134 	movhi	r2,4
    3504:	10804a04 	addi	r2,r2,296
    3508:	10c00035 	stwio	r3,0(r2)
  	offst = MAGNE_X_SENSOR_VALUE>>2;
  	p =(unsigned *)&m[0];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    350c:	d8c00517 	ldw	r3,20(sp)
    3510:	00800134 	movhi	r2,4
    3514:	10804b04 	addi	r2,r2,300
    3518:	10c00035 	stwio	r3,0(r2)
  	p =(unsigned *)&m[1];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    351c:	d8c00617 	ldw	r3,24(sp)
    3520:	00800134 	movhi	r2,4
    3524:	10804c04 	addi	r2,r2,304
    3528:	10c00035 	stwio	r3,0(r2)
  	p =(unsigned *)&m[2];    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    352c:	d8c00717 	ldw	r3,28(sp)
    3530:	00800134 	movhi	r2,4
    3534:	10804d04 	addi	r2,r2,308
    3538:	10c00035 	stwio	r3,0(r2)
  	offst = GAS_CN0395_SENSOR_VALUE>>2;
  	p =(unsigned *)&fgas;    IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst++, *p);
    353c:	d8c00e17 	ldw	r3,56(sp)
    3540:	00800134 	movhi	r2,4
    3544:	10804e04 	addi	r2,r2,312
    3548:	10c00035 	stwio	r3,0(r2)


}
    354c:	dfc01a17 	ldw	ra,104(sp)
    3550:	dd801917 	ldw	r22,100(sp)
    3554:	dd401817 	ldw	r21,96(sp)
    3558:	dd001717 	ldw	r20,92(sp)
    355c:	dcc01617 	ldw	r19,88(sp)
    3560:	dc801517 	ldw	r18,84(sp)
    3564:	dc401417 	ldw	r17,80(sp)
    3568:	dc001317 	ldw	r16,76(sp)
    356c:	dec01b04 	addi	sp,sp,108
    3570:	f800283a 	ret
  	////////////////////////////////
    // Check out of range, and set LED
	static int out_of_range=0;
	if ( g_clear_OOR_flag ) out_of_range=0;
	if ( check_light_threshold(light0, light1,lux) )
		out_of_range |= 1<<0;
    3574:	84000054 	ori	r16,r16,1
    3578:	d4270a15 	stw	r16,-25560(gp)
    357c:	003f9e06 	br	33f8 <__alt_mem_nios_system_shared_memory+0xfffc33f8>


  	////////////////////////////////
    // Check out of range, and set LED
	static int out_of_range=0;
	if ( g_clear_OOR_flag ) out_of_range=0;
    3580:	d0270a15 	stw	zero,-25560(gp)
    3584:	0021883a 	mov	r16,zero
    3588:	003f9006 	br	33cc <__alt_mem_nios_system_shared_memory+0xfffc33cc>
	if ( check_light_threshold(light0, light1,lux) )
		out_of_range |= 1<<0;
	if ( check_temp_hm_threshold(fTemperature, fHumidity) )
    358c:	dcc00f17 	ldw	r19,60(sp)
	}
	return rv;
}
bool check_temp_hm_threshold(float temp, float hm){
	bool rv=false;
	if ( is_OutOfRange(temp, &thresh.fTemperature[0] ) ||
    3590:	a1400817 	ldw	r5,32(r20)
    3594:	9809883a 	mov	r4,r19
    3598:	0005bbc0 	call	5bbc <__lesf2>
    359c:	103fa116 	blt	r2,zero,3424 <__alt_mem_nios_system_shared_memory+0xfffc3424>
	     is_OutOfRange(hm,   &thresh.fHumidity[0]    ) ) {
    35a0:	a1400917 	ldw	r5,36(r20)
    35a4:	9809883a 	mov	r4,r19
    35a8:	0005b000 	call	5b00 <__gesf2>
    35ac:	00bf9d16 	blt	zero,r2,3424 <__alt_mem_nios_system_shared_memory+0xfffc3424>
    35b0:	003f9e06 	br	342c <__alt_mem_nios_system_shared_memory+0xfffc342c>


  	////////////////////////////////
    // Print out sensor values
  	if (print_flag) {
	  	printf("9-axis info:\r\n");
    35b4:	010000b4 	movhi	r4,2
    35b8:	2139a804 	addi	r4,r4,-6496
    35bc:	000b4c80 	call	b4c8 <puts>
	  	printf("ax = %.3f, ay = %.3f, az = %.3f\r\n", a[0], a[1], a[2]);
    35c0:	d9000c17 	ldw	r4,48(sp)
    35c4:	040000b4 	movhi	r16,2
    35c8:	84095604 	addi	r16,r16,9560
    35cc:	0008ec40 	call	8ec4 <__extendsfdf2>
    35d0:	d9000b17 	ldw	r4,44(sp)
    35d4:	102d883a 	mov	r22,r2
    35d8:	1827883a 	mov	r19,r3
    35dc:	0008ec40 	call	8ec4 <__extendsfdf2>
    35e0:	d9000d17 	ldw	r4,52(sp)
    35e4:	102b883a 	mov	r21,r2
    35e8:	1829883a 	mov	r20,r3
    35ec:	0008ec40 	call	8ec4 <__extendsfdf2>
    35f0:	010000b4 	movhi	r4,2
    35f4:	b00f883a 	mov	r7,r22
    35f8:	a80b883a 	mov	r5,r21
    35fc:	a00d883a 	mov	r6,r20
    3600:	2139ac04 	addi	r4,r4,-6480
    3604:	d8c00215 	stw	r3,8(sp)
    3608:	dcc00015 	stw	r19,0(sp)
    360c:	d8800115 	stw	r2,4(sp)
    3610:	000b3ac0 	call	b3ac <printf>
	  	printf("gx = %.3f, gy = %.3f, gz = %.3f\r\n", g[0], g[1], g[2]);
    3614:	d9000917 	ldw	r4,36(sp)
    3618:	84400404 	addi	r17,r16,16
    361c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3620:	d9000817 	ldw	r4,32(sp)
    3624:	102d883a 	mov	r22,r2
    3628:	1827883a 	mov	r19,r3
    362c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3630:	d9000a17 	ldw	r4,40(sp)
    3634:	102b883a 	mov	r21,r2
    3638:	1829883a 	mov	r20,r3
    363c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3640:	010000b4 	movhi	r4,2
    3644:	b00f883a 	mov	r7,r22
    3648:	a80b883a 	mov	r5,r21
    364c:	a00d883a 	mov	r6,r20
    3650:	2139b504 	addi	r4,r4,-6444
    3654:	d8c00215 	stw	r3,8(sp)
    3658:	dcc00015 	stw	r19,0(sp)
    365c:	d8800115 	stw	r2,4(sp)
    3660:	000b3ac0 	call	b3ac <printf>
	  	printf("mx = %.3f, my = %.3f, mz = %.3f\r\n", m[0], m[1], m[2]);
    3664:	d9000617 	ldw	r4,24(sp)
    3668:	0008ec40 	call	8ec4 <__extendsfdf2>
    366c:	d9000517 	ldw	r4,20(sp)
    3670:	102d883a 	mov	r22,r2
    3674:	1827883a 	mov	r19,r3
    3678:	0008ec40 	call	8ec4 <__extendsfdf2>
    367c:	d9000717 	ldw	r4,28(sp)
    3680:	102b883a 	mov	r21,r2
    3684:	1829883a 	mov	r20,r3
    3688:	0008ec40 	call	8ec4 <__extendsfdf2>
    368c:	010000b4 	movhi	r4,2
    3690:	2139be04 	addi	r4,r4,-6408
    3694:	d8c00215 	stw	r3,8(sp)
    3698:	b00f883a 	mov	r7,r22
    369c:	a80b883a 	mov	r5,r21
    36a0:	a00d883a 	mov	r6,r20
    36a4:	d8800115 	stw	r2,4(sp)
    36a8:	dcc00015 	stw	r19,0(sp)
    36ac:	000b3ac0 	call	b3ac <printf>
  	if (print_flag) {
#ifdef DEBUG
  	   ////////////////////////////////
       // Print out threshold values
	    int *pi=&thresh.light[0][0];
	    printf(" TH:light "); for (int i=0; i<4; i++) { printf("%d ", *pi++);} printf("\n");
    36b0:	010000b4 	movhi	r4,2
    36b4:	2139c704 	addi	r4,r4,-6372
    36b8:	000b3ac0 	call	b3ac <printf>
    36bc:	81400017 	ldw	r5,0(r16)
    36c0:	010000b4 	movhi	r4,2
    36c4:	84000104 	addi	r16,r16,4
    36c8:	2139ca04 	addi	r4,r4,-6360
    36cc:	000b3ac0 	call	b3ac <printf>
    36d0:	847ffa1e 	bne	r16,r17,36bc <__alt_mem_nios_system_shared_memory+0xfffc36bc>
    36d4:	01000284 	movi	r4,10
    36d8:	000b3f00 	call	b3f0 <putchar>
	    float *pf;
	    pf=&thresh.lux[0];
	    printf(" TH:Lux "); for (int i=0; i<2; i++) { printf("%.3f ", *pf++);} printf("\n");
    36dc:	010000b4 	movhi	r4,2
    36e0:	2139cb04 	addi	r4,r4,-6356
    36e4:	000b3ac0 	call	b3ac <printf>
    36e8:	91000417 	ldw	r4,16(r18)
    36ec:	040000b4 	movhi	r16,2
    36f0:	84096004 	addi	r16,r16,9600
    36f4:	0008ec40 	call	8ec4 <__extendsfdf2>
    36f8:	010000b4 	movhi	r4,2
    36fc:	100b883a 	mov	r5,r2
    3700:	180d883a 	mov	r6,r3
    3704:	2139ce04 	addi	r4,r4,-6344
    3708:	000b3ac0 	call	b3ac <printf>
    370c:	91000517 	ldw	r4,20(r18)
    3710:	84400604 	addi	r17,r16,24
    3714:	0008ec40 	call	8ec4 <__extendsfdf2>
    3718:	010000b4 	movhi	r4,2
    371c:	100b883a 	mov	r5,r2
    3720:	180d883a 	mov	r6,r3
    3724:	2139ce04 	addi	r4,r4,-6344
    3728:	000b3ac0 	call	b3ac <printf>
    372c:	01000284 	movi	r4,10
    3730:	000b3f00 	call	b3f0 <putchar>
	    pf=&thresh.fTemperature[0];
	    printf(" TH:Temp "); for (int i=0; i<2; i++) { printf("%.3f ", *pf++);} printf("\n");
    3734:	010000b4 	movhi	r4,2
    3738:	2139d004 	addi	r4,r4,-6336
    373c:	000b3ac0 	call	b3ac <printf>
    3740:	91000617 	ldw	r4,24(r18)
    3744:	0008ec40 	call	8ec4 <__extendsfdf2>
    3748:	010000b4 	movhi	r4,2
    374c:	100b883a 	mov	r5,r2
    3750:	180d883a 	mov	r6,r3
    3754:	2139ce04 	addi	r4,r4,-6344
    3758:	000b3ac0 	call	b3ac <printf>
    375c:	91000717 	ldw	r4,28(r18)
    3760:	0008ec40 	call	8ec4 <__extendsfdf2>
    3764:	010000b4 	movhi	r4,2
    3768:	100b883a 	mov	r5,r2
    376c:	180d883a 	mov	r6,r3
    3770:	2139ce04 	addi	r4,r4,-6344
    3774:	000b3ac0 	call	b3ac <printf>
    3778:	01000284 	movi	r4,10
    377c:	000b3f00 	call	b3f0 <putchar>
	    pf=&thresh.fHumidity[0];
	    printf(" TH:HM "); for (int i=0; i<2; i++) { printf("%.3f ", *pf++);} printf("\n");
    3780:	010000b4 	movhi	r4,2
    3784:	2139d304 	addi	r4,r4,-6324
    3788:	000b3ac0 	call	b3ac <printf>
    378c:	91000817 	ldw	r4,32(r18)
    3790:	0008ec40 	call	8ec4 <__extendsfdf2>
    3794:	010000b4 	movhi	r4,2
    3798:	100b883a 	mov	r5,r2
    379c:	180d883a 	mov	r6,r3
    37a0:	2139ce04 	addi	r4,r4,-6344
    37a4:	000b3ac0 	call	b3ac <printf>
    37a8:	91000917 	ldw	r4,36(r18)
    37ac:	0008ec40 	call	8ec4 <__extendsfdf2>
    37b0:	010000b4 	movhi	r4,2
    37b4:	100b883a 	mov	r5,r2
    37b8:	180d883a 	mov	r6,r3
    37bc:	2139ce04 	addi	r4,r4,-6344
    37c0:	000b3ac0 	call	b3ac <printf>
    37c4:	01000284 	movi	r4,10
    37c8:	000b3f00 	call	b3f0 <putchar>
	    pf=&thresh.a[0][0];
	    printf(" TH:a* "); for (int i=0; i<6; i++) { printf("%.3f ", *pf++);} printf("\n");
    37cc:	010000b4 	movhi	r4,2
    37d0:	2139d504 	addi	r4,r4,-6316
    37d4:	000b3ac0 	call	b3ac <printf>
    37d8:	81000017 	ldw	r4,0(r16)
    37dc:	84000104 	addi	r16,r16,4
    37e0:	0008ec40 	call	8ec4 <__extendsfdf2>
    37e4:	010000b4 	movhi	r4,2
    37e8:	100b883a 	mov	r5,r2
    37ec:	180d883a 	mov	r6,r3
    37f0:	2139ce04 	addi	r4,r4,-6344
    37f4:	000b3ac0 	call	b3ac <printf>
    37f8:	847ff71e 	bne	r16,r17,37d8 <__alt_mem_nios_system_shared_memory+0xfffc37d8>
    37fc:	01000284 	movi	r4,10
    3800:	000b3f00 	call	b3f0 <putchar>
	    pf=&thresh.g[0][0];
	    printf(" TH:g* "); for (int i=0; i<6; i++) { printf("%.3f ", *pf++);} printf("\n");
    3804:	010000b4 	movhi	r4,2
    3808:	040000b4 	movhi	r16,2
    380c:	2139d704 	addi	r4,r4,-6308
    3810:	84096c04 	addi	r16,r16,9648
    3814:	000b3ac0 	call	b3ac <printf>
    3818:	89000017 	ldw	r4,0(r17)
    381c:	8c400104 	addi	r17,r17,4
    3820:	0008ec40 	call	8ec4 <__extendsfdf2>
    3824:	010000b4 	movhi	r4,2
    3828:	100b883a 	mov	r5,r2
    382c:	180d883a 	mov	r6,r3
    3830:	2139ce04 	addi	r4,r4,-6344
    3834:	000b3ac0 	call	b3ac <printf>
    3838:	847ff71e 	bne	r16,r17,3818 <__alt_mem_nios_system_shared_memory+0xfffc3818>
    383c:	01000284 	movi	r4,10
    3840:	000b3f00 	call	b3f0 <putchar>
	    pf=&thresh.m[0][0];
	    printf(" TH:m* "); for (int i=0; i<6; i++) { printf("%.3f ", *pf++);} printf("\n");
    3844:	010000b4 	movhi	r4,2
    3848:	044000b4 	movhi	r17,2
    384c:	2139d904 	addi	r4,r4,-6300
    3850:	8c497204 	addi	r17,r17,9672
    3854:	000b3ac0 	call	b3ac <printf>
    3858:	81000017 	ldw	r4,0(r16)
    385c:	84000104 	addi	r16,r16,4
    3860:	0008ec40 	call	8ec4 <__extendsfdf2>
    3864:	010000b4 	movhi	r4,2
    3868:	100b883a 	mov	r5,r2
    386c:	180d883a 	mov	r6,r3
    3870:	2139ce04 	addi	r4,r4,-6344
    3874:	000b3ac0 	call	b3ac <printf>
    3878:	8c3ff71e 	bne	r17,r16,3858 <__alt_mem_nios_system_shared_memory+0xfffc3858>
    387c:	01000284 	movi	r4,10
    3880:	000b3f00 	call	b3f0 <putchar>
	    pf=&thresh.gas[0];
	    printf(" TH:gas* "); for (int i=0; i<2; i++) { printf("%.2f ", *pf++);} printf("\n");
    3884:	010000b4 	movhi	r4,2
    3888:	2139db04 	addi	r4,r4,-6292
    388c:	000b3ac0 	call	b3ac <printf>
    3890:	91001c17 	ldw	r4,112(r18)
    3894:	0008ec40 	call	8ec4 <__extendsfdf2>
    3898:	010000b4 	movhi	r4,2
    389c:	100b883a 	mov	r5,r2
    38a0:	180d883a 	mov	r6,r3
    38a4:	2139de04 	addi	r4,r4,-6280
    38a8:	000b3ac0 	call	b3ac <printf>
    38ac:	91001d17 	ldw	r4,116(r18)
    38b0:	0008ec40 	call	8ec4 <__extendsfdf2>
    38b4:	010000b4 	movhi	r4,2
    38b8:	100b883a 	mov	r5,r2
    38bc:	180d883a 	mov	r6,r3
    38c0:	2139de04 	addi	r4,r4,-6280
    38c4:	000b3ac0 	call	b3ac <printf>
    38c8:	01000284 	movi	r4,10
    38cc:	000b3f00 	call	b3f0 <putchar>
#endif
	  	printf("\r\n");
    38d0:	010000b4 	movhi	r4,2
    38d4:	2137ef04 	addi	r4,r4,-8260
    38d8:	000b4c80 	call	b4c8 <puts>
    38dc:	003edf06 	br	345c <__alt_mem_nios_system_shared_memory+0xfffc345c>
  	bPass = get_gppm(&fgas);
  	if (print_flag) {
  		  	if (bPass){
  				printf("Gas: %.2f\r\n", fgas);
  		    }else{
  		  		printf("Failed to ready CN0395 sensor!\r\n");
    38e0:	010000b4 	movhi	r4,2
    38e4:	2139a004 	addi	r4,r4,-6528
    38e8:	000b4c80 	call	b4c8 <puts>
    38ec:	003ea506 	br	3384 <__alt_mem_nios_system_shared_memory+0xfffc3384>
  	if (print_flag) {
	  	if (bPass){
			printf("Temperature: %.3f*C\r\n", fTemperature);
	    	printf("Humidity: %.3f%%\r\n",fHumidity);
	  	}else{
	  		printf("Failed to ready Temperature/Humidity sensor!\r\n");
    38f0:	010000b4 	movhi	r4,2
    38f4:	21399104 	addi	r4,r4,-6588
    38f8:	000b4c80 	call	b4c8 <puts>
    38fc:	003e8a06 	br	3328 <__alt_mem_nios_system_shared_memory+0xfffc3328>
			bPass2 = convert_light_lux(light0, light1, &lux);
		}
		else bPass2 = FALSE;

  	if (print_flag) {
			if(bPass2) {
    3900:	10803fcc 	andi	r2,r2,255
    3904:	10000a26 	beq	r2,zero,3930 <Sensor_Report+0x6b0>
	  		printf("light0 = %d, light1 = %d, lux = %.3f\r\n", light0, light1,lux);
    3908:	d9001117 	ldw	r4,68(sp)
    390c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3910:	d980120b 	ldhu	r6,72(sp)
    3914:	d940128b 	ldhu	r5,74(sp)
    3918:	010000b4 	movhi	r4,2
    391c:	21397c04 	addi	r4,r4,-6672
    3920:	d8c00015 	stw	r3,0(sp)
    3924:	100f883a 	mov	r7,r2
    3928:	000b3ac0 	call	b3ac <printf>
    392c:	003e6b06 	br	32dc <__alt_mem_nios_system_shared_memory+0xfffc32dc>
			}
			else if (bPass) {
	  		printf("light0 = %d, light1 = %d,but getting lux value failed\r\n", light0, light1);
    3930:	d980120b 	ldhu	r6,72(sp)
    3934:	d940128b 	ldhu	r5,74(sp)
    3938:	010000b4 	movhi	r4,2
    393c:	2139e004 	addi	r4,r4,-6272
    3940:	000b3ac0 	call	b3ac <printf>
    3944:	003e6506 	br	32dc <__alt_mem_nios_system_shared_memory+0xfffc32dc>

00003948 <main>:
#define SEND_STATUS_REGISTER(x) IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, 0, (x))



int main()
{
    3948:	defff804 	addi	sp,sp,-32
    394c:	dfc00715 	stw	ra,28(sp)
    3950:	dd800615 	stw	r22,24(sp)
    3954:	dd400515 	stw	r21,20(sp)
    3958:	dd000415 	stw	r20,16(sp)
    395c:	dcc00315 	stw	r19,12(sp)
    3960:	dc800215 	stw	r18,8(sp)
    3964:	dc400115 	stw	r17,4(sp)
    3968:	dc000015 	stw	r16,0(sp)
    while (esp8266_init(true) == false) {
    396c:	00000106 	br	3974 <main+0x2c>
        usleep(3 * 1000 * 1000);//3 seconds
    3970:	001b9f40 	call	1b9f4 <usleep>



int main()
{
    while (esp8266_init(true) == false) {
    3974:	01000044 	movi	r4,1
    3978:	0000fec0 	call	fec <esp8266_init>
        usleep(3 * 1000 * 1000);//3 seconds
    397c:	01000bb4 	movhi	r4,46



int main()
{
    while (esp8266_init(true) == false) {
    3980:	10803fcc 	andi	r2,r2,255
        usleep(3 * 1000 * 1000);//3 seconds
    3984:	2131b004 	addi	r4,r4,-14656



int main()
{
    while (esp8266_init(true) == false) {
    3988:	103ff926 	beq	r2,zero,3970 <__alt_mem_nios_system_shared_memory+0xfffc3970>
        usleep(3 * 1000 * 1000);//3 seconds
    }
    fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
    398c:	01900004 	movi	r6,16384
    3990:	01400104 	movi	r5,4
    3994:	0009883a 	mov	r4,zero
    3998:	001ad8c0 	call	1ad8c <fcntl>

  	bool bPass = FALSE;

  	////////////////////////////////////
  	// init light sensor i2c and power on
  	Light_Init(LIGHT_I2C_OPENCORES_BASE);
    399c:	01000134 	movhi	r4,4
    39a0:	21041804 	addi	r4,r4,4192
    39a4:	00011000 	call	1100 <Light_Init>
  	bPass = Light_PowerSwitch(TRUE);
    39a8:	01000044 	movi	r4,1
    39ac:	00011a80 	call	11a8 <Light_PowerSwitch>
  	if(bPass)
    39b0:	10803fcc 	andi	r2,r2,255
    39b4:	10003a26 	beq	r2,zero,3aa0 <main+0x158>
  		printf("light sensor power up successful!\r\n");
    39b8:	010000b4 	movhi	r4,2
    39bc:	2139f804 	addi	r4,r4,-6176
    39c0:	000b4c80 	call	b4c8 <puts>
  	else
  		printf("light sensor power up failed!\r\n");

  	////////////////////////////////////
  	// init HDC1000: temperature and humidity sensor
  	RH_Temp_Init(RH_TEMP_I2C_OPENCORES_BASE);
    39c4:	01000134 	movhi	r4,4
    39c8:	21041004 	addi	r4,r4,4160
    39cc:	00022b40 	call	22b4 <RH_Temp_Init>
  	bPass = RH_Temp_Sensor_Init();
    39d0:	00024540 	call	2454 <RH_Temp_Sensor_Init>
  	if(bPass)
    39d4:	10803fcc 	andi	r2,r2,255
    39d8:	10002d26 	beq	r2,zero,3a90 <main+0x148>
  		printf("Init HDC1000 successful!\r\n");
    39dc:	010000b4 	movhi	r4,2
    39e0:	213a0904 	addi	r4,r4,-6108
    39e4:	000b4c80 	call	b4c8 <puts>



  	////////////////////////////////////
  	//init MPU9250 9-axis sensor
  	MPU9250_Init(MPU_I2C_OPENCORES_BASE);
    39e8:	01000134 	movhi	r4,4
    39ec:	21042004 	addi	r4,r4,4224
    39f0:	000157c0 	call	157c <MPU9250_Init>
  	MPU9250_initialize();
    39f4:	00019cc0 	call	19cc <MPU9250_initialize>
  	printf("\r\n");
    39f8:	010000b4 	movhi	r4,2

  	while(1){ // report every second

  		SEND_STATUS_REGISTER(loop_cnt|0x80000000);
  		//Mode select
  		unsigned com_reg = READ_COMMUNICATION_REGISTER;
    39fc:	04400134 	movhi	r17,4
				break;
			}
		}

  		set_thresh();  // Read threshold values from shared memory and set the thresh struct
  		IOWR_ALTERA_AVALON_PIO_DATA(0x41100,sp_themperature_out);
    3a00:	05000134 	movhi	r20,4

  	////////////////////////////////////
  	//init MPU9250 9-axis sensor
  	MPU9250_Init(MPU_I2C_OPENCORES_BASE);
  	MPU9250_initialize();
  	printf("\r\n");
    3a04:	2137ef04 	addi	r4,r4,-8260

  	while(1){ // report every second

  		SEND_STATUS_REGISTER(loop_cnt|0x80000000);
  		//Mode select
  		unsigned com_reg = READ_COMMUNICATION_REGISTER;
    3a08:	8c400104 	addi	r17,r17,4
				break;
			}
		}

  		set_thresh();  // Read threshold values from shared memory and set the thresh struct
  		IOWR_ALTERA_AVALON_PIO_DATA(0x41100,sp_themperature_out);
    3a0c:	a5044004 	addi	r20,r20,4352
  	//init MPU9250 9-axis sensor
  	MPU9250_Init(MPU_I2C_OPENCORES_BASE);
  	MPU9250_initialize();
  	printf("\r\n");

    int loop_cnt=0;
    3a10:	0021883a 	mov	r16,zero


  	while(1){ // report every second

  		SEND_STATUS_REGISTER(loop_cnt|0x80000000);
    3a14:	04c00134 	movhi	r19,4

  	////////////////////////////////////
  	//init MPU9250 9-axis sensor
  	MPU9250_Init(MPU_I2C_OPENCORES_BASE);
  	MPU9250_initialize();
  	printf("\r\n");
    3a18:	000b4c80 	call	b4c8 <puts>
  	while(1){ // report every second

  		SEND_STATUS_REGISTER(loop_cnt|0x80000000);
  		//Mode select
  		unsigned com_reg = READ_COMMUNICATION_REGISTER;
		if ( (com_reg&0xffff0000)== 0xaaaa0000 ) {
    3a1c:	04aaaab4 	movhi	r18,43690
			SEND_ACK_COMMUNICATION_REGISTER; // Send ACK
			switch (com_reg&0xffff) {
    3a20:	05400044 	movi	r21,1
    3a24:	05800084 	movi	r22,2
    3a28:	00000c06 	br	3a5c <main+0x114>
			default :
				break;
			}
		}

  		set_thresh();  // Read threshold values from shared memory and set the thresh struct
    3a2c:	0002d340 	call	2d34 <set_thresh>
  		IOWR_ALTERA_AVALON_PIO_DATA(0x41100,sp_themperature_out);
    3a30:	d0a70b17 	ldw	r2,-25556(gp)
    3a34:	a0800035 	stwio	r2,0(r20)
  		// print out values once every 16 loops
  		bool print_flag = ((loop_cnt) & 0xF) == 0;
  		Sensor_Report(print_flag);
    3a38:	810003cc 	andi	r4,r16,15
    3a3c:	2009003a 	cmpeq	r4,r4,zero
    3a40:	00032800 	call	3280 <Sensor_Report>

  		usleep(1000*50);
    3a44:	0130d414 	movui	r4,50000
    3a48:	001b9f40 	call	1b9f4 <usleep>

  		usleep(2000000);
    3a4c:	010007f4 	movhi	r4,31
    3a50:	21212004 	addi	r4,r4,-31616
  		loop_cnt++;
    3a54:	84000044 	addi	r16,r16,1
  		bool print_flag = ((loop_cnt) & 0xF) == 0;
  		Sensor_Report(print_flag);

  		usleep(1000*50);

  		usleep(2000000);
    3a58:	001b9f40 	call	1b9f4 <usleep>
    int loop_cnt=0;


  	while(1){ // report every second

  		SEND_STATUS_REGISTER(loop_cnt|0x80000000);
    3a5c:	80a00034 	orhi	r2,r16,32768
    3a60:	98800035 	stwio	r2,0(r19)
  		//Mode select
  		unsigned com_reg = READ_COMMUNICATION_REGISTER;
    3a64:	88800037 	ldwio	r2,0(r17)
		if ( (com_reg&0xffff0000)== 0xaaaa0000 ) {
    3a68:	10ffffec 	andhi	r3,r2,65535
    3a6c:	1cbfef1e 	bne	r3,r18,3a2c <__alt_mem_nios_system_shared_memory+0xfffc3a2c>
			SEND_ACK_COMMUNICATION_REGISTER; // Send ACK
    3a70:	88000035 	stwio	zero,0(r17)
			switch (com_reg&0xffff) {
    3a74:	10bfffcc 	andi	r2,r2,65535
    3a78:	15400326 	beq	r2,r21,3a88 <main+0x140>
    3a7c:	15bfeb1e 	bne	r2,r22,3a2c <__alt_mem_nios_system_shared_memory+0xfffc3a2c>
			case 1:
				g_clear_OOR_flag = false; break;
			case 2:
				g_clear_OOR_flag = true; break;
    3a80:	d5600105 	stb	r21,-32764(gp)
    3a84:	003fe906 	br	3a2c <__alt_mem_nios_system_shared_memory+0xfffc3a2c>
  		unsigned com_reg = READ_COMMUNICATION_REGISTER;
		if ( (com_reg&0xffff0000)== 0xaaaa0000 ) {
			SEND_ACK_COMMUNICATION_REGISTER; // Send ACK
			switch (com_reg&0xffff) {
			case 1:
				g_clear_OOR_flag = false; break;
    3a88:	d0200105 	stb	zero,-32764(gp)
    3a8c:	003fe706 	br	3a2c <__alt_mem_nios_system_shared_memory+0xfffc3a2c>
  	RH_Temp_Init(RH_TEMP_I2C_OPENCORES_BASE);
  	bPass = RH_Temp_Sensor_Init();
  	if(bPass)
  		printf("Init HDC1000 successful!\r\n");
  	else
  		printf("Init HDC1000 failed!\r\n");
    3a90:	010000b4 	movhi	r4,2
    3a94:	213a1004 	addi	r4,r4,-6080
    3a98:	000b4c80 	call	b4c8 <puts>
    3a9c:	003fd206 	br	39e8 <__alt_mem_nios_system_shared_memory+0xfffc39e8>
  	Light_Init(LIGHT_I2C_OPENCORES_BASE);
  	bPass = Light_PowerSwitch(TRUE);
  	if(bPass)
  		printf("light sensor power up successful!\r\n");
  	else
  		printf("light sensor power up failed!\r\n");
    3aa0:	010000b4 	movhi	r4,2
    3aa4:	213a0104 	addi	r4,r4,-6140
    3aa8:	000b4c80 	call	b4c8 <puts>
    3aac:	003fc506 	br	39c4 <__alt_mem_nios_system_shared_memory+0xfffc39c4>

00003ab0 <powf>:
    3ab0:	defff104 	addi	sp,sp,-60
    3ab4:	dc400a15 	stw	r17,40(sp)
    3ab8:	044000b4 	movhi	r17,2
    3abc:	dd000d15 	stw	r20,52(sp)
    3ac0:	dcc00c15 	stw	r19,48(sp)
    3ac4:	dc800b15 	stw	r18,44(sp)
    3ac8:	dc000915 	stw	r16,36(sp)
    3acc:	dfc00e15 	stw	ra,56(sp)
    3ad0:	8c424004 	addi	r17,r17,2304
    3ad4:	2029883a 	mov	r20,r4
    3ad8:	2827883a 	mov	r19,r5
    3adc:	0003f540 	call	3f54 <__ieee754_powf>
    3ae0:	1021883a 	mov	r16,r2
    3ae4:	88800017 	ldw	r2,0(r17)
    3ae8:	04bfffc4 	movi	r18,-1
    3aec:	14800326 	beq	r2,r18,3afc <powf+0x4c>
    3af0:	9809883a 	mov	r4,r19
    3af4:	0004de80 	call	4de8 <__fpclassifyf>
    3af8:	1000091e 	bne	r2,zero,3b20 <powf+0x70>
    3afc:	8005883a 	mov	r2,r16
    3b00:	dfc00e17 	ldw	ra,56(sp)
    3b04:	dd000d17 	ldw	r20,52(sp)
    3b08:	dcc00c17 	ldw	r19,48(sp)
    3b0c:	dc800b17 	ldw	r18,44(sp)
    3b10:	dc400a17 	ldw	r17,40(sp)
    3b14:	dc000917 	ldw	r16,36(sp)
    3b18:	dec00f04 	addi	sp,sp,60
    3b1c:	f800283a 	ret
    3b20:	a009883a 	mov	r4,r20
    3b24:	0004de80 	call	4de8 <__fpclassifyf>
    3b28:	000b883a 	mov	r5,zero
    3b2c:	1000241e 	bne	r2,zero,3bc0 <powf+0x110>
    3b30:	9809883a 	mov	r4,r19
    3b34:	0005a880 	call	5a88 <__eqsf2>
    3b38:	103ff01e 	bne	r2,zero,3afc <__alt_mem_nios_system_shared_memory+0xfffc3afc>
    3b3c:	00800044 	movi	r2,1
    3b40:	d8800015 	stw	r2,0(sp)
    3b44:	008000b4 	movhi	r2,2
    3b48:	a009883a 	mov	r4,r20
    3b4c:	10ba2904 	addi	r2,r2,-5980
    3b50:	d8800115 	stw	r2,4(sp)
    3b54:	d8000815 	stw	zero,32(sp)
    3b58:	0008ec40 	call	8ec4 <__extendsfdf2>
    3b5c:	9809883a 	mov	r4,r19
    3b60:	d8800215 	stw	r2,8(sp)
    3b64:	d8c00315 	stw	r3,12(sp)
    3b68:	0008ec40 	call	8ec4 <__extendsfdf2>
    3b6c:	89000017 	ldw	r4,0(r17)
    3b70:	d8800415 	stw	r2,16(sp)
    3b74:	008ffc34 	movhi	r2,16368
    3b78:	d8c00515 	stw	r3,20(sp)
    3b7c:	d8000615 	stw	zero,24(sp)
    3b80:	d8800715 	stw	r2,28(sp)
    3b84:	24802726 	beq	r4,r18,3c24 <powf+0x174>
    3b88:	00800084 	movi	r2,2
    3b8c:	20802526 	beq	r4,r2,3c24 <powf+0x174>
    3b90:	d809883a 	mov	r4,sp
    3b94:	0004bcc0 	call	4bcc <matherr>
    3b98:	10006a26 	beq	r2,zero,3d44 <powf+0x294>
    3b9c:	d8800817 	ldw	r2,32(sp)
    3ba0:	10000326 	beq	r2,zero,3bb0 <powf+0x100>
    3ba4:	00091e00 	call	91e0 <__errno>
    3ba8:	d8c00817 	ldw	r3,32(sp)
    3bac:	10c00015 	stw	r3,0(r2)
    3bb0:	d9000617 	ldw	r4,24(sp)
    3bb4:	d9400717 	ldw	r5,28(sp)
    3bb8:	0008fd40 	call	8fd4 <__truncdfsf2>
    3bbc:	003fd006 	br	3b00 <__alt_mem_nios_system_shared_memory+0xfffc3b00>
    3bc0:	a009883a 	mov	r4,r20
    3bc4:	0005a880 	call	5a88 <__eqsf2>
    3bc8:	1000181e 	bne	r2,zero,3c2c <powf+0x17c>
    3bcc:	000b883a 	mov	r5,zero
    3bd0:	9809883a 	mov	r4,r19
    3bd4:	0005a880 	call	5a88 <__eqsf2>
    3bd8:	10003a1e 	bne	r2,zero,3cc4 <powf+0x214>
    3bdc:	00800044 	movi	r2,1
    3be0:	d8800015 	stw	r2,0(sp)
    3be4:	008000b4 	movhi	r2,2
    3be8:	a009883a 	mov	r4,r20
    3bec:	10ba2904 	addi	r2,r2,-5980
    3bf0:	d8800115 	stw	r2,4(sp)
    3bf4:	d8000815 	stw	zero,32(sp)
    3bf8:	0008ec40 	call	8ec4 <__extendsfdf2>
    3bfc:	9809883a 	mov	r4,r19
    3c00:	d8800215 	stw	r2,8(sp)
    3c04:	d8c00315 	stw	r3,12(sp)
    3c08:	0008ec40 	call	8ec4 <__extendsfdf2>
    3c0c:	89000017 	ldw	r4,0(r17)
    3c10:	d8800415 	stw	r2,16(sp)
    3c14:	d8c00515 	stw	r3,20(sp)
    3c18:	d8000615 	stw	zero,24(sp)
    3c1c:	d8000715 	stw	zero,28(sp)
    3c20:	203fdb26 	beq	r4,zero,3b90 <__alt_mem_nios_system_shared_memory+0xfffc3b90>
    3c24:	008fe034 	movhi	r2,16256
    3c28:	003fb506 	br	3b00 <__alt_mem_nios_system_shared_memory+0xfffc3b00>
    3c2c:	8009883a 	mov	r4,r16
    3c30:	0004dd00 	call	4dd0 <finitef>
    3c34:	10004726 	beq	r2,zero,3d54 <powf+0x2a4>
    3c38:	000b883a 	mov	r5,zero
    3c3c:	8009883a 	mov	r4,r16
    3c40:	0005a880 	call	5a88 <__eqsf2>
    3c44:	103fad1e 	bne	r2,zero,3afc <__alt_mem_nios_system_shared_memory+0xfffc3afc>
    3c48:	a009883a 	mov	r4,r20
    3c4c:	0004dd00 	call	4dd0 <finitef>
    3c50:	103faa26 	beq	r2,zero,3afc <__alt_mem_nios_system_shared_memory+0xfffc3afc>
    3c54:	9809883a 	mov	r4,r19
    3c58:	0004dd00 	call	4dd0 <finitef>
    3c5c:	103fa726 	beq	r2,zero,3afc <__alt_mem_nios_system_shared_memory+0xfffc3afc>
    3c60:	00800104 	movi	r2,4
    3c64:	d8800015 	stw	r2,0(sp)
    3c68:	008000b4 	movhi	r2,2
    3c6c:	a009883a 	mov	r4,r20
    3c70:	10ba2904 	addi	r2,r2,-5980
    3c74:	d8800115 	stw	r2,4(sp)
    3c78:	d8000815 	stw	zero,32(sp)
    3c7c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3c80:	9809883a 	mov	r4,r19
    3c84:	d8800215 	stw	r2,8(sp)
    3c88:	d8c00315 	stw	r3,12(sp)
    3c8c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3c90:	89000017 	ldw	r4,0(r17)
    3c94:	d8800415 	stw	r2,16(sp)
    3c98:	d8c00515 	stw	r3,20(sp)
    3c9c:	d8000615 	stw	zero,24(sp)
    3ca0:	d8000715 	stw	zero,28(sp)
    3ca4:	00800084 	movi	r2,2
    3ca8:	20804926 	beq	r4,r2,3dd0 <powf+0x320>
    3cac:	d809883a 	mov	r4,sp
    3cb0:	0004bcc0 	call	4bcc <matherr>
    3cb4:	10004626 	beq	r2,zero,3dd0 <powf+0x320>
    3cb8:	d8800817 	ldw	r2,32(sp)
    3cbc:	103fbc26 	beq	r2,zero,3bb0 <__alt_mem_nios_system_shared_memory+0xfffc3bb0>
    3cc0:	003fb806 	br	3ba4 <__alt_mem_nios_system_shared_memory+0xfffc3ba4>
    3cc4:	9809883a 	mov	r4,r19
    3cc8:	0004dd00 	call	4dd0 <finitef>
    3ccc:	103f8b26 	beq	r2,zero,3afc <__alt_mem_nios_system_shared_memory+0xfffc3afc>
    3cd0:	000b883a 	mov	r5,zero
    3cd4:	9809883a 	mov	r4,r19
    3cd8:	0005bbc0 	call	5bbc <__lesf2>
    3cdc:	103f870e 	bge	r2,zero,3afc <__alt_mem_nios_system_shared_memory+0xfffc3afc>
    3ce0:	00800044 	movi	r2,1
    3ce4:	d8800015 	stw	r2,0(sp)
    3ce8:	008000b4 	movhi	r2,2
    3cec:	a009883a 	mov	r4,r20
    3cf0:	10ba2904 	addi	r2,r2,-5980
    3cf4:	d8800115 	stw	r2,4(sp)
    3cf8:	d8000815 	stw	zero,32(sp)
    3cfc:	0008ec40 	call	8ec4 <__extendsfdf2>
    3d00:	9809883a 	mov	r4,r19
    3d04:	d8800215 	stw	r2,8(sp)
    3d08:	d8c00315 	stw	r3,12(sp)
    3d0c:	0008ec40 	call	8ec4 <__extendsfdf2>
    3d10:	89000017 	ldw	r4,0(r17)
    3d14:	d8800415 	stw	r2,16(sp)
    3d18:	d8c00515 	stw	r3,20(sp)
    3d1c:	d8000615 	stw	zero,24(sp)
    3d20:	20002626 	beq	r4,zero,3dbc <powf+0x30c>
    3d24:	00bffc34 	movhi	r2,65520
    3d28:	d8800715 	stw	r2,28(sp)
    3d2c:	00800084 	movi	r2,2
    3d30:	2080231e 	bne	r4,r2,3dc0 <powf+0x310>
    3d34:	00091e00 	call	91e0 <__errno>
    3d38:	00c00844 	movi	r3,33
    3d3c:	10c00015 	stw	r3,0(r2)
    3d40:	003fdd06 	br	3cb8 <__alt_mem_nios_system_shared_memory+0xfffc3cb8>
    3d44:	00091e00 	call	91e0 <__errno>
    3d48:	00c00844 	movi	r3,33
    3d4c:	10c00015 	stw	r3,0(r2)
    3d50:	003f9206 	br	3b9c <__alt_mem_nios_system_shared_memory+0xfffc3b9c>
    3d54:	a009883a 	mov	r4,r20
    3d58:	0004dd00 	call	4dd0 <finitef>
    3d5c:	103fb626 	beq	r2,zero,3c38 <__alt_mem_nios_system_shared_memory+0xfffc3c38>
    3d60:	9809883a 	mov	r4,r19
    3d64:	0004dd00 	call	4dd0 <finitef>
    3d68:	103fb326 	beq	r2,zero,3c38 <__alt_mem_nios_system_shared_memory+0xfffc3c38>
    3d6c:	8009883a 	mov	r4,r16
    3d70:	0004de80 	call	4de8 <__fpclassifyf>
    3d74:	a009883a 	mov	r4,r20
    3d78:	1000191e 	bne	r2,zero,3de0 <powf+0x330>
    3d7c:	00800044 	movi	r2,1
    3d80:	d8800015 	stw	r2,0(sp)
    3d84:	008000b4 	movhi	r2,2
    3d88:	10ba2904 	addi	r2,r2,-5980
    3d8c:	d8800115 	stw	r2,4(sp)
    3d90:	d8000815 	stw	zero,32(sp)
    3d94:	0008ec40 	call	8ec4 <__extendsfdf2>
    3d98:	9809883a 	mov	r4,r19
    3d9c:	d8800215 	stw	r2,8(sp)
    3da0:	d8c00315 	stw	r3,12(sp)
    3da4:	0008ec40 	call	8ec4 <__extendsfdf2>
    3da8:	8c000017 	ldw	r16,0(r17)
    3dac:	d8800415 	stw	r2,16(sp)
    3db0:	d8c00515 	stw	r3,20(sp)
    3db4:	8000291e 	bne	r16,zero,3e5c <powf+0x3ac>
    3db8:	d8000615 	stw	zero,24(sp)
    3dbc:	d8000715 	stw	zero,28(sp)
    3dc0:	d809883a 	mov	r4,sp
    3dc4:	0004bcc0 	call	4bcc <matherr>
    3dc8:	103fbb1e 	bne	r2,zero,3cb8 <__alt_mem_nios_system_shared_memory+0xfffc3cb8>
    3dcc:	003fd906 	br	3d34 <__alt_mem_nios_system_shared_memory+0xfffc3d34>
    3dd0:	00091e00 	call	91e0 <__errno>
    3dd4:	00c00884 	movi	r3,34
    3dd8:	10c00015 	stw	r3,0(r2)
    3ddc:	003fb606 	br	3cb8 <__alt_mem_nios_system_shared_memory+0xfffc3cb8>
    3de0:	008000c4 	movi	r2,3
    3de4:	d8800015 	stw	r2,0(sp)
    3de8:	008000b4 	movhi	r2,2
    3dec:	10ba2904 	addi	r2,r2,-5980
    3df0:	d8800115 	stw	r2,4(sp)
    3df4:	d8000815 	stw	zero,32(sp)
    3df8:	0008ec40 	call	8ec4 <__extendsfdf2>
    3dfc:	9809883a 	mov	r4,r19
    3e00:	d8800215 	stw	r2,8(sp)
    3e04:	d8c00315 	stw	r3,12(sp)
    3e08:	0008ec40 	call	8ec4 <__extendsfdf2>
    3e0c:	89000017 	ldw	r4,0(r17)
    3e10:	d8800415 	stw	r2,16(sp)
    3e14:	d8c00515 	stw	r3,20(sp)
    3e18:	000b883a 	mov	r5,zero
    3e1c:	2000191e 	bne	r4,zero,3e84 <powf+0x3d4>
    3e20:	00b80034 	movhi	r2,57344
    3e24:	d8800615 	stw	r2,24(sp)
    3e28:	0091fc34 	movhi	r2,18416
    3e2c:	10bfffc4 	addi	r2,r2,-1
    3e30:	a009883a 	mov	r4,r20
    3e34:	d8800715 	stw	r2,28(sp)
    3e38:	0005bbc0 	call	5bbc <__lesf2>
    3e3c:	10001b16 	blt	r2,zero,3eac <powf+0x3fc>
    3e40:	d809883a 	mov	r4,sp
    3e44:	0004bcc0 	call	4bcc <matherr>
    3e48:	103f541e 	bne	r2,zero,3b9c <__alt_mem_nios_system_shared_memory+0xfffc3b9c>
    3e4c:	00091e00 	call	91e0 <__errno>
    3e50:	00c00884 	movi	r3,34
    3e54:	10c00015 	stw	r3,0(r2)
    3e58:	003f5006 	br	3b9c <__alt_mem_nios_system_shared_memory+0xfffc3b9c>
    3e5c:	000d883a 	mov	r6,zero
    3e60:	000f883a 	mov	r7,zero
    3e64:	0009883a 	mov	r4,zero
    3e68:	000b883a 	mov	r5,zero
    3e6c:	00070580 	call	7058 <__divdf3>
    3e70:	d8800615 	stw	r2,24(sp)
    3e74:	d8c00715 	stw	r3,28(sp)
    3e78:	00800084 	movi	r2,2
    3e7c:	80bfad26 	beq	r16,r2,3d34 <__alt_mem_nios_system_shared_memory+0xfffc3d34>
    3e80:	003fcf06 	br	3dc0 <__alt_mem_nios_system_shared_memory+0xfffc3dc0>
    3e84:	009ffc34 	movhi	r2,32752
    3e88:	a009883a 	mov	r4,r20
    3e8c:	d8000615 	stw	zero,24(sp)
    3e90:	d8800715 	stw	r2,28(sp)
    3e94:	0005bbc0 	call	5bbc <__lesf2>
    3e98:	10001a16 	blt	r2,zero,3f04 <powf+0x454>
    3e9c:	88c00017 	ldw	r3,0(r17)
    3ea0:	00800084 	movi	r2,2
    3ea4:	18bfe61e 	bne	r3,r2,3e40 <__alt_mem_nios_system_shared_memory+0xfffc3e40>
    3ea8:	003fe806 	br	3e4c <__alt_mem_nios_system_shared_memory+0xfffc3e4c>
    3eac:	014fc034 	movhi	r5,16128
    3eb0:	9809883a 	mov	r4,r19
    3eb4:	0005c840 	call	5c84 <__mulsf3>
    3eb8:	1009883a 	mov	r4,r2
    3ebc:	0008ec40 	call	8ec4 <__extendsfdf2>
    3ec0:	1009883a 	mov	r4,r2
    3ec4:	180b883a 	mov	r5,r3
    3ec8:	1025883a 	mov	r18,r2
    3ecc:	1821883a 	mov	r16,r3
    3ed0:	0004bd40 	call	4bd4 <rint>
    3ed4:	100d883a 	mov	r6,r2
    3ed8:	180f883a 	mov	r7,r3
    3edc:	9009883a 	mov	r4,r18
    3ee0:	800b883a 	mov	r5,r16
    3ee4:	0007a280 	call	7a28 <__eqdf2>
    3ee8:	103fec26 	beq	r2,zero,3e9c <__alt_mem_nios_system_shared_memory+0xfffc3e9c>
    3eec:	00b80034 	movhi	r2,57344
    3ef0:	d8800615 	stw	r2,24(sp)
    3ef4:	00b1fc34 	movhi	r2,51184
    3ef8:	10bfffc4 	addi	r2,r2,-1
    3efc:	d8800715 	stw	r2,28(sp)
    3f00:	003fe606 	br	3e9c <__alt_mem_nios_system_shared_memory+0xfffc3e9c>
    3f04:	014fc034 	movhi	r5,16128
    3f08:	9809883a 	mov	r4,r19
    3f0c:	0005c840 	call	5c84 <__mulsf3>
    3f10:	1009883a 	mov	r4,r2
    3f14:	0008ec40 	call	8ec4 <__extendsfdf2>
    3f18:	1009883a 	mov	r4,r2
    3f1c:	180b883a 	mov	r5,r3
    3f20:	1025883a 	mov	r18,r2
    3f24:	1821883a 	mov	r16,r3
    3f28:	0004bd40 	call	4bd4 <rint>
    3f2c:	100d883a 	mov	r6,r2
    3f30:	180f883a 	mov	r7,r3
    3f34:	9009883a 	mov	r4,r18
    3f38:	800b883a 	mov	r5,r16
    3f3c:	0007a280 	call	7a28 <__eqdf2>
    3f40:	103fd626 	beq	r2,zero,3e9c <__alt_mem_nios_system_shared_memory+0xfffc3e9c>
    3f44:	00bffc34 	movhi	r2,65520
    3f48:	d8000615 	stw	zero,24(sp)
    3f4c:	d8800715 	stw	r2,28(sp)
    3f50:	003fd206 	br	3e9c <__alt_mem_nios_system_shared_memory+0xfffc3e9c>

00003f54 <__ieee754_powf>:
    3f54:	00a00034 	movhi	r2,32768
    3f58:	defff104 	addi	sp,sp,-60
    3f5c:	10bfffc4 	addi	r2,r2,-1
    3f60:	dc800715 	stw	r18,28(sp)
    3f64:	dfc00e15 	stw	ra,56(sp)
    3f68:	df000d15 	stw	fp,52(sp)
    3f6c:	ddc00c15 	stw	r23,48(sp)
    3f70:	dd800b15 	stw	r22,44(sp)
    3f74:	dd400a15 	stw	r21,40(sp)
    3f78:	dd000915 	stw	r20,36(sp)
    3f7c:	dcc00815 	stw	r19,32(sp)
    3f80:	dc400615 	stw	r17,24(sp)
    3f84:	dc000515 	stw	r16,20(sp)
    3f88:	1164703a 	and	r18,r2,r5
    3f8c:	90003426 	beq	r18,zero,4060 <__ieee754_powf+0x10c>
    3f90:	1126703a 	and	r19,r2,r4
    3f94:	009fe034 	movhi	r2,32640
    3f98:	2021883a 	mov	r16,r4
    3f9c:	202b883a 	mov	r21,r4
    3fa0:	14c00e0e 	bge	r2,r19,3fdc <__ieee754_powf+0x88>
    3fa4:	010000b4 	movhi	r4,2
    3fa8:	21395804 	addi	r4,r4,-6816
    3fac:	dfc00e17 	ldw	ra,56(sp)
    3fb0:	df000d17 	ldw	fp,52(sp)
    3fb4:	ddc00c17 	ldw	r23,48(sp)
    3fb8:	dd800b17 	ldw	r22,44(sp)
    3fbc:	dd400a17 	ldw	r21,40(sp)
    3fc0:	dd000917 	ldw	r20,36(sp)
    3fc4:	dcc00817 	ldw	r19,32(sp)
    3fc8:	dc800717 	ldw	r18,28(sp)
    3fcc:	dc400617 	ldw	r17,24(sp)
    3fd0:	dc000517 	ldw	r16,20(sp)
    3fd4:	dec00f04 	addi	sp,sp,60
    3fd8:	0004e401 	jmpi	4e40 <nanf>
    3fdc:	14802d16 	blt	r2,r18,4094 <__ieee754_powf+0x140>
    3fe0:	2823883a 	mov	r17,r5
    3fe4:	2829883a 	mov	r20,r5
    3fe8:	20004216 	blt	r4,zero,40f4 <__ieee754_powf+0x1a0>
    3fec:	002d883a 	mov	r22,zero
    3ff0:	009fe034 	movhi	r2,32640
    3ff4:	90803926 	beq	r18,r2,40dc <__ieee754_powf+0x188>
    3ff8:	008fe034 	movhi	r2,16256
    3ffc:	90804b26 	beq	r18,r2,412c <__ieee754_powf+0x1d8>
    4000:	00900034 	movhi	r2,16384
    4004:	a0805926 	beq	r20,r2,416c <__ieee754_powf+0x218>
    4008:	008fc034 	movhi	r2,16128
    400c:	8009883a 	mov	r4,r16
    4010:	a0802426 	beq	r20,r2,40a4 <__ieee754_powf+0x150>
    4014:	0004dc00 	call	4dc0 <fabsf>
    4018:	1009883a 	mov	r4,r2
    401c:	009fe034 	movhi	r2,32640
    4020:	98804526 	beq	r19,r2,4138 <__ieee754_powf+0x1e4>
    4024:	98004426 	beq	r19,zero,4138 <__ieee754_powf+0x1e4>
    4028:	014fe034 	movhi	r5,16256
    402c:	99404226 	beq	r19,r5,4138 <__ieee754_powf+0x1e4>
    4030:	802ad7fa 	srli	r21,r16,31
    4034:	ad7fffc4 	addi	r21,r21,-1
    4038:	b544b03a 	or	r2,r22,r21
    403c:	10006726 	beq	r2,zero,41dc <__ieee754_powf+0x288>
    4040:	00934034 	movhi	r2,19712
    4044:	14806c0e 	bge	r2,r18,41f8 <__ieee754_powf+0x2a4>
    4048:	008fe034 	movhi	r2,16256
    404c:	10bffdc4 	addi	r2,r2,-9
    4050:	14c1f816 	blt	r2,r19,4834 <__ieee754_powf+0x8e0>
    4054:	a001fb16 	blt	r20,zero,4844 <__ieee754_powf+0x8f0>
    4058:	0005883a 	mov	r2,zero
    405c:	00000106 	br	4064 <__ieee754_powf+0x110>
    4060:	008fe034 	movhi	r2,16256
    4064:	dfc00e17 	ldw	ra,56(sp)
    4068:	df000d17 	ldw	fp,52(sp)
    406c:	ddc00c17 	ldw	r23,48(sp)
    4070:	dd800b17 	ldw	r22,44(sp)
    4074:	dd400a17 	ldw	r21,40(sp)
    4078:	dd000917 	ldw	r20,36(sp)
    407c:	dcc00817 	ldw	r19,32(sp)
    4080:	dc800717 	ldw	r18,28(sp)
    4084:	dc400617 	ldw	r17,24(sp)
    4088:	dc000517 	ldw	r16,20(sp)
    408c:	dec00f04 	addi	sp,sp,60
    4090:	f800283a 	ret
    4094:	00cfe034 	movhi	r3,16256
    4098:	9805883a 	mov	r2,r19
    409c:	98fff126 	beq	r19,r3,4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    40a0:	003fc006 	br	3fa4 <__alt_mem_nios_system_shared_memory+0xfffc3fa4>
    40a4:	a800350e 	bge	r21,zero,417c <__ieee754_powf+0x228>
    40a8:	0004dc00 	call	4dc0 <fabsf>
    40ac:	1009883a 	mov	r4,r2
    40b0:	009fe034 	movhi	r2,32640
    40b4:	98800126 	beq	r19,r2,40bc <__ieee754_powf+0x168>
    40b8:	983fdb1e 	bne	r19,zero,4028 <__alt_mem_nios_system_shared_memory+0xfffc4028>
    40bc:	00b02034 	movhi	r2,49280
    40c0:	9885883a 	add	r2,r19,r2
    40c4:	1584b03a 	or	r2,r2,r22
    40c8:	10003e26 	beq	r2,zero,41c4 <__ieee754_powf+0x270>
    40cc:	00800044 	movi	r2,1
    40d0:	b081cf26 	beq	r22,r2,4810 <__ieee754_powf+0x8bc>
    40d4:	2005883a 	mov	r2,r4
    40d8:	003fe206 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    40dc:	008fe034 	movhi	r2,16256
    40e0:	98803226 	beq	r19,r2,41ac <__ieee754_powf+0x258>
    40e4:	14c01e0e 	bge	r2,r19,4160 <__ieee754_powf+0x20c>
    40e8:	a03fdb16 	blt	r20,zero,4058 <__alt_mem_nios_system_shared_memory+0xfffc4058>
    40ec:	8805883a 	mov	r2,r17
    40f0:	003fdc06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    40f4:	0092e034 	movhi	r2,19328
    40f8:	10bfffc4 	addi	r2,r2,-1
    40fc:	14801616 	blt	r2,r18,4158 <__ieee754_powf+0x204>
    4100:	008fe034 	movhi	r2,16256
    4104:	10bfffc4 	addi	r2,r2,-1
    4108:	1480060e 	bge	r2,r18,4124 <__ieee754_powf+0x1d0>
    410c:	9005d5fa 	srai	r2,r18,23
    4110:	00c02584 	movi	r3,150
    4114:	1885c83a 	sub	r2,r3,r2
    4118:	9087d83a 	sra	r3,r18,r2
    411c:	1884983a 	sll	r2,r3,r2
    4120:	9081b526 	beq	r18,r2,47f8 <__ieee754_powf+0x8a4>
    4124:	002d883a 	mov	r22,zero
    4128:	003fb306 	br	3ff8 <__alt_mem_nios_system_shared_memory+0xfffc3ff8>
    412c:	a0002116 	blt	r20,zero,41b4 <__ieee754_powf+0x260>
    4130:	8005883a 	mov	r2,r16
    4134:	003fcb06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    4138:	a000040e 	bge	r20,zero,414c <__ieee754_powf+0x1f8>
    413c:	200b883a 	mov	r5,r4
    4140:	010fe034 	movhi	r4,16256
    4144:	00056480 	call	5648 <__divsf3>
    4148:	1009883a 	mov	r4,r2
    414c:	2005883a 	mov	r2,r4
    4150:	a83fc40e 	bge	r21,zero,4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    4154:	003fd906 	br	40bc <__alt_mem_nios_system_shared_memory+0xfffc40bc>
    4158:	05800084 	movi	r22,2
    415c:	003fa406 	br	3ff0 <__alt_mem_nios_system_shared_memory+0xfffc3ff0>
    4160:	a03fbd0e 	bge	r20,zero,4058 <__alt_mem_nios_system_shared_memory+0xfffc4058>
    4164:	88a0003c 	xorhi	r2,r17,32768
    4168:	003fbe06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    416c:	800b883a 	mov	r5,r16
    4170:	8009883a 	mov	r4,r16
    4174:	0005c840 	call	5c84 <__mulsf3>
    4178:	003fba06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    417c:	dfc00e17 	ldw	ra,56(sp)
    4180:	df000d17 	ldw	fp,52(sp)
    4184:	ddc00c17 	ldw	r23,48(sp)
    4188:	dd800b17 	ldw	r22,44(sp)
    418c:	dd400a17 	ldw	r21,40(sp)
    4190:	dd000917 	ldw	r20,36(sp)
    4194:	dcc00817 	ldw	r19,32(sp)
    4198:	dc800717 	ldw	r18,28(sp)
    419c:	dc400617 	ldw	r17,24(sp)
    41a0:	dc000517 	ldw	r16,20(sp)
    41a4:	dec00f04 	addi	sp,sp,60
    41a8:	0004a781 	jmpi	4a78 <__ieee754_sqrtf>
    41ac:	9805883a 	mov	r2,r19
    41b0:	003fac06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    41b4:	800b883a 	mov	r5,r16
    41b8:	9009883a 	mov	r4,r18
    41bc:	00056480 	call	5648 <__divsf3>
    41c0:	003fa806 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    41c4:	200b883a 	mov	r5,r4
    41c8:	00060b40 	call	60b4 <__subsf3>
    41cc:	100b883a 	mov	r5,r2
    41d0:	1009883a 	mov	r4,r2
    41d4:	00056480 	call	5648 <__divsf3>
    41d8:	003fa206 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    41dc:	800b883a 	mov	r5,r16
    41e0:	8009883a 	mov	r4,r16
    41e4:	00060b40 	call	60b4 <__subsf3>
    41e8:	100b883a 	mov	r5,r2
    41ec:	1009883a 	mov	r4,r2
    41f0:	00056480 	call	5648 <__divsf3>
    41f4:	003f9b06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    41f8:	00802034 	movhi	r2,128
    41fc:	10bfffc4 	addi	r2,r2,-1
    4200:	14c18a16 	blt	r2,r19,482c <__ieee754_powf+0x8d8>
    4204:	0152e034 	movhi	r5,19328
    4208:	0005c840 	call	5c84 <__mulsf3>
    420c:	1027883a 	mov	r19,r2
    4210:	01bffa04 	movi	r6,-24
    4214:	9807d5fa 	srai	r3,r19,23
    4218:	00802034 	movhi	r2,128
    421c:	10bfffc4 	addi	r2,r2,-1
    4220:	18ffe044 	addi	r3,r3,-127
    4224:	198d883a 	add	r6,r3,r6
    4228:	00c00774 	movhi	r3,29
    422c:	9884703a 	and	r2,r19,r2
    4230:	18f11c44 	addi	r3,r3,-15247
    4234:	140fe034 	orhi	r16,r2,16256
    4238:	1881770e 	bge	r3,r2,4818 <__ieee754_powf+0x8c4>
    423c:	00c017b4 	movhi	r3,94
    4240:	18ecf584 	addi	r3,r3,-19498
    4244:	1881fc0e 	bge	r3,r2,4a38 <__ieee754_powf+0xae4>
    4248:	00bfe034 	movhi	r2,65408
    424c:	31800044 	addi	r6,r6,1
    4250:	80a1883a 	add	r16,r16,r2
    4254:	d8000015 	stw	zero,0(sp)
    4258:	0011883a 	mov	r8,zero
    425c:	0007883a 	mov	r3,zero
    4260:	050fe034 	movhi	r20,16256
    4264:	a00b883a 	mov	r5,r20
    4268:	8009883a 	mov	r4,r16
    426c:	d9800415 	stw	r6,16(sp)
    4270:	da000315 	stw	r8,12(sp)
    4274:	d8c00115 	stw	r3,4(sp)
    4278:	00060b40 	call	60b4 <__subsf3>
    427c:	a00b883a 	mov	r5,r20
    4280:	8009883a 	mov	r4,r16
    4284:	1039883a 	mov	fp,r2
    4288:	00051800 	call	5180 <__addsf3>
    428c:	100b883a 	mov	r5,r2
    4290:	010fe034 	movhi	r4,16256
    4294:	00056480 	call	5648 <__divsf3>
    4298:	e009883a 	mov	r4,fp
    429c:	100b883a 	mov	r5,r2
    42a0:	d8800215 	stw	r2,8(sp)
    42a4:	0005c840 	call	5c84 <__mulsf3>
    42a8:	102f883a 	mov	r23,r2
    42ac:	8005d07a 	srai	r2,r16,1
    42b0:	d8c00117 	ldw	r3,4(sp)
    42b4:	04bc0004 	movi	r18,-4096
    42b8:	11080034 	orhi	r4,r2,8192
    42bc:	00800134 	movhi	r2,4
    42c0:	2085883a 	add	r2,r4,r2
    42c4:	95e6703a 	and	r19,r18,r23
    42c8:	10c7883a 	add	r3,r2,r3
    42cc:	180b883a 	mov	r5,r3
    42d0:	9809883a 	mov	r4,r19
    42d4:	d8c00115 	stw	r3,4(sp)
    42d8:	0005c840 	call	5c84 <__mulsf3>
    42dc:	e009883a 	mov	r4,fp
    42e0:	100b883a 	mov	r5,r2
    42e4:	00060b40 	call	60b4 <__subsf3>
    42e8:	d8c00117 	ldw	r3,4(sp)
    42ec:	a00b883a 	mov	r5,r20
    42f0:	1039883a 	mov	fp,r2
    42f4:	1809883a 	mov	r4,r3
    42f8:	00060b40 	call	60b4 <__subsf3>
    42fc:	8009883a 	mov	r4,r16
    4300:	100b883a 	mov	r5,r2
    4304:	00060b40 	call	60b4 <__subsf3>
    4308:	980b883a 	mov	r5,r19
    430c:	1009883a 	mov	r4,r2
    4310:	0005c840 	call	5c84 <__mulsf3>
    4314:	e009883a 	mov	r4,fp
    4318:	100b883a 	mov	r5,r2
    431c:	00060b40 	call	60b4 <__subsf3>
    4320:	da400217 	ldw	r9,8(sp)
    4324:	1009883a 	mov	r4,r2
    4328:	480b883a 	mov	r5,r9
    432c:	0005c840 	call	5c84 <__mulsf3>
    4330:	b80b883a 	mov	r5,r23
    4334:	b809883a 	mov	r4,r23
    4338:	1029883a 	mov	r20,r2
    433c:	0005c840 	call	5c84 <__mulsf3>
    4340:	014f9534 	movhi	r5,15956
    4344:	297c5084 	addi	r5,r5,-3774
    4348:	1009883a 	mov	r4,r2
    434c:	1021883a 	mov	r16,r2
    4350:	0005c840 	call	5c84 <__mulsf3>
    4354:	014f9b34 	movhi	r5,15980
    4358:	294c9544 	addi	r5,r5,12885
    435c:	1009883a 	mov	r4,r2
    4360:	00051800 	call	5180 <__addsf3>
    4364:	800b883a 	mov	r5,r16
    4368:	1009883a 	mov	r4,r2
    436c:	0005c840 	call	5c84 <__mulsf3>
    4370:	014fa334 	movhi	r5,16012
    4374:	2968c144 	addi	r5,r5,-23803
    4378:	1009883a 	mov	r4,r2
    437c:	00051800 	call	5180 <__addsf3>
    4380:	800b883a 	mov	r5,r16
    4384:	1009883a 	mov	r4,r2
    4388:	0005c840 	call	5c84 <__mulsf3>
    438c:	014faaf4 	movhi	r5,16043
    4390:	296aaac4 	addi	r5,r5,-21845
    4394:	1009883a 	mov	r4,r2
    4398:	00051800 	call	5180 <__addsf3>
    439c:	800b883a 	mov	r5,r16
    43a0:	1009883a 	mov	r4,r2
    43a4:	0005c840 	call	5c84 <__mulsf3>
    43a8:	014fb6f4 	movhi	r5,16091
    43ac:	295b6dc4 	addi	r5,r5,28087
    43b0:	1009883a 	mov	r4,r2
    43b4:	00051800 	call	5180 <__addsf3>
    43b8:	800b883a 	mov	r5,r16
    43bc:	1009883a 	mov	r4,r2
    43c0:	0005c840 	call	5c84 <__mulsf3>
    43c4:	014fc6b4 	movhi	r5,16154
    43c8:	29666684 	addi	r5,r5,-26214
    43cc:	1009883a 	mov	r4,r2
    43d0:	00051800 	call	5180 <__addsf3>
    43d4:	800b883a 	mov	r5,r16
    43d8:	8009883a 	mov	r4,r16
    43dc:	1039883a 	mov	fp,r2
    43e0:	0005c840 	call	5c84 <__mulsf3>
    43e4:	e009883a 	mov	r4,fp
    43e8:	100b883a 	mov	r5,r2
    43ec:	0005c840 	call	5c84 <__mulsf3>
    43f0:	980b883a 	mov	r5,r19
    43f4:	b809883a 	mov	r4,r23
    43f8:	1021883a 	mov	r16,r2
    43fc:	00051800 	call	5180 <__addsf3>
    4400:	a00b883a 	mov	r5,r20
    4404:	1009883a 	mov	r4,r2
    4408:	0005c840 	call	5c84 <__mulsf3>
    440c:	800b883a 	mov	r5,r16
    4410:	1009883a 	mov	r4,r2
    4414:	00051800 	call	5180 <__addsf3>
    4418:	980b883a 	mov	r5,r19
    441c:	9809883a 	mov	r4,r19
    4420:	1021883a 	mov	r16,r2
    4424:	0005c840 	call	5c84 <__mulsf3>
    4428:	01501034 	movhi	r5,16448
    442c:	1009883a 	mov	r4,r2
    4430:	d8800115 	stw	r2,4(sp)
    4434:	00051800 	call	5180 <__addsf3>
    4438:	800b883a 	mov	r5,r16
    443c:	1009883a 	mov	r4,r2
    4440:	00051800 	call	5180 <__addsf3>
    4444:	14b8703a 	and	fp,r2,r18
    4448:	e00b883a 	mov	r5,fp
    444c:	9809883a 	mov	r4,r19
    4450:	0005c840 	call	5c84 <__mulsf3>
    4454:	e009883a 	mov	r4,fp
    4458:	01501034 	movhi	r5,16448
    445c:	1027883a 	mov	r19,r2
    4460:	00060b40 	call	60b4 <__subsf3>
    4464:	d9c00117 	ldw	r7,4(sp)
    4468:	1009883a 	mov	r4,r2
    446c:	380b883a 	mov	r5,r7
    4470:	00060b40 	call	60b4 <__subsf3>
    4474:	8009883a 	mov	r4,r16
    4478:	100b883a 	mov	r5,r2
    447c:	00060b40 	call	60b4 <__subsf3>
    4480:	b80b883a 	mov	r5,r23
    4484:	1009883a 	mov	r4,r2
    4488:	0005c840 	call	5c84 <__mulsf3>
    448c:	e00b883a 	mov	r5,fp
    4490:	a009883a 	mov	r4,r20
    4494:	1021883a 	mov	r16,r2
    4498:	0005c840 	call	5c84 <__mulsf3>
    449c:	8009883a 	mov	r4,r16
    44a0:	100b883a 	mov	r5,r2
    44a4:	00051800 	call	5180 <__addsf3>
    44a8:	9809883a 	mov	r4,r19
    44ac:	100b883a 	mov	r5,r2
    44b0:	1039883a 	mov	fp,r2
    44b4:	00051800 	call	5180 <__addsf3>
    44b8:	14a0703a 	and	r16,r2,r18
    44bc:	014fddb4 	movhi	r5,16246
    44c0:	8009883a 	mov	r4,r16
    44c4:	294e0004 	addi	r5,r5,14336
    44c8:	0005c840 	call	5c84 <__mulsf3>
    44cc:	980b883a 	mov	r5,r19
    44d0:	8009883a 	mov	r4,r16
    44d4:	102f883a 	mov	r23,r2
    44d8:	00060b40 	call	60b4 <__subsf3>
    44dc:	100b883a 	mov	r5,r2
    44e0:	e009883a 	mov	r4,fp
    44e4:	00060b40 	call	60b4 <__subsf3>
    44e8:	014fddb4 	movhi	r5,16246
    44ec:	294e13c4 	addi	r5,r5,14415
    44f0:	1009883a 	mov	r4,r2
    44f4:	0005c840 	call	5c84 <__mulsf3>
    44f8:	014da7b4 	movhi	r5,13982
    44fc:	8009883a 	mov	r4,r16
    4500:	2970e804 	addi	r5,r5,-15456
    4504:	1027883a 	mov	r19,r2
    4508:	0005c840 	call	5c84 <__mulsf3>
    450c:	9809883a 	mov	r4,r19
    4510:	100b883a 	mov	r5,r2
    4514:	00051800 	call	5180 <__addsf3>
    4518:	da000317 	ldw	r8,12(sp)
    451c:	1009883a 	mov	r4,r2
    4520:	400b883a 	mov	r5,r8
    4524:	00051800 	call	5180 <__addsf3>
    4528:	d9800417 	ldw	r6,16(sp)
    452c:	1027883a 	mov	r19,r2
    4530:	3009883a 	mov	r4,r6
    4534:	00065980 	call	6598 <__floatsisf>
    4538:	b809883a 	mov	r4,r23
    453c:	980b883a 	mov	r5,r19
    4540:	1021883a 	mov	r16,r2
    4544:	00051800 	call	5180 <__addsf3>
    4548:	d9400017 	ldw	r5,0(sp)
    454c:	1009883a 	mov	r4,r2
    4550:	00051800 	call	5180 <__addsf3>
    4554:	800b883a 	mov	r5,r16
    4558:	1009883a 	mov	r4,r2
    455c:	00051800 	call	5180 <__addsf3>
    4560:	1484703a 	and	r2,r2,r18
    4564:	800b883a 	mov	r5,r16
    4568:	1009883a 	mov	r4,r2
    456c:	1021883a 	mov	r16,r2
    4570:	00060b40 	call	60b4 <__subsf3>
    4574:	d9400017 	ldw	r5,0(sp)
    4578:	1009883a 	mov	r4,r2
    457c:	00060b40 	call	60b4 <__subsf3>
    4580:	b80b883a 	mov	r5,r23
    4584:	1009883a 	mov	r4,r2
    4588:	00060b40 	call	60b4 <__subsf3>
    458c:	100b883a 	mov	r5,r2
    4590:	9809883a 	mov	r4,r19
    4594:	00060b40 	call	60b4 <__subsf3>
    4598:	102f883a 	mov	r23,r2
    459c:	b5bfffc4 	addi	r22,r22,-1
    45a0:	b56ab03a 	or	r21,r22,r21
    45a4:	a8009826 	beq	r21,zero,4808 <__ieee754_powf+0x8b4>
    45a8:	048fe034 	movhi	r18,16256
    45ac:	053c0004 	movi	r20,-4096
    45b0:	a468703a 	and	r20,r20,r17
    45b4:	a00b883a 	mov	r5,r20
    45b8:	8809883a 	mov	r4,r17
    45bc:	00060b40 	call	60b4 <__subsf3>
    45c0:	800b883a 	mov	r5,r16
    45c4:	1009883a 	mov	r4,r2
    45c8:	0005c840 	call	5c84 <__mulsf3>
    45cc:	880b883a 	mov	r5,r17
    45d0:	b809883a 	mov	r4,r23
    45d4:	1027883a 	mov	r19,r2
    45d8:	0005c840 	call	5c84 <__mulsf3>
    45dc:	9809883a 	mov	r4,r19
    45e0:	100b883a 	mov	r5,r2
    45e4:	00051800 	call	5180 <__addsf3>
    45e8:	a00b883a 	mov	r5,r20
    45ec:	8009883a 	mov	r4,r16
    45f0:	1027883a 	mov	r19,r2
    45f4:	0005c840 	call	5c84 <__mulsf3>
    45f8:	100b883a 	mov	r5,r2
    45fc:	9809883a 	mov	r4,r19
    4600:	04200034 	movhi	r16,32768
    4604:	1029883a 	mov	r20,r2
    4608:	843fffc4 	addi	r16,r16,-1
    460c:	00051800 	call	5180 <__addsf3>
    4610:	1023883a 	mov	r17,r2
    4614:	a02d883a 	mov	r22,r20
    4618:	102f883a 	mov	r23,r2
    461c:	80a0703a 	and	r16,r16,r2
    4620:	0080bc0e 	bge	zero,r2,4914 <__ieee754_powf+0x9c0>
    4624:	00d0c034 	movhi	r3,17152
    4628:	1c009716 	blt	r3,r16,4888 <__ieee754_powf+0x934>
    462c:	80c08a26 	beq	r16,r3,4858 <__ieee754_powf+0x904>
    4630:	00cfc034 	movhi	r3,16128
    4634:	1c009d16 	blt	r3,r16,48ac <__ieee754_powf+0x958>
    4638:	0023883a 	mov	r17,zero
    463c:	002b883a 	mov	r21,zero
    4640:	043c0004 	movi	r16,-4096
    4644:	1420703a 	and	r16,r2,r16
    4648:	014fcc74 	movhi	r5,16177
    464c:	8009883a 	mov	r4,r16
    4650:	295c8004 	addi	r5,r5,29184
    4654:	0005c840 	call	5c84 <__mulsf3>
    4658:	b00b883a 	mov	r5,r22
    465c:	8009883a 	mov	r4,r16
    4660:	1029883a 	mov	r20,r2
    4664:	00060b40 	call	60b4 <__subsf3>
    4668:	9809883a 	mov	r4,r19
    466c:	100b883a 	mov	r5,r2
    4670:	00060b40 	call	60b4 <__subsf3>
    4674:	014fcc74 	movhi	r5,16177
    4678:	295c8604 	addi	r5,r5,29208
    467c:	1009883a 	mov	r4,r2
    4680:	0005c840 	call	5c84 <__mulsf3>
    4684:	014d7034 	movhi	r5,13760
    4688:	8009883a 	mov	r4,r16
    468c:	296fa304 	addi	r5,r5,-16756
    4690:	1027883a 	mov	r19,r2
    4694:	0005c840 	call	5c84 <__mulsf3>
    4698:	9809883a 	mov	r4,r19
    469c:	100b883a 	mov	r5,r2
    46a0:	00051800 	call	5180 <__addsf3>
    46a4:	a009883a 	mov	r4,r20
    46a8:	100b883a 	mov	r5,r2
    46ac:	1027883a 	mov	r19,r2
    46b0:	00051800 	call	5180 <__addsf3>
    46b4:	a00b883a 	mov	r5,r20
    46b8:	1009883a 	mov	r4,r2
    46bc:	1021883a 	mov	r16,r2
    46c0:	00060b40 	call	60b4 <__subsf3>
    46c4:	9809883a 	mov	r4,r19
    46c8:	100b883a 	mov	r5,r2
    46cc:	00060b40 	call	60b4 <__subsf3>
    46d0:	800b883a 	mov	r5,r16
    46d4:	8009883a 	mov	r4,r16
    46d8:	1029883a 	mov	r20,r2
    46dc:	0005c840 	call	5c84 <__mulsf3>
    46e0:	014cccb4 	movhi	r5,13106
    46e4:	296ed304 	addi	r5,r5,-17588
    46e8:	1009883a 	mov	r4,r2
    46ec:	1027883a 	mov	r19,r2
    46f0:	0005c840 	call	5c84 <__mulsf3>
    46f4:	014d77b4 	movhi	r5,13790
    46f8:	297a8384 	addi	r5,r5,-5618
    46fc:	1009883a 	mov	r4,r2
    4700:	00060b40 	call	60b4 <__subsf3>
    4704:	980b883a 	mov	r5,r19
    4708:	1009883a 	mov	r4,r2
    470c:	0005c840 	call	5c84 <__mulsf3>
    4710:	014e22f4 	movhi	r5,14475
    4714:	296cd544 	addi	r5,r5,-19627
    4718:	1009883a 	mov	r4,r2
    471c:	00051800 	call	5180 <__addsf3>
    4720:	980b883a 	mov	r5,r19
    4724:	1009883a 	mov	r4,r2
    4728:	0005c840 	call	5c84 <__mulsf3>
    472c:	014ecdb4 	movhi	r5,15158
    4730:	2942d844 	addi	r5,r5,2913
    4734:	1009883a 	mov	r4,r2
    4738:	00060b40 	call	60b4 <__subsf3>
    473c:	980b883a 	mov	r5,r19
    4740:	1009883a 	mov	r4,r2
    4744:	0005c840 	call	5c84 <__mulsf3>
    4748:	014f8af4 	movhi	r5,15915
    474c:	296aaac4 	addi	r5,r5,-21845
    4750:	1009883a 	mov	r4,r2
    4754:	00051800 	call	5180 <__addsf3>
    4758:	980b883a 	mov	r5,r19
    475c:	1009883a 	mov	r4,r2
    4760:	0005c840 	call	5c84 <__mulsf3>
    4764:	100b883a 	mov	r5,r2
    4768:	8009883a 	mov	r4,r16
    476c:	00060b40 	call	60b4 <__subsf3>
    4770:	100b883a 	mov	r5,r2
    4774:	8009883a 	mov	r4,r16
    4778:	1027883a 	mov	r19,r2
    477c:	0005c840 	call	5c84 <__mulsf3>
    4780:	9809883a 	mov	r4,r19
    4784:	01500034 	movhi	r5,16384
    4788:	102d883a 	mov	r22,r2
    478c:	00060b40 	call	60b4 <__subsf3>
    4790:	100b883a 	mov	r5,r2
    4794:	b009883a 	mov	r4,r22
    4798:	00056480 	call	5648 <__divsf3>
    479c:	a00b883a 	mov	r5,r20
    47a0:	8009883a 	mov	r4,r16
    47a4:	1027883a 	mov	r19,r2
    47a8:	0005c840 	call	5c84 <__mulsf3>
    47ac:	a00b883a 	mov	r5,r20
    47b0:	1009883a 	mov	r4,r2
    47b4:	00051800 	call	5180 <__addsf3>
    47b8:	100b883a 	mov	r5,r2
    47bc:	9809883a 	mov	r4,r19
    47c0:	00060b40 	call	60b4 <__subsf3>
    47c4:	800b883a 	mov	r5,r16
    47c8:	1009883a 	mov	r4,r2
    47cc:	00060b40 	call	60b4 <__subsf3>
    47d0:	010fe034 	movhi	r4,16256
    47d4:	100b883a 	mov	r5,r2
    47d8:	00060b40 	call	60b4 <__subsf3>
    47dc:	8887883a 	add	r3,r17,r2
    47e0:	1809d5fa 	srai	r4,r3,23
    47e4:	01009f0e 	bge	zero,r4,4a64 <__ieee754_powf+0xb10>
    47e8:	1809883a 	mov	r4,r3
    47ec:	900b883a 	mov	r5,r18
    47f0:	0005c840 	call	5c84 <__mulsf3>
    47f4:	003e1b06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    47f8:	18c0004c 	andi	r3,r3,1
    47fc:	05800084 	movi	r22,2
    4800:	b0edc83a 	sub	r22,r22,r3
    4804:	003dfc06 	br	3ff8 <__alt_mem_nios_system_shared_memory+0xfffc3ff8>
    4808:	04afe034 	movhi	r18,49024
    480c:	003f6706 	br	45ac <__alt_mem_nios_system_shared_memory+0xfffc45ac>
    4810:	20a0003c 	xorhi	r2,r4,32768
    4814:	003e1306 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    4818:	0011883a 	mov	r8,zero
    481c:	d8000015 	stw	zero,0(sp)
    4820:	0007883a 	mov	r3,zero
    4824:	050fe034 	movhi	r20,16256
    4828:	003e8e06 	br	4264 <__alt_mem_nios_system_shared_memory+0xfffc4264>
    482c:	000d883a 	mov	r6,zero
    4830:	003e7806 	br	4214 <__alt_mem_nios_system_shared_memory+0xfffc4214>
    4834:	008fe034 	movhi	r2,16256
    4838:	108001c4 	addi	r2,r2,7
    483c:	14c0480e 	bge	r2,r19,4960 <__ieee754_powf+0xa0c>
    4840:	053e050e 	bge	zero,r20,4058 <__alt_mem_nios_system_shared_memory+0xfffc4058>
    4844:	015c52b4 	movhi	r5,29002
    4848:	297cb284 	addi	r5,r5,-3382
    484c:	2809883a 	mov	r4,r5
    4850:	0005c840 	call	5c84 <__mulsf3>
    4854:	003e0306 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    4858:	014cce74 	movhi	r5,13113
    485c:	296a8f04 	addi	r5,r5,-21956
    4860:	9809883a 	mov	r4,r19
    4864:	00051800 	call	5180 <__addsf3>
    4868:	a00b883a 	mov	r5,r20
    486c:	8809883a 	mov	r4,r17
    4870:	102b883a 	mov	r21,r2
    4874:	00060b40 	call	60b4 <__subsf3>
    4878:	100b883a 	mov	r5,r2
    487c:	a809883a 	mov	r4,r21
    4880:	0005b000 	call	5b00 <__gesf2>
    4884:	0080090e 	bge	zero,r2,48ac <__ieee754_powf+0x958>
    4888:	015c52b4 	movhi	r5,29002
    488c:	9009883a 	mov	r4,r18
    4890:	297cb284 	addi	r5,r5,-3382
    4894:	0005c840 	call	5c84 <__mulsf3>
    4898:	015c52b4 	movhi	r5,29002
    489c:	297cb284 	addi	r5,r5,-3382
    48a0:	1009883a 	mov	r4,r2
    48a4:	0005c840 	call	5c84 <__mulsf3>
    48a8:	003dee06 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    48ac:	8021d5fa 	srai	r16,r16,23
    48b0:	00802034 	movhi	r2,128
    48b4:	843fe084 	addi	r16,r16,-126
    48b8:	1421d83a 	sra	r16,r2,r16
    48bc:	10bfffc4 	addi	r2,r2,-1
    48c0:	8463883a 	add	r17,r16,r17
    48c4:	8806d5fa 	srli	r3,r17,23
    48c8:	88aa703a 	and	r21,r17,r2
    48cc:	ad402034 	orhi	r21,r21,128
    48d0:	18c03fcc 	andi	r3,r3,255
    48d4:	18ffe044 	addi	r3,r3,-127
    48d8:	10cbd83a 	sra	r5,r2,r3
    48dc:	008005c4 	movi	r2,23
    48e0:	10c7c83a 	sub	r3,r2,r3
    48e4:	014a303a 	nor	r5,zero,r5
    48e8:	a8ebd83a 	sra	r21,r21,r3
    48ec:	2c4a703a 	and	r5,r5,r17
    48f0:	b8005a16 	blt	r23,zero,4a5c <__ieee754_powf+0xb08>
    48f4:	a009883a 	mov	r4,r20
    48f8:	00060b40 	call	60b4 <__subsf3>
    48fc:	100b883a 	mov	r5,r2
    4900:	9809883a 	mov	r4,r19
    4904:	102d883a 	mov	r22,r2
    4908:	a82295fa 	slli	r17,r21,23
    490c:	00051800 	call	5180 <__addsf3>
    4910:	003f4b06 	br	4640 <__alt_mem_nios_system_shared_memory+0xfffc4640>
    4914:	00d0c5b4 	movhi	r3,17174
    4918:	1c000816 	blt	r3,r16,493c <__ieee754_powf+0x9e8>
    491c:	80ff441e 	bne	r16,r3,4630 <__alt_mem_nios_system_shared_memory+0xfffc4630>
    4920:	a00b883a 	mov	r5,r20
    4924:	1009883a 	mov	r4,r2
    4928:	00060b40 	call	60b4 <__subsf3>
    492c:	100b883a 	mov	r5,r2
    4930:	9809883a 	mov	r4,r19
    4934:	0005bbc0 	call	5bbc <__lesf2>
    4938:	00bfdc16 	blt	zero,r2,48ac <__alt_mem_nios_system_shared_memory+0xfffc48ac>
    493c:	014368b4 	movhi	r5,3490
    4940:	9009883a 	mov	r4,r18
    4944:	29509804 	addi	r5,r5,16992
    4948:	0005c840 	call	5c84 <__mulsf3>
    494c:	014368b4 	movhi	r5,3490
    4950:	29509804 	addi	r5,r5,16992
    4954:	1009883a 	mov	r4,r2
    4958:	0005c840 	call	5c84 <__mulsf3>
    495c:	003dc106 	br	4064 <__alt_mem_nios_system_shared_memory+0xfffc4064>
    4960:	00060b40 	call	60b4 <__subsf3>
    4964:	014fee74 	movhi	r5,16313
    4968:	296a8004 	addi	r5,r5,-22016
    496c:	1009883a 	mov	r4,r2
    4970:	1021883a 	mov	r16,r2
    4974:	0005c840 	call	5c84 <__mulsf3>
    4978:	014dbb74 	movhi	r5,14061
    497c:	8009883a 	mov	r4,r16
    4980:	29695c04 	addi	r5,r5,-23184
    4984:	1027883a 	mov	r19,r2
    4988:	0005c840 	call	5c84 <__mulsf3>
    498c:	8009883a 	mov	r4,r16
    4990:	014fa034 	movhi	r5,16000
    4994:	1025883a 	mov	r18,r2
    4998:	0005c840 	call	5c84 <__mulsf3>
    499c:	010faaf4 	movhi	r4,16043
    49a0:	100b883a 	mov	r5,r2
    49a4:	212aaac4 	addi	r4,r4,-21845
    49a8:	00060b40 	call	60b4 <__subsf3>
    49ac:	800b883a 	mov	r5,r16
    49b0:	1009883a 	mov	r4,r2
    49b4:	0005c840 	call	5c84 <__mulsf3>
    49b8:	100b883a 	mov	r5,r2
    49bc:	010fc034 	movhi	r4,16128
    49c0:	00060b40 	call	60b4 <__subsf3>
    49c4:	800b883a 	mov	r5,r16
    49c8:	8009883a 	mov	r4,r16
    49cc:	1029883a 	mov	r20,r2
    49d0:	0005c840 	call	5c84 <__mulsf3>
    49d4:	100b883a 	mov	r5,r2
    49d8:	a009883a 	mov	r4,r20
    49dc:	0005c840 	call	5c84 <__mulsf3>
    49e0:	014fee74 	movhi	r5,16313
    49e4:	296a8ec4 	addi	r5,r5,-21957
    49e8:	1009883a 	mov	r4,r2
    49ec:	0005c840 	call	5c84 <__mulsf3>
    49f0:	9009883a 	mov	r4,r18
    49f4:	100b883a 	mov	r5,r2
    49f8:	00060b40 	call	60b4 <__subsf3>
    49fc:	100b883a 	mov	r5,r2
    4a00:	9809883a 	mov	r4,r19
    4a04:	1025883a 	mov	r18,r2
    4a08:	043c0004 	movi	r16,-4096
    4a0c:	00051800 	call	5180 <__addsf3>
    4a10:	1404703a 	and	r2,r2,r16
    4a14:	980b883a 	mov	r5,r19
    4a18:	1009883a 	mov	r4,r2
    4a1c:	1021883a 	mov	r16,r2
    4a20:	00060b40 	call	60b4 <__subsf3>
    4a24:	100b883a 	mov	r5,r2
    4a28:	9009883a 	mov	r4,r18
    4a2c:	00060b40 	call	60b4 <__subsf3>
    4a30:	102f883a 	mov	r23,r2
    4a34:	003ed906 	br	459c <__alt_mem_nios_system_shared_memory+0xfffc459c>
    4a38:	008fc5b4 	movhi	r2,16150
    4a3c:	020d74b4 	movhi	r8,13778
    4a40:	d8800015 	stw	r2,0(sp)
    4a44:	10b00004 	addi	r2,r2,-16384
    4a48:	4233f704 	addi	r8,r8,-12324
    4a4c:	d8800015 	stw	r2,0(sp)
    4a50:	00c00834 	movhi	r3,32
    4a54:	050ff034 	movhi	r20,16320
    4a58:	003e0206 	br	4264 <__alt_mem_nios_system_shared_memory+0xfffc4264>
    4a5c:	056bc83a 	sub	r21,zero,r21
    4a60:	003fa406 	br	48f4 <__alt_mem_nios_system_shared_memory+0xfffc48f4>
    4a64:	1009883a 	mov	r4,r2
    4a68:	a80b883a 	mov	r5,r21
    4a6c:	0004e480 	call	4e48 <scalbnf>
    4a70:	1009883a 	mov	r4,r2
    4a74:	003f5d06 	br	47ec <__alt_mem_nios_system_shared_memory+0xfffc47ec>

00004a78 <__ieee754_sqrtf>:
    4a78:	00a00034 	movhi	r2,32768
    4a7c:	defffe04 	addi	sp,sp,-8
    4a80:	10bfffc4 	addi	r2,r2,-1
    4a84:	00dfe034 	movhi	r3,32640
    4a88:	dc000015 	stw	r16,0(sp)
    4a8c:	dfc00115 	stw	ra,4(sp)
    4a90:	1104703a 	and	r2,r2,r4
    4a94:	18ffffc4 	addi	r3,r3,-1
    4a98:	2021883a 	mov	r16,r4
    4a9c:	200b883a 	mov	r5,r4
    4aa0:	18803836 	bltu	r3,r2,4b84 <__ieee754_sqrtf+0x10c>
    4aa4:	10003226 	beq	r2,zero,4b70 <__ieee754_sqrtf+0xf8>
    4aa8:	2007883a 	mov	r3,r4
    4aac:	20003f16 	blt	r4,zero,4bac <__ieee754_sqrtf+0x134>
    4ab0:	200bd5fa 	srai	r5,r4,23
    4ab4:	01002034 	movhi	r4,128
    4ab8:	213fffc4 	addi	r4,r4,-1
    4abc:	20800a36 	bltu	r4,r2,4ae8 <__ieee754_sqrtf+0x70>
    4ac0:	8400202c 	andhi	r16,r16,128
    4ac4:	80003f1e 	bne	r16,zero,4bc4 <__ieee754_sqrtf+0x14c>
    4ac8:	0005883a 	mov	r2,zero
    4acc:	00000106 	br	4ad4 <__ieee754_sqrtf+0x5c>
    4ad0:	3005883a 	mov	r2,r6
    4ad4:	18c7883a 	add	r3,r3,r3
    4ad8:	1900202c 	andhi	r4,r3,128
    4adc:	11800044 	addi	r6,r2,1
    4ae0:	203ffb26 	beq	r4,zero,4ad0 <__alt_mem_nios_system_shared_memory+0xfffc4ad0>
    4ae4:	288bc83a 	sub	r5,r5,r2
    4ae8:	00802034 	movhi	r2,128
    4aec:	293fe044 	addi	r4,r5,-127
    4af0:	10bfffc4 	addi	r2,r2,-1
    4af4:	1884703a 	and	r2,r3,r2
    4af8:	2140004c 	andi	r5,r4,1
    4afc:	10802034 	orhi	r2,r2,128
    4b00:	2800281e 	bne	r5,zero,4ba4 <__ieee754_sqrtf+0x12c>
    4b04:	2021d07a 	srai	r16,r4,1
    4b08:	1085883a 	add	r2,r2,r2
    4b0c:	01000644 	movi	r4,25
    4b10:	000f883a 	mov	r7,zero
    4b14:	000d883a 	mov	r6,zero
    4b18:	00c04034 	movhi	r3,256
    4b1c:	30cb883a 	add	r5,r6,r3
    4b20:	213fffc4 	addi	r4,r4,-1
    4b24:	11400316 	blt	r2,r5,4b34 <__ieee754_sqrtf+0xbc>
    4b28:	28cd883a 	add	r6,r5,r3
    4b2c:	1145c83a 	sub	r2,r2,r5
    4b30:	38cf883a 	add	r7,r7,r3
    4b34:	1085883a 	add	r2,r2,r2
    4b38:	1806d07a 	srli	r3,r3,1
    4b3c:	203ff71e 	bne	r4,zero,4b1c <__alt_mem_nios_system_shared_memory+0xfffc4b1c>
    4b40:	10000226 	beq	r2,zero,4b4c <__ieee754_sqrtf+0xd4>
    4b44:	3880004c 	andi	r2,r7,1
    4b48:	388f883a 	add	r7,r7,r2
    4b4c:	380fd07a 	srai	r7,r7,1
    4b50:	802095fa 	slli	r16,r16,23
    4b54:	008fc034 	movhi	r2,16128
    4b58:	388f883a 	add	r7,r7,r2
    4b5c:	81c5883a 	add	r2,r16,r7
    4b60:	dfc00117 	ldw	ra,4(sp)
    4b64:	dc000017 	ldw	r16,0(sp)
    4b68:	dec00204 	addi	sp,sp,8
    4b6c:	f800283a 	ret
    4b70:	2005883a 	mov	r2,r4
    4b74:	dfc00117 	ldw	ra,4(sp)
    4b78:	dc000017 	ldw	r16,0(sp)
    4b7c:	dec00204 	addi	sp,sp,8
    4b80:	f800283a 	ret
    4b84:	0005c840 	call	5c84 <__mulsf3>
    4b88:	800b883a 	mov	r5,r16
    4b8c:	1009883a 	mov	r4,r2
    4b90:	00051800 	call	5180 <__addsf3>
    4b94:	dfc00117 	ldw	ra,4(sp)
    4b98:	dc000017 	ldw	r16,0(sp)
    4b9c:	dec00204 	addi	sp,sp,8
    4ba0:	f800283a 	ret
    4ba4:	1085883a 	add	r2,r2,r2
    4ba8:	003fd606 	br	4b04 <__alt_mem_nios_system_shared_memory+0xfffc4b04>
    4bac:	200b883a 	mov	r5,r4
    4bb0:	00060b40 	call	60b4 <__subsf3>
    4bb4:	100b883a 	mov	r5,r2
    4bb8:	1009883a 	mov	r4,r2
    4bbc:	00056480 	call	5648 <__divsf3>
    4bc0:	003fec06 	br	4b74 <__alt_mem_nios_system_shared_memory+0xfffc4b74>
    4bc4:	00bfffc4 	movi	r2,-1
    4bc8:	003fc606 	br	4ae4 <__alt_mem_nios_system_shared_memory+0xfffc4ae4>

00004bcc <matherr>:
    4bcc:	0005883a 	mov	r2,zero
    4bd0:	f800283a 	ret

00004bd4 <rint>:
    4bd4:	2813d53a 	srai	r9,r5,20
    4bd8:	defff904 	addi	sp,sp,-28
    4bdc:	dc000215 	stw	r16,8(sp)
    4be0:	4a41ffcc 	andi	r9,r9,2047
    4be4:	dfc00615 	stw	ra,24(sp)
    4be8:	dcc00515 	stw	r19,20(sp)
    4bec:	dc800415 	stw	r18,16(sp)
    4bf0:	dc400315 	stw	r17,12(sp)
    4bf4:	01c004c4 	movi	r7,19
    4bf8:	49bf0044 	addi	r6,r9,-1023
    4bfc:	2811883a 	mov	r8,r5
    4c00:	2005883a 	mov	r2,r4
    4c04:	2807883a 	mov	r3,r5
    4c08:	2015883a 	mov	r10,r4
    4c0c:	2820d7fa 	srli	r16,r5,31
    4c10:	39801316 	blt	r7,r6,4c60 <rint+0x8c>
    4c14:	30003d16 	blt	r6,zero,4d0c <rint+0x138>
    4c18:	01000434 	movhi	r4,16
    4c1c:	213fffc4 	addi	r4,r4,-1
    4c20:	2189d83a 	sra	r4,r4,r6
    4c24:	290a703a 	and	r5,r5,r4
    4c28:	288ab03a 	or	r5,r5,r2
    4c2c:	28001026 	beq	r5,zero,4c70 <rint+0x9c>
    4c30:	2008d07a 	srli	r4,r4,1
    4c34:	4104703a 	and	r2,r8,r4
    4c38:	1294b03a 	or	r10,r2,r10
    4c3c:	50005626 	beq	r10,zero,4d98 <rint+0x1c4>
    4c40:	31c05d26 	beq	r6,r7,4db8 <rint+0x1e4>
    4c44:	0015883a 	mov	r10,zero
    4c48:	00c00134 	movhi	r3,4
    4c4c:	1987d83a 	sra	r3,r3,r6
    4c50:	0108303a 	nor	r4,zero,r4
    4c54:	2210703a 	and	r8,r4,r8
    4c58:	40c6b03a 	or	r3,r8,r3
    4c5c:	00001806 	br	4cc0 <rint+0xec>
    4c60:	01c00cc4 	movi	r7,51
    4c64:	3980090e 	bge	r7,r6,4c8c <rint+0xb8>
    4c68:	01c10004 	movi	r7,1024
    4c6c:	31c04e26 	beq	r6,r7,4da8 <rint+0x1d4>
    4c70:	dfc00617 	ldw	ra,24(sp)
    4c74:	dcc00517 	ldw	r19,20(sp)
    4c78:	dc800417 	ldw	r18,16(sp)
    4c7c:	dc400317 	ldw	r17,12(sp)
    4c80:	dc000217 	ldw	r16,8(sp)
    4c84:	dec00704 	addi	sp,sp,28
    4c88:	f800283a 	ret
    4c8c:	4a7efb44 	addi	r9,r9,-1043
    4c90:	013fffc4 	movi	r4,-1
    4c94:	2248d83a 	srl	r4,r4,r9
    4c98:	110a703a 	and	r5,r2,r4
    4c9c:	28004026 	beq	r5,zero,4da0 <rint+0x1cc>
    4ca0:	2008d07a 	srli	r4,r4,1
    4ca4:	1104703a 	and	r2,r2,r4
    4ca8:	10000526 	beq	r2,zero,4cc0 <rint+0xec>
    4cac:	00900034 	movhi	r2,16384
    4cb0:	1253d83a 	sra	r9,r2,r9
    4cb4:	0108303a 	nor	r4,zero,r4
    4cb8:	2294703a 	and	r10,r4,r10
    4cbc:	4a94b03a 	or	r10,r9,r10
    4cc0:	802090fa 	slli	r16,r16,3
    4cc4:	180b883a 	mov	r5,r3
    4cc8:	00c000b4 	movhi	r3,2
    4ccc:	18fa2b04 	addi	r3,r3,-5972
    4cd0:	1c21883a 	add	r16,r3,r16
    4cd4:	84400017 	ldw	r17,0(r16)
    4cd8:	84000117 	ldw	r16,4(r16)
    4cdc:	5009883a 	mov	r4,r10
    4ce0:	880d883a 	mov	r6,r17
    4ce4:	800f883a 	mov	r7,r16
    4ce8:	00067ac0 	call	67ac <__adddf3>
    4cec:	d8800015 	stw	r2,0(sp)
    4cf0:	d8c00115 	stw	r3,4(sp)
    4cf4:	d9000017 	ldw	r4,0(sp)
    4cf8:	d9400117 	ldw	r5,4(sp)
    4cfc:	880d883a 	mov	r6,r17
    4d00:	800f883a 	mov	r7,r16
    4d04:	00084ec0 	call	84ec <__subdf3>
    4d08:	003fd906 	br	4c70 <__alt_mem_nios_system_shared_memory+0xfffc4c70>
    4d0c:	04600034 	movhi	r17,32768
    4d10:	8c7fffc4 	addi	r17,r17,-1
    4d14:	2c46703a 	and	r3,r5,r17
    4d18:	1906b03a 	or	r3,r3,r4
    4d1c:	18002026 	beq	r3,zero,4da0 <rint+0x1cc>
    4d20:	01800434 	movhi	r6,16
    4d24:	31bfffc4 	addi	r6,r6,-1
    4d28:	298c703a 	and	r6,r5,r6
    4d2c:	3104b03a 	or	r2,r6,r4
    4d30:	008bc83a 	sub	r5,zero,r2
    4d34:	800690fa 	slli	r3,r16,3
    4d38:	2884b03a 	or	r2,r5,r2
    4d3c:	014000b4 	movhi	r5,2
    4d40:	297a2b04 	addi	r5,r5,-5972
    4d44:	28c7883a 	add	r3,r5,r3
    4d48:	1004d33a 	srli	r2,r2,12
    4d4c:	1cc00017 	ldw	r19,0(r3)
    4d50:	1c800117 	ldw	r18,4(r3)
    4d54:	417fffac 	andhi	r5,r8,65534
    4d58:	1080022c 	andhi	r2,r2,8
    4d5c:	980d883a 	mov	r6,r19
    4d60:	900f883a 	mov	r7,r18
    4d64:	114ab03a 	or	r5,r2,r5
    4d68:	00067ac0 	call	67ac <__adddf3>
    4d6c:	d8800015 	stw	r2,0(sp)
    4d70:	d8c00115 	stw	r3,4(sp)
    4d74:	d9000017 	ldw	r4,0(sp)
    4d78:	d9400117 	ldw	r5,4(sp)
    4d7c:	980d883a 	mov	r6,r19
    4d80:	900f883a 	mov	r7,r18
    4d84:	00084ec0 	call	84ec <__subdf3>
    4d88:	800897fa 	slli	r4,r16,31
    4d8c:	1c46703a 	and	r3,r3,r17
    4d90:	1906b03a 	or	r3,r3,r4
    4d94:	003fb606 	br	4c70 <__alt_mem_nios_system_shared_memory+0xfffc4c70>
    4d98:	0015883a 	mov	r10,zero
    4d9c:	003fc806 	br	4cc0 <__alt_mem_nios_system_shared_memory+0xfffc4cc0>
    4da0:	4007883a 	mov	r3,r8
    4da4:	003fb206 	br	4c70 <__alt_mem_nios_system_shared_memory+0xfffc4c70>
    4da8:	200d883a 	mov	r6,r4
    4dac:	280f883a 	mov	r7,r5
    4db0:	00067ac0 	call	67ac <__adddf3>
    4db4:	003fae06 	br	4c70 <__alt_mem_nios_system_shared_memory+0xfffc4c70>
    4db8:	02a00034 	movhi	r10,32768
    4dbc:	003fa206 	br	4c48 <__alt_mem_nios_system_shared_memory+0xfffc4c48>

00004dc0 <fabsf>:
    4dc0:	00a00034 	movhi	r2,32768
    4dc4:	10bfffc4 	addi	r2,r2,-1
    4dc8:	2084703a 	and	r2,r4,r2
    4dcc:	f800283a 	ret

00004dd0 <finitef>:
    4dd0:	00a00034 	movhi	r2,32768
    4dd4:	10bfffc4 	addi	r2,r2,-1
    4dd8:	1104703a 	and	r2,r2,r4
    4ddc:	00dfe034 	movhi	r3,32640
    4de0:	10c4803a 	cmplt	r2,r2,r3
    4de4:	f800283a 	ret

00004de8 <__fpclassifyf>:
    4de8:	00a00034 	movhi	r2,32768
    4dec:	10bfffc4 	addi	r2,r2,-1
    4df0:	2088703a 	and	r4,r4,r2
    4df4:	2000021e 	bne	r4,zero,4e00 <__fpclassifyf+0x18>
    4df8:	00800084 	movi	r2,2
    4dfc:	f800283a 	ret
    4e00:	00bfe034 	movhi	r2,65408
    4e04:	00dfc034 	movhi	r3,32512
    4e08:	2085883a 	add	r2,r4,r2
    4e0c:	18ffffc4 	addi	r3,r3,-1
    4e10:	18800236 	bltu	r3,r2,4e1c <__fpclassifyf+0x34>
    4e14:	00800104 	movi	r2,4
    4e18:	f800283a 	ret
    4e1c:	00c02034 	movhi	r3,128
    4e20:	20bfffc4 	addi	r2,r4,-1
    4e24:	18ffff84 	addi	r3,r3,-2
    4e28:	18800236 	bltu	r3,r2,4e34 <__fpclassifyf+0x4c>
    4e2c:	008000c4 	movi	r2,3
    4e30:	f800283a 	ret
    4e34:	009fe034 	movhi	r2,32640
    4e38:	2085003a 	cmpeq	r2,r4,r2
    4e3c:	f800283a 	ret

00004e40 <nanf>:
    4e40:	009ff034 	movhi	r2,32704
    4e44:	f800283a 	ret

00004e48 <scalbnf>:
    4e48:	00e00034 	movhi	r3,32768
    4e4c:	18ffffc4 	addi	r3,r3,-1
    4e50:	1906703a 	and	r3,r3,r4
    4e54:	200f883a 	mov	r7,r4
    4e58:	18001f26 	beq	r3,zero,4ed8 <scalbnf+0x90>
    4e5c:	defffe04 	addi	sp,sp,-8
    4e60:	009fe034 	movhi	r2,32640
    4e64:	dc000015 	stw	r16,0(sp)
    4e68:	dfc00115 	stw	ra,4(sp)
    4e6c:	10bfffc4 	addi	r2,r2,-1
    4e70:	2821883a 	mov	r16,r5
    4e74:	10c01236 	bltu	r2,r3,4ec0 <scalbnf+0x78>
    4e78:	00802034 	movhi	r2,128
    4e7c:	10bfffc4 	addi	r2,r2,-1
    4e80:	10c0172e 	bgeu	r2,r3,4ee0 <scalbnf+0x98>
    4e84:	1806d5fa 	srli	r3,r3,23
    4e88:	2005883a 	mov	r2,r4
    4e8c:	1c07883a 	add	r3,r3,r16
    4e90:	01003f84 	movi	r4,254
    4e94:	20c02316 	blt	r4,r3,4f24 <scalbnf+0xdc>
    4e98:	00c01b0e 	bge	zero,r3,4f08 <scalbnf+0xc0>
    4e9c:	180695fa 	slli	r3,r3,23
    4ea0:	01602034 	movhi	r5,32896
    4ea4:	297fffc4 	addi	r5,r5,-1
    4ea8:	1144703a 	and	r2,r2,r5
    4eac:	10c4b03a 	or	r2,r2,r3
    4eb0:	dfc00117 	ldw	ra,4(sp)
    4eb4:	dc000017 	ldw	r16,0(sp)
    4eb8:	dec00204 	addi	sp,sp,8
    4ebc:	f800283a 	ret
    4ec0:	200b883a 	mov	r5,r4
    4ec4:	00051800 	call	5180 <__addsf3>
    4ec8:	dfc00117 	ldw	ra,4(sp)
    4ecc:	dc000017 	ldw	r16,0(sp)
    4ed0:	dec00204 	addi	sp,sp,8
    4ed4:	f800283a 	ret
    4ed8:	2005883a 	mov	r2,r4
    4edc:	f800283a 	ret
    4ee0:	01530034 	movhi	r5,19456
    4ee4:	0005c840 	call	5c84 <__mulsf3>
    4ee8:	00fffff4 	movhi	r3,65535
    4eec:	18cf2c04 	addi	r3,r3,15536
    4ef0:	100f883a 	mov	r7,r2
    4ef4:	80c01716 	blt	r16,r3,4f54 <scalbnf+0x10c>
    4ef8:	119fe02c 	andhi	r6,r2,32640
    4efc:	300dd5fa 	srai	r6,r6,23
    4f00:	30fff9c4 	addi	r3,r6,-25
    4f04:	003fe106 	br	4e8c <__alt_mem_nios_system_shared_memory+0xfffc4e8c>
    4f08:	013ffa84 	movi	r4,-22
    4f0c:	1900160e 	bge	r3,r4,4f68 <scalbnf+0x120>
    4f10:	00b0d414 	movui	r2,50000
    4f14:	14000316 	blt	r2,r16,4f24 <scalbnf+0xdc>
    4f18:	040368b4 	movhi	r16,3490
    4f1c:	84109804 	addi	r16,r16,16992
    4f20:	00000206 	br	4f2c <scalbnf+0xe4>
    4f24:	041c52b4 	movhi	r16,29002
    4f28:	843cb284 	addi	r16,r16,-3382
    4f2c:	380b883a 	mov	r5,r7
    4f30:	8009883a 	mov	r4,r16
    4f34:	0004f8c0 	call	4f8c <copysignf>
    4f38:	800b883a 	mov	r5,r16
    4f3c:	1009883a 	mov	r4,r2
    4f40:	0005c840 	call	5c84 <__mulsf3>
    4f44:	dfc00117 	ldw	ra,4(sp)
    4f48:	dc000017 	ldw	r16,0(sp)
    4f4c:	dec00204 	addi	sp,sp,8
    4f50:	f800283a 	ret
    4f54:	014368b4 	movhi	r5,3490
    4f58:	29509804 	addi	r5,r5,16992
    4f5c:	1009883a 	mov	r4,r2
    4f60:	0005c840 	call	5c84 <__mulsf3>
    4f64:	003fd806 	br	4ec8 <__alt_mem_nios_system_shared_memory+0xfffc4ec8>
    4f68:	18c00644 	addi	r3,r3,25
    4f6c:	180c95fa 	slli	r6,r3,23
    4f70:	01202034 	movhi	r4,32896
    4f74:	213fffc4 	addi	r4,r4,-1
    4f78:	1108703a 	and	r4,r2,r4
    4f7c:	014cc034 	movhi	r5,13056
    4f80:	3108b03a 	or	r4,r6,r4
    4f84:	0005c840 	call	5c84 <__mulsf3>
    4f88:	003fcf06 	br	4ec8 <__alt_mem_nios_system_shared_memory+0xfffc4ec8>

00004f8c <copysignf>:
    4f8c:	00e00034 	movhi	r3,32768
    4f90:	18ffffc4 	addi	r3,r3,-1
    4f94:	28a0002c 	andhi	r2,r5,32768
    4f98:	20c8703a 	and	r4,r4,r3
    4f9c:	2084b03a 	or	r2,r4,r2
    4fa0:	f800283a 	ret

00004fa4 <__divsi3>:
    4fa4:	20001b16 	blt	r4,zero,5014 <__divsi3+0x70>
    4fa8:	000f883a 	mov	r7,zero
    4fac:	28001616 	blt	r5,zero,5008 <__divsi3+0x64>
    4fb0:	200d883a 	mov	r6,r4
    4fb4:	29001a2e 	bgeu	r5,r4,5020 <__divsi3+0x7c>
    4fb8:	00800804 	movi	r2,32
    4fbc:	00c00044 	movi	r3,1
    4fc0:	00000106 	br	4fc8 <__divsi3+0x24>
    4fc4:	10000d26 	beq	r2,zero,4ffc <__divsi3+0x58>
    4fc8:	294b883a 	add	r5,r5,r5
    4fcc:	10bfffc4 	addi	r2,r2,-1
    4fd0:	18c7883a 	add	r3,r3,r3
    4fd4:	293ffb36 	bltu	r5,r4,4fc4 <__alt_mem_nios_system_shared_memory+0xfffc4fc4>
    4fd8:	0005883a 	mov	r2,zero
    4fdc:	18000726 	beq	r3,zero,4ffc <__divsi3+0x58>
    4fe0:	0005883a 	mov	r2,zero
    4fe4:	31400236 	bltu	r6,r5,4ff0 <__divsi3+0x4c>
    4fe8:	314dc83a 	sub	r6,r6,r5
    4fec:	10c4b03a 	or	r2,r2,r3
    4ff0:	1806d07a 	srli	r3,r3,1
    4ff4:	280ad07a 	srli	r5,r5,1
    4ff8:	183ffa1e 	bne	r3,zero,4fe4 <__alt_mem_nios_system_shared_memory+0xfffc4fe4>
    4ffc:	38000126 	beq	r7,zero,5004 <__divsi3+0x60>
    5000:	0085c83a 	sub	r2,zero,r2
    5004:	f800283a 	ret
    5008:	014bc83a 	sub	r5,zero,r5
    500c:	39c0005c 	xori	r7,r7,1
    5010:	003fe706 	br	4fb0 <__alt_mem_nios_system_shared_memory+0xfffc4fb0>
    5014:	0109c83a 	sub	r4,zero,r4
    5018:	01c00044 	movi	r7,1
    501c:	003fe306 	br	4fac <__alt_mem_nios_system_shared_memory+0xfffc4fac>
    5020:	00c00044 	movi	r3,1
    5024:	003fee06 	br	4fe0 <__alt_mem_nios_system_shared_memory+0xfffc4fe0>

00005028 <__modsi3>:
    5028:	20001716 	blt	r4,zero,5088 <__modsi3+0x60>
    502c:	000f883a 	mov	r7,zero
    5030:	2005883a 	mov	r2,r4
    5034:	28001216 	blt	r5,zero,5080 <__modsi3+0x58>
    5038:	2900162e 	bgeu	r5,r4,5094 <__modsi3+0x6c>
    503c:	01800804 	movi	r6,32
    5040:	00c00044 	movi	r3,1
    5044:	00000106 	br	504c <__modsi3+0x24>
    5048:	30000a26 	beq	r6,zero,5074 <__modsi3+0x4c>
    504c:	294b883a 	add	r5,r5,r5
    5050:	31bfffc4 	addi	r6,r6,-1
    5054:	18c7883a 	add	r3,r3,r3
    5058:	293ffb36 	bltu	r5,r4,5048 <__alt_mem_nios_system_shared_memory+0xfffc5048>
    505c:	18000526 	beq	r3,zero,5074 <__modsi3+0x4c>
    5060:	1806d07a 	srli	r3,r3,1
    5064:	11400136 	bltu	r2,r5,506c <__modsi3+0x44>
    5068:	1145c83a 	sub	r2,r2,r5
    506c:	280ad07a 	srli	r5,r5,1
    5070:	183ffb1e 	bne	r3,zero,5060 <__alt_mem_nios_system_shared_memory+0xfffc5060>
    5074:	38000126 	beq	r7,zero,507c <__modsi3+0x54>
    5078:	0085c83a 	sub	r2,zero,r2
    507c:	f800283a 	ret
    5080:	014bc83a 	sub	r5,zero,r5
    5084:	003fec06 	br	5038 <__alt_mem_nios_system_shared_memory+0xfffc5038>
    5088:	0109c83a 	sub	r4,zero,r4
    508c:	01c00044 	movi	r7,1
    5090:	003fe706 	br	5030 <__alt_mem_nios_system_shared_memory+0xfffc5030>
    5094:	00c00044 	movi	r3,1
    5098:	003ff106 	br	5060 <__alt_mem_nios_system_shared_memory+0xfffc5060>

0000509c <__udivsi3>:
    509c:	200d883a 	mov	r6,r4
    50a0:	2900152e 	bgeu	r5,r4,50f8 <__udivsi3+0x5c>
    50a4:	28001416 	blt	r5,zero,50f8 <__udivsi3+0x5c>
    50a8:	00800804 	movi	r2,32
    50ac:	00c00044 	movi	r3,1
    50b0:	00000206 	br	50bc <__udivsi3+0x20>
    50b4:	10000e26 	beq	r2,zero,50f0 <__udivsi3+0x54>
    50b8:	28000516 	blt	r5,zero,50d0 <__udivsi3+0x34>
    50bc:	294b883a 	add	r5,r5,r5
    50c0:	10bfffc4 	addi	r2,r2,-1
    50c4:	18c7883a 	add	r3,r3,r3
    50c8:	293ffa36 	bltu	r5,r4,50b4 <__alt_mem_nios_system_shared_memory+0xfffc50b4>
    50cc:	18000826 	beq	r3,zero,50f0 <__udivsi3+0x54>
    50d0:	0005883a 	mov	r2,zero
    50d4:	31400236 	bltu	r6,r5,50e0 <__udivsi3+0x44>
    50d8:	314dc83a 	sub	r6,r6,r5
    50dc:	10c4b03a 	or	r2,r2,r3
    50e0:	1806d07a 	srli	r3,r3,1
    50e4:	280ad07a 	srli	r5,r5,1
    50e8:	183ffa1e 	bne	r3,zero,50d4 <__alt_mem_nios_system_shared_memory+0xfffc50d4>
    50ec:	f800283a 	ret
    50f0:	0005883a 	mov	r2,zero
    50f4:	f800283a 	ret
    50f8:	00c00044 	movi	r3,1
    50fc:	003ff406 	br	50d0 <__alt_mem_nios_system_shared_memory+0xfffc50d0>

00005100 <__umodsi3>:
    5100:	2005883a 	mov	r2,r4
    5104:	2900122e 	bgeu	r5,r4,5150 <__umodsi3+0x50>
    5108:	28001116 	blt	r5,zero,5150 <__umodsi3+0x50>
    510c:	01800804 	movi	r6,32
    5110:	00c00044 	movi	r3,1
    5114:	00000206 	br	5120 <__umodsi3+0x20>
    5118:	30000c26 	beq	r6,zero,514c <__umodsi3+0x4c>
    511c:	28000516 	blt	r5,zero,5134 <__umodsi3+0x34>
    5120:	294b883a 	add	r5,r5,r5
    5124:	31bfffc4 	addi	r6,r6,-1
    5128:	18c7883a 	add	r3,r3,r3
    512c:	293ffa36 	bltu	r5,r4,5118 <__alt_mem_nios_system_shared_memory+0xfffc5118>
    5130:	18000626 	beq	r3,zero,514c <__umodsi3+0x4c>
    5134:	1806d07a 	srli	r3,r3,1
    5138:	11400136 	bltu	r2,r5,5140 <__umodsi3+0x40>
    513c:	1145c83a 	sub	r2,r2,r5
    5140:	280ad07a 	srli	r5,r5,1
    5144:	183ffb1e 	bne	r3,zero,5134 <__alt_mem_nios_system_shared_memory+0xfffc5134>
    5148:	f800283a 	ret
    514c:	f800283a 	ret
    5150:	00c00044 	movi	r3,1
    5154:	003ff706 	br	5134 <__alt_mem_nios_system_shared_memory+0xfffc5134>

00005158 <__mulsi3>:
    5158:	0005883a 	mov	r2,zero
    515c:	20000726 	beq	r4,zero,517c <__mulsi3+0x24>
    5160:	20c0004c 	andi	r3,r4,1
    5164:	2008d07a 	srli	r4,r4,1
    5168:	18000126 	beq	r3,zero,5170 <__mulsi3+0x18>
    516c:	1145883a 	add	r2,r2,r5
    5170:	294b883a 	add	r5,r5,r5
    5174:	203ffa1e 	bne	r4,zero,5160 <__alt_mem_nios_system_shared_memory+0xfffc5160>
    5178:	f800283a 	ret
    517c:	f800283a 	ret

00005180 <__addsf3>:
    5180:	defffc04 	addi	sp,sp,-16
    5184:	2004d7fa 	srli	r2,r4,31
    5188:	280cd5fa 	srli	r6,r5,23
    518c:	dc000015 	stw	r16,0(sp)
    5190:	00c02034 	movhi	r3,128
    5194:	2020d5fa 	srli	r16,r4,23
    5198:	280ed7fa 	srli	r7,r5,31
    519c:	18ffffc4 	addi	r3,r3,-1
    51a0:	dc400115 	stw	r17,4(sp)
    51a4:	1908703a 	and	r4,r3,r4
    51a8:	194a703a 	and	r5,r3,r5
    51ac:	dfc00315 	stw	ra,12(sp)
    51b0:	dc800215 	stw	r18,8(sp)
    51b4:	14403fcc 	andi	r17,r2,255
    51b8:	84003fcc 	andi	r16,r16,255
    51bc:	200890fa 	slli	r4,r4,3
    51c0:	31803fcc 	andi	r6,r6,255
    51c4:	280a90fa 	slli	r5,r5,3
    51c8:	89c05026 	beq	r17,r7,530c <__addsf3+0x18c>
    51cc:	8185c83a 	sub	r2,r16,r6
    51d0:	00807a0e 	bge	zero,r2,53bc <__addsf3+0x23c>
    51d4:	30001e1e 	bne	r6,zero,5250 <__addsf3+0xd0>
    51d8:	28006d1e 	bne	r5,zero,5390 <__addsf3+0x210>
    51dc:	208001cc 	andi	r2,r4,7
    51e0:	10000426 	beq	r2,zero,51f4 <__addsf3+0x74>
    51e4:	208003cc 	andi	r2,r4,15
    51e8:	00c00104 	movi	r3,4
    51ec:	10c00126 	beq	r2,r3,51f4 <__addsf3+0x74>
    51f0:	20c9883a 	add	r4,r4,r3
    51f4:	2081002c 	andhi	r2,r4,1024
    51f8:	10003926 	beq	r2,zero,52e0 <__addsf3+0x160>
    51fc:	84000044 	addi	r16,r16,1
    5200:	00803fc4 	movi	r2,255
    5204:	80807826 	beq	r16,r2,53e8 <__addsf3+0x268>
    5208:	200891ba 	slli	r4,r4,6
    520c:	8805883a 	mov	r2,r17
    5210:	2008d27a 	srli	r4,r4,9
    5214:	84003fcc 	andi	r16,r16,255
    5218:	800695fa 	slli	r3,r16,23
    521c:	10803fcc 	andi	r2,r2,255
    5220:	04002034 	movhi	r16,128
    5224:	843fffc4 	addi	r16,r16,-1
    5228:	100497fa 	slli	r2,r2,31
    522c:	2408703a 	and	r4,r4,r16
    5230:	20e0b03a 	or	r16,r4,r3
    5234:	8084b03a 	or	r2,r16,r2
    5238:	dfc00317 	ldw	ra,12(sp)
    523c:	dc800217 	ldw	r18,8(sp)
    5240:	dc400117 	ldw	r17,4(sp)
    5244:	dc000017 	ldw	r16,0(sp)
    5248:	dec00404 	addi	sp,sp,16
    524c:	f800283a 	ret
    5250:	00c03fc4 	movi	r3,255
    5254:	80ffe126 	beq	r16,r3,51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5258:	29410034 	orhi	r5,r5,1024
    525c:	00c006c4 	movi	r3,27
    5260:	18807516 	blt	r3,r2,5438 <__addsf3+0x2b8>
    5264:	00c00804 	movi	r3,32
    5268:	1887c83a 	sub	r3,r3,r2
    526c:	28c6983a 	sll	r3,r5,r3
    5270:	288ad83a 	srl	r5,r5,r2
    5274:	1804c03a 	cmpne	r2,r3,zero
    5278:	288ab03a 	or	r5,r5,r2
    527c:	2149c83a 	sub	r4,r4,r5
    5280:	2081002c 	andhi	r2,r4,1024
    5284:	10001426 	beq	r2,zero,52d8 <__addsf3+0x158>
    5288:	04810034 	movhi	r18,1024
    528c:	94bfffc4 	addi	r18,r18,-1
    5290:	24a4703a 	and	r18,r4,r18
    5294:	9009883a 	mov	r4,r18
    5298:	000917c0 	call	917c <__clzsi2>
    529c:	10bffec4 	addi	r2,r2,-5
    52a0:	90a4983a 	sll	r18,r18,r2
    52a4:	14005416 	blt	r2,r16,53f8 <__addsf3+0x278>
    52a8:	1405c83a 	sub	r2,r2,r16
    52ac:	11000044 	addi	r4,r2,1
    52b0:	00800804 	movi	r2,32
    52b4:	1105c83a 	sub	r2,r2,r4
    52b8:	9084983a 	sll	r2,r18,r2
    52bc:	9124d83a 	srl	r18,r18,r4
    52c0:	0021883a 	mov	r16,zero
    52c4:	1008c03a 	cmpne	r4,r2,zero
    52c8:	9108b03a 	or	r4,r18,r4
    52cc:	003fc306 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    52d0:	1000db26 	beq	r2,zero,5640 <__addsf3+0x4c0>
    52d4:	1009883a 	mov	r4,r2
    52d8:	208001cc 	andi	r2,r4,7
    52dc:	103fc11e 	bne	r2,zero,51e4 <__alt_mem_nios_system_shared_memory+0xfffc51e4>
    52e0:	2006d0fa 	srli	r3,r4,3
    52e4:	01003fc4 	movi	r4,255
    52e8:	8805883a 	mov	r2,r17
    52ec:	8100241e 	bne	r16,r4,5380 <__addsf3+0x200>
    52f0:	18006e26 	beq	r3,zero,54ac <__addsf3+0x32c>
    52f4:	19001034 	orhi	r4,r3,64
    52f8:	00c02034 	movhi	r3,128
    52fc:	18ffffc4 	addi	r3,r3,-1
    5300:	043fffc4 	movi	r16,-1
    5304:	20c8703a 	and	r4,r4,r3
    5308:	003fc206 	br	5214 <__alt_mem_nios_system_shared_memory+0xfffc5214>
    530c:	8187c83a 	sub	r3,r16,r6
    5310:	00c03e0e 	bge	zero,r3,540c <__addsf3+0x28c>
    5314:	30002326 	beq	r6,zero,53a4 <__addsf3+0x224>
    5318:	01803fc4 	movi	r6,255
    531c:	81bfaf26 	beq	r16,r6,51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5320:	29410034 	orhi	r5,r5,1024
    5324:	018006c4 	movi	r6,27
    5328:	30c07416 	blt	r6,r3,54fc <__addsf3+0x37c>
    532c:	01800804 	movi	r6,32
    5330:	30cdc83a 	sub	r6,r6,r3
    5334:	298c983a 	sll	r6,r5,r6
    5338:	28cad83a 	srl	r5,r5,r3
    533c:	3006c03a 	cmpne	r3,r6,zero
    5340:	28cab03a 	or	r5,r5,r3
    5344:	2149883a 	add	r4,r4,r5
    5348:	20c1002c 	andhi	r3,r4,1024
    534c:	183fe226 	beq	r3,zero,52d8 <__alt_mem_nios_system_shared_memory+0xfffc52d8>
    5350:	84000044 	addi	r16,r16,1
    5354:	00c03fc4 	movi	r3,255
    5358:	80c05426 	beq	r16,r3,54ac <__addsf3+0x32c>
    535c:	00bf0034 	movhi	r2,64512
    5360:	10bfffc4 	addi	r2,r2,-1
    5364:	20c0004c 	andi	r3,r4,1
    5368:	2088703a 	and	r4,r4,r2
    536c:	2008d07a 	srli	r4,r4,1
    5370:	20c8b03a 	or	r4,r4,r3
    5374:	003f9906 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5378:	0007883a 	mov	r3,zero
    537c:	0005883a 	mov	r2,zero
    5380:	01002034 	movhi	r4,128
    5384:	213fffc4 	addi	r4,r4,-1
    5388:	1908703a 	and	r4,r3,r4
    538c:	003fa106 	br	5214 <__alt_mem_nios_system_shared_memory+0xfffc5214>
    5390:	10bfffc4 	addi	r2,r2,-1
    5394:	103fb926 	beq	r2,zero,527c <__alt_mem_nios_system_shared_memory+0xfffc527c>
    5398:	00c03fc4 	movi	r3,255
    539c:	80ffaf1e 	bne	r16,r3,525c <__alt_mem_nios_system_shared_memory+0xfffc525c>
    53a0:	003f8e06 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    53a4:	283f8d26 	beq	r5,zero,51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    53a8:	18ffffc4 	addi	r3,r3,-1
    53ac:	183fe526 	beq	r3,zero,5344 <__alt_mem_nios_system_shared_memory+0xfffc5344>
    53b0:	01803fc4 	movi	r6,255
    53b4:	81bfdb1e 	bne	r16,r6,5324 <__alt_mem_nios_system_shared_memory+0xfffc5324>
    53b8:	003f8806 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    53bc:	1000201e 	bne	r2,zero,5440 <__addsf3+0x2c0>
    53c0:	80800044 	addi	r2,r16,1
    53c4:	10803fcc 	andi	r2,r2,255
    53c8:	01800044 	movi	r6,1
    53cc:	3080450e 	bge	r6,r2,54e4 <__addsf3+0x364>
    53d0:	2165c83a 	sub	r18,r4,r5
    53d4:	90c1002c 	andhi	r3,r18,1024
    53d8:	18002b26 	beq	r3,zero,5488 <__addsf3+0x308>
    53dc:	2925c83a 	sub	r18,r5,r4
    53e0:	3823883a 	mov	r17,r7
    53e4:	003fab06 	br	5294 <__alt_mem_nios_system_shared_memory+0xfffc5294>
    53e8:	8805883a 	mov	r2,r17
    53ec:	043fffc4 	movi	r16,-1
    53f0:	0009883a 	mov	r4,zero
    53f4:	003f8706 	br	5214 <__alt_mem_nios_system_shared_memory+0xfffc5214>
    53f8:	013f0034 	movhi	r4,64512
    53fc:	213fffc4 	addi	r4,r4,-1
    5400:	80a1c83a 	sub	r16,r16,r2
    5404:	9108703a 	and	r4,r18,r4
    5408:	003f7406 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    540c:	1800411e 	bne	r3,zero,5514 <__addsf3+0x394>
    5410:	80c00044 	addi	r3,r16,1
    5414:	19c03fcc 	andi	r7,r3,255
    5418:	01800044 	movi	r6,1
    541c:	31c0260e 	bge	r6,r7,54b8 <__addsf3+0x338>
    5420:	01803fc4 	movi	r6,255
    5424:	19802126 	beq	r3,r6,54ac <__addsf3+0x32c>
    5428:	2149883a 	add	r4,r4,r5
    542c:	2008d07a 	srli	r4,r4,1
    5430:	1821883a 	mov	r16,r3
    5434:	003f6906 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5438:	01400044 	movi	r5,1
    543c:	003f8f06 	br	527c <__alt_mem_nios_system_shared_memory+0xfffc527c>
    5440:	8000151e 	bne	r16,zero,5498 <__addsf3+0x318>
    5444:	20002f26 	beq	r4,zero,5504 <__addsf3+0x384>
    5448:	0084303a 	nor	r2,zero,r2
    544c:	10000a26 	beq	r2,zero,5478 <__addsf3+0x2f8>
    5450:	00c03fc4 	movi	r3,255
    5454:	30c02b26 	beq	r6,r3,5504 <__addsf3+0x384>
    5458:	00c006c4 	movi	r3,27
    545c:	18806d16 	blt	r3,r2,5614 <__addsf3+0x494>
    5460:	00c00804 	movi	r3,32
    5464:	1887c83a 	sub	r3,r3,r2
    5468:	20c6983a 	sll	r3,r4,r3
    546c:	2084d83a 	srl	r2,r4,r2
    5470:	1808c03a 	cmpne	r4,r3,zero
    5474:	1108b03a 	or	r4,r2,r4
    5478:	2909c83a 	sub	r4,r5,r4
    547c:	3021883a 	mov	r16,r6
    5480:	3823883a 	mov	r17,r7
    5484:	003f7e06 	br	5280 <__alt_mem_nios_system_shared_memory+0xfffc5280>
    5488:	903f821e 	bne	r18,zero,5294 <__alt_mem_nios_system_shared_memory+0xfffc5294>
    548c:	0005883a 	mov	r2,zero
    5490:	0021883a 	mov	r16,zero
    5494:	003fba06 	br	5380 <__alt_mem_nios_system_shared_memory+0xfffc5380>
    5498:	00c03fc4 	movi	r3,255
    549c:	30c01926 	beq	r6,r3,5504 <__addsf3+0x384>
    54a0:	0085c83a 	sub	r2,zero,r2
    54a4:	21010034 	orhi	r4,r4,1024
    54a8:	003feb06 	br	5458 <__alt_mem_nios_system_shared_memory+0xfffc5458>
    54ac:	043fffc4 	movi	r16,-1
    54b0:	0009883a 	mov	r4,zero
    54b4:	003f5706 	br	5214 <__alt_mem_nios_system_shared_memory+0xfffc5214>
    54b8:	80004a1e 	bne	r16,zero,55e4 <__addsf3+0x464>
    54bc:	20005926 	beq	r4,zero,5624 <__addsf3+0x4a4>
    54c0:	283f4626 	beq	r5,zero,51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    54c4:	2149883a 	add	r4,r4,r5
    54c8:	2081002c 	andhi	r2,r4,1024
    54cc:	103f8226 	beq	r2,zero,52d8 <__alt_mem_nios_system_shared_memory+0xfffc52d8>
    54d0:	00bf0034 	movhi	r2,64512
    54d4:	10bfffc4 	addi	r2,r2,-1
    54d8:	3021883a 	mov	r16,r6
    54dc:	2088703a 	and	r4,r4,r2
    54e0:	003f3e06 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    54e4:	8000121e 	bne	r16,zero,5530 <__addsf3+0x3b0>
    54e8:	2000261e 	bne	r4,zero,5584 <__addsf3+0x404>
    54ec:	283fa226 	beq	r5,zero,5378 <__alt_mem_nios_system_shared_memory+0xfffc5378>
    54f0:	2809883a 	mov	r4,r5
    54f4:	3823883a 	mov	r17,r7
    54f8:	003f3806 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    54fc:	01400044 	movi	r5,1
    5500:	003f9006 	br	5344 <__alt_mem_nios_system_shared_memory+0xfffc5344>
    5504:	2809883a 	mov	r4,r5
    5508:	3021883a 	mov	r16,r6
    550c:	3823883a 	mov	r17,r7
    5510:	003f3206 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5514:	80000c1e 	bne	r16,zero,5548 <__addsf3+0x3c8>
    5518:	20002f26 	beq	r4,zero,55d8 <__addsf3+0x458>
    551c:	00c6303a 	nor	r3,zero,r3
    5520:	18002b1e 	bne	r3,zero,55d0 <__addsf3+0x450>
    5524:	2149883a 	add	r4,r4,r5
    5528:	3021883a 	mov	r16,r6
    552c:	003f8606 	br	5348 <__alt_mem_nios_system_shared_memory+0xfffc5348>
    5530:	20001b1e 	bne	r4,zero,55a0 <__addsf3+0x420>
    5534:	28003926 	beq	r5,zero,561c <__addsf3+0x49c>
    5538:	2809883a 	mov	r4,r5
    553c:	3823883a 	mov	r17,r7
    5540:	04003fc4 	movi	r16,255
    5544:	003f2506 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5548:	01c03fc4 	movi	r7,255
    554c:	31c02226 	beq	r6,r7,55d8 <__addsf3+0x458>
    5550:	00c7c83a 	sub	r3,zero,r3
    5554:	21010034 	orhi	r4,r4,1024
    5558:	01c006c4 	movi	r7,27
    555c:	38c03616 	blt	r7,r3,5638 <__addsf3+0x4b8>
    5560:	01c00804 	movi	r7,32
    5564:	38cfc83a 	sub	r7,r7,r3
    5568:	21ce983a 	sll	r7,r4,r7
    556c:	20c6d83a 	srl	r3,r4,r3
    5570:	3808c03a 	cmpne	r4,r7,zero
    5574:	1906b03a 	or	r3,r3,r4
    5578:	1949883a 	add	r4,r3,r5
    557c:	3021883a 	mov	r16,r6
    5580:	003f7106 	br	5348 <__alt_mem_nios_system_shared_memory+0xfffc5348>
    5584:	283f1526 	beq	r5,zero,51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5588:	2145c83a 	sub	r2,r4,r5
    558c:	10c1002c 	andhi	r3,r2,1024
    5590:	183f4f26 	beq	r3,zero,52d0 <__alt_mem_nios_system_shared_memory+0xfffc52d0>
    5594:	2909c83a 	sub	r4,r5,r4
    5598:	3823883a 	mov	r17,r7
    559c:	003f0f06 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    55a0:	28001a26 	beq	r5,zero,560c <__addsf3+0x48c>
    55a4:	2008d0fa 	srli	r4,r4,3
    55a8:	2080102c 	andhi	r2,r4,64
    55ac:	10000526 	beq	r2,zero,55c4 <__addsf3+0x444>
    55b0:	280ad0fa 	srli	r5,r5,3
    55b4:	2880102c 	andhi	r2,r5,64
    55b8:	1000021e 	bne	r2,zero,55c4 <__addsf3+0x444>
    55bc:	2809883a 	mov	r4,r5
    55c0:	3823883a 	mov	r17,r7
    55c4:	200890fa 	slli	r4,r4,3
    55c8:	04003fc4 	movi	r16,255
    55cc:	003f0306 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    55d0:	01c03fc4 	movi	r7,255
    55d4:	31ffe01e 	bne	r6,r7,5558 <__alt_mem_nios_system_shared_memory+0xfffc5558>
    55d8:	2809883a 	mov	r4,r5
    55dc:	3021883a 	mov	r16,r6
    55e0:	003efe06 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    55e4:	20001126 	beq	r4,zero,562c <__addsf3+0x4ac>
    55e8:	28000826 	beq	r5,zero,560c <__addsf3+0x48c>
    55ec:	2008d0fa 	srli	r4,r4,3
    55f0:	2080102c 	andhi	r2,r4,64
    55f4:	103ff326 	beq	r2,zero,55c4 <__alt_mem_nios_system_shared_memory+0xfffc55c4>
    55f8:	280ad0fa 	srli	r5,r5,3
    55fc:	2880102c 	andhi	r2,r5,64
    5600:	103ff01e 	bne	r2,zero,55c4 <__alt_mem_nios_system_shared_memory+0xfffc55c4>
    5604:	2809883a 	mov	r4,r5
    5608:	003fee06 	br	55c4 <__alt_mem_nios_system_shared_memory+0xfffc55c4>
    560c:	04003fc4 	movi	r16,255
    5610:	003ef206 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5614:	01000044 	movi	r4,1
    5618:	003f9706 	br	5478 <__alt_mem_nios_system_shared_memory+0xfffc5478>
    561c:	0005883a 	mov	r2,zero
    5620:	003f3406 	br	52f4 <__alt_mem_nios_system_shared_memory+0xfffc52f4>
    5624:	2809883a 	mov	r4,r5
    5628:	003eec06 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    562c:	2809883a 	mov	r4,r5
    5630:	04003fc4 	movi	r16,255
    5634:	003ee906 	br	51dc <__alt_mem_nios_system_shared_memory+0xfffc51dc>
    5638:	00c00044 	movi	r3,1
    563c:	003fce06 	br	5578 <__alt_mem_nios_system_shared_memory+0xfffc5578>
    5640:	0005883a 	mov	r2,zero
    5644:	003f4e06 	br	5380 <__alt_mem_nios_system_shared_memory+0xfffc5380>

00005648 <__divsf3>:
    5648:	defff504 	addi	sp,sp,-44
    564c:	200cd5fa 	srli	r6,r4,23
    5650:	dcc00415 	stw	r19,16(sp)
    5654:	2026d7fa 	srli	r19,r4,31
    5658:	00c02034 	movhi	r3,128
    565c:	dd800715 	stw	r22,28(sp)
    5660:	dd000515 	stw	r20,20(sp)
    5664:	dc800315 	stw	r18,12(sp)
    5668:	18ffffc4 	addi	r3,r3,-1
    566c:	dfc00a15 	stw	ra,40(sp)
    5670:	df000915 	stw	fp,36(sp)
    5674:	ddc00815 	stw	r23,32(sp)
    5678:	dd400615 	stw	r21,24(sp)
    567c:	dc400215 	stw	r17,8(sp)
    5680:	dc000115 	stw	r16,4(sp)
    5684:	35003fcc 	andi	r20,r6,255
    5688:	1924703a 	and	r18,r3,r4
    568c:	9d803fcc 	andi	r22,r19,255
    5690:	a0005226 	beq	r20,zero,57dc <__divsf3+0x194>
    5694:	00803fc4 	movi	r2,255
    5698:	a0802e26 	beq	r20,r2,5754 <__divsf3+0x10c>
    569c:	91002034 	orhi	r4,r18,128
    56a0:	202490fa 	slli	r18,r4,3
    56a4:	a53fe044 	addi	r20,r20,-127
    56a8:	0021883a 	mov	r16,zero
    56ac:	002f883a 	mov	r23,zero
    56b0:	280cd5fa 	srli	r6,r5,23
    56b4:	282ad7fa 	srli	r21,r5,31
    56b8:	00c02034 	movhi	r3,128
    56bc:	18ffffc4 	addi	r3,r3,-1
    56c0:	31803fcc 	andi	r6,r6,255
    56c4:	1962703a 	and	r17,r3,r5
    56c8:	af003fcc 	andi	fp,r21,255
    56cc:	30004a26 	beq	r6,zero,57f8 <__divsf3+0x1b0>
    56d0:	00803fc4 	movi	r2,255
    56d4:	30804526 	beq	r6,r2,57ec <__divsf3+0x1a4>
    56d8:	89402034 	orhi	r5,r17,128
    56dc:	282290fa 	slli	r17,r5,3
    56e0:	31bfe044 	addi	r6,r6,-127
    56e4:	000b883a 	mov	r5,zero
    56e8:	2c20b03a 	or	r16,r5,r16
    56ec:	802090ba 	slli	r16,r16,2
    56f0:	00800034 	movhi	r2,0
    56f4:	1095c504 	addi	r2,r2,22292
    56f8:	80a1883a 	add	r16,r16,r2
    56fc:	81000017 	ldw	r4,0(r16)
    5700:	9d46f03a 	xor	r3,r19,r21
    5704:	180f883a 	mov	r7,r3
    5708:	18803fcc 	andi	r2,r3,255
    570c:	a18dc83a 	sub	r6,r20,r6
    5710:	2000683a 	jmp	r4
    5714:	000058f8 	rdprs	zero,zero,355
    5718:	0000577c 	xorhi	zero,zero,349
    571c:	000058ec 	andhi	zero,zero,355
    5720:	00005768 	cmpgeui	zero,zero,349
    5724:	000058ec 	andhi	zero,zero,355
    5728:	000058c4 	movi	zero,355
    572c:	000058ec 	andhi	zero,zero,355
    5730:	00005768 	cmpgeui	zero,zero,349
    5734:	0000577c 	xorhi	zero,zero,349
    5738:	0000577c 	xorhi	zero,zero,349
    573c:	000058c4 	movi	zero,355
    5740:	00005768 	cmpgeui	zero,zero,349
    5744:	000059d8 	cmpnei	zero,zero,359
    5748:	000059d8 	cmpnei	zero,zero,359
    574c:	000059d8 	cmpnei	zero,zero,359
    5750:	0000598c 	andi	zero,zero,358
    5754:	9000581e 	bne	r18,zero,58b8 <__divsf3+0x270>
    5758:	04000204 	movi	r16,8
    575c:	05c00084 	movi	r23,2
    5760:	003fd306 	br	56b0 <__alt_mem_nios_system_shared_memory+0xfffc56b0>
    5764:	0023883a 	mov	r17,zero
    5768:	e02d883a 	mov	r22,fp
    576c:	282f883a 	mov	r23,r5
    5770:	00800084 	movi	r2,2
    5774:	b8808f1e 	bne	r23,r2,59b4 <__divsf3+0x36c>
    5778:	b005883a 	mov	r2,r22
    577c:	11c0004c 	andi	r7,r2,1
    5780:	013fffc4 	movi	r4,-1
    5784:	000d883a 	mov	r6,zero
    5788:	21003fcc 	andi	r4,r4,255
    578c:	200895fa 	slli	r4,r4,23
    5790:	38803fcc 	andi	r2,r7,255
    5794:	00c02034 	movhi	r3,128
    5798:	100497fa 	slli	r2,r2,31
    579c:	18ffffc4 	addi	r3,r3,-1
    57a0:	30c6703a 	and	r3,r6,r3
    57a4:	1906b03a 	or	r3,r3,r4
    57a8:	1884b03a 	or	r2,r3,r2
    57ac:	dfc00a17 	ldw	ra,40(sp)
    57b0:	df000917 	ldw	fp,36(sp)
    57b4:	ddc00817 	ldw	r23,32(sp)
    57b8:	dd800717 	ldw	r22,28(sp)
    57bc:	dd400617 	ldw	r21,24(sp)
    57c0:	dd000517 	ldw	r20,20(sp)
    57c4:	dcc00417 	ldw	r19,16(sp)
    57c8:	dc800317 	ldw	r18,12(sp)
    57cc:	dc400217 	ldw	r17,8(sp)
    57d0:	dc000117 	ldw	r16,4(sp)
    57d4:	dec00b04 	addi	sp,sp,44
    57d8:	f800283a 	ret
    57dc:	90002b1e 	bne	r18,zero,588c <__divsf3+0x244>
    57e0:	04000104 	movi	r16,4
    57e4:	05c00044 	movi	r23,1
    57e8:	003fb106 	br	56b0 <__alt_mem_nios_system_shared_memory+0xfffc56b0>
    57ec:	8800251e 	bne	r17,zero,5884 <__divsf3+0x23c>
    57f0:	01400084 	movi	r5,2
    57f4:	00000206 	br	5800 <__divsf3+0x1b8>
    57f8:	88001a1e 	bne	r17,zero,5864 <__divsf3+0x21c>
    57fc:	01400044 	movi	r5,1
    5800:	8160b03a 	or	r16,r16,r5
    5804:	802090ba 	slli	r16,r16,2
    5808:	00c00034 	movhi	r3,0
    580c:	18d60904 	addi	r3,r3,22564
    5810:	80e1883a 	add	r16,r16,r3
    5814:	80c00017 	ldw	r3,0(r16)
    5818:	9d44f03a 	xor	r2,r19,r21
    581c:	a18dc83a 	sub	r6,r20,r6
    5820:	1800683a 	jmp	r3
    5824:	0000577c 	xorhi	zero,zero,349
    5828:	0000577c 	xorhi	zero,zero,349
    582c:	000059c8 	cmpgei	zero,zero,359
    5830:	00005764 	muli	zero,zero,349
    5834:	000059c8 	cmpgei	zero,zero,359
    5838:	000058c4 	movi	zero,355
    583c:	000059c8 	cmpgei	zero,zero,359
    5840:	00005764 	muli	zero,zero,349
    5844:	0000577c 	xorhi	zero,zero,349
    5848:	0000577c 	xorhi	zero,zero,349
    584c:	000058c4 	movi	zero,355
    5850:	00005764 	muli	zero,zero,349
    5854:	000059d8 	cmpnei	zero,zero,359
    5858:	000059d8 	cmpnei	zero,zero,359
    585c:	000059d8 	cmpnei	zero,zero,359
    5860:	000059f0 	cmpltui	zero,zero,359
    5864:	8809883a 	mov	r4,r17
    5868:	000917c0 	call	917c <__clzsi2>
    586c:	10fffec4 	addi	r3,r2,-5
    5870:	10801d84 	addi	r2,r2,118
    5874:	88e2983a 	sll	r17,r17,r3
    5878:	008dc83a 	sub	r6,zero,r2
    587c:	000b883a 	mov	r5,zero
    5880:	003f9906 	br	56e8 <__alt_mem_nios_system_shared_memory+0xfffc56e8>
    5884:	014000c4 	movi	r5,3
    5888:	003f9706 	br	56e8 <__alt_mem_nios_system_shared_memory+0xfffc56e8>
    588c:	9009883a 	mov	r4,r18
    5890:	d9400015 	stw	r5,0(sp)
    5894:	000917c0 	call	917c <__clzsi2>
    5898:	10fffec4 	addi	r3,r2,-5
    589c:	11801d84 	addi	r6,r2,118
    58a0:	90e4983a 	sll	r18,r18,r3
    58a4:	01a9c83a 	sub	r20,zero,r6
    58a8:	0021883a 	mov	r16,zero
    58ac:	002f883a 	mov	r23,zero
    58b0:	d9400017 	ldw	r5,0(sp)
    58b4:	003f7e06 	br	56b0 <__alt_mem_nios_system_shared_memory+0xfffc56b0>
    58b8:	04000304 	movi	r16,12
    58bc:	05c000c4 	movi	r23,3
    58c0:	003f7b06 	br	56b0 <__alt_mem_nios_system_shared_memory+0xfffc56b0>
    58c4:	01802034 	movhi	r6,128
    58c8:	000f883a 	mov	r7,zero
    58cc:	31bfffc4 	addi	r6,r6,-1
    58d0:	013fffc4 	movi	r4,-1
    58d4:	003fac06 	br	5788 <__alt_mem_nios_system_shared_memory+0xfffc5788>
    58d8:	01400044 	movi	r5,1
    58dc:	2909c83a 	sub	r4,r5,r4
    58e0:	00c006c4 	movi	r3,27
    58e4:	19004b0e 	bge	r3,r4,5a14 <__divsf3+0x3cc>
    58e8:	114e703a 	and	r7,r2,r5
    58ec:	0009883a 	mov	r4,zero
    58f0:	000d883a 	mov	r6,zero
    58f4:	003fa406 	br	5788 <__alt_mem_nios_system_shared_memory+0xfffc5788>
    58f8:	9006917a 	slli	r3,r18,5
    58fc:	8822917a 	slli	r17,r17,5
    5900:	1c40372e 	bgeu	r3,r17,59e0 <__divsf3+0x398>
    5904:	31bfffc4 	addi	r6,r6,-1
    5908:	010006c4 	movi	r4,27
    590c:	000b883a 	mov	r5,zero
    5910:	180f883a 	mov	r7,r3
    5914:	294b883a 	add	r5,r5,r5
    5918:	18c7883a 	add	r3,r3,r3
    591c:	38000116 	blt	r7,zero,5924 <__divsf3+0x2dc>
    5920:	1c400236 	bltu	r3,r17,592c <__divsf3+0x2e4>
    5924:	1c47c83a 	sub	r3,r3,r17
    5928:	29400054 	ori	r5,r5,1
    592c:	213fffc4 	addi	r4,r4,-1
    5930:	203ff71e 	bne	r4,zero,5910 <__alt_mem_nios_system_shared_memory+0xfffc5910>
    5934:	1806c03a 	cmpne	r3,r3,zero
    5938:	1962b03a 	or	r17,r3,r5
    593c:	31001fc4 	addi	r4,r6,127
    5940:	013fe50e 	bge	zero,r4,58d8 <__alt_mem_nios_system_shared_memory+0xfffc58d8>
    5944:	88c001cc 	andi	r3,r17,7
    5948:	18000426 	beq	r3,zero,595c <__divsf3+0x314>
    594c:	88c003cc 	andi	r3,r17,15
    5950:	01400104 	movi	r5,4
    5954:	19400126 	beq	r3,r5,595c <__divsf3+0x314>
    5958:	8963883a 	add	r17,r17,r5
    595c:	88c2002c 	andhi	r3,r17,2048
    5960:	18000426 	beq	r3,zero,5974 <__divsf3+0x32c>
    5964:	00fe0034 	movhi	r3,63488
    5968:	18ffffc4 	addi	r3,r3,-1
    596c:	31002004 	addi	r4,r6,128
    5970:	88e2703a 	and	r17,r17,r3
    5974:	00c03f84 	movi	r3,254
    5978:	193f8016 	blt	r3,r4,577c <__alt_mem_nios_system_shared_memory+0xfffc577c>
    597c:	880c91ba 	slli	r6,r17,6
    5980:	11c0004c 	andi	r7,r2,1
    5984:	300cd27a 	srli	r6,r6,9
    5988:	003f7f06 	br	5788 <__alt_mem_nios_system_shared_memory+0xfffc5788>
    598c:	9080102c 	andhi	r2,r18,64
    5990:	10000226 	beq	r2,zero,599c <__divsf3+0x354>
    5994:	8880102c 	andhi	r2,r17,64
    5998:	10001826 	beq	r2,zero,59fc <__divsf3+0x3b4>
    599c:	00802034 	movhi	r2,128
    59a0:	91801034 	orhi	r6,r18,64
    59a4:	10bfffc4 	addi	r2,r2,-1
    59a8:	980f883a 	mov	r7,r19
    59ac:	308c703a 	and	r6,r6,r2
    59b0:	003fc706 	br	58d0 <__alt_mem_nios_system_shared_memory+0xfffc58d0>
    59b4:	008000c4 	movi	r2,3
    59b8:	b8802d26 	beq	r23,r2,5a70 <__divsf3+0x428>
    59bc:	00c00044 	movi	r3,1
    59c0:	b005883a 	mov	r2,r22
    59c4:	b8ffdd1e 	bne	r23,r3,593c <__alt_mem_nios_system_shared_memory+0xfffc593c>
    59c8:	11c0004c 	andi	r7,r2,1
    59cc:	0009883a 	mov	r4,zero
    59d0:	000d883a 	mov	r6,zero
    59d4:	003f6c06 	br	5788 <__alt_mem_nios_system_shared_memory+0xfffc5788>
    59d8:	9023883a 	mov	r17,r18
    59dc:	003f6406 	br	5770 <__alt_mem_nios_system_shared_memory+0xfffc5770>
    59e0:	1c47c83a 	sub	r3,r3,r17
    59e4:	01000684 	movi	r4,26
    59e8:	01400044 	movi	r5,1
    59ec:	003fc806 	br	5910 <__alt_mem_nios_system_shared_memory+0xfffc5910>
    59f0:	9080102c 	andhi	r2,r18,64
    59f4:	103fe926 	beq	r2,zero,599c <__alt_mem_nios_system_shared_memory+0xfffc599c>
    59f8:	0023883a 	mov	r17,zero
    59fc:	00802034 	movhi	r2,128
    5a00:	89801034 	orhi	r6,r17,64
    5a04:	10bfffc4 	addi	r2,r2,-1
    5a08:	a80f883a 	mov	r7,r21
    5a0c:	308c703a 	and	r6,r6,r2
    5a10:	003faf06 	br	58d0 <__alt_mem_nios_system_shared_memory+0xfffc58d0>
    5a14:	01c00804 	movi	r7,32
    5a18:	390fc83a 	sub	r7,r7,r4
    5a1c:	89ce983a 	sll	r7,r17,r7
    5a20:	890ad83a 	srl	r5,r17,r4
    5a24:	380ec03a 	cmpne	r7,r7,zero
    5a28:	29cab03a 	or	r5,r5,r7
    5a2c:	28c001cc 	andi	r3,r5,7
    5a30:	18000426 	beq	r3,zero,5a44 <__divsf3+0x3fc>
    5a34:	28c003cc 	andi	r3,r5,15
    5a38:	01000104 	movi	r4,4
    5a3c:	19000126 	beq	r3,r4,5a44 <__divsf3+0x3fc>
    5a40:	290b883a 	add	r5,r5,r4
    5a44:	28c1002c 	andhi	r3,r5,1024
    5a48:	18000426 	beq	r3,zero,5a5c <__divsf3+0x414>
    5a4c:	11c0004c 	andi	r7,r2,1
    5a50:	01000044 	movi	r4,1
    5a54:	000d883a 	mov	r6,zero
    5a58:	003f4b06 	br	5788 <__alt_mem_nios_system_shared_memory+0xfffc5788>
    5a5c:	280a91ba 	slli	r5,r5,6
    5a60:	11c0004c 	andi	r7,r2,1
    5a64:	0009883a 	mov	r4,zero
    5a68:	280cd27a 	srli	r6,r5,9
    5a6c:	003f4606 	br	5788 <__alt_mem_nios_system_shared_memory+0xfffc5788>
    5a70:	00802034 	movhi	r2,128
    5a74:	89801034 	orhi	r6,r17,64
    5a78:	10bfffc4 	addi	r2,r2,-1
    5a7c:	b00f883a 	mov	r7,r22
    5a80:	308c703a 	and	r6,r6,r2
    5a84:	003f9206 	br	58d0 <__alt_mem_nios_system_shared_memory+0xfffc58d0>

00005a88 <__eqsf2>:
    5a88:	2006d5fa 	srli	r3,r4,23
    5a8c:	280cd5fa 	srli	r6,r5,23
    5a90:	01c02034 	movhi	r7,128
    5a94:	39ffffc4 	addi	r7,r7,-1
    5a98:	18c03fcc 	andi	r3,r3,255
    5a9c:	02003fc4 	movi	r8,255
    5aa0:	3904703a 	and	r2,r7,r4
    5aa4:	31803fcc 	andi	r6,r6,255
    5aa8:	394e703a 	and	r7,r7,r5
    5aac:	2008d7fa 	srli	r4,r4,31
    5ab0:	280ad7fa 	srli	r5,r5,31
    5ab4:	1a000d26 	beq	r3,r8,5aec <__eqsf2+0x64>
    5ab8:	02003fc4 	movi	r8,255
    5abc:	32000826 	beq	r6,r8,5ae0 <__eqsf2+0x58>
    5ac0:	19800226 	beq	r3,r6,5acc <__eqsf2+0x44>
    5ac4:	00800044 	movi	r2,1
    5ac8:	f800283a 	ret
    5acc:	11fffd1e 	bne	r2,r7,5ac4 <__alt_mem_nios_system_shared_memory+0xfffc5ac4>
    5ad0:	21400926 	beq	r4,r5,5af8 <__eqsf2+0x70>
    5ad4:	183ffb1e 	bne	r3,zero,5ac4 <__alt_mem_nios_system_shared_memory+0xfffc5ac4>
    5ad8:	1004c03a 	cmpne	r2,r2,zero
    5adc:	f800283a 	ret
    5ae0:	383ff726 	beq	r7,zero,5ac0 <__alt_mem_nios_system_shared_memory+0xfffc5ac0>
    5ae4:	00800044 	movi	r2,1
    5ae8:	f800283a 	ret
    5aec:	103ff226 	beq	r2,zero,5ab8 <__alt_mem_nios_system_shared_memory+0xfffc5ab8>
    5af0:	00800044 	movi	r2,1
    5af4:	f800283a 	ret
    5af8:	0005883a 	mov	r2,zero
    5afc:	f800283a 	ret

00005b00 <__gesf2>:
    5b00:	2004d5fa 	srli	r2,r4,23
    5b04:	2806d5fa 	srli	r3,r5,23
    5b08:	01802034 	movhi	r6,128
    5b0c:	31bfffc4 	addi	r6,r6,-1
    5b10:	10803fcc 	andi	r2,r2,255
    5b14:	01c03fc4 	movi	r7,255
    5b18:	3110703a 	and	r8,r6,r4
    5b1c:	18c03fcc 	andi	r3,r3,255
    5b20:	314c703a 	and	r6,r6,r5
    5b24:	2008d7fa 	srli	r4,r4,31
    5b28:	280ad7fa 	srli	r5,r5,31
    5b2c:	11c01926 	beq	r2,r7,5b94 <__gesf2+0x94>
    5b30:	01c03fc4 	movi	r7,255
    5b34:	19c00f26 	beq	r3,r7,5b74 <__gesf2+0x74>
    5b38:	1000061e 	bne	r2,zero,5b54 <__gesf2+0x54>
    5b3c:	400f003a 	cmpeq	r7,r8,zero
    5b40:	1800071e 	bne	r3,zero,5b60 <__gesf2+0x60>
    5b44:	3000061e 	bne	r6,zero,5b60 <__gesf2+0x60>
    5b48:	0005883a 	mov	r2,zero
    5b4c:	40000e1e 	bne	r8,zero,5b88 <__gesf2+0x88>
    5b50:	f800283a 	ret
    5b54:	18000a1e 	bne	r3,zero,5b80 <__gesf2+0x80>
    5b58:	30000b26 	beq	r6,zero,5b88 <__gesf2+0x88>
    5b5c:	000f883a 	mov	r7,zero
    5b60:	29403fcc 	andi	r5,r5,255
    5b64:	38000726 	beq	r7,zero,5b84 <__gesf2+0x84>
    5b68:	28000826 	beq	r5,zero,5b8c <__gesf2+0x8c>
    5b6c:	00800044 	movi	r2,1
    5b70:	f800283a 	ret
    5b74:	303ff026 	beq	r6,zero,5b38 <__alt_mem_nios_system_shared_memory+0xfffc5b38>
    5b78:	00bfff84 	movi	r2,-2
    5b7c:	f800283a 	ret
    5b80:	29403fcc 	andi	r5,r5,255
    5b84:	21400526 	beq	r4,r5,5b9c <__gesf2+0x9c>
    5b88:	203ff826 	beq	r4,zero,5b6c <__alt_mem_nios_system_shared_memory+0xfffc5b6c>
    5b8c:	00bfffc4 	movi	r2,-1
    5b90:	f800283a 	ret
    5b94:	403fe626 	beq	r8,zero,5b30 <__alt_mem_nios_system_shared_memory+0xfffc5b30>
    5b98:	003ff706 	br	5b78 <__alt_mem_nios_system_shared_memory+0xfffc5b78>
    5b9c:	18bffa16 	blt	r3,r2,5b88 <__alt_mem_nios_system_shared_memory+0xfffc5b88>
    5ba0:	10c00216 	blt	r2,r3,5bac <__gesf2+0xac>
    5ba4:	323ff836 	bltu	r6,r8,5b88 <__alt_mem_nios_system_shared_memory+0xfffc5b88>
    5ba8:	4180022e 	bgeu	r8,r6,5bb4 <__gesf2+0xb4>
    5bac:	203fef1e 	bne	r4,zero,5b6c <__alt_mem_nios_system_shared_memory+0xfffc5b6c>
    5bb0:	003ff606 	br	5b8c <__alt_mem_nios_system_shared_memory+0xfffc5b8c>
    5bb4:	0005883a 	mov	r2,zero
    5bb8:	f800283a 	ret

00005bbc <__lesf2>:
    5bbc:	2004d5fa 	srli	r2,r4,23
    5bc0:	280cd5fa 	srli	r6,r5,23
    5bc4:	00c02034 	movhi	r3,128
    5bc8:	18ffffc4 	addi	r3,r3,-1
    5bcc:	10803fcc 	andi	r2,r2,255
    5bd0:	01c03fc4 	movi	r7,255
    5bd4:	1910703a 	and	r8,r3,r4
    5bd8:	31803fcc 	andi	r6,r6,255
    5bdc:	1946703a 	and	r3,r3,r5
    5be0:	2008d7fa 	srli	r4,r4,31
    5be4:	280ad7fa 	srli	r5,r5,31
    5be8:	11c01b26 	beq	r2,r7,5c58 <__lesf2+0x9c>
    5bec:	01c03fc4 	movi	r7,255
    5bf0:	31c01126 	beq	r6,r7,5c38 <__lesf2+0x7c>
    5bf4:	1000071e 	bne	r2,zero,5c14 <__lesf2+0x58>
    5bf8:	400f003a 	cmpeq	r7,r8,zero
    5bfc:	21003fcc 	andi	r4,r4,255
    5c00:	3000081e 	bne	r6,zero,5c24 <__lesf2+0x68>
    5c04:	1800071e 	bne	r3,zero,5c24 <__lesf2+0x68>
    5c08:	0005883a 	mov	r2,zero
    5c0c:	40000f1e 	bne	r8,zero,5c4c <__lesf2+0x90>
    5c10:	f800283a 	ret
    5c14:	21003fcc 	andi	r4,r4,255
    5c18:	30000a1e 	bne	r6,zero,5c44 <__lesf2+0x88>
    5c1c:	18000b26 	beq	r3,zero,5c4c <__lesf2+0x90>
    5c20:	000f883a 	mov	r7,zero
    5c24:	29403fcc 	andi	r5,r5,255
    5c28:	38000726 	beq	r7,zero,5c48 <__lesf2+0x8c>
    5c2c:	28000826 	beq	r5,zero,5c50 <__lesf2+0x94>
    5c30:	00800044 	movi	r2,1
    5c34:	f800283a 	ret
    5c38:	183fee26 	beq	r3,zero,5bf4 <__alt_mem_nios_system_shared_memory+0xfffc5bf4>
    5c3c:	00800084 	movi	r2,2
    5c40:	f800283a 	ret
    5c44:	29403fcc 	andi	r5,r5,255
    5c48:	21400626 	beq	r4,r5,5c64 <__lesf2+0xa8>
    5c4c:	203ff826 	beq	r4,zero,5c30 <__alt_mem_nios_system_shared_memory+0xfffc5c30>
    5c50:	00bfffc4 	movi	r2,-1
    5c54:	f800283a 	ret
    5c58:	403fe426 	beq	r8,zero,5bec <__alt_mem_nios_system_shared_memory+0xfffc5bec>
    5c5c:	00800084 	movi	r2,2
    5c60:	f800283a 	ret
    5c64:	30bff916 	blt	r6,r2,5c4c <__alt_mem_nios_system_shared_memory+0xfffc5c4c>
    5c68:	11800216 	blt	r2,r6,5c74 <__lesf2+0xb8>
    5c6c:	1a3ff736 	bltu	r3,r8,5c4c <__alt_mem_nios_system_shared_memory+0xfffc5c4c>
    5c70:	40c0022e 	bgeu	r8,r3,5c7c <__lesf2+0xc0>
    5c74:	203fee1e 	bne	r4,zero,5c30 <__alt_mem_nios_system_shared_memory+0xfffc5c30>
    5c78:	003ff506 	br	5c50 <__alt_mem_nios_system_shared_memory+0xfffc5c50>
    5c7c:	0005883a 	mov	r2,zero
    5c80:	f800283a 	ret

00005c84 <__mulsf3>:
    5c84:	defff504 	addi	sp,sp,-44
    5c88:	dc000115 	stw	r16,4(sp)
    5c8c:	2020d5fa 	srli	r16,r4,23
    5c90:	dd400615 	stw	r21,24(sp)
    5c94:	202ad7fa 	srli	r21,r4,31
    5c98:	dc800315 	stw	r18,12(sp)
    5c9c:	04802034 	movhi	r18,128
    5ca0:	df000915 	stw	fp,36(sp)
    5ca4:	dd000515 	stw	r20,20(sp)
    5ca8:	94bfffc4 	addi	r18,r18,-1
    5cac:	dfc00a15 	stw	ra,40(sp)
    5cb0:	ddc00815 	stw	r23,32(sp)
    5cb4:	dd800715 	stw	r22,28(sp)
    5cb8:	dcc00415 	stw	r19,16(sp)
    5cbc:	dc400215 	stw	r17,8(sp)
    5cc0:	84003fcc 	andi	r16,r16,255
    5cc4:	9124703a 	and	r18,r18,r4
    5cc8:	a829883a 	mov	r20,r21
    5ccc:	af003fcc 	andi	fp,r21,255
    5cd0:	80005426 	beq	r16,zero,5e24 <__mulsf3+0x1a0>
    5cd4:	00803fc4 	movi	r2,255
    5cd8:	80802f26 	beq	r16,r2,5d98 <__mulsf3+0x114>
    5cdc:	91002034 	orhi	r4,r18,128
    5ce0:	202490fa 	slli	r18,r4,3
    5ce4:	843fe044 	addi	r16,r16,-127
    5ce8:	0023883a 	mov	r17,zero
    5cec:	002f883a 	mov	r23,zero
    5cf0:	2804d5fa 	srli	r2,r5,23
    5cf4:	282cd7fa 	srli	r22,r5,31
    5cf8:	01002034 	movhi	r4,128
    5cfc:	213fffc4 	addi	r4,r4,-1
    5d00:	10803fcc 	andi	r2,r2,255
    5d04:	2166703a 	and	r19,r4,r5
    5d08:	b1803fcc 	andi	r6,r22,255
    5d0c:	10004c26 	beq	r2,zero,5e40 <__mulsf3+0x1bc>
    5d10:	00c03fc4 	movi	r3,255
    5d14:	10c04726 	beq	r2,r3,5e34 <__mulsf3+0x1b0>
    5d18:	99002034 	orhi	r4,r19,128
    5d1c:	202690fa 	slli	r19,r4,3
    5d20:	10bfe044 	addi	r2,r2,-127
    5d24:	0007883a 	mov	r3,zero
    5d28:	80a1883a 	add	r16,r16,r2
    5d2c:	010003c4 	movi	r4,15
    5d30:	1c44b03a 	or	r2,r3,r17
    5d34:	b56af03a 	xor	r21,r22,r21
    5d38:	81c00044 	addi	r7,r16,1
    5d3c:	20806b36 	bltu	r4,r2,5eec <__mulsf3+0x268>
    5d40:	100490ba 	slli	r2,r2,2
    5d44:	01000034 	movhi	r4,0
    5d48:	21175604 	addi	r4,r4,23896
    5d4c:	1105883a 	add	r2,r2,r4
    5d50:	10800017 	ldw	r2,0(r2)
    5d54:	1000683a 	jmp	r2
    5d58:	00005eec 	andhi	zero,zero,379
    5d5c:	00005dac 	andhi	zero,zero,374
    5d60:	00005dac 	andhi	zero,zero,374
    5d64:	00005da8 	cmpgeui	zero,zero,374
    5d68:	00005ed0 	cmplti	zero,zero,379
    5d6c:	00005ed0 	cmplti	zero,zero,379
    5d70:	00005ebc 	xorhi	zero,zero,378
    5d74:	00005da8 	cmpgeui	zero,zero,374
    5d78:	00005ed0 	cmplti	zero,zero,379
    5d7c:	00005ebc 	xorhi	zero,zero,378
    5d80:	00005ed0 	cmplti	zero,zero,379
    5d84:	00005da8 	cmpgeui	zero,zero,374
    5d88:	00005edc 	xori	zero,zero,379
    5d8c:	00005edc 	xori	zero,zero,379
    5d90:	00005edc 	xori	zero,zero,379
    5d94:	00005fec 	andhi	zero,zero,383
    5d98:	90003b1e 	bne	r18,zero,5e88 <__mulsf3+0x204>
    5d9c:	04400204 	movi	r17,8
    5da0:	05c00084 	movi	r23,2
    5da4:	003fd206 	br	5cf0 <__alt_mem_nios_system_shared_memory+0xfffc5cf0>
    5da8:	302b883a 	mov	r21,r6
    5dac:	00800084 	movi	r2,2
    5db0:	18802626 	beq	r3,r2,5e4c <__mulsf3+0x1c8>
    5db4:	008000c4 	movi	r2,3
    5db8:	1880b826 	beq	r3,r2,609c <__mulsf3+0x418>
    5dbc:	00800044 	movi	r2,1
    5dc0:	1880af1e 	bne	r3,r2,6080 <__mulsf3+0x3fc>
    5dc4:	a829883a 	mov	r20,r21
    5dc8:	0007883a 	mov	r3,zero
    5dcc:	0009883a 	mov	r4,zero
    5dd0:	18803fcc 	andi	r2,r3,255
    5dd4:	100695fa 	slli	r3,r2,23
    5dd8:	a0803fcc 	andi	r2,r20,255
    5ddc:	100a97fa 	slli	r5,r2,31
    5de0:	00802034 	movhi	r2,128
    5de4:	10bfffc4 	addi	r2,r2,-1
    5de8:	2084703a 	and	r2,r4,r2
    5dec:	10c4b03a 	or	r2,r2,r3
    5df0:	1144b03a 	or	r2,r2,r5
    5df4:	dfc00a17 	ldw	ra,40(sp)
    5df8:	df000917 	ldw	fp,36(sp)
    5dfc:	ddc00817 	ldw	r23,32(sp)
    5e00:	dd800717 	ldw	r22,28(sp)
    5e04:	dd400617 	ldw	r21,24(sp)
    5e08:	dd000517 	ldw	r20,20(sp)
    5e0c:	dcc00417 	ldw	r19,16(sp)
    5e10:	dc800317 	ldw	r18,12(sp)
    5e14:	dc400217 	ldw	r17,8(sp)
    5e18:	dc000117 	ldw	r16,4(sp)
    5e1c:	dec00b04 	addi	sp,sp,44
    5e20:	f800283a 	ret
    5e24:	90000d1e 	bne	r18,zero,5e5c <__mulsf3+0x1d8>
    5e28:	04400104 	movi	r17,4
    5e2c:	05c00044 	movi	r23,1
    5e30:	003faf06 	br	5cf0 <__alt_mem_nios_system_shared_memory+0xfffc5cf0>
    5e34:	9806c03a 	cmpne	r3,r19,zero
    5e38:	18c00084 	addi	r3,r3,2
    5e3c:	003fba06 	br	5d28 <__alt_mem_nios_system_shared_memory+0xfffc5d28>
    5e40:	9800141e 	bne	r19,zero,5e94 <__mulsf3+0x210>
    5e44:	00c00044 	movi	r3,1
    5e48:	003fb706 	br	5d28 <__alt_mem_nios_system_shared_memory+0xfffc5d28>
    5e4c:	a829883a 	mov	r20,r21
    5e50:	00ffffc4 	movi	r3,-1
    5e54:	0009883a 	mov	r4,zero
    5e58:	003fdd06 	br	5dd0 <__alt_mem_nios_system_shared_memory+0xfffc5dd0>
    5e5c:	9009883a 	mov	r4,r18
    5e60:	d9400015 	stw	r5,0(sp)
    5e64:	000917c0 	call	917c <__clzsi2>
    5e68:	10fffec4 	addi	r3,r2,-5
    5e6c:	10801d84 	addi	r2,r2,118
    5e70:	90e4983a 	sll	r18,r18,r3
    5e74:	00a1c83a 	sub	r16,zero,r2
    5e78:	0023883a 	mov	r17,zero
    5e7c:	002f883a 	mov	r23,zero
    5e80:	d9400017 	ldw	r5,0(sp)
    5e84:	003f9a06 	br	5cf0 <__alt_mem_nios_system_shared_memory+0xfffc5cf0>
    5e88:	04400304 	movi	r17,12
    5e8c:	05c000c4 	movi	r23,3
    5e90:	003f9706 	br	5cf0 <__alt_mem_nios_system_shared_memory+0xfffc5cf0>
    5e94:	9809883a 	mov	r4,r19
    5e98:	d9800015 	stw	r6,0(sp)
    5e9c:	000917c0 	call	917c <__clzsi2>
    5ea0:	10fffec4 	addi	r3,r2,-5
    5ea4:	10801d84 	addi	r2,r2,118
    5ea8:	98e6983a 	sll	r19,r19,r3
    5eac:	0085c83a 	sub	r2,zero,r2
    5eb0:	0007883a 	mov	r3,zero
    5eb4:	d9800017 	ldw	r6,0(sp)
    5eb8:	003f9b06 	br	5d28 <__alt_mem_nios_system_shared_memory+0xfffc5d28>
    5ebc:	01002034 	movhi	r4,128
    5ec0:	0029883a 	mov	r20,zero
    5ec4:	213fffc4 	addi	r4,r4,-1
    5ec8:	00ffffc4 	movi	r3,-1
    5ecc:	003fc006 	br	5dd0 <__alt_mem_nios_system_shared_memory+0xfffc5dd0>
    5ed0:	9027883a 	mov	r19,r18
    5ed4:	b807883a 	mov	r3,r23
    5ed8:	003fb406 	br	5dac <__alt_mem_nios_system_shared_memory+0xfffc5dac>
    5edc:	9027883a 	mov	r19,r18
    5ee0:	e02b883a 	mov	r21,fp
    5ee4:	b807883a 	mov	r3,r23
    5ee8:	003fb006 	br	5dac <__alt_mem_nios_system_shared_memory+0xfffc5dac>
    5eec:	9028d43a 	srli	r20,r18,16
    5ef0:	982cd43a 	srli	r22,r19,16
    5ef4:	94bfffcc 	andi	r18,r18,65535
    5ef8:	9cffffcc 	andi	r19,r19,65535
    5efc:	980b883a 	mov	r5,r19
    5f00:	9009883a 	mov	r4,r18
    5f04:	d9c00015 	stw	r7,0(sp)
    5f08:	00051580 	call	5158 <__mulsi3>
    5f0c:	a00b883a 	mov	r5,r20
    5f10:	9809883a 	mov	r4,r19
    5f14:	1023883a 	mov	r17,r2
    5f18:	00051580 	call	5158 <__mulsi3>
    5f1c:	a009883a 	mov	r4,r20
    5f20:	b00b883a 	mov	r5,r22
    5f24:	1027883a 	mov	r19,r2
    5f28:	00051580 	call	5158 <__mulsi3>
    5f2c:	b00b883a 	mov	r5,r22
    5f30:	9009883a 	mov	r4,r18
    5f34:	1029883a 	mov	r20,r2
    5f38:	00051580 	call	5158 <__mulsi3>
    5f3c:	8806d43a 	srli	r3,r17,16
    5f40:	14c5883a 	add	r2,r2,r19
    5f44:	d9c00017 	ldw	r7,0(sp)
    5f48:	1885883a 	add	r2,r3,r2
    5f4c:	14c0022e 	bgeu	r2,r19,5f58 <__mulsf3+0x2d4>
    5f50:	00c00074 	movhi	r3,1
    5f54:	a0e9883a 	add	r20,r20,r3
    5f58:	1026943a 	slli	r19,r2,16
    5f5c:	8c7fffcc 	andi	r17,r17,65535
    5f60:	1004d43a 	srli	r2,r2,16
    5f64:	9c63883a 	add	r17,r19,r17
    5f68:	882691ba 	slli	r19,r17,6
    5f6c:	1505883a 	add	r2,r2,r20
    5f70:	8822d6ba 	srli	r17,r17,26
    5f74:	100891ba 	slli	r4,r2,6
    5f78:	9826c03a 	cmpne	r19,r19,zero
    5f7c:	9c62b03a 	or	r17,r19,r17
    5f80:	8926b03a 	or	r19,r17,r4
    5f84:	9882002c 	andhi	r2,r19,2048
    5f88:	10000426 	beq	r2,zero,5f9c <__mulsf3+0x318>
    5f8c:	9804d07a 	srli	r2,r19,1
    5f90:	9900004c 	andi	r4,r19,1
    5f94:	3821883a 	mov	r16,r7
    5f98:	1126b03a 	or	r19,r2,r4
    5f9c:	80c01fc4 	addi	r3,r16,127
    5fa0:	00c0210e 	bge	zero,r3,6028 <__mulsf3+0x3a4>
    5fa4:	988001cc 	andi	r2,r19,7
    5fa8:	10000426 	beq	r2,zero,5fbc <__mulsf3+0x338>
    5fac:	988003cc 	andi	r2,r19,15
    5fb0:	01000104 	movi	r4,4
    5fb4:	11000126 	beq	r2,r4,5fbc <__mulsf3+0x338>
    5fb8:	9927883a 	add	r19,r19,r4
    5fbc:	9882002c 	andhi	r2,r19,2048
    5fc0:	10000426 	beq	r2,zero,5fd4 <__mulsf3+0x350>
    5fc4:	00be0034 	movhi	r2,63488
    5fc8:	10bfffc4 	addi	r2,r2,-1
    5fcc:	80c02004 	addi	r3,r16,128
    5fd0:	98a6703a 	and	r19,r19,r2
    5fd4:	00803f84 	movi	r2,254
    5fd8:	10ff9c16 	blt	r2,r3,5e4c <__alt_mem_nios_system_shared_memory+0xfffc5e4c>
    5fdc:	980891ba 	slli	r4,r19,6
    5fe0:	a829883a 	mov	r20,r21
    5fe4:	2008d27a 	srli	r4,r4,9
    5fe8:	003f7906 	br	5dd0 <__alt_mem_nios_system_shared_memory+0xfffc5dd0>
    5fec:	9080102c 	andhi	r2,r18,64
    5ff0:	10000826 	beq	r2,zero,6014 <__mulsf3+0x390>
    5ff4:	9880102c 	andhi	r2,r19,64
    5ff8:	1000061e 	bne	r2,zero,6014 <__mulsf3+0x390>
    5ffc:	00802034 	movhi	r2,128
    6000:	99001034 	orhi	r4,r19,64
    6004:	10bfffc4 	addi	r2,r2,-1
    6008:	b029883a 	mov	r20,r22
    600c:	2088703a 	and	r4,r4,r2
    6010:	003fad06 	br	5ec8 <__alt_mem_nios_system_shared_memory+0xfffc5ec8>
    6014:	00802034 	movhi	r2,128
    6018:	91001034 	orhi	r4,r18,64
    601c:	10bfffc4 	addi	r2,r2,-1
    6020:	2088703a 	and	r4,r4,r2
    6024:	003fa806 	br	5ec8 <__alt_mem_nios_system_shared_memory+0xfffc5ec8>
    6028:	00800044 	movi	r2,1
    602c:	10c7c83a 	sub	r3,r2,r3
    6030:	008006c4 	movi	r2,27
    6034:	10ff6316 	blt	r2,r3,5dc4 <__alt_mem_nios_system_shared_memory+0xfffc5dc4>
    6038:	00800804 	movi	r2,32
    603c:	10c5c83a 	sub	r2,r2,r3
    6040:	9884983a 	sll	r2,r19,r2
    6044:	98c6d83a 	srl	r3,r19,r3
    6048:	1004c03a 	cmpne	r2,r2,zero
    604c:	1884b03a 	or	r2,r3,r2
    6050:	10c001cc 	andi	r3,r2,7
    6054:	18000426 	beq	r3,zero,6068 <__mulsf3+0x3e4>
    6058:	10c003cc 	andi	r3,r2,15
    605c:	01000104 	movi	r4,4
    6060:	19000126 	beq	r3,r4,6068 <__mulsf3+0x3e4>
    6064:	1105883a 	add	r2,r2,r4
    6068:	10c1002c 	andhi	r3,r2,1024
    606c:	18000626 	beq	r3,zero,6088 <__mulsf3+0x404>
    6070:	a829883a 	mov	r20,r21
    6074:	00c00044 	movi	r3,1
    6078:	0009883a 	mov	r4,zero
    607c:	003f5406 	br	5dd0 <__alt_mem_nios_system_shared_memory+0xfffc5dd0>
    6080:	3821883a 	mov	r16,r7
    6084:	003fc506 	br	5f9c <__alt_mem_nios_system_shared_memory+0xfffc5f9c>
    6088:	100491ba 	slli	r2,r2,6
    608c:	a829883a 	mov	r20,r21
    6090:	0007883a 	mov	r3,zero
    6094:	1008d27a 	srli	r4,r2,9
    6098:	003f4d06 	br	5dd0 <__alt_mem_nios_system_shared_memory+0xfffc5dd0>
    609c:	00802034 	movhi	r2,128
    60a0:	99001034 	orhi	r4,r19,64
    60a4:	10bfffc4 	addi	r2,r2,-1
    60a8:	a829883a 	mov	r20,r21
    60ac:	2088703a 	and	r4,r4,r2
    60b0:	003f8506 	br	5ec8 <__alt_mem_nios_system_shared_memory+0xfffc5ec8>

000060b4 <__subsf3>:
    60b4:	defffc04 	addi	sp,sp,-16
    60b8:	280cd5fa 	srli	r6,r5,23
    60bc:	dc000015 	stw	r16,0(sp)
    60c0:	01c02034 	movhi	r7,128
    60c4:	2020d5fa 	srli	r16,r4,23
    60c8:	39ffffc4 	addi	r7,r7,-1
    60cc:	3906703a 	and	r3,r7,r4
    60d0:	dc400115 	stw	r17,4(sp)
    60d4:	394e703a 	and	r7,r7,r5
    60d8:	2022d7fa 	srli	r17,r4,31
    60dc:	dfc00315 	stw	ra,12(sp)
    60e0:	dc800215 	stw	r18,8(sp)
    60e4:	31803fcc 	andi	r6,r6,255
    60e8:	01003fc4 	movi	r4,255
    60ec:	84003fcc 	andi	r16,r16,255
    60f0:	180690fa 	slli	r3,r3,3
    60f4:	2804d7fa 	srli	r2,r5,31
    60f8:	380e90fa 	slli	r7,r7,3
    60fc:	31006d26 	beq	r6,r4,62b4 <__subsf3+0x200>
    6100:	1080005c 	xori	r2,r2,1
    6104:	8189c83a 	sub	r4,r16,r6
    6108:	14404f26 	beq	r2,r17,6248 <__subsf3+0x194>
    610c:	0100770e 	bge	zero,r4,62ec <__subsf3+0x238>
    6110:	30001e1e 	bne	r6,zero,618c <__subsf3+0xd8>
    6114:	38006a1e 	bne	r7,zero,62c0 <__subsf3+0x20c>
    6118:	188001cc 	andi	r2,r3,7
    611c:	10000426 	beq	r2,zero,6130 <__subsf3+0x7c>
    6120:	188003cc 	andi	r2,r3,15
    6124:	01000104 	movi	r4,4
    6128:	11000126 	beq	r2,r4,6130 <__subsf3+0x7c>
    612c:	1907883a 	add	r3,r3,r4
    6130:	1881002c 	andhi	r2,r3,1024
    6134:	10003926 	beq	r2,zero,621c <__subsf3+0x168>
    6138:	84000044 	addi	r16,r16,1
    613c:	00803fc4 	movi	r2,255
    6140:	80807526 	beq	r16,r2,6318 <__subsf3+0x264>
    6144:	180691ba 	slli	r3,r3,6
    6148:	8880004c 	andi	r2,r17,1
    614c:	180ad27a 	srli	r5,r3,9
    6150:	84003fcc 	andi	r16,r16,255
    6154:	800695fa 	slli	r3,r16,23
    6158:	10803fcc 	andi	r2,r2,255
    615c:	01002034 	movhi	r4,128
    6160:	213fffc4 	addi	r4,r4,-1
    6164:	100497fa 	slli	r2,r2,31
    6168:	2920703a 	and	r16,r5,r4
    616c:	80e0b03a 	or	r16,r16,r3
    6170:	8084b03a 	or	r2,r16,r2
    6174:	dfc00317 	ldw	ra,12(sp)
    6178:	dc800217 	ldw	r18,8(sp)
    617c:	dc400117 	ldw	r17,4(sp)
    6180:	dc000017 	ldw	r16,0(sp)
    6184:	dec00404 	addi	sp,sp,16
    6188:	f800283a 	ret
    618c:	00803fc4 	movi	r2,255
    6190:	80bfe126 	beq	r16,r2,6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6194:	39c10034 	orhi	r7,r7,1024
    6198:	008006c4 	movi	r2,27
    619c:	11007416 	blt	r2,r4,6370 <__subsf3+0x2bc>
    61a0:	00800804 	movi	r2,32
    61a4:	1105c83a 	sub	r2,r2,r4
    61a8:	3884983a 	sll	r2,r7,r2
    61ac:	390ed83a 	srl	r7,r7,r4
    61b0:	1008c03a 	cmpne	r4,r2,zero
    61b4:	390eb03a 	or	r7,r7,r4
    61b8:	19c7c83a 	sub	r3,r3,r7
    61bc:	1881002c 	andhi	r2,r3,1024
    61c0:	10001426 	beq	r2,zero,6214 <__subsf3+0x160>
    61c4:	04810034 	movhi	r18,1024
    61c8:	94bfffc4 	addi	r18,r18,-1
    61cc:	1ca4703a 	and	r18,r3,r18
    61d0:	9009883a 	mov	r4,r18
    61d4:	000917c0 	call	917c <__clzsi2>
    61d8:	10bffec4 	addi	r2,r2,-5
    61dc:	90a4983a 	sll	r18,r18,r2
    61e0:	14005116 	blt	r2,r16,6328 <__subsf3+0x274>
    61e4:	1405c83a 	sub	r2,r2,r16
    61e8:	10c00044 	addi	r3,r2,1
    61ec:	00800804 	movi	r2,32
    61f0:	10c5c83a 	sub	r2,r2,r3
    61f4:	9084983a 	sll	r2,r18,r2
    61f8:	90e4d83a 	srl	r18,r18,r3
    61fc:	0021883a 	mov	r16,zero
    6200:	1006c03a 	cmpne	r3,r2,zero
    6204:	90c6b03a 	or	r3,r18,r3
    6208:	003fc306 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    620c:	2000e026 	beq	r4,zero,6590 <__subsf3+0x4dc>
    6210:	2007883a 	mov	r3,r4
    6214:	188001cc 	andi	r2,r3,7
    6218:	103fc11e 	bne	r2,zero,6120 <__alt_mem_nios_system_shared_memory+0xfffc6120>
    621c:	180ad0fa 	srli	r5,r3,3
    6220:	00c03fc4 	movi	r3,255
    6224:	8880004c 	andi	r2,r17,1
    6228:	80c0031e 	bne	r16,r3,6238 <__subsf3+0x184>
    622c:	28006d26 	beq	r5,zero,63e4 <__subsf3+0x330>
    6230:	29401034 	orhi	r5,r5,64
    6234:	043fffc4 	movi	r16,-1
    6238:	00c02034 	movhi	r3,128
    623c:	18ffffc4 	addi	r3,r3,-1
    6240:	28ca703a 	and	r5,r5,r3
    6244:	003fc206 	br	6150 <__alt_mem_nios_system_shared_memory+0xfffc6150>
    6248:	01003c0e 	bge	zero,r4,633c <__subsf3+0x288>
    624c:	30002126 	beq	r6,zero,62d4 <__subsf3+0x220>
    6250:	01403fc4 	movi	r5,255
    6254:	817fb026 	beq	r16,r5,6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6258:	39c10034 	orhi	r7,r7,1024
    625c:	014006c4 	movi	r5,27
    6260:	29007416 	blt	r5,r4,6434 <__subsf3+0x380>
    6264:	01400804 	movi	r5,32
    6268:	290bc83a 	sub	r5,r5,r4
    626c:	394a983a 	sll	r5,r7,r5
    6270:	390ed83a 	srl	r7,r7,r4
    6274:	2808c03a 	cmpne	r4,r5,zero
    6278:	390eb03a 	or	r7,r7,r4
    627c:	19c7883a 	add	r3,r3,r7
    6280:	1901002c 	andhi	r4,r3,1024
    6284:	20003826 	beq	r4,zero,6368 <__subsf3+0x2b4>
    6288:	84000044 	addi	r16,r16,1
    628c:	01003fc4 	movi	r4,255
    6290:	81005426 	beq	r16,r4,63e4 <__subsf3+0x330>
    6294:	1023883a 	mov	r17,r2
    6298:	00bf0034 	movhi	r2,64512
    629c:	10bfffc4 	addi	r2,r2,-1
    62a0:	1900004c 	andi	r4,r3,1
    62a4:	1886703a 	and	r3,r3,r2
    62a8:	1806d07a 	srli	r3,r3,1
    62ac:	1906b03a 	or	r3,r3,r4
    62b0:	003f9906 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    62b4:	383f9226 	beq	r7,zero,6100 <__alt_mem_nios_system_shared_memory+0xfffc6100>
    62b8:	10803fcc 	andi	r2,r2,255
    62bc:	003f9106 	br	6104 <__alt_mem_nios_system_shared_memory+0xfffc6104>
    62c0:	213fffc4 	addi	r4,r4,-1
    62c4:	203fbc26 	beq	r4,zero,61b8 <__alt_mem_nios_system_shared_memory+0xfffc61b8>
    62c8:	00803fc4 	movi	r2,255
    62cc:	80bfb21e 	bne	r16,r2,6198 <__alt_mem_nios_system_shared_memory+0xfffc6198>
    62d0:	003f9106 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    62d4:	383f9026 	beq	r7,zero,6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    62d8:	213fffc4 	addi	r4,r4,-1
    62dc:	203fe726 	beq	r4,zero,627c <__alt_mem_nios_system_shared_memory+0xfffc627c>
    62e0:	01403fc4 	movi	r5,255
    62e4:	817fdd1e 	bne	r16,r5,625c <__alt_mem_nios_system_shared_memory+0xfffc625c>
    62e8:	003f8b06 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    62ec:	2000221e 	bne	r4,zero,6378 <__subsf3+0x2c4>
    62f0:	81000044 	addi	r4,r16,1
    62f4:	21003fcc 	andi	r4,r4,255
    62f8:	01400044 	movi	r5,1
    62fc:	2900470e 	bge	r5,r4,641c <__subsf3+0x368>
    6300:	19e5c83a 	sub	r18,r3,r7
    6304:	9141002c 	andhi	r5,r18,1024
    6308:	28002d26 	beq	r5,zero,63c0 <__subsf3+0x30c>
    630c:	38e5c83a 	sub	r18,r7,r3
    6310:	1023883a 	mov	r17,r2
    6314:	003fae06 	br	61d0 <__alt_mem_nios_system_shared_memory+0xfffc61d0>
    6318:	8880004c 	andi	r2,r17,1
    631c:	043fffc4 	movi	r16,-1
    6320:	000b883a 	mov	r5,zero
    6324:	003f8a06 	br	6150 <__alt_mem_nios_system_shared_memory+0xfffc6150>
    6328:	00ff0034 	movhi	r3,64512
    632c:	18ffffc4 	addi	r3,r3,-1
    6330:	80a1c83a 	sub	r16,r16,r2
    6334:	90c6703a 	and	r3,r18,r3
    6338:	003f7706 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    633c:	2000431e 	bne	r4,zero,644c <__subsf3+0x398>
    6340:	81000044 	addi	r4,r16,1
    6344:	21803fcc 	andi	r6,r4,255
    6348:	01400044 	movi	r5,1
    634c:	2980280e 	bge	r5,r6,63f0 <__subsf3+0x33c>
    6350:	01403fc4 	movi	r5,255
    6354:	21402326 	beq	r4,r5,63e4 <__subsf3+0x330>
    6358:	19c7883a 	add	r3,r3,r7
    635c:	1806d07a 	srli	r3,r3,1
    6360:	2021883a 	mov	r16,r4
    6364:	003f6c06 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6368:	1023883a 	mov	r17,r2
    636c:	003fa906 	br	6214 <__alt_mem_nios_system_shared_memory+0xfffc6214>
    6370:	01c00044 	movi	r7,1
    6374:	003f9006 	br	61b8 <__alt_mem_nios_system_shared_memory+0xfffc61b8>
    6378:	8000151e 	bne	r16,zero,63d0 <__subsf3+0x31c>
    637c:	18002f26 	beq	r3,zero,643c <__subsf3+0x388>
    6380:	0108303a 	nor	r4,zero,r4
    6384:	20000a26 	beq	r4,zero,63b0 <__subsf3+0x2fc>
    6388:	01403fc4 	movi	r5,255
    638c:	31402b26 	beq	r6,r5,643c <__subsf3+0x388>
    6390:	014006c4 	movi	r5,27
    6394:	29006e16 	blt	r5,r4,6550 <__subsf3+0x49c>
    6398:	01400804 	movi	r5,32
    639c:	290bc83a 	sub	r5,r5,r4
    63a0:	194a983a 	sll	r5,r3,r5
    63a4:	1908d83a 	srl	r4,r3,r4
    63a8:	2806c03a 	cmpne	r3,r5,zero
    63ac:	20c6b03a 	or	r3,r4,r3
    63b0:	38c7c83a 	sub	r3,r7,r3
    63b4:	3021883a 	mov	r16,r6
    63b8:	1023883a 	mov	r17,r2
    63bc:	003f7f06 	br	61bc <__alt_mem_nios_system_shared_memory+0xfffc61bc>
    63c0:	903f831e 	bne	r18,zero,61d0 <__alt_mem_nios_system_shared_memory+0xfffc61d0>
    63c4:	0005883a 	mov	r2,zero
    63c8:	0021883a 	mov	r16,zero
    63cc:	003f9a06 	br	6238 <__alt_mem_nios_system_shared_memory+0xfffc6238>
    63d0:	01403fc4 	movi	r5,255
    63d4:	31401926 	beq	r6,r5,643c <__subsf3+0x388>
    63d8:	0109c83a 	sub	r4,zero,r4
    63dc:	18c10034 	orhi	r3,r3,1024
    63e0:	003feb06 	br	6390 <__alt_mem_nios_system_shared_memory+0xfffc6390>
    63e4:	043fffc4 	movi	r16,-1
    63e8:	000b883a 	mov	r5,zero
    63ec:	003f5806 	br	6150 <__alt_mem_nios_system_shared_memory+0xfffc6150>
    63f0:	8000481e 	bne	r16,zero,6514 <__subsf3+0x460>
    63f4:	18006226 	beq	r3,zero,6580 <__subsf3+0x4cc>
    63f8:	383f4726 	beq	r7,zero,6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    63fc:	19c7883a 	add	r3,r3,r7
    6400:	1881002c 	andhi	r2,r3,1024
    6404:	103f8326 	beq	r2,zero,6214 <__alt_mem_nios_system_shared_memory+0xfffc6214>
    6408:	00bf0034 	movhi	r2,64512
    640c:	10bfffc4 	addi	r2,r2,-1
    6410:	2821883a 	mov	r16,r5
    6414:	1886703a 	and	r3,r3,r2
    6418:	003f3f06 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    641c:	80001c1e 	bne	r16,zero,6490 <__subsf3+0x3dc>
    6420:	1800261e 	bne	r3,zero,64bc <__subsf3+0x408>
    6424:	38004c26 	beq	r7,zero,6558 <__subsf3+0x4a4>
    6428:	3807883a 	mov	r3,r7
    642c:	1023883a 	mov	r17,r2
    6430:	003f3906 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6434:	01c00044 	movi	r7,1
    6438:	003f9006 	br	627c <__alt_mem_nios_system_shared_memory+0xfffc627c>
    643c:	3807883a 	mov	r3,r7
    6440:	3021883a 	mov	r16,r6
    6444:	1023883a 	mov	r17,r2
    6448:	003f3306 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    644c:	8000161e 	bne	r16,zero,64a8 <__subsf3+0x3f4>
    6450:	18002d26 	beq	r3,zero,6508 <__subsf3+0x454>
    6454:	0108303a 	nor	r4,zero,r4
    6458:	20000a26 	beq	r4,zero,6484 <__subsf3+0x3d0>
    645c:	01403fc4 	movi	r5,255
    6460:	31402926 	beq	r6,r5,6508 <__subsf3+0x454>
    6464:	014006c4 	movi	r5,27
    6468:	29004716 	blt	r5,r4,6588 <__subsf3+0x4d4>
    646c:	01400804 	movi	r5,32
    6470:	290bc83a 	sub	r5,r5,r4
    6474:	194a983a 	sll	r5,r3,r5
    6478:	1908d83a 	srl	r4,r3,r4
    647c:	2806c03a 	cmpne	r3,r5,zero
    6480:	20c6b03a 	or	r3,r4,r3
    6484:	19c7883a 	add	r3,r3,r7
    6488:	3021883a 	mov	r16,r6
    648c:	003f7c06 	br	6280 <__alt_mem_nios_system_shared_memory+0xfffc6280>
    6490:	1800111e 	bne	r3,zero,64d8 <__subsf3+0x424>
    6494:	38003326 	beq	r7,zero,6564 <__subsf3+0x4b0>
    6498:	3807883a 	mov	r3,r7
    649c:	1023883a 	mov	r17,r2
    64a0:	04003fc4 	movi	r16,255
    64a4:	003f1c06 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    64a8:	01403fc4 	movi	r5,255
    64ac:	31401626 	beq	r6,r5,6508 <__subsf3+0x454>
    64b0:	0109c83a 	sub	r4,zero,r4
    64b4:	18c10034 	orhi	r3,r3,1024
    64b8:	003fea06 	br	6464 <__alt_mem_nios_system_shared_memory+0xfffc6464>
    64bc:	383f1626 	beq	r7,zero,6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    64c0:	19c9c83a 	sub	r4,r3,r7
    64c4:	2141002c 	andhi	r5,r4,1024
    64c8:	283f5026 	beq	r5,zero,620c <__alt_mem_nios_system_shared_memory+0xfffc620c>
    64cc:	38c7c83a 	sub	r3,r7,r3
    64d0:	1023883a 	mov	r17,r2
    64d4:	003f1006 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    64d8:	38001b26 	beq	r7,zero,6548 <__subsf3+0x494>
    64dc:	1806d0fa 	srli	r3,r3,3
    64e0:	1900102c 	andhi	r4,r3,64
    64e4:	20000526 	beq	r4,zero,64fc <__subsf3+0x448>
    64e8:	380ed0fa 	srli	r7,r7,3
    64ec:	3900102c 	andhi	r4,r7,64
    64f0:	2000021e 	bne	r4,zero,64fc <__subsf3+0x448>
    64f4:	3807883a 	mov	r3,r7
    64f8:	1023883a 	mov	r17,r2
    64fc:	180690fa 	slli	r3,r3,3
    6500:	04003fc4 	movi	r16,255
    6504:	003f0406 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6508:	3807883a 	mov	r3,r7
    650c:	3021883a 	mov	r16,r6
    6510:	003f0106 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6514:	18001726 	beq	r3,zero,6574 <__subsf3+0x4c0>
    6518:	38000b26 	beq	r7,zero,6548 <__subsf3+0x494>
    651c:	1806d0fa 	srli	r3,r3,3
    6520:	1900102c 	andhi	r4,r3,64
    6524:	20000426 	beq	r4,zero,6538 <__subsf3+0x484>
    6528:	380ed0fa 	srli	r7,r7,3
    652c:	3900102c 	andhi	r4,r7,64
    6530:	2000011e 	bne	r4,zero,6538 <__subsf3+0x484>
    6534:	3807883a 	mov	r3,r7
    6538:	180690fa 	slli	r3,r3,3
    653c:	1023883a 	mov	r17,r2
    6540:	04003fc4 	movi	r16,255
    6544:	003ef406 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6548:	04003fc4 	movi	r16,255
    654c:	003ef206 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6550:	00c00044 	movi	r3,1
    6554:	003f9606 	br	63b0 <__alt_mem_nios_system_shared_memory+0xfffc63b0>
    6558:	000b883a 	mov	r5,zero
    655c:	0005883a 	mov	r2,zero
    6560:	003f3506 	br	6238 <__alt_mem_nios_system_shared_memory+0xfffc6238>
    6564:	01402034 	movhi	r5,128
    6568:	297fffc4 	addi	r5,r5,-1
    656c:	0005883a 	mov	r2,zero
    6570:	003f2f06 	br	6230 <__alt_mem_nios_system_shared_memory+0xfffc6230>
    6574:	3807883a 	mov	r3,r7
    6578:	04003fc4 	movi	r16,255
    657c:	003ee606 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6580:	3807883a 	mov	r3,r7
    6584:	003ee406 	br	6118 <__alt_mem_nios_system_shared_memory+0xfffc6118>
    6588:	00c00044 	movi	r3,1
    658c:	003fbd06 	br	6484 <__alt_mem_nios_system_shared_memory+0xfffc6484>
    6590:	0005883a 	mov	r2,zero
    6594:	003f2806 	br	6238 <__alt_mem_nios_system_shared_memory+0xfffc6238>

00006598 <__floatsisf>:
    6598:	defffd04 	addi	sp,sp,-12
    659c:	dfc00215 	stw	ra,8(sp)
    65a0:	dc400115 	stw	r17,4(sp)
    65a4:	dc000015 	stw	r16,0(sp)
    65a8:	20003526 	beq	r4,zero,6680 <__floatsisf+0xe8>
    65ac:	2021883a 	mov	r16,r4
    65b0:	2022d7fa 	srli	r17,r4,31
    65b4:	20003616 	blt	r4,zero,6690 <__floatsisf+0xf8>
    65b8:	8009883a 	mov	r4,r16
    65bc:	000917c0 	call	917c <__clzsi2>
    65c0:	00c02784 	movi	r3,158
    65c4:	1887c83a 	sub	r3,r3,r2
    65c8:	01002584 	movi	r4,150
    65cc:	20c01416 	blt	r4,r3,6620 <__floatsisf+0x88>
    65d0:	20c9c83a 	sub	r4,r4,r3
    65d4:	8120983a 	sll	r16,r16,r4
    65d8:	00802034 	movhi	r2,128
    65dc:	10bfffc4 	addi	r2,r2,-1
    65e0:	8809883a 	mov	r4,r17
    65e4:	80a0703a 	and	r16,r16,r2
    65e8:	18803fcc 	andi	r2,r3,255
    65ec:	100695fa 	slli	r3,r2,23
    65f0:	20803fcc 	andi	r2,r4,255
    65f4:	100897fa 	slli	r4,r2,31
    65f8:	00802034 	movhi	r2,128
    65fc:	10bfffc4 	addi	r2,r2,-1
    6600:	8084703a 	and	r2,r16,r2
    6604:	10c4b03a 	or	r2,r2,r3
    6608:	1104b03a 	or	r2,r2,r4
    660c:	dfc00217 	ldw	ra,8(sp)
    6610:	dc400117 	ldw	r17,4(sp)
    6614:	dc000017 	ldw	r16,0(sp)
    6618:	dec00304 	addi	sp,sp,12
    661c:	f800283a 	ret
    6620:	01002644 	movi	r4,153
    6624:	20c01c16 	blt	r4,r3,6698 <__floatsisf+0x100>
    6628:	20c9c83a 	sub	r4,r4,r3
    662c:	8120983a 	sll	r16,r16,r4
    6630:	013f0034 	movhi	r4,64512
    6634:	213fffc4 	addi	r4,r4,-1
    6638:	814001cc 	andi	r5,r16,7
    663c:	8108703a 	and	r4,r16,r4
    6640:	28000426 	beq	r5,zero,6654 <__floatsisf+0xbc>
    6644:	840003cc 	andi	r16,r16,15
    6648:	01400104 	movi	r5,4
    664c:	81400126 	beq	r16,r5,6654 <__floatsisf+0xbc>
    6650:	2149883a 	add	r4,r4,r5
    6654:	2141002c 	andhi	r5,r4,1024
    6658:	28000526 	beq	r5,zero,6670 <__floatsisf+0xd8>
    665c:	00c027c4 	movi	r3,159
    6660:	1887c83a 	sub	r3,r3,r2
    6664:	00bf0034 	movhi	r2,64512
    6668:	10bfffc4 	addi	r2,r2,-1
    666c:	2088703a 	and	r4,r4,r2
    6670:	202091ba 	slli	r16,r4,6
    6674:	8809883a 	mov	r4,r17
    6678:	8020d27a 	srli	r16,r16,9
    667c:	003fda06 	br	65e8 <__alt_mem_nios_system_shared_memory+0xfffc65e8>
    6680:	0009883a 	mov	r4,zero
    6684:	0007883a 	mov	r3,zero
    6688:	0021883a 	mov	r16,zero
    668c:	003fd606 	br	65e8 <__alt_mem_nios_system_shared_memory+0xfffc65e8>
    6690:	0121c83a 	sub	r16,zero,r4
    6694:	003fc806 	br	65b8 <__alt_mem_nios_system_shared_memory+0xfffc65b8>
    6698:	01002e44 	movi	r4,185
    669c:	20c9c83a 	sub	r4,r4,r3
    66a0:	01400144 	movi	r5,5
    66a4:	8108983a 	sll	r4,r16,r4
    66a8:	288bc83a 	sub	r5,r5,r2
    66ac:	8160d83a 	srl	r16,r16,r5
    66b0:	2008c03a 	cmpne	r4,r4,zero
    66b4:	8120b03a 	or	r16,r16,r4
    66b8:	003fdd06 	br	6630 <__alt_mem_nios_system_shared_memory+0xfffc6630>

000066bc <__floatunsisf>:
    66bc:	defffe04 	addi	sp,sp,-8
    66c0:	dfc00115 	stw	ra,4(sp)
    66c4:	dc000015 	stw	r16,0(sp)
    66c8:	20002c26 	beq	r4,zero,677c <__floatunsisf+0xc0>
    66cc:	2021883a 	mov	r16,r4
    66d0:	000917c0 	call	917c <__clzsi2>
    66d4:	00c02784 	movi	r3,158
    66d8:	1887c83a 	sub	r3,r3,r2
    66dc:	01002584 	movi	r4,150
    66e0:	20c00f16 	blt	r4,r3,6720 <__floatunsisf+0x64>
    66e4:	20c9c83a 	sub	r4,r4,r3
    66e8:	8108983a 	sll	r4,r16,r4
    66ec:	00802034 	movhi	r2,128
    66f0:	10bfffc4 	addi	r2,r2,-1
    66f4:	2088703a 	and	r4,r4,r2
    66f8:	18803fcc 	andi	r2,r3,255
    66fc:	100695fa 	slli	r3,r2,23
    6700:	00802034 	movhi	r2,128
    6704:	10bfffc4 	addi	r2,r2,-1
    6708:	2084703a 	and	r2,r4,r2
    670c:	10c4b03a 	or	r2,r2,r3
    6710:	dfc00117 	ldw	ra,4(sp)
    6714:	dc000017 	ldw	r16,0(sp)
    6718:	dec00204 	addi	sp,sp,8
    671c:	f800283a 	ret
    6720:	01002644 	movi	r4,153
    6724:	20c01816 	blt	r4,r3,6788 <__floatunsisf+0xcc>
    6728:	20c9c83a 	sub	r4,r4,r3
    672c:	8108983a 	sll	r4,r16,r4
    6730:	017f0034 	movhi	r5,64512
    6734:	297fffc4 	addi	r5,r5,-1
    6738:	218001cc 	andi	r6,r4,7
    673c:	214a703a 	and	r5,r4,r5
    6740:	30000426 	beq	r6,zero,6754 <__floatunsisf+0x98>
    6744:	210003cc 	andi	r4,r4,15
    6748:	01800104 	movi	r6,4
    674c:	21800126 	beq	r4,r6,6754 <__floatunsisf+0x98>
    6750:	298b883a 	add	r5,r5,r6
    6754:	2901002c 	andhi	r4,r5,1024
    6758:	20000526 	beq	r4,zero,6770 <__floatunsisf+0xb4>
    675c:	00c027c4 	movi	r3,159
    6760:	1887c83a 	sub	r3,r3,r2
    6764:	00bf0034 	movhi	r2,64512
    6768:	10bfffc4 	addi	r2,r2,-1
    676c:	288a703a 	and	r5,r5,r2
    6770:	280891ba 	slli	r4,r5,6
    6774:	2008d27a 	srli	r4,r4,9
    6778:	003fdf06 	br	66f8 <__alt_mem_nios_system_shared_memory+0xfffc66f8>
    677c:	0007883a 	mov	r3,zero
    6780:	0009883a 	mov	r4,zero
    6784:	003fdc06 	br	66f8 <__alt_mem_nios_system_shared_memory+0xfffc66f8>
    6788:	01402e44 	movi	r5,185
    678c:	28cbc83a 	sub	r5,r5,r3
    6790:	01000144 	movi	r4,5
    6794:	2089c83a 	sub	r4,r4,r2
    6798:	814a983a 	sll	r5,r16,r5
    679c:	8108d83a 	srl	r4,r16,r4
    67a0:	2820c03a 	cmpne	r16,r5,zero
    67a4:	2408b03a 	or	r4,r4,r16
    67a8:	003fe106 	br	6730 <__alt_mem_nios_system_shared_memory+0xfffc6730>

000067ac <__adddf3>:
    67ac:	02c00434 	movhi	r11,16
    67b0:	5affffc4 	addi	r11,r11,-1
    67b4:	2806d7fa 	srli	r3,r5,31
    67b8:	2ad4703a 	and	r10,r5,r11
    67bc:	3ad2703a 	and	r9,r7,r11
    67c0:	3804d53a 	srli	r2,r7,20
    67c4:	3018d77a 	srli	r12,r6,29
    67c8:	280ad53a 	srli	r5,r5,20
    67cc:	501490fa 	slli	r10,r10,3
    67d0:	2010d77a 	srli	r8,r4,29
    67d4:	481290fa 	slli	r9,r9,3
    67d8:	380ed7fa 	srli	r7,r7,31
    67dc:	defffb04 	addi	sp,sp,-20
    67e0:	dc800215 	stw	r18,8(sp)
    67e4:	dc400115 	stw	r17,4(sp)
    67e8:	dc000015 	stw	r16,0(sp)
    67ec:	dfc00415 	stw	ra,16(sp)
    67f0:	dcc00315 	stw	r19,12(sp)
    67f4:	1c803fcc 	andi	r18,r3,255
    67f8:	2c01ffcc 	andi	r16,r5,2047
    67fc:	5210b03a 	or	r8,r10,r8
    6800:	202290fa 	slli	r17,r4,3
    6804:	1081ffcc 	andi	r2,r2,2047
    6808:	4b12b03a 	or	r9,r9,r12
    680c:	300c90fa 	slli	r6,r6,3
    6810:	91c07526 	beq	r18,r7,69e8 <__adddf3+0x23c>
    6814:	8087c83a 	sub	r3,r16,r2
    6818:	00c0ab0e 	bge	zero,r3,6ac8 <__adddf3+0x31c>
    681c:	10002a1e 	bne	r2,zero,68c8 <__adddf3+0x11c>
    6820:	4984b03a 	or	r2,r9,r6
    6824:	1000961e 	bne	r2,zero,6a80 <__adddf3+0x2d4>
    6828:	888001cc 	andi	r2,r17,7
    682c:	10000726 	beq	r2,zero,684c <__adddf3+0xa0>
    6830:	888003cc 	andi	r2,r17,15
    6834:	00c00104 	movi	r3,4
    6838:	10c00426 	beq	r2,r3,684c <__adddf3+0xa0>
    683c:	88c7883a 	add	r3,r17,r3
    6840:	1c63803a 	cmpltu	r17,r3,r17
    6844:	4451883a 	add	r8,r8,r17
    6848:	1823883a 	mov	r17,r3
    684c:	4080202c 	andhi	r2,r8,128
    6850:	10005926 	beq	r2,zero,69b8 <__adddf3+0x20c>
    6854:	84000044 	addi	r16,r16,1
    6858:	0081ffc4 	movi	r2,2047
    685c:	8080ba26 	beq	r16,r2,6b48 <__adddf3+0x39c>
    6860:	00bfe034 	movhi	r2,65408
    6864:	10bfffc4 	addi	r2,r2,-1
    6868:	4090703a 	and	r8,r8,r2
    686c:	4004977a 	slli	r2,r8,29
    6870:	4010927a 	slli	r8,r8,9
    6874:	8822d0fa 	srli	r17,r17,3
    6878:	8401ffcc 	andi	r16,r16,2047
    687c:	4010d33a 	srli	r8,r8,12
    6880:	9007883a 	mov	r3,r18
    6884:	1444b03a 	or	r2,r2,r17
    6888:	8401ffcc 	andi	r16,r16,2047
    688c:	8020953a 	slli	r16,r16,20
    6890:	18c03fcc 	andi	r3,r3,255
    6894:	01000434 	movhi	r4,16
    6898:	213fffc4 	addi	r4,r4,-1
    689c:	180697fa 	slli	r3,r3,31
    68a0:	4110703a 	and	r8,r8,r4
    68a4:	4410b03a 	or	r8,r8,r16
    68a8:	40c6b03a 	or	r3,r8,r3
    68ac:	dfc00417 	ldw	ra,16(sp)
    68b0:	dcc00317 	ldw	r19,12(sp)
    68b4:	dc800217 	ldw	r18,8(sp)
    68b8:	dc400117 	ldw	r17,4(sp)
    68bc:	dc000017 	ldw	r16,0(sp)
    68c0:	dec00504 	addi	sp,sp,20
    68c4:	f800283a 	ret
    68c8:	0081ffc4 	movi	r2,2047
    68cc:	80bfd626 	beq	r16,r2,6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    68d0:	4a402034 	orhi	r9,r9,128
    68d4:	00800e04 	movi	r2,56
    68d8:	10c09f16 	blt	r2,r3,6b58 <__adddf3+0x3ac>
    68dc:	008007c4 	movi	r2,31
    68e0:	10c0c216 	blt	r2,r3,6bec <__adddf3+0x440>
    68e4:	00800804 	movi	r2,32
    68e8:	10c5c83a 	sub	r2,r2,r3
    68ec:	488a983a 	sll	r5,r9,r2
    68f0:	30c8d83a 	srl	r4,r6,r3
    68f4:	3084983a 	sll	r2,r6,r2
    68f8:	48c6d83a 	srl	r3,r9,r3
    68fc:	290cb03a 	or	r6,r5,r4
    6900:	1004c03a 	cmpne	r2,r2,zero
    6904:	308cb03a 	or	r6,r6,r2
    6908:	898dc83a 	sub	r6,r17,r6
    690c:	89a3803a 	cmpltu	r17,r17,r6
    6910:	40d1c83a 	sub	r8,r8,r3
    6914:	4451c83a 	sub	r8,r8,r17
    6918:	3023883a 	mov	r17,r6
    691c:	4080202c 	andhi	r2,r8,128
    6920:	10002326 	beq	r2,zero,69b0 <__adddf3+0x204>
    6924:	04c02034 	movhi	r19,128
    6928:	9cffffc4 	addi	r19,r19,-1
    692c:	44e6703a 	and	r19,r8,r19
    6930:	98007626 	beq	r19,zero,6b0c <__adddf3+0x360>
    6934:	9809883a 	mov	r4,r19
    6938:	000917c0 	call	917c <__clzsi2>
    693c:	10fffe04 	addi	r3,r2,-8
    6940:	010007c4 	movi	r4,31
    6944:	20c07716 	blt	r4,r3,6b24 <__adddf3+0x378>
    6948:	00800804 	movi	r2,32
    694c:	10c5c83a 	sub	r2,r2,r3
    6950:	8884d83a 	srl	r2,r17,r2
    6954:	98d0983a 	sll	r8,r19,r3
    6958:	88e2983a 	sll	r17,r17,r3
    695c:	1204b03a 	or	r2,r2,r8
    6960:	1c007416 	blt	r3,r16,6b34 <__adddf3+0x388>
    6964:	1c21c83a 	sub	r16,r3,r16
    6968:	82000044 	addi	r8,r16,1
    696c:	00c007c4 	movi	r3,31
    6970:	1a009116 	blt	r3,r8,6bb8 <__adddf3+0x40c>
    6974:	00c00804 	movi	r3,32
    6978:	1a07c83a 	sub	r3,r3,r8
    697c:	8a08d83a 	srl	r4,r17,r8
    6980:	88e2983a 	sll	r17,r17,r3
    6984:	10c6983a 	sll	r3,r2,r3
    6988:	1210d83a 	srl	r8,r2,r8
    698c:	8804c03a 	cmpne	r2,r17,zero
    6990:	1906b03a 	or	r3,r3,r4
    6994:	18a2b03a 	or	r17,r3,r2
    6998:	0021883a 	mov	r16,zero
    699c:	003fa206 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    69a0:	1890b03a 	or	r8,r3,r2
    69a4:	40017d26 	beq	r8,zero,6f9c <__adddf3+0x7f0>
    69a8:	1011883a 	mov	r8,r2
    69ac:	1823883a 	mov	r17,r3
    69b0:	888001cc 	andi	r2,r17,7
    69b4:	103f9e1e 	bne	r2,zero,6830 <__alt_mem_nios_system_shared_memory+0xfffc6830>
    69b8:	4004977a 	slli	r2,r8,29
    69bc:	8822d0fa 	srli	r17,r17,3
    69c0:	4010d0fa 	srli	r8,r8,3
    69c4:	9007883a 	mov	r3,r18
    69c8:	1444b03a 	or	r2,r2,r17
    69cc:	0101ffc4 	movi	r4,2047
    69d0:	81002426 	beq	r16,r4,6a64 <__adddf3+0x2b8>
    69d4:	8120703a 	and	r16,r16,r4
    69d8:	01000434 	movhi	r4,16
    69dc:	213fffc4 	addi	r4,r4,-1
    69e0:	4110703a 	and	r8,r8,r4
    69e4:	003fa806 	br	6888 <__alt_mem_nios_system_shared_memory+0xfffc6888>
    69e8:	8089c83a 	sub	r4,r16,r2
    69ec:	01005e0e 	bge	zero,r4,6b68 <__adddf3+0x3bc>
    69f0:	10002b26 	beq	r2,zero,6aa0 <__adddf3+0x2f4>
    69f4:	0081ffc4 	movi	r2,2047
    69f8:	80bf8b26 	beq	r16,r2,6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    69fc:	4a402034 	orhi	r9,r9,128
    6a00:	00800e04 	movi	r2,56
    6a04:	1100a40e 	bge	r2,r4,6c98 <__adddf3+0x4ec>
    6a08:	498cb03a 	or	r6,r9,r6
    6a0c:	300ac03a 	cmpne	r5,r6,zero
    6a10:	0013883a 	mov	r9,zero
    6a14:	2c4b883a 	add	r5,r5,r17
    6a18:	2c63803a 	cmpltu	r17,r5,r17
    6a1c:	4a11883a 	add	r8,r9,r8
    6a20:	8a11883a 	add	r8,r17,r8
    6a24:	2823883a 	mov	r17,r5
    6a28:	4080202c 	andhi	r2,r8,128
    6a2c:	103fe026 	beq	r2,zero,69b0 <__alt_mem_nios_system_shared_memory+0xfffc69b0>
    6a30:	84000044 	addi	r16,r16,1
    6a34:	0081ffc4 	movi	r2,2047
    6a38:	8080d226 	beq	r16,r2,6d84 <__adddf3+0x5d8>
    6a3c:	00bfe034 	movhi	r2,65408
    6a40:	10bfffc4 	addi	r2,r2,-1
    6a44:	4090703a 	and	r8,r8,r2
    6a48:	880ad07a 	srli	r5,r17,1
    6a4c:	400897fa 	slli	r4,r8,31
    6a50:	88c0004c 	andi	r3,r17,1
    6a54:	28e2b03a 	or	r17,r5,r3
    6a58:	4010d07a 	srli	r8,r8,1
    6a5c:	2462b03a 	or	r17,r4,r17
    6a60:	003f7106 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6a64:	4088b03a 	or	r4,r8,r2
    6a68:	20014526 	beq	r4,zero,6f80 <__adddf3+0x7d4>
    6a6c:	01000434 	movhi	r4,16
    6a70:	42000234 	orhi	r8,r8,8
    6a74:	213fffc4 	addi	r4,r4,-1
    6a78:	4110703a 	and	r8,r8,r4
    6a7c:	003f8206 	br	6888 <__alt_mem_nios_system_shared_memory+0xfffc6888>
    6a80:	18ffffc4 	addi	r3,r3,-1
    6a84:	1800491e 	bne	r3,zero,6bac <__adddf3+0x400>
    6a88:	898bc83a 	sub	r5,r17,r6
    6a8c:	8963803a 	cmpltu	r17,r17,r5
    6a90:	4251c83a 	sub	r8,r8,r9
    6a94:	4451c83a 	sub	r8,r8,r17
    6a98:	2823883a 	mov	r17,r5
    6a9c:	003f9f06 	br	691c <__alt_mem_nios_system_shared_memory+0xfffc691c>
    6aa0:	4984b03a 	or	r2,r9,r6
    6aa4:	103f6026 	beq	r2,zero,6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6aa8:	213fffc4 	addi	r4,r4,-1
    6aac:	2000931e 	bne	r4,zero,6cfc <__adddf3+0x550>
    6ab0:	898d883a 	add	r6,r17,r6
    6ab4:	3463803a 	cmpltu	r17,r6,r17
    6ab8:	4251883a 	add	r8,r8,r9
    6abc:	8a11883a 	add	r8,r17,r8
    6ac0:	3023883a 	mov	r17,r6
    6ac4:	003fd806 	br	6a28 <__alt_mem_nios_system_shared_memory+0xfffc6a28>
    6ac8:	1800541e 	bne	r3,zero,6c1c <__adddf3+0x470>
    6acc:	80800044 	addi	r2,r16,1
    6ad0:	1081ffcc 	andi	r2,r2,2047
    6ad4:	00c00044 	movi	r3,1
    6ad8:	1880a00e 	bge	r3,r2,6d5c <__adddf3+0x5b0>
    6adc:	8989c83a 	sub	r4,r17,r6
    6ae0:	8905803a 	cmpltu	r2,r17,r4
    6ae4:	4267c83a 	sub	r19,r8,r9
    6ae8:	98a7c83a 	sub	r19,r19,r2
    6aec:	9880202c 	andhi	r2,r19,128
    6af0:	10006326 	beq	r2,zero,6c80 <__adddf3+0x4d4>
    6af4:	3463c83a 	sub	r17,r6,r17
    6af8:	4a07c83a 	sub	r3,r9,r8
    6afc:	344d803a 	cmpltu	r6,r6,r17
    6b00:	19a7c83a 	sub	r19,r3,r6
    6b04:	3825883a 	mov	r18,r7
    6b08:	983f8a1e 	bne	r19,zero,6934 <__alt_mem_nios_system_shared_memory+0xfffc6934>
    6b0c:	8809883a 	mov	r4,r17
    6b10:	000917c0 	call	917c <__clzsi2>
    6b14:	10800804 	addi	r2,r2,32
    6b18:	10fffe04 	addi	r3,r2,-8
    6b1c:	010007c4 	movi	r4,31
    6b20:	20ff890e 	bge	r4,r3,6948 <__alt_mem_nios_system_shared_memory+0xfffc6948>
    6b24:	10bff604 	addi	r2,r2,-40
    6b28:	8884983a 	sll	r2,r17,r2
    6b2c:	0023883a 	mov	r17,zero
    6b30:	1c3f8c0e 	bge	r3,r16,6964 <__alt_mem_nios_system_shared_memory+0xfffc6964>
    6b34:	023fe034 	movhi	r8,65408
    6b38:	423fffc4 	addi	r8,r8,-1
    6b3c:	80e1c83a 	sub	r16,r16,r3
    6b40:	1210703a 	and	r8,r2,r8
    6b44:	003f3806 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6b48:	9007883a 	mov	r3,r18
    6b4c:	0011883a 	mov	r8,zero
    6b50:	0005883a 	mov	r2,zero
    6b54:	003f4c06 	br	6888 <__alt_mem_nios_system_shared_memory+0xfffc6888>
    6b58:	498cb03a 	or	r6,r9,r6
    6b5c:	300cc03a 	cmpne	r6,r6,zero
    6b60:	0007883a 	mov	r3,zero
    6b64:	003f6806 	br	6908 <__alt_mem_nios_system_shared_memory+0xfffc6908>
    6b68:	20009c1e 	bne	r4,zero,6ddc <__adddf3+0x630>
    6b6c:	80800044 	addi	r2,r16,1
    6b70:	1141ffcc 	andi	r5,r2,2047
    6b74:	01000044 	movi	r4,1
    6b78:	2140670e 	bge	r4,r5,6d18 <__adddf3+0x56c>
    6b7c:	0101ffc4 	movi	r4,2047
    6b80:	11007f26 	beq	r2,r4,6d80 <__adddf3+0x5d4>
    6b84:	898d883a 	add	r6,r17,r6
    6b88:	4247883a 	add	r3,r8,r9
    6b8c:	3451803a 	cmpltu	r8,r6,r17
    6b90:	40d1883a 	add	r8,r8,r3
    6b94:	402297fa 	slli	r17,r8,31
    6b98:	300cd07a 	srli	r6,r6,1
    6b9c:	4010d07a 	srli	r8,r8,1
    6ba0:	1021883a 	mov	r16,r2
    6ba4:	89a2b03a 	or	r17,r17,r6
    6ba8:	003f1f06 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6bac:	0081ffc4 	movi	r2,2047
    6bb0:	80bf481e 	bne	r16,r2,68d4 <__alt_mem_nios_system_shared_memory+0xfffc68d4>
    6bb4:	003f1c06 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6bb8:	843ff844 	addi	r16,r16,-31
    6bbc:	01000804 	movi	r4,32
    6bc0:	1406d83a 	srl	r3,r2,r16
    6bc4:	41005026 	beq	r8,r4,6d08 <__adddf3+0x55c>
    6bc8:	01001004 	movi	r4,64
    6bcc:	2211c83a 	sub	r8,r4,r8
    6bd0:	1204983a 	sll	r2,r2,r8
    6bd4:	88a2b03a 	or	r17,r17,r2
    6bd8:	8822c03a 	cmpne	r17,r17,zero
    6bdc:	1c62b03a 	or	r17,r3,r17
    6be0:	0011883a 	mov	r8,zero
    6be4:	0021883a 	mov	r16,zero
    6be8:	003f7106 	br	69b0 <__alt_mem_nios_system_shared_memory+0xfffc69b0>
    6bec:	193ff804 	addi	r4,r3,-32
    6bf0:	00800804 	movi	r2,32
    6bf4:	4908d83a 	srl	r4,r9,r4
    6bf8:	18804526 	beq	r3,r2,6d10 <__adddf3+0x564>
    6bfc:	00801004 	movi	r2,64
    6c00:	10c5c83a 	sub	r2,r2,r3
    6c04:	4886983a 	sll	r3,r9,r2
    6c08:	198cb03a 	or	r6,r3,r6
    6c0c:	300cc03a 	cmpne	r6,r6,zero
    6c10:	218cb03a 	or	r6,r4,r6
    6c14:	0007883a 	mov	r3,zero
    6c18:	003f3b06 	br	6908 <__alt_mem_nios_system_shared_memory+0xfffc6908>
    6c1c:	80002a26 	beq	r16,zero,6cc8 <__adddf3+0x51c>
    6c20:	0101ffc4 	movi	r4,2047
    6c24:	11006826 	beq	r2,r4,6dc8 <__adddf3+0x61c>
    6c28:	00c7c83a 	sub	r3,zero,r3
    6c2c:	42002034 	orhi	r8,r8,128
    6c30:	01000e04 	movi	r4,56
    6c34:	20c07c16 	blt	r4,r3,6e28 <__adddf3+0x67c>
    6c38:	010007c4 	movi	r4,31
    6c3c:	20c0da16 	blt	r4,r3,6fa8 <__adddf3+0x7fc>
    6c40:	01000804 	movi	r4,32
    6c44:	20c9c83a 	sub	r4,r4,r3
    6c48:	4114983a 	sll	r10,r8,r4
    6c4c:	88cad83a 	srl	r5,r17,r3
    6c50:	8908983a 	sll	r4,r17,r4
    6c54:	40c6d83a 	srl	r3,r8,r3
    6c58:	5162b03a 	or	r17,r10,r5
    6c5c:	2008c03a 	cmpne	r4,r4,zero
    6c60:	8922b03a 	or	r17,r17,r4
    6c64:	3463c83a 	sub	r17,r6,r17
    6c68:	48c7c83a 	sub	r3,r9,r3
    6c6c:	344d803a 	cmpltu	r6,r6,r17
    6c70:	1991c83a 	sub	r8,r3,r6
    6c74:	1021883a 	mov	r16,r2
    6c78:	3825883a 	mov	r18,r7
    6c7c:	003f2706 	br	691c <__alt_mem_nios_system_shared_memory+0xfffc691c>
    6c80:	24d0b03a 	or	r8,r4,r19
    6c84:	40001b1e 	bne	r8,zero,6cf4 <__adddf3+0x548>
    6c88:	0005883a 	mov	r2,zero
    6c8c:	0007883a 	mov	r3,zero
    6c90:	0021883a 	mov	r16,zero
    6c94:	003f4d06 	br	69cc <__alt_mem_nios_system_shared_memory+0xfffc69cc>
    6c98:	008007c4 	movi	r2,31
    6c9c:	11003c16 	blt	r2,r4,6d90 <__adddf3+0x5e4>
    6ca0:	00800804 	movi	r2,32
    6ca4:	1105c83a 	sub	r2,r2,r4
    6ca8:	488e983a 	sll	r7,r9,r2
    6cac:	310ad83a 	srl	r5,r6,r4
    6cb0:	3084983a 	sll	r2,r6,r2
    6cb4:	4912d83a 	srl	r9,r9,r4
    6cb8:	394ab03a 	or	r5,r7,r5
    6cbc:	1004c03a 	cmpne	r2,r2,zero
    6cc0:	288ab03a 	or	r5,r5,r2
    6cc4:	003f5306 	br	6a14 <__alt_mem_nios_system_shared_memory+0xfffc6a14>
    6cc8:	4448b03a 	or	r4,r8,r17
    6ccc:	20003e26 	beq	r4,zero,6dc8 <__adddf3+0x61c>
    6cd0:	00c6303a 	nor	r3,zero,r3
    6cd4:	18003a1e 	bne	r3,zero,6dc0 <__adddf3+0x614>
    6cd8:	3463c83a 	sub	r17,r6,r17
    6cdc:	4a07c83a 	sub	r3,r9,r8
    6ce0:	344d803a 	cmpltu	r6,r6,r17
    6ce4:	1991c83a 	sub	r8,r3,r6
    6ce8:	1021883a 	mov	r16,r2
    6cec:	3825883a 	mov	r18,r7
    6cf0:	003f0a06 	br	691c <__alt_mem_nios_system_shared_memory+0xfffc691c>
    6cf4:	2023883a 	mov	r17,r4
    6cf8:	003f0d06 	br	6930 <__alt_mem_nios_system_shared_memory+0xfffc6930>
    6cfc:	0081ffc4 	movi	r2,2047
    6d00:	80bf3f1e 	bne	r16,r2,6a00 <__alt_mem_nios_system_shared_memory+0xfffc6a00>
    6d04:	003ec806 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6d08:	0005883a 	mov	r2,zero
    6d0c:	003fb106 	br	6bd4 <__alt_mem_nios_system_shared_memory+0xfffc6bd4>
    6d10:	0007883a 	mov	r3,zero
    6d14:	003fbc06 	br	6c08 <__alt_mem_nios_system_shared_memory+0xfffc6c08>
    6d18:	4444b03a 	or	r2,r8,r17
    6d1c:	8000871e 	bne	r16,zero,6f3c <__adddf3+0x790>
    6d20:	1000ba26 	beq	r2,zero,700c <__adddf3+0x860>
    6d24:	4984b03a 	or	r2,r9,r6
    6d28:	103ebf26 	beq	r2,zero,6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6d2c:	8985883a 	add	r2,r17,r6
    6d30:	4247883a 	add	r3,r8,r9
    6d34:	1451803a 	cmpltu	r8,r2,r17
    6d38:	40d1883a 	add	r8,r8,r3
    6d3c:	40c0202c 	andhi	r3,r8,128
    6d40:	1023883a 	mov	r17,r2
    6d44:	183f1a26 	beq	r3,zero,69b0 <__alt_mem_nios_system_shared_memory+0xfffc69b0>
    6d48:	00bfe034 	movhi	r2,65408
    6d4c:	10bfffc4 	addi	r2,r2,-1
    6d50:	2021883a 	mov	r16,r4
    6d54:	4090703a 	and	r8,r8,r2
    6d58:	003eb306 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6d5c:	4444b03a 	or	r2,r8,r17
    6d60:	8000291e 	bne	r16,zero,6e08 <__adddf3+0x65c>
    6d64:	10004b1e 	bne	r2,zero,6e94 <__adddf3+0x6e8>
    6d68:	4990b03a 	or	r8,r9,r6
    6d6c:	40008b26 	beq	r8,zero,6f9c <__adddf3+0x7f0>
    6d70:	4811883a 	mov	r8,r9
    6d74:	3023883a 	mov	r17,r6
    6d78:	3825883a 	mov	r18,r7
    6d7c:	003eaa06 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6d80:	1021883a 	mov	r16,r2
    6d84:	0011883a 	mov	r8,zero
    6d88:	0005883a 	mov	r2,zero
    6d8c:	003f0f06 	br	69cc <__alt_mem_nios_system_shared_memory+0xfffc69cc>
    6d90:	217ff804 	addi	r5,r4,-32
    6d94:	00800804 	movi	r2,32
    6d98:	494ad83a 	srl	r5,r9,r5
    6d9c:	20807d26 	beq	r4,r2,6f94 <__adddf3+0x7e8>
    6da0:	00801004 	movi	r2,64
    6da4:	1109c83a 	sub	r4,r2,r4
    6da8:	4912983a 	sll	r9,r9,r4
    6dac:	498cb03a 	or	r6,r9,r6
    6db0:	300cc03a 	cmpne	r6,r6,zero
    6db4:	298ab03a 	or	r5,r5,r6
    6db8:	0013883a 	mov	r9,zero
    6dbc:	003f1506 	br	6a14 <__alt_mem_nios_system_shared_memory+0xfffc6a14>
    6dc0:	0101ffc4 	movi	r4,2047
    6dc4:	113f9a1e 	bne	r2,r4,6c30 <__alt_mem_nios_system_shared_memory+0xfffc6c30>
    6dc8:	4811883a 	mov	r8,r9
    6dcc:	3023883a 	mov	r17,r6
    6dd0:	1021883a 	mov	r16,r2
    6dd4:	3825883a 	mov	r18,r7
    6dd8:	003e9306 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6ddc:	8000161e 	bne	r16,zero,6e38 <__adddf3+0x68c>
    6de0:	444ab03a 	or	r5,r8,r17
    6de4:	28005126 	beq	r5,zero,6f2c <__adddf3+0x780>
    6de8:	0108303a 	nor	r4,zero,r4
    6dec:	20004d1e 	bne	r4,zero,6f24 <__adddf3+0x778>
    6df0:	89a3883a 	add	r17,r17,r6
    6df4:	4253883a 	add	r9,r8,r9
    6df8:	898d803a 	cmpltu	r6,r17,r6
    6dfc:	3251883a 	add	r8,r6,r9
    6e00:	1021883a 	mov	r16,r2
    6e04:	003f0806 	br	6a28 <__alt_mem_nios_system_shared_memory+0xfffc6a28>
    6e08:	1000301e 	bne	r2,zero,6ecc <__adddf3+0x720>
    6e0c:	4984b03a 	or	r2,r9,r6
    6e10:	10007126 	beq	r2,zero,6fd8 <__adddf3+0x82c>
    6e14:	4811883a 	mov	r8,r9
    6e18:	3023883a 	mov	r17,r6
    6e1c:	3825883a 	mov	r18,r7
    6e20:	0401ffc4 	movi	r16,2047
    6e24:	003e8006 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6e28:	4462b03a 	or	r17,r8,r17
    6e2c:	8822c03a 	cmpne	r17,r17,zero
    6e30:	0007883a 	mov	r3,zero
    6e34:	003f8b06 	br	6c64 <__alt_mem_nios_system_shared_memory+0xfffc6c64>
    6e38:	0141ffc4 	movi	r5,2047
    6e3c:	11403b26 	beq	r2,r5,6f2c <__adddf3+0x780>
    6e40:	0109c83a 	sub	r4,zero,r4
    6e44:	42002034 	orhi	r8,r8,128
    6e48:	01400e04 	movi	r5,56
    6e4c:	29006716 	blt	r5,r4,6fec <__adddf3+0x840>
    6e50:	014007c4 	movi	r5,31
    6e54:	29007016 	blt	r5,r4,7018 <__adddf3+0x86c>
    6e58:	01400804 	movi	r5,32
    6e5c:	290bc83a 	sub	r5,r5,r4
    6e60:	4154983a 	sll	r10,r8,r5
    6e64:	890ed83a 	srl	r7,r17,r4
    6e68:	894a983a 	sll	r5,r17,r5
    6e6c:	4108d83a 	srl	r4,r8,r4
    6e70:	51e2b03a 	or	r17,r10,r7
    6e74:	280ac03a 	cmpne	r5,r5,zero
    6e78:	8962b03a 	or	r17,r17,r5
    6e7c:	89a3883a 	add	r17,r17,r6
    6e80:	2253883a 	add	r9,r4,r9
    6e84:	898d803a 	cmpltu	r6,r17,r6
    6e88:	3251883a 	add	r8,r6,r9
    6e8c:	1021883a 	mov	r16,r2
    6e90:	003ee506 	br	6a28 <__alt_mem_nios_system_shared_memory+0xfffc6a28>
    6e94:	4984b03a 	or	r2,r9,r6
    6e98:	103e6326 	beq	r2,zero,6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6e9c:	8987c83a 	sub	r3,r17,r6
    6ea0:	88c9803a 	cmpltu	r4,r17,r3
    6ea4:	4245c83a 	sub	r2,r8,r9
    6ea8:	1105c83a 	sub	r2,r2,r4
    6eac:	1100202c 	andhi	r4,r2,128
    6eb0:	203ebb26 	beq	r4,zero,69a0 <__alt_mem_nios_system_shared_memory+0xfffc69a0>
    6eb4:	3463c83a 	sub	r17,r6,r17
    6eb8:	4a07c83a 	sub	r3,r9,r8
    6ebc:	344d803a 	cmpltu	r6,r6,r17
    6ec0:	1991c83a 	sub	r8,r3,r6
    6ec4:	3825883a 	mov	r18,r7
    6ec8:	003e5706 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6ecc:	4984b03a 	or	r2,r9,r6
    6ed0:	10002e26 	beq	r2,zero,6f8c <__adddf3+0x7e0>
    6ed4:	4004d0fa 	srli	r2,r8,3
    6ed8:	8822d0fa 	srli	r17,r17,3
    6edc:	4010977a 	slli	r8,r8,29
    6ee0:	10c0022c 	andhi	r3,r2,8
    6ee4:	4462b03a 	or	r17,r8,r17
    6ee8:	18000826 	beq	r3,zero,6f0c <__adddf3+0x760>
    6eec:	4808d0fa 	srli	r4,r9,3
    6ef0:	20c0022c 	andhi	r3,r4,8
    6ef4:	1800051e 	bne	r3,zero,6f0c <__adddf3+0x760>
    6ef8:	300cd0fa 	srli	r6,r6,3
    6efc:	4806977a 	slli	r3,r9,29
    6f00:	2005883a 	mov	r2,r4
    6f04:	3825883a 	mov	r18,r7
    6f08:	19a2b03a 	or	r17,r3,r6
    6f0c:	8810d77a 	srli	r8,r17,29
    6f10:	100490fa 	slli	r2,r2,3
    6f14:	882290fa 	slli	r17,r17,3
    6f18:	0401ffc4 	movi	r16,2047
    6f1c:	4090b03a 	or	r8,r8,r2
    6f20:	003e4106 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6f24:	0141ffc4 	movi	r5,2047
    6f28:	117fc71e 	bne	r2,r5,6e48 <__alt_mem_nios_system_shared_memory+0xfffc6e48>
    6f2c:	4811883a 	mov	r8,r9
    6f30:	3023883a 	mov	r17,r6
    6f34:	1021883a 	mov	r16,r2
    6f38:	003e3b06 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6f3c:	10002f26 	beq	r2,zero,6ffc <__adddf3+0x850>
    6f40:	4984b03a 	or	r2,r9,r6
    6f44:	10001126 	beq	r2,zero,6f8c <__adddf3+0x7e0>
    6f48:	4004d0fa 	srli	r2,r8,3
    6f4c:	8822d0fa 	srli	r17,r17,3
    6f50:	4010977a 	slli	r8,r8,29
    6f54:	10c0022c 	andhi	r3,r2,8
    6f58:	4462b03a 	or	r17,r8,r17
    6f5c:	183feb26 	beq	r3,zero,6f0c <__alt_mem_nios_system_shared_memory+0xfffc6f0c>
    6f60:	4808d0fa 	srli	r4,r9,3
    6f64:	20c0022c 	andhi	r3,r4,8
    6f68:	183fe81e 	bne	r3,zero,6f0c <__alt_mem_nios_system_shared_memory+0xfffc6f0c>
    6f6c:	300cd0fa 	srli	r6,r6,3
    6f70:	4806977a 	slli	r3,r9,29
    6f74:	2005883a 	mov	r2,r4
    6f78:	19a2b03a 	or	r17,r3,r6
    6f7c:	003fe306 	br	6f0c <__alt_mem_nios_system_shared_memory+0xfffc6f0c>
    6f80:	0011883a 	mov	r8,zero
    6f84:	0005883a 	mov	r2,zero
    6f88:	003e3f06 	br	6888 <__alt_mem_nios_system_shared_memory+0xfffc6888>
    6f8c:	0401ffc4 	movi	r16,2047
    6f90:	003e2506 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    6f94:	0013883a 	mov	r9,zero
    6f98:	003f8406 	br	6dac <__alt_mem_nios_system_shared_memory+0xfffc6dac>
    6f9c:	0005883a 	mov	r2,zero
    6fa0:	0007883a 	mov	r3,zero
    6fa4:	003e8906 	br	69cc <__alt_mem_nios_system_shared_memory+0xfffc69cc>
    6fa8:	197ff804 	addi	r5,r3,-32
    6fac:	01000804 	movi	r4,32
    6fb0:	414ad83a 	srl	r5,r8,r5
    6fb4:	19002426 	beq	r3,r4,7048 <__adddf3+0x89c>
    6fb8:	01001004 	movi	r4,64
    6fbc:	20c7c83a 	sub	r3,r4,r3
    6fc0:	40c6983a 	sll	r3,r8,r3
    6fc4:	1c46b03a 	or	r3,r3,r17
    6fc8:	1806c03a 	cmpne	r3,r3,zero
    6fcc:	28e2b03a 	or	r17,r5,r3
    6fd0:	0007883a 	mov	r3,zero
    6fd4:	003f2306 	br	6c64 <__alt_mem_nios_system_shared_memory+0xfffc6c64>
    6fd8:	0007883a 	mov	r3,zero
    6fdc:	5811883a 	mov	r8,r11
    6fe0:	00bfffc4 	movi	r2,-1
    6fe4:	0401ffc4 	movi	r16,2047
    6fe8:	003e7806 	br	69cc <__alt_mem_nios_system_shared_memory+0xfffc69cc>
    6fec:	4462b03a 	or	r17,r8,r17
    6ff0:	8822c03a 	cmpne	r17,r17,zero
    6ff4:	0009883a 	mov	r4,zero
    6ff8:	003fa006 	br	6e7c <__alt_mem_nios_system_shared_memory+0xfffc6e7c>
    6ffc:	4811883a 	mov	r8,r9
    7000:	3023883a 	mov	r17,r6
    7004:	0401ffc4 	movi	r16,2047
    7008:	003e0706 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    700c:	4811883a 	mov	r8,r9
    7010:	3023883a 	mov	r17,r6
    7014:	003e0406 	br	6828 <__alt_mem_nios_system_shared_memory+0xfffc6828>
    7018:	21fff804 	addi	r7,r4,-32
    701c:	01400804 	movi	r5,32
    7020:	41ced83a 	srl	r7,r8,r7
    7024:	21400a26 	beq	r4,r5,7050 <__adddf3+0x8a4>
    7028:	01401004 	movi	r5,64
    702c:	2909c83a 	sub	r4,r5,r4
    7030:	4108983a 	sll	r4,r8,r4
    7034:	2448b03a 	or	r4,r4,r17
    7038:	2008c03a 	cmpne	r4,r4,zero
    703c:	3922b03a 	or	r17,r7,r4
    7040:	0009883a 	mov	r4,zero
    7044:	003f8d06 	br	6e7c <__alt_mem_nios_system_shared_memory+0xfffc6e7c>
    7048:	0007883a 	mov	r3,zero
    704c:	003fdd06 	br	6fc4 <__alt_mem_nios_system_shared_memory+0xfffc6fc4>
    7050:	0009883a 	mov	r4,zero
    7054:	003ff706 	br	7034 <__alt_mem_nios_system_shared_memory+0xfffc7034>

00007058 <__divdf3>:
    7058:	defff004 	addi	sp,sp,-64
    705c:	dc800815 	stw	r18,32(sp)
    7060:	2824d53a 	srli	r18,r5,20
    7064:	dd800c15 	stw	r22,48(sp)
    7068:	282cd7fa 	srli	r22,r5,31
    706c:	dc000615 	stw	r16,24(sp)
    7070:	04000434 	movhi	r16,16
    7074:	843fffc4 	addi	r16,r16,-1
    7078:	dfc00f15 	stw	ra,60(sp)
    707c:	df000e15 	stw	fp,56(sp)
    7080:	ddc00d15 	stw	r23,52(sp)
    7084:	dd400b15 	stw	r21,44(sp)
    7088:	dd000a15 	stw	r20,40(sp)
    708c:	dcc00915 	stw	r19,36(sp)
    7090:	dc400715 	stw	r17,28(sp)
    7094:	9481ffcc 	andi	r18,r18,2047
    7098:	2c20703a 	and	r16,r5,r16
    709c:	b2003fcc 	andi	r8,r22,255
    70a0:	90006126 	beq	r18,zero,7228 <__divdf3+0x1d0>
    70a4:	0081ffc4 	movi	r2,2047
    70a8:	202b883a 	mov	r21,r4
    70ac:	90803726 	beq	r18,r2,718c <__divdf3+0x134>
    70b0:	80800434 	orhi	r2,r16,16
    70b4:	100490fa 	slli	r2,r2,3
    70b8:	2020d77a 	srli	r16,r4,29
    70bc:	202a90fa 	slli	r21,r4,3
    70c0:	94bf0044 	addi	r18,r18,-1023
    70c4:	80a0b03a 	or	r16,r16,r2
    70c8:	0013883a 	mov	r9,zero
    70cc:	000b883a 	mov	r5,zero
    70d0:	3806d53a 	srli	r3,r7,20
    70d4:	382ed7fa 	srli	r23,r7,31
    70d8:	04400434 	movhi	r17,16
    70dc:	8c7fffc4 	addi	r17,r17,-1
    70e0:	18c1ffcc 	andi	r3,r3,2047
    70e4:	3029883a 	mov	r20,r6
    70e8:	3c62703a 	and	r17,r7,r17
    70ec:	bf003fcc 	andi	fp,r23,255
    70f0:	18006e26 	beq	r3,zero,72ac <__divdf3+0x254>
    70f4:	0081ffc4 	movi	r2,2047
    70f8:	18806626 	beq	r3,r2,7294 <__divdf3+0x23c>
    70fc:	88800434 	orhi	r2,r17,16
    7100:	100490fa 	slli	r2,r2,3
    7104:	3022d77a 	srli	r17,r6,29
    7108:	302890fa 	slli	r20,r6,3
    710c:	18ff0044 	addi	r3,r3,-1023
    7110:	88a2b03a 	or	r17,r17,r2
    7114:	000f883a 	mov	r7,zero
    7118:	b5e6f03a 	xor	r19,r22,r23
    711c:	3a4cb03a 	or	r6,r7,r9
    7120:	008003c4 	movi	r2,15
    7124:	9809883a 	mov	r4,r19
    7128:	90c7c83a 	sub	r3,r18,r3
    712c:	9cc03fcc 	andi	r19,r19,255
    7130:	11809636 	bltu	r2,r6,738c <__divdf3+0x334>
    7134:	300c90ba 	slli	r6,r6,2
    7138:	00800034 	movhi	r2,0
    713c:	109c5304 	addi	r2,r2,29004
    7140:	308d883a 	add	r6,r6,r2
    7144:	30800017 	ldw	r2,0(r6)
    7148:	1000683a 	jmp	r2
    714c:	0000738c 	andi	zero,zero,462
    7150:	000071c4 	movi	zero,455
    7154:	0000737c 	xorhi	zero,zero,461
    7158:	000071b8 	rdprs	zero,zero,454
    715c:	0000737c 	xorhi	zero,zero,461
    7160:	00007350 	cmplti	zero,zero,461
    7164:	0000737c 	xorhi	zero,zero,461
    7168:	000071b8 	rdprs	zero,zero,454
    716c:	000071c4 	movi	zero,455
    7170:	000071c4 	movi	zero,455
    7174:	00007350 	cmplti	zero,zero,461
    7178:	000071b8 	rdprs	zero,zero,454
    717c:	000071a8 	cmpgeui	zero,zero,454
    7180:	000071a8 	cmpgeui	zero,zero,454
    7184:	000071a8 	cmpgeui	zero,zero,454
    7188:	00007714 	movui	zero,476
    718c:	2404b03a 	or	r2,r4,r16
    7190:	10006c1e 	bne	r2,zero,7344 <__divdf3+0x2ec>
    7194:	02400204 	movi	r9,8
    7198:	0021883a 	mov	r16,zero
    719c:	002b883a 	mov	r21,zero
    71a0:	01400084 	movi	r5,2
    71a4:	003fca06 	br	70d0 <__alt_mem_nios_system_shared_memory+0xfffc70d0>
    71a8:	8023883a 	mov	r17,r16
    71ac:	a829883a 	mov	r20,r21
    71b0:	4039883a 	mov	fp,r8
    71b4:	280f883a 	mov	r7,r5
    71b8:	00800084 	movi	r2,2
    71bc:	3881601e 	bne	r7,r2,7740 <__divdf3+0x6e8>
    71c0:	e027883a 	mov	r19,fp
    71c4:	9900004c 	andi	r4,r19,1
    71c8:	0081ffc4 	movi	r2,2047
    71cc:	0021883a 	mov	r16,zero
    71d0:	002b883a 	mov	r21,zero
    71d4:	1004953a 	slli	r2,r2,20
    71d8:	20c03fcc 	andi	r3,r4,255
    71dc:	01400434 	movhi	r5,16
    71e0:	297fffc4 	addi	r5,r5,-1
    71e4:	180697fa 	slli	r3,r3,31
    71e8:	8160703a 	and	r16,r16,r5
    71ec:	80a0b03a 	or	r16,r16,r2
    71f0:	80c6b03a 	or	r3,r16,r3
    71f4:	a805883a 	mov	r2,r21
    71f8:	dfc00f17 	ldw	ra,60(sp)
    71fc:	df000e17 	ldw	fp,56(sp)
    7200:	ddc00d17 	ldw	r23,52(sp)
    7204:	dd800c17 	ldw	r22,48(sp)
    7208:	dd400b17 	ldw	r21,44(sp)
    720c:	dd000a17 	ldw	r20,40(sp)
    7210:	dcc00917 	ldw	r19,36(sp)
    7214:	dc800817 	ldw	r18,32(sp)
    7218:	dc400717 	ldw	r17,28(sp)
    721c:	dc000617 	ldw	r16,24(sp)
    7220:	dec01004 	addi	sp,sp,64
    7224:	f800283a 	ret
    7228:	2404b03a 	or	r2,r4,r16
    722c:	2023883a 	mov	r17,r4
    7230:	10003f26 	beq	r2,zero,7330 <__divdf3+0x2d8>
    7234:	80015e26 	beq	r16,zero,77b0 <__divdf3+0x758>
    7238:	8009883a 	mov	r4,r16
    723c:	d9800215 	stw	r6,8(sp)
    7240:	d9c00515 	stw	r7,20(sp)
    7244:	da000415 	stw	r8,16(sp)
    7248:	000917c0 	call	917c <__clzsi2>
    724c:	d9800217 	ldw	r6,8(sp)
    7250:	d9c00517 	ldw	r7,20(sp)
    7254:	da000417 	ldw	r8,16(sp)
    7258:	113ffd44 	addi	r4,r2,-11
    725c:	00c00704 	movi	r3,28
    7260:	19014f16 	blt	r3,r4,77a0 <__divdf3+0x748>
    7264:	00c00744 	movi	r3,29
    7268:	157ffe04 	addi	r21,r2,-8
    726c:	1907c83a 	sub	r3,r3,r4
    7270:	8560983a 	sll	r16,r16,r21
    7274:	88c6d83a 	srl	r3,r17,r3
    7278:	8d6a983a 	sll	r21,r17,r21
    727c:	1c20b03a 	or	r16,r3,r16
    7280:	1080fcc4 	addi	r2,r2,1011
    7284:	00a5c83a 	sub	r18,zero,r2
    7288:	0013883a 	mov	r9,zero
    728c:	000b883a 	mov	r5,zero
    7290:	003f8f06 	br	70d0 <__alt_mem_nios_system_shared_memory+0xfffc70d0>
    7294:	3444b03a 	or	r2,r6,r17
    7298:	1000231e 	bne	r2,zero,7328 <__divdf3+0x2d0>
    729c:	0023883a 	mov	r17,zero
    72a0:	0029883a 	mov	r20,zero
    72a4:	01c00084 	movi	r7,2
    72a8:	003f9b06 	br	7118 <__alt_mem_nios_system_shared_memory+0xfffc7118>
    72ac:	3444b03a 	or	r2,r6,r17
    72b0:	10001926 	beq	r2,zero,7318 <__divdf3+0x2c0>
    72b4:	88014b26 	beq	r17,zero,77e4 <__divdf3+0x78c>
    72b8:	8809883a 	mov	r4,r17
    72bc:	d9400115 	stw	r5,4(sp)
    72c0:	d9800215 	stw	r6,8(sp)
    72c4:	da000415 	stw	r8,16(sp)
    72c8:	da400315 	stw	r9,12(sp)
    72cc:	000917c0 	call	917c <__clzsi2>
    72d0:	d9400117 	ldw	r5,4(sp)
    72d4:	d9800217 	ldw	r6,8(sp)
    72d8:	da000417 	ldw	r8,16(sp)
    72dc:	da400317 	ldw	r9,12(sp)
    72e0:	113ffd44 	addi	r4,r2,-11
    72e4:	00c00704 	movi	r3,28
    72e8:	19013a16 	blt	r3,r4,77d4 <__divdf3+0x77c>
    72ec:	00c00744 	movi	r3,29
    72f0:	153ffe04 	addi	r20,r2,-8
    72f4:	1907c83a 	sub	r3,r3,r4
    72f8:	8d22983a 	sll	r17,r17,r20
    72fc:	30c6d83a 	srl	r3,r6,r3
    7300:	3528983a 	sll	r20,r6,r20
    7304:	1c62b03a 	or	r17,r3,r17
    7308:	1080fcc4 	addi	r2,r2,1011
    730c:	0087c83a 	sub	r3,zero,r2
    7310:	000f883a 	mov	r7,zero
    7314:	003f8006 	br	7118 <__alt_mem_nios_system_shared_memory+0xfffc7118>
    7318:	0023883a 	mov	r17,zero
    731c:	0029883a 	mov	r20,zero
    7320:	01c00044 	movi	r7,1
    7324:	003f7c06 	br	7118 <__alt_mem_nios_system_shared_memory+0xfffc7118>
    7328:	01c000c4 	movi	r7,3
    732c:	003f7a06 	br	7118 <__alt_mem_nios_system_shared_memory+0xfffc7118>
    7330:	02400104 	movi	r9,4
    7334:	0021883a 	mov	r16,zero
    7338:	002b883a 	mov	r21,zero
    733c:	01400044 	movi	r5,1
    7340:	003f6306 	br	70d0 <__alt_mem_nios_system_shared_memory+0xfffc70d0>
    7344:	02400304 	movi	r9,12
    7348:	014000c4 	movi	r5,3
    734c:	003f6006 	br	70d0 <__alt_mem_nios_system_shared_memory+0xfffc70d0>
    7350:	04000434 	movhi	r16,16
    7354:	0009883a 	mov	r4,zero
    7358:	843fffc4 	addi	r16,r16,-1
    735c:	057fffc4 	movi	r21,-1
    7360:	0081ffc4 	movi	r2,2047
    7364:	003f9b06 	br	71d4 <__alt_mem_nios_system_shared_memory+0xfffc71d4>
    7368:	00c00044 	movi	r3,1
    736c:	1887c83a 	sub	r3,r3,r2
    7370:	01000e04 	movi	r4,56
    7374:	20c1530e 	bge	r4,r3,78c4 <__divdf3+0x86c>
    7378:	9900004c 	andi	r4,r19,1
    737c:	0005883a 	mov	r2,zero
    7380:	0021883a 	mov	r16,zero
    7384:	002b883a 	mov	r21,zero
    7388:	003f9206 	br	71d4 <__alt_mem_nios_system_shared_memory+0xfffc71d4>
    738c:	8c012e36 	bltu	r17,r16,7848 <__divdf3+0x7f0>
    7390:	84412c26 	beq	r16,r17,7844 <__divdf3+0x7ec>
    7394:	a82f883a 	mov	r23,r21
    7398:	18ffffc4 	addi	r3,r3,-1
    739c:	002b883a 	mov	r21,zero
    73a0:	a004d63a 	srli	r2,r20,24
    73a4:	8822923a 	slli	r17,r17,8
    73a8:	a028923a 	slli	r20,r20,8
    73ac:	8009883a 	mov	r4,r16
    73b0:	88acb03a 	or	r22,r17,r2
    73b4:	dd000015 	stw	r20,0(sp)
    73b8:	b028d43a 	srli	r20,r22,16
    73bc:	d8c00215 	stw	r3,8(sp)
    73c0:	b4bfffcc 	andi	r18,r22,65535
    73c4:	a00b883a 	mov	r5,r20
    73c8:	000509c0 	call	509c <__udivsi3>
    73cc:	100b883a 	mov	r5,r2
    73d0:	9009883a 	mov	r4,r18
    73d4:	1023883a 	mov	r17,r2
    73d8:	00051580 	call	5158 <__mulsi3>
    73dc:	8009883a 	mov	r4,r16
    73e0:	a00b883a 	mov	r5,r20
    73e4:	1039883a 	mov	fp,r2
    73e8:	00051000 	call	5100 <__umodsi3>
    73ec:	1004943a 	slli	r2,r2,16
    73f0:	b808d43a 	srli	r4,r23,16
    73f4:	d8c00217 	ldw	r3,8(sp)
    73f8:	2084b03a 	or	r2,r4,r2
    73fc:	1700062e 	bgeu	r2,fp,7418 <__divdf3+0x3c0>
    7400:	1585883a 	add	r2,r2,r22
    7404:	893fffc4 	addi	r4,r17,-1
    7408:	15811d36 	bltu	r2,r22,7880 <__divdf3+0x828>
    740c:	17011c2e 	bgeu	r2,fp,7880 <__divdf3+0x828>
    7410:	8c7fff84 	addi	r17,r17,-2
    7414:	1585883a 	add	r2,r2,r22
    7418:	1739c83a 	sub	fp,r2,fp
    741c:	a00b883a 	mov	r5,r20
    7420:	e009883a 	mov	r4,fp
    7424:	d8c00215 	stw	r3,8(sp)
    7428:	000509c0 	call	509c <__udivsi3>
    742c:	100b883a 	mov	r5,r2
    7430:	9009883a 	mov	r4,r18
    7434:	1021883a 	mov	r16,r2
    7438:	00051580 	call	5158 <__mulsi3>
    743c:	a00b883a 	mov	r5,r20
    7440:	e009883a 	mov	r4,fp
    7444:	d8800415 	stw	r2,16(sp)
    7448:	00051000 	call	5100 <__umodsi3>
    744c:	1004943a 	slli	r2,r2,16
    7450:	da000417 	ldw	r8,16(sp)
    7454:	bdffffcc 	andi	r23,r23,65535
    7458:	b884b03a 	or	r2,r23,r2
    745c:	d8c00217 	ldw	r3,8(sp)
    7460:	1200062e 	bgeu	r2,r8,747c <__divdf3+0x424>
    7464:	1585883a 	add	r2,r2,r22
    7468:	813fffc4 	addi	r4,r16,-1
    746c:	15810236 	bltu	r2,r22,7878 <__divdf3+0x820>
    7470:	1201012e 	bgeu	r2,r8,7878 <__divdf3+0x820>
    7474:	843fff84 	addi	r16,r16,-2
    7478:	1585883a 	add	r2,r2,r22
    747c:	8822943a 	slli	r17,r17,16
    7480:	d9800017 	ldw	r6,0(sp)
    7484:	1211c83a 	sub	r8,r2,r8
    7488:	8c22b03a 	or	r17,r17,r16
    748c:	373fffcc 	andi	fp,r6,65535
    7490:	8abfffcc 	andi	r10,r17,65535
    7494:	8820d43a 	srli	r16,r17,16
    7498:	5009883a 	mov	r4,r10
    749c:	e00b883a 	mov	r5,fp
    74a0:	302ed43a 	srli	r23,r6,16
    74a4:	d8c00215 	stw	r3,8(sp)
    74a8:	da000415 	stw	r8,16(sp)
    74ac:	da800115 	stw	r10,4(sp)
    74b0:	00051580 	call	5158 <__mulsi3>
    74b4:	800b883a 	mov	r5,r16
    74b8:	e009883a 	mov	r4,fp
    74bc:	d8800515 	stw	r2,20(sp)
    74c0:	00051580 	call	5158 <__mulsi3>
    74c4:	8009883a 	mov	r4,r16
    74c8:	b80b883a 	mov	r5,r23
    74cc:	d8800315 	stw	r2,12(sp)
    74d0:	00051580 	call	5158 <__mulsi3>
    74d4:	da800117 	ldw	r10,4(sp)
    74d8:	b80b883a 	mov	r5,r23
    74dc:	1021883a 	mov	r16,r2
    74e0:	5009883a 	mov	r4,r10
    74e4:	00051580 	call	5158 <__mulsi3>
    74e8:	d9c00517 	ldw	r7,20(sp)
    74ec:	da400317 	ldw	r9,12(sp)
    74f0:	d8c00217 	ldw	r3,8(sp)
    74f4:	3808d43a 	srli	r4,r7,16
    74f8:	1245883a 	add	r2,r2,r9
    74fc:	da000417 	ldw	r8,16(sp)
    7500:	2085883a 	add	r2,r4,r2
    7504:	1240022e 	bgeu	r2,r9,7510 <__divdf3+0x4b8>
    7508:	01000074 	movhi	r4,1
    750c:	8121883a 	add	r16,r16,r4
    7510:	1008d43a 	srli	r4,r2,16
    7514:	1004943a 	slli	r2,r2,16
    7518:	39ffffcc 	andi	r7,r7,65535
    751c:	2409883a 	add	r4,r4,r16
    7520:	11c5883a 	add	r2,r2,r7
    7524:	4100bb36 	bltu	r8,r4,7814 <__divdf3+0x7bc>
    7528:	4100d726 	beq	r8,r4,7888 <__divdf3+0x830>
    752c:	4109c83a 	sub	r4,r8,r4
    7530:	a8a1c83a 	sub	r16,r21,r2
    7534:	ac2b803a 	cmpltu	r21,r21,r16
    7538:	256bc83a 	sub	r21,r4,r21
    753c:	b540d926 	beq	r22,r21,78a4 <__divdf3+0x84c>
    7540:	a00b883a 	mov	r5,r20
    7544:	a809883a 	mov	r4,r21
    7548:	d8c00215 	stw	r3,8(sp)
    754c:	000509c0 	call	509c <__udivsi3>
    7550:	100b883a 	mov	r5,r2
    7554:	9009883a 	mov	r4,r18
    7558:	d8800515 	stw	r2,20(sp)
    755c:	00051580 	call	5158 <__mulsi3>
    7560:	a809883a 	mov	r4,r21
    7564:	a00b883a 	mov	r5,r20
    7568:	d8800415 	stw	r2,16(sp)
    756c:	00051000 	call	5100 <__umodsi3>
    7570:	1004943a 	slli	r2,r2,16
    7574:	8008d43a 	srli	r4,r16,16
    7578:	da000417 	ldw	r8,16(sp)
    757c:	d8c00217 	ldw	r3,8(sp)
    7580:	2084b03a 	or	r2,r4,r2
    7584:	d9c00517 	ldw	r7,20(sp)
    7588:	1200062e 	bgeu	r2,r8,75a4 <__divdf3+0x54c>
    758c:	1585883a 	add	r2,r2,r22
    7590:	393fffc4 	addi	r4,r7,-1
    7594:	1580c536 	bltu	r2,r22,78ac <__divdf3+0x854>
    7598:	1200c42e 	bgeu	r2,r8,78ac <__divdf3+0x854>
    759c:	39ffff84 	addi	r7,r7,-2
    75a0:	1585883a 	add	r2,r2,r22
    75a4:	122bc83a 	sub	r21,r2,r8
    75a8:	a00b883a 	mov	r5,r20
    75ac:	a809883a 	mov	r4,r21
    75b0:	d8c00215 	stw	r3,8(sp)
    75b4:	d9c00515 	stw	r7,20(sp)
    75b8:	000509c0 	call	509c <__udivsi3>
    75bc:	9009883a 	mov	r4,r18
    75c0:	100b883a 	mov	r5,r2
    75c4:	d8800415 	stw	r2,16(sp)
    75c8:	00051580 	call	5158 <__mulsi3>
    75cc:	a809883a 	mov	r4,r21
    75d0:	a00b883a 	mov	r5,r20
    75d4:	1025883a 	mov	r18,r2
    75d8:	00051000 	call	5100 <__umodsi3>
    75dc:	1004943a 	slli	r2,r2,16
    75e0:	813fffcc 	andi	r4,r16,65535
    75e4:	d8c00217 	ldw	r3,8(sp)
    75e8:	20a0b03a 	or	r16,r4,r2
    75ec:	d9c00517 	ldw	r7,20(sp)
    75f0:	da000417 	ldw	r8,16(sp)
    75f4:	8480062e 	bgeu	r16,r18,7610 <__divdf3+0x5b8>
    75f8:	85a1883a 	add	r16,r16,r22
    75fc:	40bfffc4 	addi	r2,r8,-1
    7600:	8580ac36 	bltu	r16,r22,78b4 <__divdf3+0x85c>
    7604:	8480ab2e 	bgeu	r16,r18,78b4 <__divdf3+0x85c>
    7608:	423fff84 	addi	r8,r8,-2
    760c:	85a1883a 	add	r16,r16,r22
    7610:	3804943a 	slli	r2,r7,16
    7614:	84a1c83a 	sub	r16,r16,r18
    7618:	e009883a 	mov	r4,fp
    761c:	1228b03a 	or	r20,r2,r8
    7620:	a1ffffcc 	andi	r7,r20,65535
    7624:	a024d43a 	srli	r18,r20,16
    7628:	380b883a 	mov	r5,r7
    762c:	d8c00215 	stw	r3,8(sp)
    7630:	d9c00515 	stw	r7,20(sp)
    7634:	00051580 	call	5158 <__mulsi3>
    7638:	900b883a 	mov	r5,r18
    763c:	e009883a 	mov	r4,fp
    7640:	102b883a 	mov	r21,r2
    7644:	00051580 	call	5158 <__mulsi3>
    7648:	900b883a 	mov	r5,r18
    764c:	b809883a 	mov	r4,r23
    7650:	1039883a 	mov	fp,r2
    7654:	00051580 	call	5158 <__mulsi3>
    7658:	d9c00517 	ldw	r7,20(sp)
    765c:	b80b883a 	mov	r5,r23
    7660:	1025883a 	mov	r18,r2
    7664:	3809883a 	mov	r4,r7
    7668:	00051580 	call	5158 <__mulsi3>
    766c:	a808d43a 	srli	r4,r21,16
    7670:	1705883a 	add	r2,r2,fp
    7674:	d8c00217 	ldw	r3,8(sp)
    7678:	2085883a 	add	r2,r4,r2
    767c:	1700022e 	bgeu	r2,fp,7688 <__divdf3+0x630>
    7680:	01000074 	movhi	r4,1
    7684:	9125883a 	add	r18,r18,r4
    7688:	1008d43a 	srli	r4,r2,16
    768c:	1004943a 	slli	r2,r2,16
    7690:	ad7fffcc 	andi	r21,r21,65535
    7694:	2489883a 	add	r4,r4,r18
    7698:	1545883a 	add	r2,r2,r21
    769c:	81003836 	bltu	r16,r4,7780 <__divdf3+0x728>
    76a0:	81003626 	beq	r16,r4,777c <__divdf3+0x724>
    76a4:	a5000054 	ori	r20,r20,1
    76a8:	1880ffc4 	addi	r2,r3,1023
    76ac:	00bf2e0e 	bge	zero,r2,7368 <__alt_mem_nios_system_shared_memory+0xfffc7368>
    76b0:	a10001cc 	andi	r4,r20,7
    76b4:	20000726 	beq	r4,zero,76d4 <__divdf3+0x67c>
    76b8:	a10003cc 	andi	r4,r20,15
    76bc:	01400104 	movi	r5,4
    76c0:	21400426 	beq	r4,r5,76d4 <__divdf3+0x67c>
    76c4:	a149883a 	add	r4,r20,r5
    76c8:	2529803a 	cmpltu	r20,r4,r20
    76cc:	8d23883a 	add	r17,r17,r20
    76d0:	2029883a 	mov	r20,r4
    76d4:	8900402c 	andhi	r4,r17,256
    76d8:	20000426 	beq	r4,zero,76ec <__divdf3+0x694>
    76dc:	18810004 	addi	r2,r3,1024
    76e0:	00ffc034 	movhi	r3,65280
    76e4:	18ffffc4 	addi	r3,r3,-1
    76e8:	88e2703a 	and	r17,r17,r3
    76ec:	00c1ff84 	movi	r3,2046
    76f0:	18beb416 	blt	r3,r2,71c4 <__alt_mem_nios_system_shared_memory+0xfffc71c4>
    76f4:	a028d0fa 	srli	r20,r20,3
    76f8:	882a977a 	slli	r21,r17,29
    76fc:	8820927a 	slli	r16,r17,9
    7700:	1081ffcc 	andi	r2,r2,2047
    7704:	ad2ab03a 	or	r21,r21,r20
    7708:	8020d33a 	srli	r16,r16,12
    770c:	9900004c 	andi	r4,r19,1
    7710:	003eb006 	br	71d4 <__alt_mem_nios_system_shared_memory+0xfffc71d4>
    7714:	8080022c 	andhi	r2,r16,8
    7718:	10001226 	beq	r2,zero,7764 <__divdf3+0x70c>
    771c:	8880022c 	andhi	r2,r17,8
    7720:	1000101e 	bne	r2,zero,7764 <__divdf3+0x70c>
    7724:	00800434 	movhi	r2,16
    7728:	8c000234 	orhi	r16,r17,8
    772c:	10bfffc4 	addi	r2,r2,-1
    7730:	b809883a 	mov	r4,r23
    7734:	80a0703a 	and	r16,r16,r2
    7738:	a02b883a 	mov	r21,r20
    773c:	003f0806 	br	7360 <__alt_mem_nios_system_shared_memory+0xfffc7360>
    7740:	008000c4 	movi	r2,3
    7744:	3880b126 	beq	r7,r2,7a0c <__divdf3+0x9b4>
    7748:	00800044 	movi	r2,1
    774c:	38805b1e 	bne	r7,r2,78bc <__divdf3+0x864>
    7750:	e009883a 	mov	r4,fp
    7754:	0005883a 	mov	r2,zero
    7758:	0021883a 	mov	r16,zero
    775c:	002b883a 	mov	r21,zero
    7760:	003e9c06 	br	71d4 <__alt_mem_nios_system_shared_memory+0xfffc71d4>
    7764:	00800434 	movhi	r2,16
    7768:	84000234 	orhi	r16,r16,8
    776c:	10bfffc4 	addi	r2,r2,-1
    7770:	b009883a 	mov	r4,r22
    7774:	80a0703a 	and	r16,r16,r2
    7778:	003ef906 	br	7360 <__alt_mem_nios_system_shared_memory+0xfffc7360>
    777c:	103fca26 	beq	r2,zero,76a8 <__alt_mem_nios_system_shared_memory+0xfffc76a8>
    7780:	b421883a 	add	r16,r22,r16
    7784:	a17fffc4 	addi	r5,r20,-1
    7788:	8580422e 	bgeu	r16,r22,7894 <__divdf3+0x83c>
    778c:	2829883a 	mov	r20,r5
    7790:	813fc41e 	bne	r16,r4,76a4 <__alt_mem_nios_system_shared_memory+0xfffc76a4>
    7794:	d9800017 	ldw	r6,0(sp)
    7798:	30bfc21e 	bne	r6,r2,76a4 <__alt_mem_nios_system_shared_memory+0xfffc76a4>
    779c:	003fc206 	br	76a8 <__alt_mem_nios_system_shared_memory+0xfffc76a8>
    77a0:	143ff604 	addi	r16,r2,-40
    77a4:	8c20983a 	sll	r16,r17,r16
    77a8:	002b883a 	mov	r21,zero
    77ac:	003eb406 	br	7280 <__alt_mem_nios_system_shared_memory+0xfffc7280>
    77b0:	d9800215 	stw	r6,8(sp)
    77b4:	d9c00515 	stw	r7,20(sp)
    77b8:	da000415 	stw	r8,16(sp)
    77bc:	000917c0 	call	917c <__clzsi2>
    77c0:	10800804 	addi	r2,r2,32
    77c4:	da000417 	ldw	r8,16(sp)
    77c8:	d9c00517 	ldw	r7,20(sp)
    77cc:	d9800217 	ldw	r6,8(sp)
    77d0:	003ea106 	br	7258 <__alt_mem_nios_system_shared_memory+0xfffc7258>
    77d4:	147ff604 	addi	r17,r2,-40
    77d8:	3462983a 	sll	r17,r6,r17
    77dc:	0029883a 	mov	r20,zero
    77e0:	003ec906 	br	7308 <__alt_mem_nios_system_shared_memory+0xfffc7308>
    77e4:	3009883a 	mov	r4,r6
    77e8:	d9400115 	stw	r5,4(sp)
    77ec:	d9800215 	stw	r6,8(sp)
    77f0:	da000415 	stw	r8,16(sp)
    77f4:	da400315 	stw	r9,12(sp)
    77f8:	000917c0 	call	917c <__clzsi2>
    77fc:	10800804 	addi	r2,r2,32
    7800:	da400317 	ldw	r9,12(sp)
    7804:	da000417 	ldw	r8,16(sp)
    7808:	d9800217 	ldw	r6,8(sp)
    780c:	d9400117 	ldw	r5,4(sp)
    7810:	003eb306 	br	72e0 <__alt_mem_nios_system_shared_memory+0xfffc72e0>
    7814:	d9800017 	ldw	r6,0(sp)
    7818:	a9ab883a 	add	r21,r21,r6
    781c:	a98b803a 	cmpltu	r5,r21,r6
    7820:	2d8b883a 	add	r5,r5,r22
    7824:	2a11883a 	add	r8,r5,r8
    7828:	897fffc4 	addi	r5,r17,-1
    782c:	b2000c2e 	bgeu	r22,r8,7860 <__divdf3+0x808>
    7830:	41003f36 	bltu	r8,r4,7930 <__divdf3+0x8d8>
    7834:	22006c26 	beq	r4,r8,79e8 <__divdf3+0x990>
    7838:	4109c83a 	sub	r4,r8,r4
    783c:	2823883a 	mov	r17,r5
    7840:	003f3b06 	br	7530 <__alt_mem_nios_system_shared_memory+0xfffc7530>
    7844:	ad3ed336 	bltu	r21,r20,7394 <__alt_mem_nios_system_shared_memory+0xfffc7394>
    7848:	a804d07a 	srli	r2,r21,1
    784c:	802e97fa 	slli	r23,r16,31
    7850:	a82a97fa 	slli	r21,r21,31
    7854:	8020d07a 	srli	r16,r16,1
    7858:	b8aeb03a 	or	r23,r23,r2
    785c:	003ed006 	br	73a0 <__alt_mem_nios_system_shared_memory+0xfffc73a0>
    7860:	b23ff51e 	bne	r22,r8,7838 <__alt_mem_nios_system_shared_memory+0xfffc7838>
    7864:	d9800017 	ldw	r6,0(sp)
    7868:	a9bff12e 	bgeu	r21,r6,7830 <__alt_mem_nios_system_shared_memory+0xfffc7830>
    786c:	b109c83a 	sub	r4,r22,r4
    7870:	2823883a 	mov	r17,r5
    7874:	003f2e06 	br	7530 <__alt_mem_nios_system_shared_memory+0xfffc7530>
    7878:	2021883a 	mov	r16,r4
    787c:	003eff06 	br	747c <__alt_mem_nios_system_shared_memory+0xfffc747c>
    7880:	2023883a 	mov	r17,r4
    7884:	003ee406 	br	7418 <__alt_mem_nios_system_shared_memory+0xfffc7418>
    7888:	a8bfe236 	bltu	r21,r2,7814 <__alt_mem_nios_system_shared_memory+0xfffc7814>
    788c:	0009883a 	mov	r4,zero
    7890:	003f2706 	br	7530 <__alt_mem_nios_system_shared_memory+0xfffc7530>
    7894:	81002d36 	bltu	r16,r4,794c <__divdf3+0x8f4>
    7898:	24005626 	beq	r4,r16,79f4 <__divdf3+0x99c>
    789c:	2829883a 	mov	r20,r5
    78a0:	003f8006 	br	76a4 <__alt_mem_nios_system_shared_memory+0xfffc76a4>
    78a4:	053fffc4 	movi	r20,-1
    78a8:	003f7f06 	br	76a8 <__alt_mem_nios_system_shared_memory+0xfffc76a8>
    78ac:	200f883a 	mov	r7,r4
    78b0:	003f3c06 	br	75a4 <__alt_mem_nios_system_shared_memory+0xfffc75a4>
    78b4:	1011883a 	mov	r8,r2
    78b8:	003f5506 	br	7610 <__alt_mem_nios_system_shared_memory+0xfffc7610>
    78bc:	e027883a 	mov	r19,fp
    78c0:	003f7906 	br	76a8 <__alt_mem_nios_system_shared_memory+0xfffc76a8>
    78c4:	010007c4 	movi	r4,31
    78c8:	20c02816 	blt	r4,r3,796c <__divdf3+0x914>
    78cc:	00800804 	movi	r2,32
    78d0:	10c5c83a 	sub	r2,r2,r3
    78d4:	888a983a 	sll	r5,r17,r2
    78d8:	a0c8d83a 	srl	r4,r20,r3
    78dc:	a084983a 	sll	r2,r20,r2
    78e0:	88e2d83a 	srl	r17,r17,r3
    78e4:	2906b03a 	or	r3,r5,r4
    78e8:	1004c03a 	cmpne	r2,r2,zero
    78ec:	1886b03a 	or	r3,r3,r2
    78f0:	188001cc 	andi	r2,r3,7
    78f4:	10000726 	beq	r2,zero,7914 <__divdf3+0x8bc>
    78f8:	188003cc 	andi	r2,r3,15
    78fc:	01000104 	movi	r4,4
    7900:	11000426 	beq	r2,r4,7914 <__divdf3+0x8bc>
    7904:	1805883a 	mov	r2,r3
    7908:	10c00104 	addi	r3,r2,4
    790c:	1885803a 	cmpltu	r2,r3,r2
    7910:	88a3883a 	add	r17,r17,r2
    7914:	8880202c 	andhi	r2,r17,128
    7918:	10002926 	beq	r2,zero,79c0 <__divdf3+0x968>
    791c:	9900004c 	andi	r4,r19,1
    7920:	00800044 	movi	r2,1
    7924:	0021883a 	mov	r16,zero
    7928:	002b883a 	mov	r21,zero
    792c:	003e2906 	br	71d4 <__alt_mem_nios_system_shared_memory+0xfffc71d4>
    7930:	d9800017 	ldw	r6,0(sp)
    7934:	8c7fff84 	addi	r17,r17,-2
    7938:	a9ab883a 	add	r21,r21,r6
    793c:	a98b803a 	cmpltu	r5,r21,r6
    7940:	2d8b883a 	add	r5,r5,r22
    7944:	2a11883a 	add	r8,r5,r8
    7948:	003ef806 	br	752c <__alt_mem_nios_system_shared_memory+0xfffc752c>
    794c:	d9800017 	ldw	r6,0(sp)
    7950:	318f883a 	add	r7,r6,r6
    7954:	398b803a 	cmpltu	r5,r7,r6
    7958:	2d8d883a 	add	r6,r5,r22
    795c:	81a1883a 	add	r16,r16,r6
    7960:	a17fff84 	addi	r5,r20,-2
    7964:	d9c00015 	stw	r7,0(sp)
    7968:	003f8806 	br	778c <__alt_mem_nios_system_shared_memory+0xfffc778c>
    796c:	013ff844 	movi	r4,-31
    7970:	2085c83a 	sub	r2,r4,r2
    7974:	8888d83a 	srl	r4,r17,r2
    7978:	00800804 	movi	r2,32
    797c:	18802126 	beq	r3,r2,7a04 <__divdf3+0x9ac>
    7980:	04001004 	movi	r16,64
    7984:	80c7c83a 	sub	r3,r16,r3
    7988:	88e0983a 	sll	r16,r17,r3
    798c:	8504b03a 	or	r2,r16,r20
    7990:	1004c03a 	cmpne	r2,r2,zero
    7994:	2084b03a 	or	r2,r4,r2
    7998:	144001cc 	andi	r17,r2,7
    799c:	88000d1e 	bne	r17,zero,79d4 <__divdf3+0x97c>
    79a0:	0021883a 	mov	r16,zero
    79a4:	102ad0fa 	srli	r21,r2,3
    79a8:	9900004c 	andi	r4,r19,1
    79ac:	0005883a 	mov	r2,zero
    79b0:	ac6ab03a 	or	r21,r21,r17
    79b4:	003e0706 	br	71d4 <__alt_mem_nios_system_shared_memory+0xfffc71d4>
    79b8:	1007883a 	mov	r3,r2
    79bc:	0023883a 	mov	r17,zero
    79c0:	8820927a 	slli	r16,r17,9
    79c4:	1805883a 	mov	r2,r3
    79c8:	8822977a 	slli	r17,r17,29
    79cc:	8020d33a 	srli	r16,r16,12
    79d0:	003ff406 	br	79a4 <__alt_mem_nios_system_shared_memory+0xfffc79a4>
    79d4:	10c003cc 	andi	r3,r2,15
    79d8:	01000104 	movi	r4,4
    79dc:	193ff626 	beq	r3,r4,79b8 <__alt_mem_nios_system_shared_memory+0xfffc79b8>
    79e0:	0023883a 	mov	r17,zero
    79e4:	003fc806 	br	7908 <__alt_mem_nios_system_shared_memory+0xfffc7908>
    79e8:	a8bfd136 	bltu	r21,r2,7930 <__alt_mem_nios_system_shared_memory+0xfffc7930>
    79ec:	2823883a 	mov	r17,r5
    79f0:	003fa606 	br	788c <__alt_mem_nios_system_shared_memory+0xfffc788c>
    79f4:	d9800017 	ldw	r6,0(sp)
    79f8:	30bfd436 	bltu	r6,r2,794c <__alt_mem_nios_system_shared_memory+0xfffc794c>
    79fc:	2829883a 	mov	r20,r5
    7a00:	003f6406 	br	7794 <__alt_mem_nios_system_shared_memory+0xfffc7794>
    7a04:	0021883a 	mov	r16,zero
    7a08:	003fe006 	br	798c <__alt_mem_nios_system_shared_memory+0xfffc798c>
    7a0c:	00800434 	movhi	r2,16
    7a10:	8c000234 	orhi	r16,r17,8
    7a14:	10bfffc4 	addi	r2,r2,-1
    7a18:	e009883a 	mov	r4,fp
    7a1c:	80a0703a 	and	r16,r16,r2
    7a20:	a02b883a 	mov	r21,r20
    7a24:	003e4e06 	br	7360 <__alt_mem_nios_system_shared_memory+0xfffc7360>

00007a28 <__eqdf2>:
    7a28:	2804d53a 	srli	r2,r5,20
    7a2c:	3806d53a 	srli	r3,r7,20
    7a30:	02000434 	movhi	r8,16
    7a34:	423fffc4 	addi	r8,r8,-1
    7a38:	1081ffcc 	andi	r2,r2,2047
    7a3c:	0281ffc4 	movi	r10,2047
    7a40:	2a12703a 	and	r9,r5,r8
    7a44:	18c1ffcc 	andi	r3,r3,2047
    7a48:	3a10703a 	and	r8,r7,r8
    7a4c:	280ad7fa 	srli	r5,r5,31
    7a50:	380ed7fa 	srli	r7,r7,31
    7a54:	12801026 	beq	r2,r10,7a98 <__eqdf2+0x70>
    7a58:	0281ffc4 	movi	r10,2047
    7a5c:	1a800a26 	beq	r3,r10,7a88 <__eqdf2+0x60>
    7a60:	10c00226 	beq	r2,r3,7a6c <__eqdf2+0x44>
    7a64:	00800044 	movi	r2,1
    7a68:	f800283a 	ret
    7a6c:	4a3ffd1e 	bne	r9,r8,7a64 <__alt_mem_nios_system_shared_memory+0xfffc7a64>
    7a70:	21bffc1e 	bne	r4,r6,7a64 <__alt_mem_nios_system_shared_memory+0xfffc7a64>
    7a74:	29c00c26 	beq	r5,r7,7aa8 <__eqdf2+0x80>
    7a78:	103ffa1e 	bne	r2,zero,7a64 <__alt_mem_nios_system_shared_memory+0xfffc7a64>
    7a7c:	2244b03a 	or	r2,r4,r9
    7a80:	1004c03a 	cmpne	r2,r2,zero
    7a84:	f800283a 	ret
    7a88:	3214b03a 	or	r10,r6,r8
    7a8c:	503ff426 	beq	r10,zero,7a60 <__alt_mem_nios_system_shared_memory+0xfffc7a60>
    7a90:	00800044 	movi	r2,1
    7a94:	f800283a 	ret
    7a98:	2254b03a 	or	r10,r4,r9
    7a9c:	503fee26 	beq	r10,zero,7a58 <__alt_mem_nios_system_shared_memory+0xfffc7a58>
    7aa0:	00800044 	movi	r2,1
    7aa4:	f800283a 	ret
    7aa8:	0005883a 	mov	r2,zero
    7aac:	f800283a 	ret

00007ab0 <__gedf2>:
    7ab0:	2804d53a 	srli	r2,r5,20
    7ab4:	3806d53a 	srli	r3,r7,20
    7ab8:	02000434 	movhi	r8,16
    7abc:	423fffc4 	addi	r8,r8,-1
    7ac0:	1081ffcc 	andi	r2,r2,2047
    7ac4:	0241ffc4 	movi	r9,2047
    7ac8:	2a14703a 	and	r10,r5,r8
    7acc:	18c1ffcc 	andi	r3,r3,2047
    7ad0:	3a10703a 	and	r8,r7,r8
    7ad4:	280ad7fa 	srli	r5,r5,31
    7ad8:	380ed7fa 	srli	r7,r7,31
    7adc:	12401d26 	beq	r2,r9,7b54 <__gedf2+0xa4>
    7ae0:	0241ffc4 	movi	r9,2047
    7ae4:	1a401226 	beq	r3,r9,7b30 <__gedf2+0x80>
    7ae8:	1000081e 	bne	r2,zero,7b0c <__gedf2+0x5c>
    7aec:	2296b03a 	or	r11,r4,r10
    7af0:	5813003a 	cmpeq	r9,r11,zero
    7af4:	1800091e 	bne	r3,zero,7b1c <__gedf2+0x6c>
    7af8:	3218b03a 	or	r12,r6,r8
    7afc:	6000071e 	bne	r12,zero,7b1c <__gedf2+0x6c>
    7b00:	0005883a 	mov	r2,zero
    7b04:	5800101e 	bne	r11,zero,7b48 <__gedf2+0x98>
    7b08:	f800283a 	ret
    7b0c:	18000c1e 	bne	r3,zero,7b40 <__gedf2+0x90>
    7b10:	3212b03a 	or	r9,r6,r8
    7b14:	48000c26 	beq	r9,zero,7b48 <__gedf2+0x98>
    7b18:	0013883a 	mov	r9,zero
    7b1c:	39c03fcc 	andi	r7,r7,255
    7b20:	48000826 	beq	r9,zero,7b44 <__gedf2+0x94>
    7b24:	38000926 	beq	r7,zero,7b4c <__gedf2+0x9c>
    7b28:	00800044 	movi	r2,1
    7b2c:	f800283a 	ret
    7b30:	3212b03a 	or	r9,r6,r8
    7b34:	483fec26 	beq	r9,zero,7ae8 <__alt_mem_nios_system_shared_memory+0xfffc7ae8>
    7b38:	00bfff84 	movi	r2,-2
    7b3c:	f800283a 	ret
    7b40:	39c03fcc 	andi	r7,r7,255
    7b44:	29c00626 	beq	r5,r7,7b60 <__gedf2+0xb0>
    7b48:	283ff726 	beq	r5,zero,7b28 <__alt_mem_nios_system_shared_memory+0xfffc7b28>
    7b4c:	00bfffc4 	movi	r2,-1
    7b50:	f800283a 	ret
    7b54:	2292b03a 	or	r9,r4,r10
    7b58:	483fe126 	beq	r9,zero,7ae0 <__alt_mem_nios_system_shared_memory+0xfffc7ae0>
    7b5c:	003ff606 	br	7b38 <__alt_mem_nios_system_shared_memory+0xfffc7b38>
    7b60:	18bff916 	blt	r3,r2,7b48 <__alt_mem_nios_system_shared_memory+0xfffc7b48>
    7b64:	10c00316 	blt	r2,r3,7b74 <__gedf2+0xc4>
    7b68:	42bff736 	bltu	r8,r10,7b48 <__alt_mem_nios_system_shared_memory+0xfffc7b48>
    7b6c:	52000326 	beq	r10,r8,7b7c <__gedf2+0xcc>
    7b70:	5200042e 	bgeu	r10,r8,7b84 <__gedf2+0xd4>
    7b74:	283fec1e 	bne	r5,zero,7b28 <__alt_mem_nios_system_shared_memory+0xfffc7b28>
    7b78:	003ff406 	br	7b4c <__alt_mem_nios_system_shared_memory+0xfffc7b4c>
    7b7c:	313ff236 	bltu	r6,r4,7b48 <__alt_mem_nios_system_shared_memory+0xfffc7b48>
    7b80:	21bffc36 	bltu	r4,r6,7b74 <__alt_mem_nios_system_shared_memory+0xfffc7b74>
    7b84:	0005883a 	mov	r2,zero
    7b88:	f800283a 	ret

00007b8c <__ledf2>:
    7b8c:	2804d53a 	srli	r2,r5,20
    7b90:	3810d53a 	srli	r8,r7,20
    7b94:	00c00434 	movhi	r3,16
    7b98:	18ffffc4 	addi	r3,r3,-1
    7b9c:	1081ffcc 	andi	r2,r2,2047
    7ba0:	0241ffc4 	movi	r9,2047
    7ba4:	28d4703a 	and	r10,r5,r3
    7ba8:	4201ffcc 	andi	r8,r8,2047
    7bac:	38c6703a 	and	r3,r7,r3
    7bb0:	280ad7fa 	srli	r5,r5,31
    7bb4:	380ed7fa 	srli	r7,r7,31
    7bb8:	12401f26 	beq	r2,r9,7c38 <__ledf2+0xac>
    7bbc:	0241ffc4 	movi	r9,2047
    7bc0:	42401426 	beq	r8,r9,7c14 <__ledf2+0x88>
    7bc4:	1000091e 	bne	r2,zero,7bec <__ledf2+0x60>
    7bc8:	2296b03a 	or	r11,r4,r10
    7bcc:	5813003a 	cmpeq	r9,r11,zero
    7bd0:	29403fcc 	andi	r5,r5,255
    7bd4:	40000a1e 	bne	r8,zero,7c00 <__ledf2+0x74>
    7bd8:	30d8b03a 	or	r12,r6,r3
    7bdc:	6000081e 	bne	r12,zero,7c00 <__ledf2+0x74>
    7be0:	0005883a 	mov	r2,zero
    7be4:	5800111e 	bne	r11,zero,7c2c <__ledf2+0xa0>
    7be8:	f800283a 	ret
    7bec:	29403fcc 	andi	r5,r5,255
    7bf0:	40000c1e 	bne	r8,zero,7c24 <__ledf2+0x98>
    7bf4:	30d2b03a 	or	r9,r6,r3
    7bf8:	48000c26 	beq	r9,zero,7c2c <__ledf2+0xa0>
    7bfc:	0013883a 	mov	r9,zero
    7c00:	39c03fcc 	andi	r7,r7,255
    7c04:	48000826 	beq	r9,zero,7c28 <__ledf2+0x9c>
    7c08:	38001126 	beq	r7,zero,7c50 <__ledf2+0xc4>
    7c0c:	00800044 	movi	r2,1
    7c10:	f800283a 	ret
    7c14:	30d2b03a 	or	r9,r6,r3
    7c18:	483fea26 	beq	r9,zero,7bc4 <__alt_mem_nios_system_shared_memory+0xfffc7bc4>
    7c1c:	00800084 	movi	r2,2
    7c20:	f800283a 	ret
    7c24:	39c03fcc 	andi	r7,r7,255
    7c28:	39400726 	beq	r7,r5,7c48 <__ledf2+0xbc>
    7c2c:	2800081e 	bne	r5,zero,7c50 <__ledf2+0xc4>
    7c30:	00800044 	movi	r2,1
    7c34:	f800283a 	ret
    7c38:	2292b03a 	or	r9,r4,r10
    7c3c:	483fdf26 	beq	r9,zero,7bbc <__alt_mem_nios_system_shared_memory+0xfffc7bbc>
    7c40:	00800084 	movi	r2,2
    7c44:	f800283a 	ret
    7c48:	4080030e 	bge	r8,r2,7c58 <__ledf2+0xcc>
    7c4c:	383fef26 	beq	r7,zero,7c0c <__alt_mem_nios_system_shared_memory+0xfffc7c0c>
    7c50:	00bfffc4 	movi	r2,-1
    7c54:	f800283a 	ret
    7c58:	123feb16 	blt	r2,r8,7c08 <__alt_mem_nios_system_shared_memory+0xfffc7c08>
    7c5c:	1abff336 	bltu	r3,r10,7c2c <__alt_mem_nios_system_shared_memory+0xfffc7c2c>
    7c60:	50c00326 	beq	r10,r3,7c70 <__ledf2+0xe4>
    7c64:	50c0042e 	bgeu	r10,r3,7c78 <__ledf2+0xec>
    7c68:	283fe81e 	bne	r5,zero,7c0c <__alt_mem_nios_system_shared_memory+0xfffc7c0c>
    7c6c:	003ff806 	br	7c50 <__alt_mem_nios_system_shared_memory+0xfffc7c50>
    7c70:	313fee36 	bltu	r6,r4,7c2c <__alt_mem_nios_system_shared_memory+0xfffc7c2c>
    7c74:	21bffc36 	bltu	r4,r6,7c68 <__alt_mem_nios_system_shared_memory+0xfffc7c68>
    7c78:	0005883a 	mov	r2,zero
    7c7c:	f800283a 	ret

00007c80 <__muldf3>:
    7c80:	deffee04 	addi	sp,sp,-72
    7c84:	dd000c15 	stw	r20,48(sp)
    7c88:	2828d53a 	srli	r20,r5,20
    7c8c:	ddc00f15 	stw	r23,60(sp)
    7c90:	282ed7fa 	srli	r23,r5,31
    7c94:	dc000815 	stw	r16,32(sp)
    7c98:	04000434 	movhi	r16,16
    7c9c:	dcc00b15 	stw	r19,44(sp)
    7ca0:	843fffc4 	addi	r16,r16,-1
    7ca4:	dfc01115 	stw	ra,68(sp)
    7ca8:	df001015 	stw	fp,64(sp)
    7cac:	dd800e15 	stw	r22,56(sp)
    7cb0:	dd400d15 	stw	r21,52(sp)
    7cb4:	dc800a15 	stw	r18,40(sp)
    7cb8:	dc400915 	stw	r17,36(sp)
    7cbc:	a501ffcc 	andi	r20,r20,2047
    7cc0:	2c20703a 	and	r16,r5,r16
    7cc4:	b827883a 	mov	r19,r23
    7cc8:	ba403fcc 	andi	r9,r23,255
    7ccc:	a0006026 	beq	r20,zero,7e50 <__muldf3+0x1d0>
    7cd0:	0081ffc4 	movi	r2,2047
    7cd4:	202d883a 	mov	r22,r4
    7cd8:	a0803626 	beq	r20,r2,7db4 <__muldf3+0x134>
    7cdc:	84000434 	orhi	r16,r16,16
    7ce0:	200ad77a 	srli	r5,r4,29
    7ce4:	800490fa 	slli	r2,r16,3
    7ce8:	202c90fa 	slli	r22,r4,3
    7cec:	a53f0044 	addi	r20,r20,-1023
    7cf0:	28a0b03a 	or	r16,r5,r2
    7cf4:	002b883a 	mov	r21,zero
    7cf8:	000b883a 	mov	r5,zero
    7cfc:	3804d53a 	srli	r2,r7,20
    7d00:	3838d7fa 	srli	fp,r7,31
    7d04:	04400434 	movhi	r17,16
    7d08:	8c7fffc4 	addi	r17,r17,-1
    7d0c:	1081ffcc 	andi	r2,r2,2047
    7d10:	3025883a 	mov	r18,r6
    7d14:	3c62703a 	and	r17,r7,r17
    7d18:	e2803fcc 	andi	r10,fp,255
    7d1c:	10006d26 	beq	r2,zero,7ed4 <__muldf3+0x254>
    7d20:	00c1ffc4 	movi	r3,2047
    7d24:	10c06526 	beq	r2,r3,7ebc <__muldf3+0x23c>
    7d28:	8c400434 	orhi	r17,r17,16
    7d2c:	300ed77a 	srli	r7,r6,29
    7d30:	880690fa 	slli	r3,r17,3
    7d34:	302490fa 	slli	r18,r6,3
    7d38:	10bf0044 	addi	r2,r2,-1023
    7d3c:	38e2b03a 	or	r17,r7,r3
    7d40:	000f883a 	mov	r7,zero
    7d44:	a087883a 	add	r3,r20,r2
    7d48:	010003c4 	movi	r4,15
    7d4c:	3d44b03a 	or	r2,r7,r21
    7d50:	e5ccf03a 	xor	r6,fp,r23
    7d54:	1a000044 	addi	r8,r3,1
    7d58:	20809b36 	bltu	r4,r2,7fc8 <__muldf3+0x348>
    7d5c:	100490ba 	slli	r2,r2,2
    7d60:	01000034 	movhi	r4,0
    7d64:	211f5d04 	addi	r4,r4,32116
    7d68:	1105883a 	add	r2,r2,r4
    7d6c:	10800017 	ldw	r2,0(r2)
    7d70:	1000683a 	jmp	r2
    7d74:	00007fc8 	cmpgei	zero,zero,511
    7d78:	00007dd4 	movui	zero,503
    7d7c:	00007dd4 	movui	zero,503
    7d80:	00007dd0 	cmplti	zero,zero,503
    7d84:	00007fa4 	muli	zero,zero,510
    7d88:	00007fa4 	muli	zero,zero,510
    7d8c:	00007f8c 	andi	zero,zero,510
    7d90:	00007dd0 	cmplti	zero,zero,503
    7d94:	00007fa4 	muli	zero,zero,510
    7d98:	00007f8c 	andi	zero,zero,510
    7d9c:	00007fa4 	muli	zero,zero,510
    7da0:	00007dd0 	cmplti	zero,zero,503
    7da4:	00007fb4 	movhi	zero,510
    7da8:	00007fb4 	movhi	zero,510
    7dac:	00007fb4 	movhi	zero,510
    7db0:	00008314 	movui	zero,524
    7db4:	2404b03a 	or	r2,r4,r16
    7db8:	1000711e 	bne	r2,zero,7f80 <__muldf3+0x300>
    7dbc:	05400204 	movi	r21,8
    7dc0:	0021883a 	mov	r16,zero
    7dc4:	002d883a 	mov	r22,zero
    7dc8:	01400084 	movi	r5,2
    7dcc:	003fcb06 	br	7cfc <__alt_mem_nios_system_shared_memory+0xfffc7cfc>
    7dd0:	500d883a 	mov	r6,r10
    7dd4:	00800084 	movi	r2,2
    7dd8:	38805926 	beq	r7,r2,7f40 <__muldf3+0x2c0>
    7ddc:	008000c4 	movi	r2,3
    7de0:	3881bb26 	beq	r7,r2,84d0 <__muldf3+0x850>
    7de4:	00800044 	movi	r2,1
    7de8:	3881961e 	bne	r7,r2,8444 <__muldf3+0x7c4>
    7dec:	3027883a 	mov	r19,r6
    7df0:	0005883a 	mov	r2,zero
    7df4:	0021883a 	mov	r16,zero
    7df8:	002d883a 	mov	r22,zero
    7dfc:	1004953a 	slli	r2,r2,20
    7e00:	98c03fcc 	andi	r3,r19,255
    7e04:	04400434 	movhi	r17,16
    7e08:	8c7fffc4 	addi	r17,r17,-1
    7e0c:	180697fa 	slli	r3,r3,31
    7e10:	8460703a 	and	r16,r16,r17
    7e14:	80a0b03a 	or	r16,r16,r2
    7e18:	80c6b03a 	or	r3,r16,r3
    7e1c:	b005883a 	mov	r2,r22
    7e20:	dfc01117 	ldw	ra,68(sp)
    7e24:	df001017 	ldw	fp,64(sp)
    7e28:	ddc00f17 	ldw	r23,60(sp)
    7e2c:	dd800e17 	ldw	r22,56(sp)
    7e30:	dd400d17 	ldw	r21,52(sp)
    7e34:	dd000c17 	ldw	r20,48(sp)
    7e38:	dcc00b17 	ldw	r19,44(sp)
    7e3c:	dc800a17 	ldw	r18,40(sp)
    7e40:	dc400917 	ldw	r17,36(sp)
    7e44:	dc000817 	ldw	r16,32(sp)
    7e48:	dec01204 	addi	sp,sp,72
    7e4c:	f800283a 	ret
    7e50:	2404b03a 	or	r2,r4,r16
    7e54:	202b883a 	mov	r21,r4
    7e58:	10004426 	beq	r2,zero,7f6c <__muldf3+0x2ec>
    7e5c:	80015126 	beq	r16,zero,83a4 <__muldf3+0x724>
    7e60:	8009883a 	mov	r4,r16
    7e64:	d9800715 	stw	r6,28(sp)
    7e68:	d9c00215 	stw	r7,8(sp)
    7e6c:	da400415 	stw	r9,16(sp)
    7e70:	000917c0 	call	917c <__clzsi2>
    7e74:	d9800717 	ldw	r6,28(sp)
    7e78:	d9c00217 	ldw	r7,8(sp)
    7e7c:	da400417 	ldw	r9,16(sp)
    7e80:	113ffd44 	addi	r4,r2,-11
    7e84:	00c00704 	movi	r3,28
    7e88:	19014216 	blt	r3,r4,8394 <__muldf3+0x714>
    7e8c:	00c00744 	movi	r3,29
    7e90:	15bffe04 	addi	r22,r2,-8
    7e94:	1907c83a 	sub	r3,r3,r4
    7e98:	85a0983a 	sll	r16,r16,r22
    7e9c:	a8c6d83a 	srl	r3,r21,r3
    7ea0:	adac983a 	sll	r22,r21,r22
    7ea4:	1c20b03a 	or	r16,r3,r16
    7ea8:	1080fcc4 	addi	r2,r2,1011
    7eac:	00a9c83a 	sub	r20,zero,r2
    7eb0:	002b883a 	mov	r21,zero
    7eb4:	000b883a 	mov	r5,zero
    7eb8:	003f9006 	br	7cfc <__alt_mem_nios_system_shared_memory+0xfffc7cfc>
    7ebc:	3446b03a 	or	r3,r6,r17
    7ec0:	1800281e 	bne	r3,zero,7f64 <__muldf3+0x2e4>
    7ec4:	0023883a 	mov	r17,zero
    7ec8:	0025883a 	mov	r18,zero
    7ecc:	01c00084 	movi	r7,2
    7ed0:	003f9c06 	br	7d44 <__alt_mem_nios_system_shared_memory+0xfffc7d44>
    7ed4:	3446b03a 	or	r3,r6,r17
    7ed8:	18001e26 	beq	r3,zero,7f54 <__muldf3+0x2d4>
    7edc:	88012126 	beq	r17,zero,8364 <__muldf3+0x6e4>
    7ee0:	8809883a 	mov	r4,r17
    7ee4:	d9400215 	stw	r5,8(sp)
    7ee8:	d9800715 	stw	r6,28(sp)
    7eec:	da400415 	stw	r9,16(sp)
    7ef0:	da800315 	stw	r10,12(sp)
    7ef4:	000917c0 	call	917c <__clzsi2>
    7ef8:	d9400217 	ldw	r5,8(sp)
    7efc:	d9800717 	ldw	r6,28(sp)
    7f00:	da400417 	ldw	r9,16(sp)
    7f04:	da800317 	ldw	r10,12(sp)
    7f08:	113ffd44 	addi	r4,r2,-11
    7f0c:	00c00704 	movi	r3,28
    7f10:	19011016 	blt	r3,r4,8354 <__muldf3+0x6d4>
    7f14:	00c00744 	movi	r3,29
    7f18:	14bffe04 	addi	r18,r2,-8
    7f1c:	1907c83a 	sub	r3,r3,r4
    7f20:	8ca2983a 	sll	r17,r17,r18
    7f24:	30c6d83a 	srl	r3,r6,r3
    7f28:	34a4983a 	sll	r18,r6,r18
    7f2c:	1c62b03a 	or	r17,r3,r17
    7f30:	1080fcc4 	addi	r2,r2,1011
    7f34:	0085c83a 	sub	r2,zero,r2
    7f38:	000f883a 	mov	r7,zero
    7f3c:	003f8106 	br	7d44 <__alt_mem_nios_system_shared_memory+0xfffc7d44>
    7f40:	3027883a 	mov	r19,r6
    7f44:	0081ffc4 	movi	r2,2047
    7f48:	0021883a 	mov	r16,zero
    7f4c:	002d883a 	mov	r22,zero
    7f50:	003faa06 	br	7dfc <__alt_mem_nios_system_shared_memory+0xfffc7dfc>
    7f54:	0023883a 	mov	r17,zero
    7f58:	0025883a 	mov	r18,zero
    7f5c:	01c00044 	movi	r7,1
    7f60:	003f7806 	br	7d44 <__alt_mem_nios_system_shared_memory+0xfffc7d44>
    7f64:	01c000c4 	movi	r7,3
    7f68:	003f7606 	br	7d44 <__alt_mem_nios_system_shared_memory+0xfffc7d44>
    7f6c:	05400104 	movi	r21,4
    7f70:	0021883a 	mov	r16,zero
    7f74:	002d883a 	mov	r22,zero
    7f78:	01400044 	movi	r5,1
    7f7c:	003f5f06 	br	7cfc <__alt_mem_nios_system_shared_memory+0xfffc7cfc>
    7f80:	05400304 	movi	r21,12
    7f84:	014000c4 	movi	r5,3
    7f88:	003f5c06 	br	7cfc <__alt_mem_nios_system_shared_memory+0xfffc7cfc>
    7f8c:	04000434 	movhi	r16,16
    7f90:	0027883a 	mov	r19,zero
    7f94:	843fffc4 	addi	r16,r16,-1
    7f98:	05bfffc4 	movi	r22,-1
    7f9c:	0081ffc4 	movi	r2,2047
    7fa0:	003f9606 	br	7dfc <__alt_mem_nios_system_shared_memory+0xfffc7dfc>
    7fa4:	8023883a 	mov	r17,r16
    7fa8:	b025883a 	mov	r18,r22
    7fac:	280f883a 	mov	r7,r5
    7fb0:	003f8806 	br	7dd4 <__alt_mem_nios_system_shared_memory+0xfffc7dd4>
    7fb4:	8023883a 	mov	r17,r16
    7fb8:	b025883a 	mov	r18,r22
    7fbc:	480d883a 	mov	r6,r9
    7fc0:	280f883a 	mov	r7,r5
    7fc4:	003f8306 	br	7dd4 <__alt_mem_nios_system_shared_memory+0xfffc7dd4>
    7fc8:	b026d43a 	srli	r19,r22,16
    7fcc:	902ed43a 	srli	r23,r18,16
    7fd0:	b5bfffcc 	andi	r22,r22,65535
    7fd4:	94bfffcc 	andi	r18,r18,65535
    7fd8:	b00b883a 	mov	r5,r22
    7fdc:	9009883a 	mov	r4,r18
    7fe0:	d8c00515 	stw	r3,20(sp)
    7fe4:	d9800715 	stw	r6,28(sp)
    7fe8:	da000615 	stw	r8,24(sp)
    7fec:	00051580 	call	5158 <__mulsi3>
    7ff0:	980b883a 	mov	r5,r19
    7ff4:	9009883a 	mov	r4,r18
    7ff8:	1029883a 	mov	r20,r2
    7ffc:	00051580 	call	5158 <__mulsi3>
    8000:	b80b883a 	mov	r5,r23
    8004:	9809883a 	mov	r4,r19
    8008:	102b883a 	mov	r21,r2
    800c:	00051580 	call	5158 <__mulsi3>
    8010:	b809883a 	mov	r4,r23
    8014:	b00b883a 	mov	r5,r22
    8018:	1039883a 	mov	fp,r2
    801c:	00051580 	call	5158 <__mulsi3>
    8020:	a008d43a 	srli	r4,r20,16
    8024:	1545883a 	add	r2,r2,r21
    8028:	d8c00517 	ldw	r3,20(sp)
    802c:	2085883a 	add	r2,r4,r2
    8030:	d9800717 	ldw	r6,28(sp)
    8034:	da000617 	ldw	r8,24(sp)
    8038:	1540022e 	bgeu	r2,r21,8044 <__muldf3+0x3c4>
    803c:	01000074 	movhi	r4,1
    8040:	e139883a 	add	fp,fp,r4
    8044:	100e943a 	slli	r7,r2,16
    8048:	1004d43a 	srli	r2,r2,16
    804c:	882ad43a 	srli	r21,r17,16
    8050:	a53fffcc 	andi	r20,r20,65535
    8054:	8c7fffcc 	andi	r17,r17,65535
    8058:	3d29883a 	add	r20,r7,r20
    805c:	b00b883a 	mov	r5,r22
    8060:	8809883a 	mov	r4,r17
    8064:	d8c00515 	stw	r3,20(sp)
    8068:	d9800715 	stw	r6,28(sp)
    806c:	da000615 	stw	r8,24(sp)
    8070:	dd000115 	stw	r20,4(sp)
    8074:	d8800015 	stw	r2,0(sp)
    8078:	00051580 	call	5158 <__mulsi3>
    807c:	980b883a 	mov	r5,r19
    8080:	8809883a 	mov	r4,r17
    8084:	d8800215 	stw	r2,8(sp)
    8088:	00051580 	call	5158 <__mulsi3>
    808c:	9809883a 	mov	r4,r19
    8090:	a80b883a 	mov	r5,r21
    8094:	1029883a 	mov	r20,r2
    8098:	00051580 	call	5158 <__mulsi3>
    809c:	b00b883a 	mov	r5,r22
    80a0:	a809883a 	mov	r4,r21
    80a4:	d8800415 	stw	r2,16(sp)
    80a8:	00051580 	call	5158 <__mulsi3>
    80ac:	d9c00217 	ldw	r7,8(sp)
    80b0:	1505883a 	add	r2,r2,r20
    80b4:	d8c00517 	ldw	r3,20(sp)
    80b8:	3826d43a 	srli	r19,r7,16
    80bc:	d9800717 	ldw	r6,28(sp)
    80c0:	da000617 	ldw	r8,24(sp)
    80c4:	9885883a 	add	r2,r19,r2
    80c8:	da400417 	ldw	r9,16(sp)
    80cc:	1500022e 	bgeu	r2,r20,80d8 <__muldf3+0x458>
    80d0:	01000074 	movhi	r4,1
    80d4:	4913883a 	add	r9,r9,r4
    80d8:	1028d43a 	srli	r20,r2,16
    80dc:	1004943a 	slli	r2,r2,16
    80e0:	802cd43a 	srli	r22,r16,16
    80e4:	843fffcc 	andi	r16,r16,65535
    80e8:	3cffffcc 	andi	r19,r7,65535
    80ec:	9009883a 	mov	r4,r18
    80f0:	800b883a 	mov	r5,r16
    80f4:	a269883a 	add	r20,r20,r9
    80f8:	d8c00515 	stw	r3,20(sp)
    80fc:	d9800715 	stw	r6,28(sp)
    8100:	da000615 	stw	r8,24(sp)
    8104:	14e7883a 	add	r19,r2,r19
    8108:	00051580 	call	5158 <__mulsi3>
    810c:	9009883a 	mov	r4,r18
    8110:	b00b883a 	mov	r5,r22
    8114:	d8800315 	stw	r2,12(sp)
    8118:	00051580 	call	5158 <__mulsi3>
    811c:	b809883a 	mov	r4,r23
    8120:	b00b883a 	mov	r5,r22
    8124:	d8800215 	stw	r2,8(sp)
    8128:	00051580 	call	5158 <__mulsi3>
    812c:	b80b883a 	mov	r5,r23
    8130:	8009883a 	mov	r4,r16
    8134:	d8800415 	stw	r2,16(sp)
    8138:	00051580 	call	5158 <__mulsi3>
    813c:	da800317 	ldw	r10,12(sp)
    8140:	d9c00217 	ldw	r7,8(sp)
    8144:	d9000017 	ldw	r4,0(sp)
    8148:	502ed43a 	srli	r23,r10,16
    814c:	11c5883a 	add	r2,r2,r7
    8150:	24e5883a 	add	r18,r4,r19
    8154:	b885883a 	add	r2,r23,r2
    8158:	d8c00517 	ldw	r3,20(sp)
    815c:	d9800717 	ldw	r6,28(sp)
    8160:	da000617 	ldw	r8,24(sp)
    8164:	da400417 	ldw	r9,16(sp)
    8168:	11c0022e 	bgeu	r2,r7,8174 <__muldf3+0x4f4>
    816c:	01000074 	movhi	r4,1
    8170:	4913883a 	add	r9,r9,r4
    8174:	100ed43a 	srli	r7,r2,16
    8178:	1004943a 	slli	r2,r2,16
    817c:	55ffffcc 	andi	r23,r10,65535
    8180:	3a53883a 	add	r9,r7,r9
    8184:	8809883a 	mov	r4,r17
    8188:	800b883a 	mov	r5,r16
    818c:	d8c00515 	stw	r3,20(sp)
    8190:	d9800715 	stw	r6,28(sp)
    8194:	da000615 	stw	r8,24(sp)
    8198:	da400415 	stw	r9,16(sp)
    819c:	15ef883a 	add	r23,r2,r23
    81a0:	00051580 	call	5158 <__mulsi3>
    81a4:	8809883a 	mov	r4,r17
    81a8:	b00b883a 	mov	r5,r22
    81ac:	d8800215 	stw	r2,8(sp)
    81b0:	00051580 	call	5158 <__mulsi3>
    81b4:	b00b883a 	mov	r5,r22
    81b8:	a809883a 	mov	r4,r21
    81bc:	d8800315 	stw	r2,12(sp)
    81c0:	00051580 	call	5158 <__mulsi3>
    81c4:	8009883a 	mov	r4,r16
    81c8:	a80b883a 	mov	r5,r21
    81cc:	1023883a 	mov	r17,r2
    81d0:	00051580 	call	5158 <__mulsi3>
    81d4:	d9c00217 	ldw	r7,8(sp)
    81d8:	da800317 	ldw	r10,12(sp)
    81dc:	d8c00517 	ldw	r3,20(sp)
    81e0:	3808d43a 	srli	r4,r7,16
    81e4:	1285883a 	add	r2,r2,r10
    81e8:	d9800717 	ldw	r6,28(sp)
    81ec:	2085883a 	add	r2,r4,r2
    81f0:	da000617 	ldw	r8,24(sp)
    81f4:	da400417 	ldw	r9,16(sp)
    81f8:	1280022e 	bgeu	r2,r10,8204 <__muldf3+0x584>
    81fc:	01000074 	movhi	r4,1
    8200:	8923883a 	add	r17,r17,r4
    8204:	1008943a 	slli	r4,r2,16
    8208:	39ffffcc 	andi	r7,r7,65535
    820c:	e4b9883a 	add	fp,fp,r18
    8210:	21cf883a 	add	r7,r4,r7
    8214:	e4e7803a 	cmpltu	r19,fp,r19
    8218:	3d0f883a 	add	r7,r7,r20
    821c:	bf39883a 	add	fp,r23,fp
    8220:	99c9883a 	add	r4,r19,r7
    8224:	e5ef803a 	cmpltu	r23,fp,r23
    8228:	490b883a 	add	r5,r9,r4
    822c:	1004d43a 	srli	r2,r2,16
    8230:	b965883a 	add	r18,r23,r5
    8234:	24c9803a 	cmpltu	r4,r4,r19
    8238:	3d29803a 	cmpltu	r20,r7,r20
    823c:	a128b03a 	or	r20,r20,r4
    8240:	95ef803a 	cmpltu	r23,r18,r23
    8244:	2a53803a 	cmpltu	r9,r5,r9
    8248:	a0a9883a 	add	r20,r20,r2
    824c:	4deeb03a 	or	r23,r9,r23
    8250:	a5ef883a 	add	r23,r20,r23
    8254:	bc63883a 	add	r17,r23,r17
    8258:	e004927a 	slli	r2,fp,9
    825c:	d9000117 	ldw	r4,4(sp)
    8260:	882e927a 	slli	r23,r17,9
    8264:	9022d5fa 	srli	r17,r18,23
    8268:	e038d5fa 	srli	fp,fp,23
    826c:	1104b03a 	or	r2,r2,r4
    8270:	9024927a 	slli	r18,r18,9
    8274:	1004c03a 	cmpne	r2,r2,zero
    8278:	bc62b03a 	or	r17,r23,r17
    827c:	1738b03a 	or	fp,r2,fp
    8280:	8880402c 	andhi	r2,r17,256
    8284:	e4a4b03a 	or	r18,fp,r18
    8288:	10000726 	beq	r2,zero,82a8 <__muldf3+0x628>
    828c:	9006d07a 	srli	r3,r18,1
    8290:	880497fa 	slli	r2,r17,31
    8294:	9480004c 	andi	r18,r18,1
    8298:	8822d07a 	srli	r17,r17,1
    829c:	1ca4b03a 	or	r18,r3,r18
    82a0:	14a4b03a 	or	r18,r2,r18
    82a4:	4007883a 	mov	r3,r8
    82a8:	1880ffc4 	addi	r2,r3,1023
    82ac:	0080460e 	bge	zero,r2,83c8 <__muldf3+0x748>
    82b0:	910001cc 	andi	r4,r18,7
    82b4:	20000726 	beq	r4,zero,82d4 <__muldf3+0x654>
    82b8:	910003cc 	andi	r4,r18,15
    82bc:	01400104 	movi	r5,4
    82c0:	21400426 	beq	r4,r5,82d4 <__muldf3+0x654>
    82c4:	9149883a 	add	r4,r18,r5
    82c8:	24a5803a 	cmpltu	r18,r4,r18
    82cc:	8ca3883a 	add	r17,r17,r18
    82d0:	2025883a 	mov	r18,r4
    82d4:	8900402c 	andhi	r4,r17,256
    82d8:	20000426 	beq	r4,zero,82ec <__muldf3+0x66c>
    82dc:	18810004 	addi	r2,r3,1024
    82e0:	00ffc034 	movhi	r3,65280
    82e4:	18ffffc4 	addi	r3,r3,-1
    82e8:	88e2703a 	and	r17,r17,r3
    82ec:	00c1ff84 	movi	r3,2046
    82f0:	18bf1316 	blt	r3,r2,7f40 <__alt_mem_nios_system_shared_memory+0xfffc7f40>
    82f4:	882c977a 	slli	r22,r17,29
    82f8:	9024d0fa 	srli	r18,r18,3
    82fc:	8822927a 	slli	r17,r17,9
    8300:	1081ffcc 	andi	r2,r2,2047
    8304:	b4acb03a 	or	r22,r22,r18
    8308:	8820d33a 	srli	r16,r17,12
    830c:	3027883a 	mov	r19,r6
    8310:	003eba06 	br	7dfc <__alt_mem_nios_system_shared_memory+0xfffc7dfc>
    8314:	8080022c 	andhi	r2,r16,8
    8318:	10000926 	beq	r2,zero,8340 <__muldf3+0x6c0>
    831c:	8880022c 	andhi	r2,r17,8
    8320:	1000071e 	bne	r2,zero,8340 <__muldf3+0x6c0>
    8324:	00800434 	movhi	r2,16
    8328:	8c000234 	orhi	r16,r17,8
    832c:	10bfffc4 	addi	r2,r2,-1
    8330:	e027883a 	mov	r19,fp
    8334:	80a0703a 	and	r16,r16,r2
    8338:	902d883a 	mov	r22,r18
    833c:	003f1706 	br	7f9c <__alt_mem_nios_system_shared_memory+0xfffc7f9c>
    8340:	00800434 	movhi	r2,16
    8344:	84000234 	orhi	r16,r16,8
    8348:	10bfffc4 	addi	r2,r2,-1
    834c:	80a0703a 	and	r16,r16,r2
    8350:	003f1206 	br	7f9c <__alt_mem_nios_system_shared_memory+0xfffc7f9c>
    8354:	147ff604 	addi	r17,r2,-40
    8358:	3462983a 	sll	r17,r6,r17
    835c:	0025883a 	mov	r18,zero
    8360:	003ef306 	br	7f30 <__alt_mem_nios_system_shared_memory+0xfffc7f30>
    8364:	3009883a 	mov	r4,r6
    8368:	d9400215 	stw	r5,8(sp)
    836c:	d9800715 	stw	r6,28(sp)
    8370:	da400415 	stw	r9,16(sp)
    8374:	da800315 	stw	r10,12(sp)
    8378:	000917c0 	call	917c <__clzsi2>
    837c:	10800804 	addi	r2,r2,32
    8380:	da800317 	ldw	r10,12(sp)
    8384:	da400417 	ldw	r9,16(sp)
    8388:	d9800717 	ldw	r6,28(sp)
    838c:	d9400217 	ldw	r5,8(sp)
    8390:	003edd06 	br	7f08 <__alt_mem_nios_system_shared_memory+0xfffc7f08>
    8394:	143ff604 	addi	r16,r2,-40
    8398:	ac20983a 	sll	r16,r21,r16
    839c:	002d883a 	mov	r22,zero
    83a0:	003ec106 	br	7ea8 <__alt_mem_nios_system_shared_memory+0xfffc7ea8>
    83a4:	d9800715 	stw	r6,28(sp)
    83a8:	d9c00215 	stw	r7,8(sp)
    83ac:	da400415 	stw	r9,16(sp)
    83b0:	000917c0 	call	917c <__clzsi2>
    83b4:	10800804 	addi	r2,r2,32
    83b8:	da400417 	ldw	r9,16(sp)
    83bc:	d9c00217 	ldw	r7,8(sp)
    83c0:	d9800717 	ldw	r6,28(sp)
    83c4:	003eae06 	br	7e80 <__alt_mem_nios_system_shared_memory+0xfffc7e80>
    83c8:	00c00044 	movi	r3,1
    83cc:	1887c83a 	sub	r3,r3,r2
    83d0:	01000e04 	movi	r4,56
    83d4:	20fe8516 	blt	r4,r3,7dec <__alt_mem_nios_system_shared_memory+0xfffc7dec>
    83d8:	010007c4 	movi	r4,31
    83dc:	20c01b16 	blt	r4,r3,844c <__muldf3+0x7cc>
    83e0:	00800804 	movi	r2,32
    83e4:	10c5c83a 	sub	r2,r2,r3
    83e8:	888a983a 	sll	r5,r17,r2
    83ec:	90c8d83a 	srl	r4,r18,r3
    83f0:	9084983a 	sll	r2,r18,r2
    83f4:	88e2d83a 	srl	r17,r17,r3
    83f8:	2906b03a 	or	r3,r5,r4
    83fc:	1004c03a 	cmpne	r2,r2,zero
    8400:	1886b03a 	or	r3,r3,r2
    8404:	188001cc 	andi	r2,r3,7
    8408:	10000726 	beq	r2,zero,8428 <__muldf3+0x7a8>
    840c:	188003cc 	andi	r2,r3,15
    8410:	01000104 	movi	r4,4
    8414:	11000426 	beq	r2,r4,8428 <__muldf3+0x7a8>
    8418:	1805883a 	mov	r2,r3
    841c:	10c00104 	addi	r3,r2,4
    8420:	1885803a 	cmpltu	r2,r3,r2
    8424:	88a3883a 	add	r17,r17,r2
    8428:	8880202c 	andhi	r2,r17,128
    842c:	10001c26 	beq	r2,zero,84a0 <__muldf3+0x820>
    8430:	3027883a 	mov	r19,r6
    8434:	00800044 	movi	r2,1
    8438:	0021883a 	mov	r16,zero
    843c:	002d883a 	mov	r22,zero
    8440:	003e6e06 	br	7dfc <__alt_mem_nios_system_shared_memory+0xfffc7dfc>
    8444:	4007883a 	mov	r3,r8
    8448:	003f9706 	br	82a8 <__alt_mem_nios_system_shared_memory+0xfffc82a8>
    844c:	017ff844 	movi	r5,-31
    8450:	2885c83a 	sub	r2,r5,r2
    8454:	888ad83a 	srl	r5,r17,r2
    8458:	00800804 	movi	r2,32
    845c:	18801a26 	beq	r3,r2,84c8 <__muldf3+0x848>
    8460:	01001004 	movi	r4,64
    8464:	20c7c83a 	sub	r3,r4,r3
    8468:	88e2983a 	sll	r17,r17,r3
    846c:	8ca4b03a 	or	r18,r17,r18
    8470:	9004c03a 	cmpne	r2,r18,zero
    8474:	2884b03a 	or	r2,r5,r2
    8478:	144001cc 	andi	r17,r2,7
    847c:	88000d1e 	bne	r17,zero,84b4 <__muldf3+0x834>
    8480:	0021883a 	mov	r16,zero
    8484:	102cd0fa 	srli	r22,r2,3
    8488:	3027883a 	mov	r19,r6
    848c:	0005883a 	mov	r2,zero
    8490:	b46cb03a 	or	r22,r22,r17
    8494:	003e5906 	br	7dfc <__alt_mem_nios_system_shared_memory+0xfffc7dfc>
    8498:	1007883a 	mov	r3,r2
    849c:	0023883a 	mov	r17,zero
    84a0:	8820927a 	slli	r16,r17,9
    84a4:	1805883a 	mov	r2,r3
    84a8:	8822977a 	slli	r17,r17,29
    84ac:	8020d33a 	srli	r16,r16,12
    84b0:	003ff406 	br	8484 <__alt_mem_nios_system_shared_memory+0xfffc8484>
    84b4:	10c003cc 	andi	r3,r2,15
    84b8:	01000104 	movi	r4,4
    84bc:	193ff626 	beq	r3,r4,8498 <__alt_mem_nios_system_shared_memory+0xfffc8498>
    84c0:	0023883a 	mov	r17,zero
    84c4:	003fd506 	br	841c <__alt_mem_nios_system_shared_memory+0xfffc841c>
    84c8:	0023883a 	mov	r17,zero
    84cc:	003fe706 	br	846c <__alt_mem_nios_system_shared_memory+0xfffc846c>
    84d0:	00800434 	movhi	r2,16
    84d4:	8c000234 	orhi	r16,r17,8
    84d8:	10bfffc4 	addi	r2,r2,-1
    84dc:	3027883a 	mov	r19,r6
    84e0:	80a0703a 	and	r16,r16,r2
    84e4:	902d883a 	mov	r22,r18
    84e8:	003eac06 	br	7f9c <__alt_mem_nios_system_shared_memory+0xfffc7f9c>

000084ec <__subdf3>:
    84ec:	02000434 	movhi	r8,16
    84f0:	423fffc4 	addi	r8,r8,-1
    84f4:	defffb04 	addi	sp,sp,-20
    84f8:	2a14703a 	and	r10,r5,r8
    84fc:	3812d53a 	srli	r9,r7,20
    8500:	3a10703a 	and	r8,r7,r8
    8504:	2006d77a 	srli	r3,r4,29
    8508:	3004d77a 	srli	r2,r6,29
    850c:	dc000015 	stw	r16,0(sp)
    8510:	501490fa 	slli	r10,r10,3
    8514:	2820d53a 	srli	r16,r5,20
    8518:	401090fa 	slli	r8,r8,3
    851c:	dc800215 	stw	r18,8(sp)
    8520:	dc400115 	stw	r17,4(sp)
    8524:	dfc00415 	stw	ra,16(sp)
    8528:	202290fa 	slli	r17,r4,3
    852c:	dcc00315 	stw	r19,12(sp)
    8530:	4a41ffcc 	andi	r9,r9,2047
    8534:	0101ffc4 	movi	r4,2047
    8538:	2824d7fa 	srli	r18,r5,31
    853c:	8401ffcc 	andi	r16,r16,2047
    8540:	50c6b03a 	or	r3,r10,r3
    8544:	380ed7fa 	srli	r7,r7,31
    8548:	408ab03a 	or	r5,r8,r2
    854c:	300c90fa 	slli	r6,r6,3
    8550:	49009626 	beq	r9,r4,87ac <__subdf3+0x2c0>
    8554:	39c0005c 	xori	r7,r7,1
    8558:	8245c83a 	sub	r2,r16,r9
    855c:	3c807426 	beq	r7,r18,8730 <__subdf3+0x244>
    8560:	0080af0e 	bge	zero,r2,8820 <__subdf3+0x334>
    8564:	48002a1e 	bne	r9,zero,8610 <__subdf3+0x124>
    8568:	2988b03a 	or	r4,r5,r6
    856c:	20009a1e 	bne	r4,zero,87d8 <__subdf3+0x2ec>
    8570:	888001cc 	andi	r2,r17,7
    8574:	10000726 	beq	r2,zero,8594 <__subdf3+0xa8>
    8578:	888003cc 	andi	r2,r17,15
    857c:	01000104 	movi	r4,4
    8580:	11000426 	beq	r2,r4,8594 <__subdf3+0xa8>
    8584:	890b883a 	add	r5,r17,r4
    8588:	2c63803a 	cmpltu	r17,r5,r17
    858c:	1c47883a 	add	r3,r3,r17
    8590:	2823883a 	mov	r17,r5
    8594:	1880202c 	andhi	r2,r3,128
    8598:	10005926 	beq	r2,zero,8700 <__subdf3+0x214>
    859c:	84000044 	addi	r16,r16,1
    85a0:	0081ffc4 	movi	r2,2047
    85a4:	8080be26 	beq	r16,r2,88a0 <__subdf3+0x3b4>
    85a8:	017fe034 	movhi	r5,65408
    85ac:	297fffc4 	addi	r5,r5,-1
    85b0:	1946703a 	and	r3,r3,r5
    85b4:	1804977a 	slli	r2,r3,29
    85b8:	1806927a 	slli	r3,r3,9
    85bc:	8822d0fa 	srli	r17,r17,3
    85c0:	8401ffcc 	andi	r16,r16,2047
    85c4:	180ad33a 	srli	r5,r3,12
    85c8:	9100004c 	andi	r4,r18,1
    85cc:	1444b03a 	or	r2,r2,r17
    85d0:	80c1ffcc 	andi	r3,r16,2047
    85d4:	1820953a 	slli	r16,r3,20
    85d8:	20c03fcc 	andi	r3,r4,255
    85dc:	180897fa 	slli	r4,r3,31
    85e0:	00c00434 	movhi	r3,16
    85e4:	18ffffc4 	addi	r3,r3,-1
    85e8:	28c6703a 	and	r3,r5,r3
    85ec:	1c06b03a 	or	r3,r3,r16
    85f0:	1906b03a 	or	r3,r3,r4
    85f4:	dfc00417 	ldw	ra,16(sp)
    85f8:	dcc00317 	ldw	r19,12(sp)
    85fc:	dc800217 	ldw	r18,8(sp)
    8600:	dc400117 	ldw	r17,4(sp)
    8604:	dc000017 	ldw	r16,0(sp)
    8608:	dec00504 	addi	sp,sp,20
    860c:	f800283a 	ret
    8610:	0101ffc4 	movi	r4,2047
    8614:	813fd626 	beq	r16,r4,8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8618:	29402034 	orhi	r5,r5,128
    861c:	01000e04 	movi	r4,56
    8620:	2080a316 	blt	r4,r2,88b0 <__subdf3+0x3c4>
    8624:	010007c4 	movi	r4,31
    8628:	2080c616 	blt	r4,r2,8944 <__subdf3+0x458>
    862c:	01000804 	movi	r4,32
    8630:	2089c83a 	sub	r4,r4,r2
    8634:	2910983a 	sll	r8,r5,r4
    8638:	308ed83a 	srl	r7,r6,r2
    863c:	3108983a 	sll	r4,r6,r4
    8640:	2884d83a 	srl	r2,r5,r2
    8644:	41ccb03a 	or	r6,r8,r7
    8648:	2008c03a 	cmpne	r4,r4,zero
    864c:	310cb03a 	or	r6,r6,r4
    8650:	898dc83a 	sub	r6,r17,r6
    8654:	89a3803a 	cmpltu	r17,r17,r6
    8658:	1887c83a 	sub	r3,r3,r2
    865c:	1c47c83a 	sub	r3,r3,r17
    8660:	3023883a 	mov	r17,r6
    8664:	1880202c 	andhi	r2,r3,128
    8668:	10002326 	beq	r2,zero,86f8 <__subdf3+0x20c>
    866c:	04c02034 	movhi	r19,128
    8670:	9cffffc4 	addi	r19,r19,-1
    8674:	1ce6703a 	and	r19,r3,r19
    8678:	98007a26 	beq	r19,zero,8864 <__subdf3+0x378>
    867c:	9809883a 	mov	r4,r19
    8680:	000917c0 	call	917c <__clzsi2>
    8684:	113ffe04 	addi	r4,r2,-8
    8688:	00c007c4 	movi	r3,31
    868c:	19007b16 	blt	r3,r4,887c <__subdf3+0x390>
    8690:	00800804 	movi	r2,32
    8694:	1105c83a 	sub	r2,r2,r4
    8698:	8884d83a 	srl	r2,r17,r2
    869c:	9906983a 	sll	r3,r19,r4
    86a0:	8922983a 	sll	r17,r17,r4
    86a4:	10c4b03a 	or	r2,r2,r3
    86a8:	24007816 	blt	r4,r16,888c <__subdf3+0x3a0>
    86ac:	2421c83a 	sub	r16,r4,r16
    86b0:	80c00044 	addi	r3,r16,1
    86b4:	010007c4 	movi	r4,31
    86b8:	20c09516 	blt	r4,r3,8910 <__subdf3+0x424>
    86bc:	01400804 	movi	r5,32
    86c0:	28cbc83a 	sub	r5,r5,r3
    86c4:	88c8d83a 	srl	r4,r17,r3
    86c8:	8962983a 	sll	r17,r17,r5
    86cc:	114a983a 	sll	r5,r2,r5
    86d0:	10c6d83a 	srl	r3,r2,r3
    86d4:	8804c03a 	cmpne	r2,r17,zero
    86d8:	290ab03a 	or	r5,r5,r4
    86dc:	28a2b03a 	or	r17,r5,r2
    86e0:	0021883a 	mov	r16,zero
    86e4:	003fa206 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    86e8:	2090b03a 	or	r8,r4,r2
    86ec:	40018e26 	beq	r8,zero,8d28 <__subdf3+0x83c>
    86f0:	1007883a 	mov	r3,r2
    86f4:	2023883a 	mov	r17,r4
    86f8:	888001cc 	andi	r2,r17,7
    86fc:	103f9e1e 	bne	r2,zero,8578 <__alt_mem_nios_system_shared_memory+0xfffc8578>
    8700:	1804977a 	slli	r2,r3,29
    8704:	8822d0fa 	srli	r17,r17,3
    8708:	1810d0fa 	srli	r8,r3,3
    870c:	9100004c 	andi	r4,r18,1
    8710:	1444b03a 	or	r2,r2,r17
    8714:	00c1ffc4 	movi	r3,2047
    8718:	80c02826 	beq	r16,r3,87bc <__subdf3+0x2d0>
    871c:	01400434 	movhi	r5,16
    8720:	297fffc4 	addi	r5,r5,-1
    8724:	80e0703a 	and	r16,r16,r3
    8728:	414a703a 	and	r5,r8,r5
    872c:	003fa806 	br	85d0 <__alt_mem_nios_system_shared_memory+0xfffc85d0>
    8730:	0080630e 	bge	zero,r2,88c0 <__subdf3+0x3d4>
    8734:	48003026 	beq	r9,zero,87f8 <__subdf3+0x30c>
    8738:	0101ffc4 	movi	r4,2047
    873c:	813f8c26 	beq	r16,r4,8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8740:	29402034 	orhi	r5,r5,128
    8744:	01000e04 	movi	r4,56
    8748:	2080a90e 	bge	r4,r2,89f0 <__subdf3+0x504>
    874c:	298cb03a 	or	r6,r5,r6
    8750:	3012c03a 	cmpne	r9,r6,zero
    8754:	0005883a 	mov	r2,zero
    8758:	4c53883a 	add	r9,r9,r17
    875c:	4c63803a 	cmpltu	r17,r9,r17
    8760:	10c7883a 	add	r3,r2,r3
    8764:	88c7883a 	add	r3,r17,r3
    8768:	4823883a 	mov	r17,r9
    876c:	1880202c 	andhi	r2,r3,128
    8770:	1000d026 	beq	r2,zero,8ab4 <__subdf3+0x5c8>
    8774:	84000044 	addi	r16,r16,1
    8778:	0081ffc4 	movi	r2,2047
    877c:	8080fe26 	beq	r16,r2,8b78 <__subdf3+0x68c>
    8780:	00bfe034 	movhi	r2,65408
    8784:	10bfffc4 	addi	r2,r2,-1
    8788:	1886703a 	and	r3,r3,r2
    878c:	880ad07a 	srli	r5,r17,1
    8790:	180497fa 	slli	r2,r3,31
    8794:	8900004c 	andi	r4,r17,1
    8798:	2922b03a 	or	r17,r5,r4
    879c:	1806d07a 	srli	r3,r3,1
    87a0:	1462b03a 	or	r17,r2,r17
    87a4:	3825883a 	mov	r18,r7
    87a8:	003f7106 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    87ac:	2984b03a 	or	r2,r5,r6
    87b0:	103f6826 	beq	r2,zero,8554 <__alt_mem_nios_system_shared_memory+0xfffc8554>
    87b4:	39c03fcc 	andi	r7,r7,255
    87b8:	003f6706 	br	8558 <__alt_mem_nios_system_shared_memory+0xfffc8558>
    87bc:	4086b03a 	or	r3,r8,r2
    87c0:	18015226 	beq	r3,zero,8d0c <__subdf3+0x820>
    87c4:	00c00434 	movhi	r3,16
    87c8:	41400234 	orhi	r5,r8,8
    87cc:	18ffffc4 	addi	r3,r3,-1
    87d0:	28ca703a 	and	r5,r5,r3
    87d4:	003f7e06 	br	85d0 <__alt_mem_nios_system_shared_memory+0xfffc85d0>
    87d8:	10bfffc4 	addi	r2,r2,-1
    87dc:	1000491e 	bne	r2,zero,8904 <__subdf3+0x418>
    87e0:	898fc83a 	sub	r7,r17,r6
    87e4:	89e3803a 	cmpltu	r17,r17,r7
    87e8:	1947c83a 	sub	r3,r3,r5
    87ec:	1c47c83a 	sub	r3,r3,r17
    87f0:	3823883a 	mov	r17,r7
    87f4:	003f9b06 	br	8664 <__alt_mem_nios_system_shared_memory+0xfffc8664>
    87f8:	2988b03a 	or	r4,r5,r6
    87fc:	203f5c26 	beq	r4,zero,8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8800:	10bfffc4 	addi	r2,r2,-1
    8804:	1000931e 	bne	r2,zero,8a54 <__subdf3+0x568>
    8808:	898d883a 	add	r6,r17,r6
    880c:	3463803a 	cmpltu	r17,r6,r17
    8810:	1947883a 	add	r3,r3,r5
    8814:	88c7883a 	add	r3,r17,r3
    8818:	3023883a 	mov	r17,r6
    881c:	003fd306 	br	876c <__alt_mem_nios_system_shared_memory+0xfffc876c>
    8820:	1000541e 	bne	r2,zero,8974 <__subdf3+0x488>
    8824:	80800044 	addi	r2,r16,1
    8828:	1081ffcc 	andi	r2,r2,2047
    882c:	01000044 	movi	r4,1
    8830:	2080a20e 	bge	r4,r2,8abc <__subdf3+0x5d0>
    8834:	8989c83a 	sub	r4,r17,r6
    8838:	8905803a 	cmpltu	r2,r17,r4
    883c:	1967c83a 	sub	r19,r3,r5
    8840:	98a7c83a 	sub	r19,r19,r2
    8844:	9880202c 	andhi	r2,r19,128
    8848:	10006326 	beq	r2,zero,89d8 <__subdf3+0x4ec>
    884c:	3463c83a 	sub	r17,r6,r17
    8850:	28c7c83a 	sub	r3,r5,r3
    8854:	344d803a 	cmpltu	r6,r6,r17
    8858:	19a7c83a 	sub	r19,r3,r6
    885c:	3825883a 	mov	r18,r7
    8860:	983f861e 	bne	r19,zero,867c <__alt_mem_nios_system_shared_memory+0xfffc867c>
    8864:	8809883a 	mov	r4,r17
    8868:	000917c0 	call	917c <__clzsi2>
    886c:	10800804 	addi	r2,r2,32
    8870:	113ffe04 	addi	r4,r2,-8
    8874:	00c007c4 	movi	r3,31
    8878:	193f850e 	bge	r3,r4,8690 <__alt_mem_nios_system_shared_memory+0xfffc8690>
    887c:	10bff604 	addi	r2,r2,-40
    8880:	8884983a 	sll	r2,r17,r2
    8884:	0023883a 	mov	r17,zero
    8888:	243f880e 	bge	r4,r16,86ac <__alt_mem_nios_system_shared_memory+0xfffc86ac>
    888c:	00ffe034 	movhi	r3,65408
    8890:	18ffffc4 	addi	r3,r3,-1
    8894:	8121c83a 	sub	r16,r16,r4
    8898:	10c6703a 	and	r3,r2,r3
    889c:	003f3406 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    88a0:	9100004c 	andi	r4,r18,1
    88a4:	000b883a 	mov	r5,zero
    88a8:	0005883a 	mov	r2,zero
    88ac:	003f4806 	br	85d0 <__alt_mem_nios_system_shared_memory+0xfffc85d0>
    88b0:	298cb03a 	or	r6,r5,r6
    88b4:	300cc03a 	cmpne	r6,r6,zero
    88b8:	0005883a 	mov	r2,zero
    88bc:	003f6406 	br	8650 <__alt_mem_nios_system_shared_memory+0xfffc8650>
    88c0:	10009a1e 	bne	r2,zero,8b2c <__subdf3+0x640>
    88c4:	82400044 	addi	r9,r16,1
    88c8:	4881ffcc 	andi	r2,r9,2047
    88cc:	02800044 	movi	r10,1
    88d0:	5080670e 	bge	r10,r2,8a70 <__subdf3+0x584>
    88d4:	0081ffc4 	movi	r2,2047
    88d8:	4880af26 	beq	r9,r2,8b98 <__subdf3+0x6ac>
    88dc:	898d883a 	add	r6,r17,r6
    88e0:	1945883a 	add	r2,r3,r5
    88e4:	3447803a 	cmpltu	r3,r6,r17
    88e8:	1887883a 	add	r3,r3,r2
    88ec:	182297fa 	slli	r17,r3,31
    88f0:	300cd07a 	srli	r6,r6,1
    88f4:	1806d07a 	srli	r3,r3,1
    88f8:	4821883a 	mov	r16,r9
    88fc:	89a2b03a 	or	r17,r17,r6
    8900:	003f1b06 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8904:	0101ffc4 	movi	r4,2047
    8908:	813f441e 	bne	r16,r4,861c <__alt_mem_nios_system_shared_memory+0xfffc861c>
    890c:	003f1806 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8910:	843ff844 	addi	r16,r16,-31
    8914:	01400804 	movi	r5,32
    8918:	1408d83a 	srl	r4,r2,r16
    891c:	19405026 	beq	r3,r5,8a60 <__subdf3+0x574>
    8920:	01401004 	movi	r5,64
    8924:	28c7c83a 	sub	r3,r5,r3
    8928:	10c4983a 	sll	r2,r2,r3
    892c:	88a2b03a 	or	r17,r17,r2
    8930:	8822c03a 	cmpne	r17,r17,zero
    8934:	2462b03a 	or	r17,r4,r17
    8938:	0007883a 	mov	r3,zero
    893c:	0021883a 	mov	r16,zero
    8940:	003f6d06 	br	86f8 <__alt_mem_nios_system_shared_memory+0xfffc86f8>
    8944:	11fff804 	addi	r7,r2,-32
    8948:	01000804 	movi	r4,32
    894c:	29ced83a 	srl	r7,r5,r7
    8950:	11004526 	beq	r2,r4,8a68 <__subdf3+0x57c>
    8954:	01001004 	movi	r4,64
    8958:	2089c83a 	sub	r4,r4,r2
    895c:	2904983a 	sll	r2,r5,r4
    8960:	118cb03a 	or	r6,r2,r6
    8964:	300cc03a 	cmpne	r6,r6,zero
    8968:	398cb03a 	or	r6,r7,r6
    896c:	0005883a 	mov	r2,zero
    8970:	003f3706 	br	8650 <__alt_mem_nios_system_shared_memory+0xfffc8650>
    8974:	80002a26 	beq	r16,zero,8a20 <__subdf3+0x534>
    8978:	0101ffc4 	movi	r4,2047
    897c:	49006626 	beq	r9,r4,8b18 <__subdf3+0x62c>
    8980:	0085c83a 	sub	r2,zero,r2
    8984:	18c02034 	orhi	r3,r3,128
    8988:	01000e04 	movi	r4,56
    898c:	20807e16 	blt	r4,r2,8b88 <__subdf3+0x69c>
    8990:	010007c4 	movi	r4,31
    8994:	2080e716 	blt	r4,r2,8d34 <__subdf3+0x848>
    8998:	01000804 	movi	r4,32
    899c:	2089c83a 	sub	r4,r4,r2
    89a0:	1914983a 	sll	r10,r3,r4
    89a4:	8890d83a 	srl	r8,r17,r2
    89a8:	8908983a 	sll	r4,r17,r4
    89ac:	1884d83a 	srl	r2,r3,r2
    89b0:	5222b03a 	or	r17,r10,r8
    89b4:	2006c03a 	cmpne	r3,r4,zero
    89b8:	88e2b03a 	or	r17,r17,r3
    89bc:	3463c83a 	sub	r17,r6,r17
    89c0:	2885c83a 	sub	r2,r5,r2
    89c4:	344d803a 	cmpltu	r6,r6,r17
    89c8:	1187c83a 	sub	r3,r2,r6
    89cc:	4821883a 	mov	r16,r9
    89d0:	3825883a 	mov	r18,r7
    89d4:	003f2306 	br	8664 <__alt_mem_nios_system_shared_memory+0xfffc8664>
    89d8:	24d0b03a 	or	r8,r4,r19
    89dc:	40001b1e 	bne	r8,zero,8a4c <__subdf3+0x560>
    89e0:	0005883a 	mov	r2,zero
    89e4:	0009883a 	mov	r4,zero
    89e8:	0021883a 	mov	r16,zero
    89ec:	003f4906 	br	8714 <__alt_mem_nios_system_shared_memory+0xfffc8714>
    89f0:	010007c4 	movi	r4,31
    89f4:	20803a16 	blt	r4,r2,8ae0 <__subdf3+0x5f4>
    89f8:	01000804 	movi	r4,32
    89fc:	2089c83a 	sub	r4,r4,r2
    8a00:	2912983a 	sll	r9,r5,r4
    8a04:	3090d83a 	srl	r8,r6,r2
    8a08:	3108983a 	sll	r4,r6,r4
    8a0c:	2884d83a 	srl	r2,r5,r2
    8a10:	4a12b03a 	or	r9,r9,r8
    8a14:	2008c03a 	cmpne	r4,r4,zero
    8a18:	4912b03a 	or	r9,r9,r4
    8a1c:	003f4e06 	br	8758 <__alt_mem_nios_system_shared_memory+0xfffc8758>
    8a20:	1c48b03a 	or	r4,r3,r17
    8a24:	20003c26 	beq	r4,zero,8b18 <__subdf3+0x62c>
    8a28:	0084303a 	nor	r2,zero,r2
    8a2c:	1000381e 	bne	r2,zero,8b10 <__subdf3+0x624>
    8a30:	3463c83a 	sub	r17,r6,r17
    8a34:	28c5c83a 	sub	r2,r5,r3
    8a38:	344d803a 	cmpltu	r6,r6,r17
    8a3c:	1187c83a 	sub	r3,r2,r6
    8a40:	4821883a 	mov	r16,r9
    8a44:	3825883a 	mov	r18,r7
    8a48:	003f0606 	br	8664 <__alt_mem_nios_system_shared_memory+0xfffc8664>
    8a4c:	2023883a 	mov	r17,r4
    8a50:	003f0906 	br	8678 <__alt_mem_nios_system_shared_memory+0xfffc8678>
    8a54:	0101ffc4 	movi	r4,2047
    8a58:	813f3a1e 	bne	r16,r4,8744 <__alt_mem_nios_system_shared_memory+0xfffc8744>
    8a5c:	003ec406 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8a60:	0005883a 	mov	r2,zero
    8a64:	003fb106 	br	892c <__alt_mem_nios_system_shared_memory+0xfffc892c>
    8a68:	0005883a 	mov	r2,zero
    8a6c:	003fbc06 	br	8960 <__alt_mem_nios_system_shared_memory+0xfffc8960>
    8a70:	1c44b03a 	or	r2,r3,r17
    8a74:	80008e1e 	bne	r16,zero,8cb0 <__subdf3+0x7c4>
    8a78:	1000c826 	beq	r2,zero,8d9c <__subdf3+0x8b0>
    8a7c:	2984b03a 	or	r2,r5,r6
    8a80:	103ebb26 	beq	r2,zero,8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8a84:	8989883a 	add	r4,r17,r6
    8a88:	1945883a 	add	r2,r3,r5
    8a8c:	2447803a 	cmpltu	r3,r4,r17
    8a90:	1887883a 	add	r3,r3,r2
    8a94:	1880202c 	andhi	r2,r3,128
    8a98:	2023883a 	mov	r17,r4
    8a9c:	103f1626 	beq	r2,zero,86f8 <__alt_mem_nios_system_shared_memory+0xfffc86f8>
    8aa0:	00bfe034 	movhi	r2,65408
    8aa4:	10bfffc4 	addi	r2,r2,-1
    8aa8:	5021883a 	mov	r16,r10
    8aac:	1886703a 	and	r3,r3,r2
    8ab0:	003eaf06 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8ab4:	3825883a 	mov	r18,r7
    8ab8:	003f0f06 	br	86f8 <__alt_mem_nios_system_shared_memory+0xfffc86f8>
    8abc:	1c44b03a 	or	r2,r3,r17
    8ac0:	8000251e 	bne	r16,zero,8b58 <__subdf3+0x66c>
    8ac4:	1000661e 	bne	r2,zero,8c60 <__subdf3+0x774>
    8ac8:	2990b03a 	or	r8,r5,r6
    8acc:	40009626 	beq	r8,zero,8d28 <__subdf3+0x83c>
    8ad0:	2807883a 	mov	r3,r5
    8ad4:	3023883a 	mov	r17,r6
    8ad8:	3825883a 	mov	r18,r7
    8adc:	003ea406 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8ae0:	127ff804 	addi	r9,r2,-32
    8ae4:	01000804 	movi	r4,32
    8ae8:	2a52d83a 	srl	r9,r5,r9
    8aec:	11008c26 	beq	r2,r4,8d20 <__subdf3+0x834>
    8af0:	01001004 	movi	r4,64
    8af4:	2085c83a 	sub	r2,r4,r2
    8af8:	2884983a 	sll	r2,r5,r2
    8afc:	118cb03a 	or	r6,r2,r6
    8b00:	300cc03a 	cmpne	r6,r6,zero
    8b04:	4992b03a 	or	r9,r9,r6
    8b08:	0005883a 	mov	r2,zero
    8b0c:	003f1206 	br	8758 <__alt_mem_nios_system_shared_memory+0xfffc8758>
    8b10:	0101ffc4 	movi	r4,2047
    8b14:	493f9c1e 	bne	r9,r4,8988 <__alt_mem_nios_system_shared_memory+0xfffc8988>
    8b18:	2807883a 	mov	r3,r5
    8b1c:	3023883a 	mov	r17,r6
    8b20:	4821883a 	mov	r16,r9
    8b24:	3825883a 	mov	r18,r7
    8b28:	003e9106 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8b2c:	80001f1e 	bne	r16,zero,8bac <__subdf3+0x6c0>
    8b30:	1c48b03a 	or	r4,r3,r17
    8b34:	20005a26 	beq	r4,zero,8ca0 <__subdf3+0x7b4>
    8b38:	0084303a 	nor	r2,zero,r2
    8b3c:	1000561e 	bne	r2,zero,8c98 <__subdf3+0x7ac>
    8b40:	89a3883a 	add	r17,r17,r6
    8b44:	1945883a 	add	r2,r3,r5
    8b48:	898d803a 	cmpltu	r6,r17,r6
    8b4c:	3087883a 	add	r3,r6,r2
    8b50:	4821883a 	mov	r16,r9
    8b54:	003f0506 	br	876c <__alt_mem_nios_system_shared_memory+0xfffc876c>
    8b58:	10002b1e 	bne	r2,zero,8c08 <__subdf3+0x71c>
    8b5c:	2984b03a 	or	r2,r5,r6
    8b60:	10008026 	beq	r2,zero,8d64 <__subdf3+0x878>
    8b64:	2807883a 	mov	r3,r5
    8b68:	3023883a 	mov	r17,r6
    8b6c:	3825883a 	mov	r18,r7
    8b70:	0401ffc4 	movi	r16,2047
    8b74:	003e7e06 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8b78:	3809883a 	mov	r4,r7
    8b7c:	0011883a 	mov	r8,zero
    8b80:	0005883a 	mov	r2,zero
    8b84:	003ee306 	br	8714 <__alt_mem_nios_system_shared_memory+0xfffc8714>
    8b88:	1c62b03a 	or	r17,r3,r17
    8b8c:	8822c03a 	cmpne	r17,r17,zero
    8b90:	0005883a 	mov	r2,zero
    8b94:	003f8906 	br	89bc <__alt_mem_nios_system_shared_memory+0xfffc89bc>
    8b98:	3809883a 	mov	r4,r7
    8b9c:	4821883a 	mov	r16,r9
    8ba0:	0011883a 	mov	r8,zero
    8ba4:	0005883a 	mov	r2,zero
    8ba8:	003eda06 	br	8714 <__alt_mem_nios_system_shared_memory+0xfffc8714>
    8bac:	0101ffc4 	movi	r4,2047
    8bb0:	49003b26 	beq	r9,r4,8ca0 <__subdf3+0x7b4>
    8bb4:	0085c83a 	sub	r2,zero,r2
    8bb8:	18c02034 	orhi	r3,r3,128
    8bbc:	01000e04 	movi	r4,56
    8bc0:	20806e16 	blt	r4,r2,8d7c <__subdf3+0x890>
    8bc4:	010007c4 	movi	r4,31
    8bc8:	20807716 	blt	r4,r2,8da8 <__subdf3+0x8bc>
    8bcc:	01000804 	movi	r4,32
    8bd0:	2089c83a 	sub	r4,r4,r2
    8bd4:	1914983a 	sll	r10,r3,r4
    8bd8:	8890d83a 	srl	r8,r17,r2
    8bdc:	8908983a 	sll	r4,r17,r4
    8be0:	1884d83a 	srl	r2,r3,r2
    8be4:	5222b03a 	or	r17,r10,r8
    8be8:	2006c03a 	cmpne	r3,r4,zero
    8bec:	88e2b03a 	or	r17,r17,r3
    8bf0:	89a3883a 	add	r17,r17,r6
    8bf4:	1145883a 	add	r2,r2,r5
    8bf8:	898d803a 	cmpltu	r6,r17,r6
    8bfc:	3087883a 	add	r3,r6,r2
    8c00:	4821883a 	mov	r16,r9
    8c04:	003ed906 	br	876c <__alt_mem_nios_system_shared_memory+0xfffc876c>
    8c08:	2984b03a 	or	r2,r5,r6
    8c0c:	10004226 	beq	r2,zero,8d18 <__subdf3+0x82c>
    8c10:	1808d0fa 	srli	r4,r3,3
    8c14:	8822d0fa 	srli	r17,r17,3
    8c18:	1806977a 	slli	r3,r3,29
    8c1c:	2080022c 	andhi	r2,r4,8
    8c20:	1c62b03a 	or	r17,r3,r17
    8c24:	10000826 	beq	r2,zero,8c48 <__subdf3+0x75c>
    8c28:	2812d0fa 	srli	r9,r5,3
    8c2c:	4880022c 	andhi	r2,r9,8
    8c30:	1000051e 	bne	r2,zero,8c48 <__subdf3+0x75c>
    8c34:	300cd0fa 	srli	r6,r6,3
    8c38:	2804977a 	slli	r2,r5,29
    8c3c:	4809883a 	mov	r4,r9
    8c40:	3825883a 	mov	r18,r7
    8c44:	11a2b03a 	or	r17,r2,r6
    8c48:	8806d77a 	srli	r3,r17,29
    8c4c:	200890fa 	slli	r4,r4,3
    8c50:	882290fa 	slli	r17,r17,3
    8c54:	0401ffc4 	movi	r16,2047
    8c58:	1906b03a 	or	r3,r3,r4
    8c5c:	003e4406 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8c60:	2984b03a 	or	r2,r5,r6
    8c64:	103e4226 	beq	r2,zero,8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8c68:	8989c83a 	sub	r4,r17,r6
    8c6c:	8911803a 	cmpltu	r8,r17,r4
    8c70:	1945c83a 	sub	r2,r3,r5
    8c74:	1205c83a 	sub	r2,r2,r8
    8c78:	1200202c 	andhi	r8,r2,128
    8c7c:	403e9a26 	beq	r8,zero,86e8 <__alt_mem_nios_system_shared_memory+0xfffc86e8>
    8c80:	3463c83a 	sub	r17,r6,r17
    8c84:	28c5c83a 	sub	r2,r5,r3
    8c88:	344d803a 	cmpltu	r6,r6,r17
    8c8c:	1187c83a 	sub	r3,r2,r6
    8c90:	3825883a 	mov	r18,r7
    8c94:	003e3606 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8c98:	0101ffc4 	movi	r4,2047
    8c9c:	493fc71e 	bne	r9,r4,8bbc <__alt_mem_nios_system_shared_memory+0xfffc8bbc>
    8ca0:	2807883a 	mov	r3,r5
    8ca4:	3023883a 	mov	r17,r6
    8ca8:	4821883a 	mov	r16,r9
    8cac:	003e3006 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8cb0:	10003626 	beq	r2,zero,8d8c <__subdf3+0x8a0>
    8cb4:	2984b03a 	or	r2,r5,r6
    8cb8:	10001726 	beq	r2,zero,8d18 <__subdf3+0x82c>
    8cbc:	1808d0fa 	srli	r4,r3,3
    8cc0:	8822d0fa 	srli	r17,r17,3
    8cc4:	1806977a 	slli	r3,r3,29
    8cc8:	2080022c 	andhi	r2,r4,8
    8ccc:	1c62b03a 	or	r17,r3,r17
    8cd0:	10000726 	beq	r2,zero,8cf0 <__subdf3+0x804>
    8cd4:	2812d0fa 	srli	r9,r5,3
    8cd8:	4880022c 	andhi	r2,r9,8
    8cdc:	1000041e 	bne	r2,zero,8cf0 <__subdf3+0x804>
    8ce0:	300cd0fa 	srli	r6,r6,3
    8ce4:	2804977a 	slli	r2,r5,29
    8ce8:	4809883a 	mov	r4,r9
    8cec:	11a2b03a 	or	r17,r2,r6
    8cf0:	8806d77a 	srli	r3,r17,29
    8cf4:	200890fa 	slli	r4,r4,3
    8cf8:	882290fa 	slli	r17,r17,3
    8cfc:	3825883a 	mov	r18,r7
    8d00:	1906b03a 	or	r3,r3,r4
    8d04:	0401ffc4 	movi	r16,2047
    8d08:	003e1906 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8d0c:	000b883a 	mov	r5,zero
    8d10:	0005883a 	mov	r2,zero
    8d14:	003e2e06 	br	85d0 <__alt_mem_nios_system_shared_memory+0xfffc85d0>
    8d18:	0401ffc4 	movi	r16,2047
    8d1c:	003e1406 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8d20:	0005883a 	mov	r2,zero
    8d24:	003f7506 	br	8afc <__alt_mem_nios_system_shared_memory+0xfffc8afc>
    8d28:	0005883a 	mov	r2,zero
    8d2c:	0009883a 	mov	r4,zero
    8d30:	003e7806 	br	8714 <__alt_mem_nios_system_shared_memory+0xfffc8714>
    8d34:	123ff804 	addi	r8,r2,-32
    8d38:	01000804 	movi	r4,32
    8d3c:	1a10d83a 	srl	r8,r3,r8
    8d40:	11002526 	beq	r2,r4,8dd8 <__subdf3+0x8ec>
    8d44:	01001004 	movi	r4,64
    8d48:	2085c83a 	sub	r2,r4,r2
    8d4c:	1884983a 	sll	r2,r3,r2
    8d50:	1444b03a 	or	r2,r2,r17
    8d54:	1004c03a 	cmpne	r2,r2,zero
    8d58:	40a2b03a 	or	r17,r8,r2
    8d5c:	0005883a 	mov	r2,zero
    8d60:	003f1606 	br	89bc <__alt_mem_nios_system_shared_memory+0xfffc89bc>
    8d64:	02000434 	movhi	r8,16
    8d68:	0009883a 	mov	r4,zero
    8d6c:	423fffc4 	addi	r8,r8,-1
    8d70:	00bfffc4 	movi	r2,-1
    8d74:	0401ffc4 	movi	r16,2047
    8d78:	003e6606 	br	8714 <__alt_mem_nios_system_shared_memory+0xfffc8714>
    8d7c:	1c62b03a 	or	r17,r3,r17
    8d80:	8822c03a 	cmpne	r17,r17,zero
    8d84:	0005883a 	mov	r2,zero
    8d88:	003f9906 	br	8bf0 <__alt_mem_nios_system_shared_memory+0xfffc8bf0>
    8d8c:	2807883a 	mov	r3,r5
    8d90:	3023883a 	mov	r17,r6
    8d94:	0401ffc4 	movi	r16,2047
    8d98:	003df506 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8d9c:	2807883a 	mov	r3,r5
    8da0:	3023883a 	mov	r17,r6
    8da4:	003df206 	br	8570 <__alt_mem_nios_system_shared_memory+0xfffc8570>
    8da8:	123ff804 	addi	r8,r2,-32
    8dac:	01000804 	movi	r4,32
    8db0:	1a10d83a 	srl	r8,r3,r8
    8db4:	11000a26 	beq	r2,r4,8de0 <__subdf3+0x8f4>
    8db8:	01001004 	movi	r4,64
    8dbc:	2085c83a 	sub	r2,r4,r2
    8dc0:	1884983a 	sll	r2,r3,r2
    8dc4:	1444b03a 	or	r2,r2,r17
    8dc8:	1004c03a 	cmpne	r2,r2,zero
    8dcc:	40a2b03a 	or	r17,r8,r2
    8dd0:	0005883a 	mov	r2,zero
    8dd4:	003f8606 	br	8bf0 <__alt_mem_nios_system_shared_memory+0xfffc8bf0>
    8dd8:	0005883a 	mov	r2,zero
    8ddc:	003fdc06 	br	8d50 <__alt_mem_nios_system_shared_memory+0xfffc8d50>
    8de0:	0005883a 	mov	r2,zero
    8de4:	003ff706 	br	8dc4 <__alt_mem_nios_system_shared_memory+0xfffc8dc4>

00008de8 <__floatsidf>:
    8de8:	defffd04 	addi	sp,sp,-12
    8dec:	dfc00215 	stw	ra,8(sp)
    8df0:	dc400115 	stw	r17,4(sp)
    8df4:	dc000015 	stw	r16,0(sp)
    8df8:	20002b26 	beq	r4,zero,8ea8 <__floatsidf+0xc0>
    8dfc:	2023883a 	mov	r17,r4
    8e00:	2020d7fa 	srli	r16,r4,31
    8e04:	20002d16 	blt	r4,zero,8ebc <__floatsidf+0xd4>
    8e08:	8809883a 	mov	r4,r17
    8e0c:	000917c0 	call	917c <__clzsi2>
    8e10:	01410784 	movi	r5,1054
    8e14:	288bc83a 	sub	r5,r5,r2
    8e18:	01010cc4 	movi	r4,1075
    8e1c:	2149c83a 	sub	r4,r4,r5
    8e20:	00c007c4 	movi	r3,31
    8e24:	1900160e 	bge	r3,r4,8e80 <__floatsidf+0x98>
    8e28:	00c104c4 	movi	r3,1043
    8e2c:	1947c83a 	sub	r3,r3,r5
    8e30:	88c6983a 	sll	r3,r17,r3
    8e34:	00800434 	movhi	r2,16
    8e38:	10bfffc4 	addi	r2,r2,-1
    8e3c:	1886703a 	and	r3,r3,r2
    8e40:	2941ffcc 	andi	r5,r5,2047
    8e44:	800d883a 	mov	r6,r16
    8e48:	0005883a 	mov	r2,zero
    8e4c:	280a953a 	slli	r5,r5,20
    8e50:	31803fcc 	andi	r6,r6,255
    8e54:	01000434 	movhi	r4,16
    8e58:	300c97fa 	slli	r6,r6,31
    8e5c:	213fffc4 	addi	r4,r4,-1
    8e60:	1906703a 	and	r3,r3,r4
    8e64:	1946b03a 	or	r3,r3,r5
    8e68:	1986b03a 	or	r3,r3,r6
    8e6c:	dfc00217 	ldw	ra,8(sp)
    8e70:	dc400117 	ldw	r17,4(sp)
    8e74:	dc000017 	ldw	r16,0(sp)
    8e78:	dec00304 	addi	sp,sp,12
    8e7c:	f800283a 	ret
    8e80:	00c002c4 	movi	r3,11
    8e84:	1887c83a 	sub	r3,r3,r2
    8e88:	88c6d83a 	srl	r3,r17,r3
    8e8c:	8904983a 	sll	r2,r17,r4
    8e90:	01000434 	movhi	r4,16
    8e94:	213fffc4 	addi	r4,r4,-1
    8e98:	2941ffcc 	andi	r5,r5,2047
    8e9c:	1906703a 	and	r3,r3,r4
    8ea0:	800d883a 	mov	r6,r16
    8ea4:	003fe906 	br	8e4c <__alt_mem_nios_system_shared_memory+0xfffc8e4c>
    8ea8:	000d883a 	mov	r6,zero
    8eac:	000b883a 	mov	r5,zero
    8eb0:	0007883a 	mov	r3,zero
    8eb4:	0005883a 	mov	r2,zero
    8eb8:	003fe406 	br	8e4c <__alt_mem_nios_system_shared_memory+0xfffc8e4c>
    8ebc:	0123c83a 	sub	r17,zero,r4
    8ec0:	003fd106 	br	8e08 <__alt_mem_nios_system_shared_memory+0xfffc8e08>

00008ec4 <__extendsfdf2>:
    8ec4:	200ad5fa 	srli	r5,r4,23
    8ec8:	defffd04 	addi	sp,sp,-12
    8ecc:	dc400115 	stw	r17,4(sp)
    8ed0:	29403fcc 	andi	r5,r5,255
    8ed4:	29800044 	addi	r6,r5,1
    8ed8:	04402034 	movhi	r17,128
    8edc:	dc000015 	stw	r16,0(sp)
    8ee0:	8c7fffc4 	addi	r17,r17,-1
    8ee4:	dfc00215 	stw	ra,8(sp)
    8ee8:	31803fcc 	andi	r6,r6,255
    8eec:	00800044 	movi	r2,1
    8ef0:	8922703a 	and	r17,r17,r4
    8ef4:	2020d7fa 	srli	r16,r4,31
    8ef8:	1180110e 	bge	r2,r6,8f40 <__extendsfdf2+0x7c>
    8efc:	880cd0fa 	srli	r6,r17,3
    8f00:	8822977a 	slli	r17,r17,29
    8f04:	2940e004 	addi	r5,r5,896
    8f08:	2941ffcc 	andi	r5,r5,2047
    8f0c:	2804953a 	slli	r2,r5,20
    8f10:	01400434 	movhi	r5,16
    8f14:	800697fa 	slli	r3,r16,31
    8f18:	297fffc4 	addi	r5,r5,-1
    8f1c:	314a703a 	and	r5,r6,r5
    8f20:	288ab03a 	or	r5,r5,r2
    8f24:	28c6b03a 	or	r3,r5,r3
    8f28:	8805883a 	mov	r2,r17
    8f2c:	dfc00217 	ldw	ra,8(sp)
    8f30:	dc400117 	ldw	r17,4(sp)
    8f34:	dc000017 	ldw	r16,0(sp)
    8f38:	dec00304 	addi	sp,sp,12
    8f3c:	f800283a 	ret
    8f40:	2800111e 	bne	r5,zero,8f88 <__extendsfdf2+0xc4>
    8f44:	88001c26 	beq	r17,zero,8fb8 <__extendsfdf2+0xf4>
    8f48:	8809883a 	mov	r4,r17
    8f4c:	000917c0 	call	917c <__clzsi2>
    8f50:	00c00284 	movi	r3,10
    8f54:	18801b16 	blt	r3,r2,8fc4 <__extendsfdf2+0x100>
    8f58:	018002c4 	movi	r6,11
    8f5c:	308dc83a 	sub	r6,r6,r2
    8f60:	11000544 	addi	r4,r2,21
    8f64:	8986d83a 	srl	r3,r17,r6
    8f68:	8922983a 	sll	r17,r17,r4
    8f6c:	0180e244 	movi	r6,905
    8f70:	01400434 	movhi	r5,16
    8f74:	3085c83a 	sub	r2,r6,r2
    8f78:	297fffc4 	addi	r5,r5,-1
    8f7c:	194c703a 	and	r6,r3,r5
    8f80:	1141ffcc 	andi	r5,r2,2047
    8f84:	003fe006 	br	8f08 <__alt_mem_nios_system_shared_memory+0xfffc8f08>
    8f88:	88000826 	beq	r17,zero,8fac <__extendsfdf2+0xe8>
    8f8c:	880cd0fa 	srli	r6,r17,3
    8f90:	00800434 	movhi	r2,16
    8f94:	10bfffc4 	addi	r2,r2,-1
    8f98:	31800234 	orhi	r6,r6,8
    8f9c:	8822977a 	slli	r17,r17,29
    8fa0:	308c703a 	and	r6,r6,r2
    8fa4:	0141ffc4 	movi	r5,2047
    8fa8:	003fd706 	br	8f08 <__alt_mem_nios_system_shared_memory+0xfffc8f08>
    8fac:	0141ffc4 	movi	r5,2047
    8fb0:	000d883a 	mov	r6,zero
    8fb4:	003fd406 	br	8f08 <__alt_mem_nios_system_shared_memory+0xfffc8f08>
    8fb8:	000b883a 	mov	r5,zero
    8fbc:	000d883a 	mov	r6,zero
    8fc0:	003fd106 	br	8f08 <__alt_mem_nios_system_shared_memory+0xfffc8f08>
    8fc4:	11bffd44 	addi	r6,r2,-11
    8fc8:	8986983a 	sll	r3,r17,r6
    8fcc:	0023883a 	mov	r17,zero
    8fd0:	003fe606 	br	8f6c <__alt_mem_nios_system_shared_memory+0xfffc8f6c>

00008fd4 <__truncdfsf2>:
    8fd4:	2810d53a 	srli	r8,r5,20
    8fd8:	01c00434 	movhi	r7,16
    8fdc:	39ffffc4 	addi	r7,r7,-1
    8fe0:	29ce703a 	and	r7,r5,r7
    8fe4:	4201ffcc 	andi	r8,r8,2047
    8fe8:	380e90fa 	slli	r7,r7,3
    8fec:	200cd77a 	srli	r6,r4,29
    8ff0:	42400044 	addi	r9,r8,1
    8ff4:	4a41ffcc 	andi	r9,r9,2047
    8ff8:	00c00044 	movi	r3,1
    8ffc:	280ad7fa 	srli	r5,r5,31
    9000:	31ceb03a 	or	r7,r6,r7
    9004:	200490fa 	slli	r2,r4,3
    9008:	1a40230e 	bge	r3,r9,9098 <__truncdfsf2+0xc4>
    900c:	40ff2004 	addi	r3,r8,-896
    9010:	01803f84 	movi	r6,254
    9014:	30c01516 	blt	r6,r3,906c <__truncdfsf2+0x98>
    9018:	00c0380e 	bge	zero,r3,90fc <__truncdfsf2+0x128>
    901c:	200c91ba 	slli	r6,r4,6
    9020:	380e90fa 	slli	r7,r7,3
    9024:	1004d77a 	srli	r2,r2,29
    9028:	300cc03a 	cmpne	r6,r6,zero
    902c:	31ccb03a 	or	r6,r6,r7
    9030:	308cb03a 	or	r6,r6,r2
    9034:	308001cc 	andi	r2,r6,7
    9038:	10000426 	beq	r2,zero,904c <__truncdfsf2+0x78>
    903c:	308003cc 	andi	r2,r6,15
    9040:	01000104 	movi	r4,4
    9044:	11000126 	beq	r2,r4,904c <__truncdfsf2+0x78>
    9048:	31800104 	addi	r6,r6,4
    904c:	3081002c 	andhi	r2,r6,1024
    9050:	10001626 	beq	r2,zero,90ac <__truncdfsf2+0xd8>
    9054:	18c00044 	addi	r3,r3,1
    9058:	00803fc4 	movi	r2,255
    905c:	18800326 	beq	r3,r2,906c <__truncdfsf2+0x98>
    9060:	300c91ba 	slli	r6,r6,6
    9064:	300cd27a 	srli	r6,r6,9
    9068:	00000206 	br	9074 <__truncdfsf2+0xa0>
    906c:	00ffffc4 	movi	r3,-1
    9070:	000d883a 	mov	r6,zero
    9074:	18c03fcc 	andi	r3,r3,255
    9078:	180895fa 	slli	r4,r3,23
    907c:	00c02034 	movhi	r3,128
    9080:	280a97fa 	slli	r5,r5,31
    9084:	18ffffc4 	addi	r3,r3,-1
    9088:	30c6703a 	and	r3,r6,r3
    908c:	1906b03a 	or	r3,r3,r4
    9090:	1944b03a 	or	r2,r3,r5
    9094:	f800283a 	ret
    9098:	40000b1e 	bne	r8,zero,90c8 <__truncdfsf2+0xf4>
    909c:	388cb03a 	or	r6,r7,r2
    90a0:	0007883a 	mov	r3,zero
    90a4:	30000426 	beq	r6,zero,90b8 <__truncdfsf2+0xe4>
    90a8:	01800144 	movi	r6,5
    90ac:	00803fc4 	movi	r2,255
    90b0:	300cd0fa 	srli	r6,r6,3
    90b4:	18800a26 	beq	r3,r2,90e0 <__truncdfsf2+0x10c>
    90b8:	00802034 	movhi	r2,128
    90bc:	10bfffc4 	addi	r2,r2,-1
    90c0:	308c703a 	and	r6,r6,r2
    90c4:	003feb06 	br	9074 <__alt_mem_nios_system_shared_memory+0xfffc9074>
    90c8:	3888b03a 	or	r4,r7,r2
    90cc:	203fe726 	beq	r4,zero,906c <__alt_mem_nios_system_shared_memory+0xfffc906c>
    90d0:	380c90fa 	slli	r6,r7,3
    90d4:	00c03fc4 	movi	r3,255
    90d8:	31808034 	orhi	r6,r6,512
    90dc:	003fd506 	br	9034 <__alt_mem_nios_system_shared_memory+0xfffc9034>
    90e0:	303fe226 	beq	r6,zero,906c <__alt_mem_nios_system_shared_memory+0xfffc906c>
    90e4:	00802034 	movhi	r2,128
    90e8:	31801034 	orhi	r6,r6,64
    90ec:	10bfffc4 	addi	r2,r2,-1
    90f0:	00ffffc4 	movi	r3,-1
    90f4:	308c703a 	and	r6,r6,r2
    90f8:	003fde06 	br	9074 <__alt_mem_nios_system_shared_memory+0xfffc9074>
    90fc:	013ffa44 	movi	r4,-23
    9100:	19000e16 	blt	r3,r4,913c <__truncdfsf2+0x168>
    9104:	01000784 	movi	r4,30
    9108:	20c9c83a 	sub	r4,r4,r3
    910c:	018007c4 	movi	r6,31
    9110:	39c02034 	orhi	r7,r7,128
    9114:	31000b16 	blt	r6,r4,9144 <__truncdfsf2+0x170>
    9118:	423f2084 	addi	r8,r8,-894
    911c:	120c983a 	sll	r6,r2,r8
    9120:	3a0e983a 	sll	r7,r7,r8
    9124:	1104d83a 	srl	r2,r2,r4
    9128:	300cc03a 	cmpne	r6,r6,zero
    912c:	31ceb03a 	or	r7,r6,r7
    9130:	388cb03a 	or	r6,r7,r2
    9134:	0007883a 	mov	r3,zero
    9138:	003fbe06 	br	9034 <__alt_mem_nios_system_shared_memory+0xfffc9034>
    913c:	0007883a 	mov	r3,zero
    9140:	003fd906 	br	90a8 <__alt_mem_nios_system_shared_memory+0xfffc90a8>
    9144:	01bfff84 	movi	r6,-2
    9148:	30cdc83a 	sub	r6,r6,r3
    914c:	00c00804 	movi	r3,32
    9150:	398cd83a 	srl	r6,r7,r6
    9154:	20c00726 	beq	r4,r3,9174 <__truncdfsf2+0x1a0>
    9158:	423f2884 	addi	r8,r8,-862
    915c:	3a0e983a 	sll	r7,r7,r8
    9160:	3884b03a 	or	r2,r7,r2
    9164:	1004c03a 	cmpne	r2,r2,zero
    9168:	118cb03a 	or	r6,r2,r6
    916c:	0007883a 	mov	r3,zero
    9170:	003fb006 	br	9034 <__alt_mem_nios_system_shared_memory+0xfffc9034>
    9174:	000f883a 	mov	r7,zero
    9178:	003ff906 	br	9160 <__alt_mem_nios_system_shared_memory+0xfffc9160>

0000917c <__clzsi2>:
    917c:	00bfffd4 	movui	r2,65535
    9180:	11000536 	bltu	r2,r4,9198 <__clzsi2+0x1c>
    9184:	00803fc4 	movi	r2,255
    9188:	11000f36 	bltu	r2,r4,91c8 <__clzsi2+0x4c>
    918c:	00800804 	movi	r2,32
    9190:	0007883a 	mov	r3,zero
    9194:	00000506 	br	91ac <__clzsi2+0x30>
    9198:	00804034 	movhi	r2,256
    919c:	10bfffc4 	addi	r2,r2,-1
    91a0:	11000c2e 	bgeu	r2,r4,91d4 <__clzsi2+0x58>
    91a4:	00800204 	movi	r2,8
    91a8:	00c00604 	movi	r3,24
    91ac:	20c8d83a 	srl	r4,r4,r3
    91b0:	00c000b4 	movhi	r3,2
    91b4:	18fa2f04 	addi	r3,r3,-5956
    91b8:	1909883a 	add	r4,r3,r4
    91bc:	20c00003 	ldbu	r3,0(r4)
    91c0:	10c5c83a 	sub	r2,r2,r3
    91c4:	f800283a 	ret
    91c8:	00800604 	movi	r2,24
    91cc:	00c00204 	movi	r3,8
    91d0:	003ff606 	br	91ac <__alt_mem_nios_system_shared_memory+0xfffc91ac>
    91d4:	00800404 	movi	r2,16
    91d8:	1007883a 	mov	r3,r2
    91dc:	003ff306 	br	91ac <__alt_mem_nios_system_shared_memory+0xfffc91ac>

000091e0 <__errno>:
    91e0:	008000b4 	movhi	r2,2
    91e4:	10824204 	addi	r2,r2,2312
    91e8:	10800017 	ldw	r2,0(r2)
    91ec:	f800283a 	ret

000091f0 <__sflush_r>:
    91f0:	2880030b 	ldhu	r2,12(r5)
    91f4:	defffb04 	addi	sp,sp,-20
    91f8:	dcc00315 	stw	r19,12(sp)
    91fc:	dc400115 	stw	r17,4(sp)
    9200:	dfc00415 	stw	ra,16(sp)
    9204:	dc800215 	stw	r18,8(sp)
    9208:	dc000015 	stw	r16,0(sp)
    920c:	10c0020c 	andi	r3,r2,8
    9210:	2823883a 	mov	r17,r5
    9214:	2027883a 	mov	r19,r4
    9218:	1800311e 	bne	r3,zero,92e0 <__sflush_r+0xf0>
    921c:	28c00117 	ldw	r3,4(r5)
    9220:	10820014 	ori	r2,r2,2048
    9224:	2880030d 	sth	r2,12(r5)
    9228:	00c04b0e 	bge	zero,r3,9358 <__sflush_r+0x168>
    922c:	8a000a17 	ldw	r8,40(r17)
    9230:	40002326 	beq	r8,zero,92c0 <__sflush_r+0xd0>
    9234:	9c000017 	ldw	r16,0(r19)
    9238:	10c4000c 	andi	r3,r2,4096
    923c:	98000015 	stw	zero,0(r19)
    9240:	18004826 	beq	r3,zero,9364 <__sflush_r+0x174>
    9244:	89801417 	ldw	r6,80(r17)
    9248:	10c0010c 	andi	r3,r2,4
    924c:	18000626 	beq	r3,zero,9268 <__sflush_r+0x78>
    9250:	88c00117 	ldw	r3,4(r17)
    9254:	88800c17 	ldw	r2,48(r17)
    9258:	30cdc83a 	sub	r6,r6,r3
    925c:	10000226 	beq	r2,zero,9268 <__sflush_r+0x78>
    9260:	88800f17 	ldw	r2,60(r17)
    9264:	308dc83a 	sub	r6,r6,r2
    9268:	89400717 	ldw	r5,28(r17)
    926c:	000f883a 	mov	r7,zero
    9270:	9809883a 	mov	r4,r19
    9274:	403ee83a 	callr	r8
    9278:	00ffffc4 	movi	r3,-1
    927c:	10c04426 	beq	r2,r3,9390 <__sflush_r+0x1a0>
    9280:	88c0030b 	ldhu	r3,12(r17)
    9284:	89000417 	ldw	r4,16(r17)
    9288:	88000115 	stw	zero,4(r17)
    928c:	197dffcc 	andi	r5,r3,63487
    9290:	8940030d 	sth	r5,12(r17)
    9294:	89000015 	stw	r4,0(r17)
    9298:	18c4000c 	andi	r3,r3,4096
    929c:	18002c1e 	bne	r3,zero,9350 <__sflush_r+0x160>
    92a0:	89400c17 	ldw	r5,48(r17)
    92a4:	9c000015 	stw	r16,0(r19)
    92a8:	28000526 	beq	r5,zero,92c0 <__sflush_r+0xd0>
    92ac:	88801004 	addi	r2,r17,64
    92b0:	28800226 	beq	r5,r2,92bc <__sflush_r+0xcc>
    92b4:	9809883a 	mov	r4,r19
    92b8:	0009c8c0 	call	9c8c <_free_r>
    92bc:	88000c15 	stw	zero,48(r17)
    92c0:	0005883a 	mov	r2,zero
    92c4:	dfc00417 	ldw	ra,16(sp)
    92c8:	dcc00317 	ldw	r19,12(sp)
    92cc:	dc800217 	ldw	r18,8(sp)
    92d0:	dc400117 	ldw	r17,4(sp)
    92d4:	dc000017 	ldw	r16,0(sp)
    92d8:	dec00504 	addi	sp,sp,20
    92dc:	f800283a 	ret
    92e0:	2c800417 	ldw	r18,16(r5)
    92e4:	903ff626 	beq	r18,zero,92c0 <__alt_mem_nios_system_shared_memory+0xfffc92c0>
    92e8:	2c000017 	ldw	r16,0(r5)
    92ec:	108000cc 	andi	r2,r2,3
    92f0:	2c800015 	stw	r18,0(r5)
    92f4:	84a1c83a 	sub	r16,r16,r18
    92f8:	1000131e 	bne	r2,zero,9348 <__sflush_r+0x158>
    92fc:	28800517 	ldw	r2,20(r5)
    9300:	88800215 	stw	r2,8(r17)
    9304:	04000316 	blt	zero,r16,9314 <__sflush_r+0x124>
    9308:	003fed06 	br	92c0 <__alt_mem_nios_system_shared_memory+0xfffc92c0>
    930c:	90a5883a 	add	r18,r18,r2
    9310:	043feb0e 	bge	zero,r16,92c0 <__alt_mem_nios_system_shared_memory+0xfffc92c0>
    9314:	88800917 	ldw	r2,36(r17)
    9318:	89400717 	ldw	r5,28(r17)
    931c:	800f883a 	mov	r7,r16
    9320:	900d883a 	mov	r6,r18
    9324:	9809883a 	mov	r4,r19
    9328:	103ee83a 	callr	r2
    932c:	80a1c83a 	sub	r16,r16,r2
    9330:	00bff616 	blt	zero,r2,930c <__alt_mem_nios_system_shared_memory+0xfffc930c>
    9334:	88c0030b 	ldhu	r3,12(r17)
    9338:	00bfffc4 	movi	r2,-1
    933c:	18c01014 	ori	r3,r3,64
    9340:	88c0030d 	sth	r3,12(r17)
    9344:	003fdf06 	br	92c4 <__alt_mem_nios_system_shared_memory+0xfffc92c4>
    9348:	0005883a 	mov	r2,zero
    934c:	003fec06 	br	9300 <__alt_mem_nios_system_shared_memory+0xfffc9300>
    9350:	88801415 	stw	r2,80(r17)
    9354:	003fd206 	br	92a0 <__alt_mem_nios_system_shared_memory+0xfffc92a0>
    9358:	28c00f17 	ldw	r3,60(r5)
    935c:	00ffb316 	blt	zero,r3,922c <__alt_mem_nios_system_shared_memory+0xfffc922c>
    9360:	003fd706 	br	92c0 <__alt_mem_nios_system_shared_memory+0xfffc92c0>
    9364:	89400717 	ldw	r5,28(r17)
    9368:	000d883a 	mov	r6,zero
    936c:	01c00044 	movi	r7,1
    9370:	9809883a 	mov	r4,r19
    9374:	403ee83a 	callr	r8
    9378:	100d883a 	mov	r6,r2
    937c:	00bfffc4 	movi	r2,-1
    9380:	30801426 	beq	r6,r2,93d4 <__sflush_r+0x1e4>
    9384:	8880030b 	ldhu	r2,12(r17)
    9388:	8a000a17 	ldw	r8,40(r17)
    938c:	003fae06 	br	9248 <__alt_mem_nios_system_shared_memory+0xfffc9248>
    9390:	98c00017 	ldw	r3,0(r19)
    9394:	183fba26 	beq	r3,zero,9280 <__alt_mem_nios_system_shared_memory+0xfffc9280>
    9398:	01000744 	movi	r4,29
    939c:	19000626 	beq	r3,r4,93b8 <__sflush_r+0x1c8>
    93a0:	01000584 	movi	r4,22
    93a4:	19000426 	beq	r3,r4,93b8 <__sflush_r+0x1c8>
    93a8:	88c0030b 	ldhu	r3,12(r17)
    93ac:	18c01014 	ori	r3,r3,64
    93b0:	88c0030d 	sth	r3,12(r17)
    93b4:	003fc306 	br	92c4 <__alt_mem_nios_system_shared_memory+0xfffc92c4>
    93b8:	8880030b 	ldhu	r2,12(r17)
    93bc:	88c00417 	ldw	r3,16(r17)
    93c0:	88000115 	stw	zero,4(r17)
    93c4:	10bdffcc 	andi	r2,r2,63487
    93c8:	8880030d 	sth	r2,12(r17)
    93cc:	88c00015 	stw	r3,0(r17)
    93d0:	003fb306 	br	92a0 <__alt_mem_nios_system_shared_memory+0xfffc92a0>
    93d4:	98800017 	ldw	r2,0(r19)
    93d8:	103fea26 	beq	r2,zero,9384 <__alt_mem_nios_system_shared_memory+0xfffc9384>
    93dc:	00c00744 	movi	r3,29
    93e0:	10c00226 	beq	r2,r3,93ec <__sflush_r+0x1fc>
    93e4:	00c00584 	movi	r3,22
    93e8:	10c0031e 	bne	r2,r3,93f8 <__sflush_r+0x208>
    93ec:	9c000015 	stw	r16,0(r19)
    93f0:	0005883a 	mov	r2,zero
    93f4:	003fb306 	br	92c4 <__alt_mem_nios_system_shared_memory+0xfffc92c4>
    93f8:	88c0030b 	ldhu	r3,12(r17)
    93fc:	3005883a 	mov	r2,r6
    9400:	18c01014 	ori	r3,r3,64
    9404:	88c0030d 	sth	r3,12(r17)
    9408:	003fae06 	br	92c4 <__alt_mem_nios_system_shared_memory+0xfffc92c4>

0000940c <_fflush_r>:
    940c:	defffd04 	addi	sp,sp,-12
    9410:	dc000115 	stw	r16,4(sp)
    9414:	dfc00215 	stw	ra,8(sp)
    9418:	2021883a 	mov	r16,r4
    941c:	20000226 	beq	r4,zero,9428 <_fflush_r+0x1c>
    9420:	20800e17 	ldw	r2,56(r4)
    9424:	10000c26 	beq	r2,zero,9458 <_fflush_r+0x4c>
    9428:	2880030f 	ldh	r2,12(r5)
    942c:	1000051e 	bne	r2,zero,9444 <_fflush_r+0x38>
    9430:	0005883a 	mov	r2,zero
    9434:	dfc00217 	ldw	ra,8(sp)
    9438:	dc000117 	ldw	r16,4(sp)
    943c:	dec00304 	addi	sp,sp,12
    9440:	f800283a 	ret
    9444:	8009883a 	mov	r4,r16
    9448:	dfc00217 	ldw	ra,8(sp)
    944c:	dc000117 	ldw	r16,4(sp)
    9450:	dec00304 	addi	sp,sp,12
    9454:	00091f01 	jmpi	91f0 <__sflush_r>
    9458:	d9400015 	stw	r5,0(sp)
    945c:	00099c00 	call	99c0 <__sinit>
    9460:	d9400017 	ldw	r5,0(sp)
    9464:	003ff006 	br	9428 <__alt_mem_nios_system_shared_memory+0xfffc9428>

00009468 <fflush>:
    9468:	20000526 	beq	r4,zero,9480 <fflush+0x18>
    946c:	008000b4 	movhi	r2,2
    9470:	10824204 	addi	r2,r2,2312
    9474:	200b883a 	mov	r5,r4
    9478:	11000017 	ldw	r4,0(r2)
    947c:	000940c1 	jmpi	940c <_fflush_r>
    9480:	008000b4 	movhi	r2,2
    9484:	10824104 	addi	r2,r2,2308
    9488:	11000017 	ldw	r4,0(r2)
    948c:	01400074 	movhi	r5,1
    9490:	29650304 	addi	r5,r5,-27636
    9494:	000a53c1 	jmpi	a53c <_fwalk_reent>

00009498 <_fgets_r>:
    9498:	00c00044 	movi	r3,1
    949c:	19804d0e 	bge	r3,r6,95d4 <_fgets_r+0x13c>
    94a0:	defff804 	addi	sp,sp,-32
    94a4:	dd000415 	stw	r20,16(sp)
    94a8:	dcc00315 	stw	r19,12(sp)
    94ac:	dc800215 	stw	r18,8(sp)
    94b0:	dc400115 	stw	r17,4(sp)
    94b4:	dfc00715 	stw	ra,28(sp)
    94b8:	dd800615 	stw	r22,24(sp)
    94bc:	dd400515 	stw	r21,20(sp)
    94c0:	dc000015 	stw	r16,0(sp)
    94c4:	2027883a 	mov	r19,r4
    94c8:	3823883a 	mov	r17,r7
    94cc:	2829883a 	mov	r20,r5
    94d0:	3025883a 	mov	r18,r6
    94d4:	20000226 	beq	r4,zero,94e0 <_fgets_r+0x48>
    94d8:	20800e17 	ldw	r2,56(r4)
    94dc:	10003926 	beq	r2,zero,95c4 <_fgets_r+0x12c>
    94e0:	94bfffc4 	addi	r18,r18,-1
    94e4:	a02b883a 	mov	r21,r20
    94e8:	00001506 	br	9540 <_fgets_r+0xa8>
    94ec:	01400284 	movi	r5,10
    94f0:	8d800017 	ldw	r22,0(r17)
    94f4:	9400012e 	bgeu	r18,r16,94fc <_fgets_r+0x64>
    94f8:	9021883a 	mov	r16,r18
    94fc:	800d883a 	mov	r6,r16
    9500:	b009883a 	mov	r4,r22
    9504:	000afc80 	call	afc8 <memchr>
    9508:	a809883a 	mov	r4,r21
    950c:	800d883a 	mov	r6,r16
    9510:	b00b883a 	mov	r5,r22
    9514:	9425c83a 	sub	r18,r18,r16
    9518:	10001e1e 	bne	r2,zero,9594 <_fgets_r+0xfc>
    951c:	88800117 	ldw	r2,4(r17)
    9520:	88c00017 	ldw	r3,0(r17)
    9524:	ac2b883a 	add	r21,r21,r16
    9528:	1405c83a 	sub	r2,r2,r16
    952c:	1c21883a 	add	r16,r3,r16
    9530:	88800115 	stw	r2,4(r17)
    9534:	8c000015 	stw	r16,0(r17)
    9538:	000b0ac0 	call	b0ac <memcpy>
    953c:	90000926 	beq	r18,zero,9564 <_fgets_r+0xcc>
    9540:	8c000117 	ldw	r16,4(r17)
    9544:	803fe91e 	bne	r16,zero,94ec <__alt_mem_nios_system_shared_memory+0xfffc94ec>
    9548:	880b883a 	mov	r5,r17
    954c:	9809883a 	mov	r4,r19
    9550:	000b4f80 	call	b4f8 <__srefill_r>
    9554:	1000021e 	bne	r2,zero,9560 <_fgets_r+0xc8>
    9558:	8c000117 	ldw	r16,4(r17)
    955c:	003fe306 	br	94ec <__alt_mem_nios_system_shared_memory+0xfffc94ec>
    9560:	ad001a26 	beq	r21,r20,95cc <_fgets_r+0x134>
    9564:	a8000005 	stb	zero,0(r21)
    9568:	a005883a 	mov	r2,r20
    956c:	dfc00717 	ldw	ra,28(sp)
    9570:	dd800617 	ldw	r22,24(sp)
    9574:	dd400517 	ldw	r21,20(sp)
    9578:	dd000417 	ldw	r20,16(sp)
    957c:	dcc00317 	ldw	r19,12(sp)
    9580:	dc800217 	ldw	r18,8(sp)
    9584:	dc400117 	ldw	r17,4(sp)
    9588:	dc000017 	ldw	r16,0(sp)
    958c:	dec00804 	addi	sp,sp,32
    9590:	f800283a 	ret
    9594:	88c00117 	ldw	r3,4(r17)
    9598:	10800044 	addi	r2,r2,1
    959c:	15a1c83a 	sub	r16,r2,r22
    95a0:	1c07c83a 	sub	r3,r3,r16
    95a4:	88c00115 	stw	r3,4(r17)
    95a8:	88800015 	stw	r2,0(r17)
    95ac:	800d883a 	mov	r6,r16
    95b0:	000b0ac0 	call	b0ac <memcpy>
    95b4:	ac2b883a 	add	r21,r21,r16
    95b8:	a8000005 	stb	zero,0(r21)
    95bc:	a005883a 	mov	r2,r20
    95c0:	003fea06 	br	956c <__alt_mem_nios_system_shared_memory+0xfffc956c>
    95c4:	00099c00 	call	99c0 <__sinit>
    95c8:	003fc506 	br	94e0 <__alt_mem_nios_system_shared_memory+0xfffc94e0>
    95cc:	0005883a 	mov	r2,zero
    95d0:	003fe606 	br	956c <__alt_mem_nios_system_shared_memory+0xfffc956c>
    95d4:	0005883a 	mov	r2,zero
    95d8:	f800283a 	ret

000095dc <fgets>:
    95dc:	008000b4 	movhi	r2,2
    95e0:	10824204 	addi	r2,r2,2312
    95e4:	300f883a 	mov	r7,r6
    95e8:	280d883a 	mov	r6,r5
    95ec:	200b883a 	mov	r5,r4
    95f0:	11000017 	ldw	r4,0(r2)
    95f4:	00094981 	jmpi	9498 <_fgets_r>

000095f8 <fileno>:
    95f8:	defffd04 	addi	sp,sp,-12
    95fc:	dc400115 	stw	r17,4(sp)
    9600:	044000b4 	movhi	r17,2
    9604:	8c424204 	addi	r17,r17,2312
    9608:	dc000015 	stw	r16,0(sp)
    960c:	2021883a 	mov	r16,r4
    9610:	89000017 	ldw	r4,0(r17)
    9614:	dfc00215 	stw	ra,8(sp)
    9618:	20000226 	beq	r4,zero,9624 <fileno+0x2c>
    961c:	20800e17 	ldw	r2,56(r4)
    9620:	10000826 	beq	r2,zero,9644 <fileno+0x4c>
    9624:	8080030f 	ldh	r2,12(r16)
    9628:	10000826 	beq	r2,zero,964c <fileno+0x54>
    962c:	8080038f 	ldh	r2,14(r16)
    9630:	dfc00217 	ldw	ra,8(sp)
    9634:	dc400117 	ldw	r17,4(sp)
    9638:	dc000017 	ldw	r16,0(sp)
    963c:	dec00304 	addi	sp,sp,12
    9640:	f800283a 	ret
    9644:	00099c00 	call	99c0 <__sinit>
    9648:	003ff606 	br	9624 <__alt_mem_nios_system_shared_memory+0xfffc9624>
    964c:	88c00017 	ldw	r3,0(r17)
    9650:	01000244 	movi	r4,9
    9654:	00bfffc4 	movi	r2,-1
    9658:	19000015 	stw	r4,0(r3)
    965c:	003ff406 	br	9630 <__alt_mem_nios_system_shared_memory+0xfffc9630>

00009660 <__fp_unlock>:
    9660:	0005883a 	mov	r2,zero
    9664:	f800283a 	ret

00009668 <_cleanup_r>:
    9668:	01400074 	movhi	r5,1
    966c:	294f0404 	addi	r5,r5,15376
    9670:	000a53c1 	jmpi	a53c <_fwalk_reent>

00009674 <__sinit.part.1>:
    9674:	defff704 	addi	sp,sp,-36
    9678:	00c00074 	movhi	r3,1
    967c:	dfc00815 	stw	ra,32(sp)
    9680:	ddc00715 	stw	r23,28(sp)
    9684:	dd800615 	stw	r22,24(sp)
    9688:	dd400515 	stw	r21,20(sp)
    968c:	dd000415 	stw	r20,16(sp)
    9690:	dcc00315 	stw	r19,12(sp)
    9694:	dc800215 	stw	r18,8(sp)
    9698:	dc400115 	stw	r17,4(sp)
    969c:	dc000015 	stw	r16,0(sp)
    96a0:	18e59a04 	addi	r3,r3,-27032
    96a4:	24000117 	ldw	r16,4(r4)
    96a8:	20c00f15 	stw	r3,60(r4)
    96ac:	2080bb04 	addi	r2,r4,748
    96b0:	00c000c4 	movi	r3,3
    96b4:	20c0b915 	stw	r3,740(r4)
    96b8:	2080ba15 	stw	r2,744(r4)
    96bc:	2000b815 	stw	zero,736(r4)
    96c0:	05c00204 	movi	r23,8
    96c4:	00800104 	movi	r2,4
    96c8:	2025883a 	mov	r18,r4
    96cc:	b80d883a 	mov	r6,r23
    96d0:	81001704 	addi	r4,r16,92
    96d4:	000b883a 	mov	r5,zero
    96d8:	80000015 	stw	zero,0(r16)
    96dc:	80000115 	stw	zero,4(r16)
    96e0:	80000215 	stw	zero,8(r16)
    96e4:	8080030d 	sth	r2,12(r16)
    96e8:	80001915 	stw	zero,100(r16)
    96ec:	8000038d 	sth	zero,14(r16)
    96f0:	80000415 	stw	zero,16(r16)
    96f4:	80000515 	stw	zero,20(r16)
    96f8:	80000615 	stw	zero,24(r16)
    96fc:	000b1f40 	call	b1f4 <memset>
    9700:	05800074 	movhi	r22,1
    9704:	94400217 	ldw	r17,8(r18)
    9708:	05400074 	movhi	r21,1
    970c:	05000074 	movhi	r20,1
    9710:	04c00074 	movhi	r19,1
    9714:	b5adf904 	addi	r22,r22,-18460
    9718:	ad6e1004 	addi	r21,r21,-18368
    971c:	a52e2f04 	addi	r20,r20,-18244
    9720:	9cee4604 	addi	r19,r19,-18152
    9724:	85800815 	stw	r22,32(r16)
    9728:	85400915 	stw	r21,36(r16)
    972c:	85000a15 	stw	r20,40(r16)
    9730:	84c00b15 	stw	r19,44(r16)
    9734:	84000715 	stw	r16,28(r16)
    9738:	00800284 	movi	r2,10
    973c:	8880030d 	sth	r2,12(r17)
    9740:	00800044 	movi	r2,1
    9744:	b80d883a 	mov	r6,r23
    9748:	89001704 	addi	r4,r17,92
    974c:	000b883a 	mov	r5,zero
    9750:	88000015 	stw	zero,0(r17)
    9754:	88000115 	stw	zero,4(r17)
    9758:	88000215 	stw	zero,8(r17)
    975c:	88001915 	stw	zero,100(r17)
    9760:	8880038d 	sth	r2,14(r17)
    9764:	88000415 	stw	zero,16(r17)
    9768:	88000515 	stw	zero,20(r17)
    976c:	88000615 	stw	zero,24(r17)
    9770:	000b1f40 	call	b1f4 <memset>
    9774:	94000317 	ldw	r16,12(r18)
    9778:	00800484 	movi	r2,18
    977c:	8c400715 	stw	r17,28(r17)
    9780:	8d800815 	stw	r22,32(r17)
    9784:	8d400915 	stw	r21,36(r17)
    9788:	8d000a15 	stw	r20,40(r17)
    978c:	8cc00b15 	stw	r19,44(r17)
    9790:	8080030d 	sth	r2,12(r16)
    9794:	00800084 	movi	r2,2
    9798:	80000015 	stw	zero,0(r16)
    979c:	80000115 	stw	zero,4(r16)
    97a0:	80000215 	stw	zero,8(r16)
    97a4:	80001915 	stw	zero,100(r16)
    97a8:	8080038d 	sth	r2,14(r16)
    97ac:	80000415 	stw	zero,16(r16)
    97b0:	80000515 	stw	zero,20(r16)
    97b4:	80000615 	stw	zero,24(r16)
    97b8:	b80d883a 	mov	r6,r23
    97bc:	000b883a 	mov	r5,zero
    97c0:	81001704 	addi	r4,r16,92
    97c4:	000b1f40 	call	b1f4 <memset>
    97c8:	00800044 	movi	r2,1
    97cc:	84000715 	stw	r16,28(r16)
    97d0:	85800815 	stw	r22,32(r16)
    97d4:	85400915 	stw	r21,36(r16)
    97d8:	85000a15 	stw	r20,40(r16)
    97dc:	84c00b15 	stw	r19,44(r16)
    97e0:	90800e15 	stw	r2,56(r18)
    97e4:	dfc00817 	ldw	ra,32(sp)
    97e8:	ddc00717 	ldw	r23,28(sp)
    97ec:	dd800617 	ldw	r22,24(sp)
    97f0:	dd400517 	ldw	r21,20(sp)
    97f4:	dd000417 	ldw	r20,16(sp)
    97f8:	dcc00317 	ldw	r19,12(sp)
    97fc:	dc800217 	ldw	r18,8(sp)
    9800:	dc400117 	ldw	r17,4(sp)
    9804:	dc000017 	ldw	r16,0(sp)
    9808:	dec00904 	addi	sp,sp,36
    980c:	f800283a 	ret

00009810 <__fp_lock>:
    9810:	0005883a 	mov	r2,zero
    9814:	f800283a 	ret

00009818 <__sfmoreglue>:
    9818:	defffc04 	addi	sp,sp,-16
    981c:	dc800215 	stw	r18,8(sp)
    9820:	2825883a 	mov	r18,r5
    9824:	dc000015 	stw	r16,0(sp)
    9828:	01401a04 	movi	r5,104
    982c:	2021883a 	mov	r16,r4
    9830:	913fffc4 	addi	r4,r18,-1
    9834:	dfc00315 	stw	ra,12(sp)
    9838:	dc400115 	stw	r17,4(sp)
    983c:	00051580 	call	5158 <__mulsi3>
    9840:	8009883a 	mov	r4,r16
    9844:	11401d04 	addi	r5,r2,116
    9848:	1023883a 	mov	r17,r2
    984c:	000a7bc0 	call	a7bc <_malloc_r>
    9850:	1021883a 	mov	r16,r2
    9854:	10000726 	beq	r2,zero,9874 <__sfmoreglue+0x5c>
    9858:	11000304 	addi	r4,r2,12
    985c:	10000015 	stw	zero,0(r2)
    9860:	14800115 	stw	r18,4(r2)
    9864:	11000215 	stw	r4,8(r2)
    9868:	89801a04 	addi	r6,r17,104
    986c:	000b883a 	mov	r5,zero
    9870:	000b1f40 	call	b1f4 <memset>
    9874:	8005883a 	mov	r2,r16
    9878:	dfc00317 	ldw	ra,12(sp)
    987c:	dc800217 	ldw	r18,8(sp)
    9880:	dc400117 	ldw	r17,4(sp)
    9884:	dc000017 	ldw	r16,0(sp)
    9888:	dec00404 	addi	sp,sp,16
    988c:	f800283a 	ret

00009890 <__sfp>:
    9890:	defffb04 	addi	sp,sp,-20
    9894:	dc000015 	stw	r16,0(sp)
    9898:	040000b4 	movhi	r16,2
    989c:	84024104 	addi	r16,r16,2308
    98a0:	dcc00315 	stw	r19,12(sp)
    98a4:	2027883a 	mov	r19,r4
    98a8:	81000017 	ldw	r4,0(r16)
    98ac:	dfc00415 	stw	ra,16(sp)
    98b0:	dc800215 	stw	r18,8(sp)
    98b4:	20800e17 	ldw	r2,56(r4)
    98b8:	dc400115 	stw	r17,4(sp)
    98bc:	1000021e 	bne	r2,zero,98c8 <__sfp+0x38>
    98c0:	00096740 	call	9674 <__sinit.part.1>
    98c4:	81000017 	ldw	r4,0(r16)
    98c8:	2480b804 	addi	r18,r4,736
    98cc:	047fffc4 	movi	r17,-1
    98d0:	91000117 	ldw	r4,4(r18)
    98d4:	94000217 	ldw	r16,8(r18)
    98d8:	213fffc4 	addi	r4,r4,-1
    98dc:	20000a16 	blt	r4,zero,9908 <__sfp+0x78>
    98e0:	8080030f 	ldh	r2,12(r16)
    98e4:	10000c26 	beq	r2,zero,9918 <__sfp+0x88>
    98e8:	80c01d04 	addi	r3,r16,116
    98ec:	00000206 	br	98f8 <__sfp+0x68>
    98f0:	18bfe60f 	ldh	r2,-104(r3)
    98f4:	10000826 	beq	r2,zero,9918 <__sfp+0x88>
    98f8:	213fffc4 	addi	r4,r4,-1
    98fc:	1c3ffd04 	addi	r16,r3,-12
    9900:	18c01a04 	addi	r3,r3,104
    9904:	247ffa1e 	bne	r4,r17,98f0 <__alt_mem_nios_system_shared_memory+0xfffc98f0>
    9908:	90800017 	ldw	r2,0(r18)
    990c:	10001d26 	beq	r2,zero,9984 <__sfp+0xf4>
    9910:	1025883a 	mov	r18,r2
    9914:	003fee06 	br	98d0 <__alt_mem_nios_system_shared_memory+0xfffc98d0>
    9918:	00bfffc4 	movi	r2,-1
    991c:	8080038d 	sth	r2,14(r16)
    9920:	00800044 	movi	r2,1
    9924:	8080030d 	sth	r2,12(r16)
    9928:	80001915 	stw	zero,100(r16)
    992c:	80000015 	stw	zero,0(r16)
    9930:	80000215 	stw	zero,8(r16)
    9934:	80000115 	stw	zero,4(r16)
    9938:	80000415 	stw	zero,16(r16)
    993c:	80000515 	stw	zero,20(r16)
    9940:	80000615 	stw	zero,24(r16)
    9944:	01800204 	movi	r6,8
    9948:	000b883a 	mov	r5,zero
    994c:	81001704 	addi	r4,r16,92
    9950:	000b1f40 	call	b1f4 <memset>
    9954:	8005883a 	mov	r2,r16
    9958:	80000c15 	stw	zero,48(r16)
    995c:	80000d15 	stw	zero,52(r16)
    9960:	80001115 	stw	zero,68(r16)
    9964:	80001215 	stw	zero,72(r16)
    9968:	dfc00417 	ldw	ra,16(sp)
    996c:	dcc00317 	ldw	r19,12(sp)
    9970:	dc800217 	ldw	r18,8(sp)
    9974:	dc400117 	ldw	r17,4(sp)
    9978:	dc000017 	ldw	r16,0(sp)
    997c:	dec00504 	addi	sp,sp,20
    9980:	f800283a 	ret
    9984:	01400104 	movi	r5,4
    9988:	9809883a 	mov	r4,r19
    998c:	00098180 	call	9818 <__sfmoreglue>
    9990:	90800015 	stw	r2,0(r18)
    9994:	103fde1e 	bne	r2,zero,9910 <__alt_mem_nios_system_shared_memory+0xfffc9910>
    9998:	00800304 	movi	r2,12
    999c:	98800015 	stw	r2,0(r19)
    99a0:	0005883a 	mov	r2,zero
    99a4:	003ff006 	br	9968 <__alt_mem_nios_system_shared_memory+0xfffc9968>

000099a8 <_cleanup>:
    99a8:	008000b4 	movhi	r2,2
    99ac:	10824104 	addi	r2,r2,2308
    99b0:	11000017 	ldw	r4,0(r2)
    99b4:	01400074 	movhi	r5,1
    99b8:	294f0404 	addi	r5,r5,15376
    99bc:	000a53c1 	jmpi	a53c <_fwalk_reent>

000099c0 <__sinit>:
    99c0:	20800e17 	ldw	r2,56(r4)
    99c4:	10000126 	beq	r2,zero,99cc <__sinit+0xc>
    99c8:	f800283a 	ret
    99cc:	00096741 	jmpi	9674 <__sinit.part.1>

000099d0 <__sfp_lock_acquire>:
    99d0:	f800283a 	ret

000099d4 <__sfp_lock_release>:
    99d4:	f800283a 	ret

000099d8 <__sinit_lock_acquire>:
    99d8:	f800283a 	ret

000099dc <__sinit_lock_release>:
    99dc:	f800283a 	ret

000099e0 <__fp_lock_all>:
    99e0:	008000b4 	movhi	r2,2
    99e4:	10824204 	addi	r2,r2,2312
    99e8:	11000017 	ldw	r4,0(r2)
    99ec:	01400074 	movhi	r5,1
    99f0:	29660404 	addi	r5,r5,-26608
    99f4:	000a4781 	jmpi	a478 <_fwalk>

000099f8 <__fp_unlock_all>:
    99f8:	008000b4 	movhi	r2,2
    99fc:	10824204 	addi	r2,r2,2312
    9a00:	11000017 	ldw	r4,0(r2)
    9a04:	01400074 	movhi	r5,1
    9a08:	29659804 	addi	r5,r5,-27040
    9a0c:	000a4781 	jmpi	a478 <_fwalk>

00009a10 <_fopen_r>:
    9a10:	defffa04 	addi	sp,sp,-24
    9a14:	3005883a 	mov	r2,r6
    9a18:	dcc00415 	stw	r19,16(sp)
    9a1c:	d80d883a 	mov	r6,sp
    9a20:	2827883a 	mov	r19,r5
    9a24:	100b883a 	mov	r5,r2
    9a28:	dc800315 	stw	r18,12(sp)
    9a2c:	dfc00515 	stw	ra,20(sp)
    9a30:	dc400215 	stw	r17,8(sp)
    9a34:	dc000115 	stw	r16,4(sp)
    9a38:	2025883a 	mov	r18,r4
    9a3c:	0013d140 	call	13d14 <__sflags>
    9a40:	10002726 	beq	r2,zero,9ae0 <_fopen_r+0xd0>
    9a44:	9009883a 	mov	r4,r18
    9a48:	1023883a 	mov	r17,r2
    9a4c:	00098900 	call	9890 <__sfp>
    9a50:	1021883a 	mov	r16,r2
    9a54:	10002226 	beq	r2,zero,9ae0 <_fopen_r+0xd0>
    9a58:	d9800017 	ldw	r6,0(sp)
    9a5c:	01c06d84 	movi	r7,438
    9a60:	980b883a 	mov	r5,r19
    9a64:	9009883a 	mov	r4,r18
    9a68:	000b31c0 	call	b31c <_open_r>
    9a6c:	10001916 	blt	r2,zero,9ad4 <_fopen_r+0xc4>
    9a70:	8080038d 	sth	r2,14(r16)
    9a74:	00800074 	movhi	r2,1
    9a78:	10adf904 	addi	r2,r2,-18460
    9a7c:	80800815 	stw	r2,32(r16)
    9a80:	00800074 	movhi	r2,1
    9a84:	10ae1004 	addi	r2,r2,-18368
    9a88:	80800915 	stw	r2,36(r16)
    9a8c:	00800074 	movhi	r2,1
    9a90:	10ae2f04 	addi	r2,r2,-18244
    9a94:	80800a15 	stw	r2,40(r16)
    9a98:	00800074 	movhi	r2,1
    9a9c:	10ae4604 	addi	r2,r2,-18152
    9aa0:	8440030d 	sth	r17,12(r16)
    9aa4:	84000715 	stw	r16,28(r16)
    9aa8:	80800b15 	stw	r2,44(r16)
    9aac:	8c40400c 	andi	r17,r17,256
    9ab0:	88000d1e 	bne	r17,zero,9ae8 <_fopen_r+0xd8>
    9ab4:	8005883a 	mov	r2,r16
    9ab8:	dfc00517 	ldw	ra,20(sp)
    9abc:	dcc00417 	ldw	r19,16(sp)
    9ac0:	dc800317 	ldw	r18,12(sp)
    9ac4:	dc400217 	ldw	r17,8(sp)
    9ac8:	dc000117 	ldw	r16,4(sp)
    9acc:	dec00604 	addi	sp,sp,24
    9ad0:	f800283a 	ret
    9ad4:	00099d00 	call	99d0 <__sfp_lock_acquire>
    9ad8:	8000030d 	sth	zero,12(r16)
    9adc:	00099d40 	call	99d4 <__sfp_lock_release>
    9ae0:	0005883a 	mov	r2,zero
    9ae4:	003ff406 	br	9ab8 <__alt_mem_nios_system_shared_memory+0xfffc9ab8>
    9ae8:	01c00084 	movi	r7,2
    9aec:	000d883a 	mov	r6,zero
    9af0:	800b883a 	mov	r5,r16
    9af4:	9009883a 	mov	r4,r18
    9af8:	0009f9c0 	call	9f9c <_fseek_r>
    9afc:	8005883a 	mov	r2,r16
    9b00:	003fed06 	br	9ab8 <__alt_mem_nios_system_shared_memory+0xfffc9ab8>

00009b04 <fopen>:
    9b04:	008000b4 	movhi	r2,2
    9b08:	10824204 	addi	r2,r2,2312
    9b0c:	280d883a 	mov	r6,r5
    9b10:	200b883a 	mov	r5,r4
    9b14:	11000017 	ldw	r4,0(r2)
    9b18:	0009a101 	jmpi	9a10 <_fopen_r>

00009b1c <_fprintf_r>:
    9b1c:	defffe04 	addi	sp,sp,-8
    9b20:	2809883a 	mov	r4,r5
    9b24:	300b883a 	mov	r5,r6
    9b28:	dfc00015 	stw	ra,0(sp)
    9b2c:	d9c00115 	stw	r7,4(sp)
    9b30:	d9800104 	addi	r6,sp,4
    9b34:	00120800 	call	12080 <__vfprintf_internal>
    9b38:	dfc00017 	ldw	ra,0(sp)
    9b3c:	dec00204 	addi	sp,sp,8
    9b40:	f800283a 	ret

00009b44 <fprintf>:
    9b44:	defffd04 	addi	sp,sp,-12
    9b48:	dfc00015 	stw	ra,0(sp)
    9b4c:	d9800115 	stw	r6,4(sp)
    9b50:	d9c00215 	stw	r7,8(sp)
    9b54:	d9800104 	addi	r6,sp,4
    9b58:	00120800 	call	12080 <__vfprintf_internal>
    9b5c:	dfc00017 	ldw	ra,0(sp)
    9b60:	dec00304 	addi	sp,sp,12
    9b64:	f800283a 	ret

00009b68 <_malloc_trim_r>:
    9b68:	defffb04 	addi	sp,sp,-20
    9b6c:	dcc00315 	stw	r19,12(sp)
    9b70:	04c000b4 	movhi	r19,2
    9b74:	dc800215 	stw	r18,8(sp)
    9b78:	dc400115 	stw	r17,4(sp)
    9b7c:	dc000015 	stw	r16,0(sp)
    9b80:	dfc00415 	stw	ra,16(sp)
    9b84:	2821883a 	mov	r16,r5
    9b88:	9cfc6904 	addi	r19,r19,-3676
    9b8c:	2025883a 	mov	r18,r4
    9b90:	001b3100 	call	1b310 <__malloc_lock>
    9b94:	98800217 	ldw	r2,8(r19)
    9b98:	14400117 	ldw	r17,4(r2)
    9b9c:	00bfff04 	movi	r2,-4
    9ba0:	88a2703a 	and	r17,r17,r2
    9ba4:	8c21c83a 	sub	r16,r17,r16
    9ba8:	8403fbc4 	addi	r16,r16,4079
    9bac:	8020d33a 	srli	r16,r16,12
    9bb0:	0083ffc4 	movi	r2,4095
    9bb4:	843fffc4 	addi	r16,r16,-1
    9bb8:	8020933a 	slli	r16,r16,12
    9bbc:	1400060e 	bge	r2,r16,9bd8 <_malloc_trim_r+0x70>
    9bc0:	000b883a 	mov	r5,zero
    9bc4:	9009883a 	mov	r4,r18
    9bc8:	000b6cc0 	call	b6cc <_sbrk_r>
    9bcc:	98c00217 	ldw	r3,8(r19)
    9bd0:	1c47883a 	add	r3,r3,r17
    9bd4:	10c00a26 	beq	r2,r3,9c00 <_malloc_trim_r+0x98>
    9bd8:	9009883a 	mov	r4,r18
    9bdc:	001b3340 	call	1b334 <__malloc_unlock>
    9be0:	0005883a 	mov	r2,zero
    9be4:	dfc00417 	ldw	ra,16(sp)
    9be8:	dcc00317 	ldw	r19,12(sp)
    9bec:	dc800217 	ldw	r18,8(sp)
    9bf0:	dc400117 	ldw	r17,4(sp)
    9bf4:	dc000017 	ldw	r16,0(sp)
    9bf8:	dec00504 	addi	sp,sp,20
    9bfc:	f800283a 	ret
    9c00:	040bc83a 	sub	r5,zero,r16
    9c04:	9009883a 	mov	r4,r18
    9c08:	000b6cc0 	call	b6cc <_sbrk_r>
    9c0c:	00ffffc4 	movi	r3,-1
    9c10:	10c00d26 	beq	r2,r3,9c48 <_malloc_trim_r+0xe0>
    9c14:	00c000b4 	movhi	r3,2
    9c18:	18c97604 	addi	r3,r3,9688
    9c1c:	18800017 	ldw	r2,0(r3)
    9c20:	99000217 	ldw	r4,8(r19)
    9c24:	8c23c83a 	sub	r17,r17,r16
    9c28:	8c400054 	ori	r17,r17,1
    9c2c:	1421c83a 	sub	r16,r2,r16
    9c30:	24400115 	stw	r17,4(r4)
    9c34:	9009883a 	mov	r4,r18
    9c38:	1c000015 	stw	r16,0(r3)
    9c3c:	001b3340 	call	1b334 <__malloc_unlock>
    9c40:	00800044 	movi	r2,1
    9c44:	003fe706 	br	9be4 <__alt_mem_nios_system_shared_memory+0xfffc9be4>
    9c48:	000b883a 	mov	r5,zero
    9c4c:	9009883a 	mov	r4,r18
    9c50:	000b6cc0 	call	b6cc <_sbrk_r>
    9c54:	99000217 	ldw	r4,8(r19)
    9c58:	014003c4 	movi	r5,15
    9c5c:	1107c83a 	sub	r3,r2,r4
    9c60:	28ffdd0e 	bge	r5,r3,9bd8 <__alt_mem_nios_system_shared_memory+0xfffc9bd8>
    9c64:	014000b4 	movhi	r5,2
    9c68:	29424304 	addi	r5,r5,2316
    9c6c:	29400017 	ldw	r5,0(r5)
    9c70:	18c00054 	ori	r3,r3,1
    9c74:	20c00115 	stw	r3,4(r4)
    9c78:	00c000b4 	movhi	r3,2
    9c7c:	1145c83a 	sub	r2,r2,r5
    9c80:	18c97604 	addi	r3,r3,9688
    9c84:	18800015 	stw	r2,0(r3)
    9c88:	003fd306 	br	9bd8 <__alt_mem_nios_system_shared_memory+0xfffc9bd8>

00009c8c <_free_r>:
    9c8c:	28004126 	beq	r5,zero,9d94 <_free_r+0x108>
    9c90:	defffd04 	addi	sp,sp,-12
    9c94:	dc400115 	stw	r17,4(sp)
    9c98:	dc000015 	stw	r16,0(sp)
    9c9c:	2023883a 	mov	r17,r4
    9ca0:	2821883a 	mov	r16,r5
    9ca4:	dfc00215 	stw	ra,8(sp)
    9ca8:	001b3100 	call	1b310 <__malloc_lock>
    9cac:	81ffff17 	ldw	r7,-4(r16)
    9cb0:	00bfff84 	movi	r2,-2
    9cb4:	010000b4 	movhi	r4,2
    9cb8:	81bffe04 	addi	r6,r16,-8
    9cbc:	3884703a 	and	r2,r7,r2
    9cc0:	213c6904 	addi	r4,r4,-3676
    9cc4:	308b883a 	add	r5,r6,r2
    9cc8:	2a400117 	ldw	r9,4(r5)
    9ccc:	22000217 	ldw	r8,8(r4)
    9cd0:	00ffff04 	movi	r3,-4
    9cd4:	48c6703a 	and	r3,r9,r3
    9cd8:	2a005726 	beq	r5,r8,9e38 <_free_r+0x1ac>
    9cdc:	28c00115 	stw	r3,4(r5)
    9ce0:	39c0004c 	andi	r7,r7,1
    9ce4:	3800091e 	bne	r7,zero,9d0c <_free_r+0x80>
    9ce8:	823ffe17 	ldw	r8,-8(r16)
    9cec:	22400204 	addi	r9,r4,8
    9cf0:	320dc83a 	sub	r6,r6,r8
    9cf4:	31c00217 	ldw	r7,8(r6)
    9cf8:	1205883a 	add	r2,r2,r8
    9cfc:	3a406526 	beq	r7,r9,9e94 <_free_r+0x208>
    9d00:	32000317 	ldw	r8,12(r6)
    9d04:	3a000315 	stw	r8,12(r7)
    9d08:	41c00215 	stw	r7,8(r8)
    9d0c:	28cf883a 	add	r7,r5,r3
    9d10:	39c00117 	ldw	r7,4(r7)
    9d14:	39c0004c 	andi	r7,r7,1
    9d18:	38003a26 	beq	r7,zero,9e04 <_free_r+0x178>
    9d1c:	10c00054 	ori	r3,r2,1
    9d20:	30c00115 	stw	r3,4(r6)
    9d24:	3087883a 	add	r3,r6,r2
    9d28:	18800015 	stw	r2,0(r3)
    9d2c:	00c07fc4 	movi	r3,511
    9d30:	18801936 	bltu	r3,r2,9d98 <_free_r+0x10c>
    9d34:	1004d0fa 	srli	r2,r2,3
    9d38:	01c00044 	movi	r7,1
    9d3c:	21400117 	ldw	r5,4(r4)
    9d40:	10c00044 	addi	r3,r2,1
    9d44:	18c7883a 	add	r3,r3,r3
    9d48:	1005d0ba 	srai	r2,r2,2
    9d4c:	18c7883a 	add	r3,r3,r3
    9d50:	18c7883a 	add	r3,r3,r3
    9d54:	1907883a 	add	r3,r3,r4
    9d58:	3884983a 	sll	r2,r7,r2
    9d5c:	19c00017 	ldw	r7,0(r3)
    9d60:	1a3ffe04 	addi	r8,r3,-8
    9d64:	1144b03a 	or	r2,r2,r5
    9d68:	32000315 	stw	r8,12(r6)
    9d6c:	31c00215 	stw	r7,8(r6)
    9d70:	20800115 	stw	r2,4(r4)
    9d74:	19800015 	stw	r6,0(r3)
    9d78:	39800315 	stw	r6,12(r7)
    9d7c:	8809883a 	mov	r4,r17
    9d80:	dfc00217 	ldw	ra,8(sp)
    9d84:	dc400117 	ldw	r17,4(sp)
    9d88:	dc000017 	ldw	r16,0(sp)
    9d8c:	dec00304 	addi	sp,sp,12
    9d90:	001b3341 	jmpi	1b334 <__malloc_unlock>
    9d94:	f800283a 	ret
    9d98:	100ad27a 	srli	r5,r2,9
    9d9c:	00c00104 	movi	r3,4
    9da0:	19404a36 	bltu	r3,r5,9ecc <_free_r+0x240>
    9da4:	100ad1ba 	srli	r5,r2,6
    9da8:	28c00e44 	addi	r3,r5,57
    9dac:	18c7883a 	add	r3,r3,r3
    9db0:	29400e04 	addi	r5,r5,56
    9db4:	18c7883a 	add	r3,r3,r3
    9db8:	18c7883a 	add	r3,r3,r3
    9dbc:	1909883a 	add	r4,r3,r4
    9dc0:	20c00017 	ldw	r3,0(r4)
    9dc4:	01c000b4 	movhi	r7,2
    9dc8:	213ffe04 	addi	r4,r4,-8
    9dcc:	39fc6904 	addi	r7,r7,-3676
    9dd0:	20c04426 	beq	r4,r3,9ee4 <_free_r+0x258>
    9dd4:	01ffff04 	movi	r7,-4
    9dd8:	19400117 	ldw	r5,4(r3)
    9ddc:	29ca703a 	and	r5,r5,r7
    9de0:	1140022e 	bgeu	r2,r5,9dec <_free_r+0x160>
    9de4:	18c00217 	ldw	r3,8(r3)
    9de8:	20fffb1e 	bne	r4,r3,9dd8 <__alt_mem_nios_system_shared_memory+0xfffc9dd8>
    9dec:	19000317 	ldw	r4,12(r3)
    9df0:	31000315 	stw	r4,12(r6)
    9df4:	30c00215 	stw	r3,8(r6)
    9df8:	21800215 	stw	r6,8(r4)
    9dfc:	19800315 	stw	r6,12(r3)
    9e00:	003fde06 	br	9d7c <__alt_mem_nios_system_shared_memory+0xfffc9d7c>
    9e04:	29c00217 	ldw	r7,8(r5)
    9e08:	10c5883a 	add	r2,r2,r3
    9e0c:	00c000b4 	movhi	r3,2
    9e10:	18fc6b04 	addi	r3,r3,-3668
    9e14:	38c03b26 	beq	r7,r3,9f04 <_free_r+0x278>
    9e18:	2a000317 	ldw	r8,12(r5)
    9e1c:	11400054 	ori	r5,r2,1
    9e20:	3087883a 	add	r3,r6,r2
    9e24:	3a000315 	stw	r8,12(r7)
    9e28:	41c00215 	stw	r7,8(r8)
    9e2c:	31400115 	stw	r5,4(r6)
    9e30:	18800015 	stw	r2,0(r3)
    9e34:	003fbd06 	br	9d2c <__alt_mem_nios_system_shared_memory+0xfffc9d2c>
    9e38:	39c0004c 	andi	r7,r7,1
    9e3c:	10c5883a 	add	r2,r2,r3
    9e40:	3800071e 	bne	r7,zero,9e60 <_free_r+0x1d4>
    9e44:	81fffe17 	ldw	r7,-8(r16)
    9e48:	31cdc83a 	sub	r6,r6,r7
    9e4c:	30c00317 	ldw	r3,12(r6)
    9e50:	31400217 	ldw	r5,8(r6)
    9e54:	11c5883a 	add	r2,r2,r7
    9e58:	28c00315 	stw	r3,12(r5)
    9e5c:	19400215 	stw	r5,8(r3)
    9e60:	10c00054 	ori	r3,r2,1
    9e64:	30c00115 	stw	r3,4(r6)
    9e68:	00c000b4 	movhi	r3,2
    9e6c:	18c24404 	addi	r3,r3,2320
    9e70:	18c00017 	ldw	r3,0(r3)
    9e74:	21800215 	stw	r6,8(r4)
    9e78:	10ffc036 	bltu	r2,r3,9d7c <__alt_mem_nios_system_shared_memory+0xfffc9d7c>
    9e7c:	008000b4 	movhi	r2,2
    9e80:	10894b04 	addi	r2,r2,9516
    9e84:	11400017 	ldw	r5,0(r2)
    9e88:	8809883a 	mov	r4,r17
    9e8c:	0009b680 	call	9b68 <_malloc_trim_r>
    9e90:	003fba06 	br	9d7c <__alt_mem_nios_system_shared_memory+0xfffc9d7c>
    9e94:	28c9883a 	add	r4,r5,r3
    9e98:	21000117 	ldw	r4,4(r4)
    9e9c:	2100004c 	andi	r4,r4,1
    9ea0:	2000391e 	bne	r4,zero,9f88 <_free_r+0x2fc>
    9ea4:	29c00217 	ldw	r7,8(r5)
    9ea8:	29000317 	ldw	r4,12(r5)
    9eac:	1885883a 	add	r2,r3,r2
    9eb0:	10c00054 	ori	r3,r2,1
    9eb4:	39000315 	stw	r4,12(r7)
    9eb8:	21c00215 	stw	r7,8(r4)
    9ebc:	30c00115 	stw	r3,4(r6)
    9ec0:	308d883a 	add	r6,r6,r2
    9ec4:	30800015 	stw	r2,0(r6)
    9ec8:	003fac06 	br	9d7c <__alt_mem_nios_system_shared_memory+0xfffc9d7c>
    9ecc:	00c00504 	movi	r3,20
    9ed0:	19401536 	bltu	r3,r5,9f28 <_free_r+0x29c>
    9ed4:	28c01704 	addi	r3,r5,92
    9ed8:	18c7883a 	add	r3,r3,r3
    9edc:	294016c4 	addi	r5,r5,91
    9ee0:	003fb406 	br	9db4 <__alt_mem_nios_system_shared_memory+0xfffc9db4>
    9ee4:	280bd0ba 	srai	r5,r5,2
    9ee8:	00c00044 	movi	r3,1
    9eec:	38800117 	ldw	r2,4(r7)
    9ef0:	194a983a 	sll	r5,r3,r5
    9ef4:	2007883a 	mov	r3,r4
    9ef8:	2884b03a 	or	r2,r5,r2
    9efc:	38800115 	stw	r2,4(r7)
    9f00:	003fbb06 	br	9df0 <__alt_mem_nios_system_shared_memory+0xfffc9df0>
    9f04:	21800515 	stw	r6,20(r4)
    9f08:	21800415 	stw	r6,16(r4)
    9f0c:	10c00054 	ori	r3,r2,1
    9f10:	31c00315 	stw	r7,12(r6)
    9f14:	31c00215 	stw	r7,8(r6)
    9f18:	30c00115 	stw	r3,4(r6)
    9f1c:	308d883a 	add	r6,r6,r2
    9f20:	30800015 	stw	r2,0(r6)
    9f24:	003f9506 	br	9d7c <__alt_mem_nios_system_shared_memory+0xfffc9d7c>
    9f28:	00c01504 	movi	r3,84
    9f2c:	19400536 	bltu	r3,r5,9f44 <_free_r+0x2b8>
    9f30:	100ad33a 	srli	r5,r2,12
    9f34:	28c01bc4 	addi	r3,r5,111
    9f38:	18c7883a 	add	r3,r3,r3
    9f3c:	29401b84 	addi	r5,r5,110
    9f40:	003f9c06 	br	9db4 <__alt_mem_nios_system_shared_memory+0xfffc9db4>
    9f44:	00c05504 	movi	r3,340
    9f48:	19400536 	bltu	r3,r5,9f60 <_free_r+0x2d4>
    9f4c:	100ad3fa 	srli	r5,r2,15
    9f50:	28c01e04 	addi	r3,r5,120
    9f54:	18c7883a 	add	r3,r3,r3
    9f58:	29401dc4 	addi	r5,r5,119
    9f5c:	003f9506 	br	9db4 <__alt_mem_nios_system_shared_memory+0xfffc9db4>
    9f60:	00c15504 	movi	r3,1364
    9f64:	19400536 	bltu	r3,r5,9f7c <_free_r+0x2f0>
    9f68:	100ad4ba 	srli	r5,r2,18
    9f6c:	28c01f44 	addi	r3,r5,125
    9f70:	18c7883a 	add	r3,r3,r3
    9f74:	29401f04 	addi	r5,r5,124
    9f78:	003f8e06 	br	9db4 <__alt_mem_nios_system_shared_memory+0xfffc9db4>
    9f7c:	00c03f84 	movi	r3,254
    9f80:	01401f84 	movi	r5,126
    9f84:	003f8b06 	br	9db4 <__alt_mem_nios_system_shared_memory+0xfffc9db4>
    9f88:	10c00054 	ori	r3,r2,1
    9f8c:	30c00115 	stw	r3,4(r6)
    9f90:	308d883a 	add	r6,r6,r2
    9f94:	30800015 	stw	r2,0(r6)
    9f98:	003f7806 	br	9d7c <__alt_mem_nios_system_shared_memory+0xfffc9d7c>

00009f9c <_fseek_r>:
    9f9c:	0009fbc1 	jmpi	9fbc <_fseeko_r>

00009fa0 <fseek>:
    9fa0:	008000b4 	movhi	r2,2
    9fa4:	10824204 	addi	r2,r2,2312
    9fa8:	300f883a 	mov	r7,r6
    9fac:	280d883a 	mov	r6,r5
    9fb0:	200b883a 	mov	r5,r4
    9fb4:	11000017 	ldw	r4,0(r2)
    9fb8:	0009fbc1 	jmpi	9fbc <_fseeko_r>

00009fbc <_fseeko_r>:
    9fbc:	deffe804 	addi	sp,sp,-96
    9fc0:	dd401415 	stw	r21,80(sp)
    9fc4:	dc801115 	stw	r18,68(sp)
    9fc8:	dc401015 	stw	r17,64(sp)
    9fcc:	dc000f15 	stw	r16,60(sp)
    9fd0:	dfc01715 	stw	ra,92(sp)
    9fd4:	ddc01615 	stw	r23,88(sp)
    9fd8:	dd801515 	stw	r22,84(sp)
    9fdc:	dd001315 	stw	r20,76(sp)
    9fe0:	dcc01215 	stw	r19,72(sp)
    9fe4:	2023883a 	mov	r17,r4
    9fe8:	2821883a 	mov	r16,r5
    9fec:	302b883a 	mov	r21,r6
    9ff0:	3825883a 	mov	r18,r7
    9ff4:	20000226 	beq	r4,zero,a000 <_fseeko_r+0x44>
    9ff8:	20800e17 	ldw	r2,56(r4)
    9ffc:	10005a26 	beq	r2,zero,a168 <_fseeko_r+0x1ac>
    a000:	8080030b 	ldhu	r2,12(r16)
    a004:	00c04204 	movi	r3,264
    a008:	1080420c 	andi	r2,r2,264
    a00c:	10c05b26 	beq	r2,r3,a17c <_fseeko_r+0x1c0>
    a010:	85000a17 	ldw	r20,40(r16)
    a014:	a000f626 	beq	r20,zero,a3f0 <_fseeko_r+0x434>
    a018:	00800044 	movi	r2,1
    a01c:	90803e26 	beq	r18,r2,a118 <_fseeko_r+0x15c>
    a020:	00800084 	movi	r2,2
    a024:	90801026 	beq	r18,r2,a068 <_fseeko_r+0xac>
    a028:	90000f26 	beq	r18,zero,a068 <_fseeko_r+0xac>
    a02c:	00800584 	movi	r2,22
    a030:	88800015 	stw	r2,0(r17)
    a034:	04ffffc4 	movi	r19,-1
    a038:	9805883a 	mov	r2,r19
    a03c:	dfc01717 	ldw	ra,92(sp)
    a040:	ddc01617 	ldw	r23,88(sp)
    a044:	dd801517 	ldw	r22,84(sp)
    a048:	dd401417 	ldw	r21,80(sp)
    a04c:	dd001317 	ldw	r20,76(sp)
    a050:	dcc01217 	ldw	r19,72(sp)
    a054:	dc801117 	ldw	r18,68(sp)
    a058:	dc401017 	ldw	r17,64(sp)
    a05c:	dc000f17 	ldw	r16,60(sp)
    a060:	dec01804 	addi	sp,sp,96
    a064:	f800283a 	ret
    a068:	80800417 	ldw	r2,16(r16)
    a06c:	002f883a 	mov	r23,zero
    a070:	0027883a 	mov	r19,zero
    a074:	1000cb26 	beq	r2,zero,a3a4 <_fseeko_r+0x3e8>
    a078:	8080030b 	ldhu	r2,12(r16)
    a07c:	10c2068c 	andi	r3,r2,2074
    a080:	1800071e 	bne	r3,zero,a0a0 <_fseeko_r+0xe4>
    a084:	10c1000c 	andi	r3,r2,1024
    a088:	1800451e 	bne	r3,zero,a1a0 <_fseeko_r+0x1e4>
    a08c:	00c00074 	movhi	r3,1
    a090:	18ee2f04 	addi	r3,r3,-18244
    a094:	a0c0b726 	beq	r20,r3,a374 <_fseeko_r+0x3b8>
    a098:	10820014 	ori	r2,r2,2048
    a09c:	8080030d 	sth	r2,12(r16)
    a0a0:	800b883a 	mov	r5,r16
    a0a4:	8809883a 	mov	r4,r17
    a0a8:	000940c0 	call	940c <_fflush_r>
    a0ac:	1027883a 	mov	r19,r2
    a0b0:	103fe01e 	bne	r2,zero,a034 <__alt_mem_nios_system_shared_memory+0xfffca034>
    a0b4:	81400717 	ldw	r5,28(r16)
    a0b8:	900f883a 	mov	r7,r18
    a0bc:	a80d883a 	mov	r6,r21
    a0c0:	8809883a 	mov	r4,r17
    a0c4:	a03ee83a 	callr	r20
    a0c8:	00ffffc4 	movi	r3,-1
    a0cc:	10ffd926 	beq	r2,r3,a034 <__alt_mem_nios_system_shared_memory+0xfffca034>
    a0d0:	81400c17 	ldw	r5,48(r16)
    a0d4:	28000526 	beq	r5,zero,a0ec <_fseeko_r+0x130>
    a0d8:	80801004 	addi	r2,r16,64
    a0dc:	28800226 	beq	r5,r2,a0e8 <_fseeko_r+0x12c>
    a0e0:	8809883a 	mov	r4,r17
    a0e4:	0009c8c0 	call	9c8c <_free_r>
    a0e8:	80000c15 	stw	zero,48(r16)
    a0ec:	8080030b 	ldhu	r2,12(r16)
    a0f0:	80c00417 	ldw	r3,16(r16)
    a0f4:	80000115 	stw	zero,4(r16)
    a0f8:	10bdf7cc 	andi	r2,r2,63455
    a0fc:	80c00015 	stw	r3,0(r16)
    a100:	8080030d 	sth	r2,12(r16)
    a104:	01800204 	movi	r6,8
    a108:	000b883a 	mov	r5,zero
    a10c:	81001704 	addi	r4,r16,92
    a110:	000b1f40 	call	b1f4 <memset>
    a114:	003fc806 	br	a038 <__alt_mem_nios_system_shared_memory+0xfffca038>
    a118:	800b883a 	mov	r5,r16
    a11c:	8809883a 	mov	r4,r17
    a120:	000940c0 	call	940c <_fflush_r>
    a124:	8080030b 	ldhu	r2,12(r16)
    a128:	10c4000c 	andi	r3,r2,4096
    a12c:	18008726 	beq	r3,zero,a34c <_fseeko_r+0x390>
    a130:	84c01417 	ldw	r19,80(r16)
    a134:	10c0010c 	andi	r3,r2,4
    a138:	1800431e 	bne	r3,zero,a248 <_fseeko_r+0x28c>
    a13c:	1080020c 	andi	r2,r2,8
    a140:	10008026 	beq	r2,zero,a344 <_fseeko_r+0x388>
    a144:	80c00017 	ldw	r3,0(r16)
    a148:	80800417 	ldw	r2,16(r16)
    a14c:	18000226 	beq	r3,zero,a158 <_fseeko_r+0x19c>
    a150:	1887c83a 	sub	r3,r3,r2
    a154:	98e7883a 	add	r19,r19,r3
    a158:	aceb883a 	add	r21,r21,r19
    a15c:	05c00044 	movi	r23,1
    a160:	0025883a 	mov	r18,zero
    a164:	003fc306 	br	a074 <__alt_mem_nios_system_shared_memory+0xfffca074>
    a168:	00099c00 	call	99c0 <__sinit>
    a16c:	8080030b 	ldhu	r2,12(r16)
    a170:	00c04204 	movi	r3,264
    a174:	1080420c 	andi	r2,r2,264
    a178:	10ffa51e 	bne	r2,r3,a010 <__alt_mem_nios_system_shared_memory+0xfffca010>
    a17c:	800b883a 	mov	r5,r16
    a180:	8809883a 	mov	r4,r17
    a184:	000940c0 	call	940c <_fflush_r>
    a188:	003fa106 	br	a010 <__alt_mem_nios_system_shared_memory+0xfffca010>
    a18c:	8080030b 	ldhu	r2,12(r16)
    a190:	00c10004 	movi	r3,1024
    a194:	80c01315 	stw	r3,76(r16)
    a198:	10c4b03a 	or	r2,r2,r3
    a19c:	8080030d 	sth	r2,12(r16)
    a1a0:	9000311e 	bne	r18,zero,a268 <_fseeko_r+0x2ac>
    a1a4:	a82d883a 	mov	r22,r21
    a1a8:	b800371e 	bne	r23,zero,a288 <_fseeko_r+0x2cc>
    a1ac:	8080030b 	ldhu	r2,12(r16)
    a1b0:	1084000c 	andi	r2,r2,4096
    a1b4:	10007f26 	beq	r2,zero,a3b4 <_fseeko_r+0x3f8>
    a1b8:	80801417 	ldw	r2,80(r16)
    a1bc:	81800117 	ldw	r6,4(r16)
    a1c0:	81400c17 	ldw	r5,48(r16)
    a1c4:	11a7c83a 	sub	r19,r2,r6
    a1c8:	28008226 	beq	r5,zero,a3d4 <_fseeko_r+0x418>
    a1cc:	81c00f17 	ldw	r7,60(r16)
    a1d0:	99e7c83a 	sub	r19,r19,r7
    a1d4:	81000e17 	ldw	r4,56(r16)
    a1d8:	80800417 	ldw	r2,16(r16)
    a1dc:	99a7883a 	add	r19,r19,r6
    a1e0:	2087c83a 	sub	r3,r4,r2
    a1e4:	98e7c83a 	sub	r19,r19,r3
    a1e8:	38c7883a 	add	r3,r7,r3
    a1ec:	b4c02b16 	blt	r22,r19,a29c <_fseeko_r+0x2e0>
    a1f0:	98c9883a 	add	r4,r19,r3
    a1f4:	b100292e 	bgeu	r22,r4,a29c <_fseeko_r+0x2e0>
    a1f8:	b4e7c83a 	sub	r19,r22,r19
    a1fc:	14c5883a 	add	r2,r2,r19
    a200:	1ce7c83a 	sub	r19,r3,r19
    a204:	80800015 	stw	r2,0(r16)
    a208:	84c00115 	stw	r19,4(r16)
    a20c:	28000526 	beq	r5,zero,a224 <_fseeko_r+0x268>
    a210:	80801004 	addi	r2,r16,64
    a214:	28800226 	beq	r5,r2,a220 <_fseeko_r+0x264>
    a218:	8809883a 	mov	r4,r17
    a21c:	0009c8c0 	call	9c8c <_free_r>
    a220:	80000c15 	stw	zero,48(r16)
    a224:	8080030b 	ldhu	r2,12(r16)
    a228:	01800204 	movi	r6,8
    a22c:	000b883a 	mov	r5,zero
    a230:	10bff7cc 	andi	r2,r2,65503
    a234:	8080030d 	sth	r2,12(r16)
    a238:	81001704 	addi	r4,r16,92
    a23c:	000b1f40 	call	b1f4 <memset>
    a240:	0027883a 	mov	r19,zero
    a244:	003f7c06 	br	a038 <__alt_mem_nios_system_shared_memory+0xfffca038>
    a248:	80c00117 	ldw	r3,4(r16)
    a24c:	80800c17 	ldw	r2,48(r16)
    a250:	98e7c83a 	sub	r19,r19,r3
    a254:	10003b26 	beq	r2,zero,a344 <_fseeko_r+0x388>
    a258:	80c00f17 	ldw	r3,60(r16)
    a25c:	80800417 	ldw	r2,16(r16)
    a260:	98e7c83a 	sub	r19,r19,r3
    a264:	003fbc06 	br	a158 <__alt_mem_nios_system_shared_memory+0xfffca158>
    a268:	8140038f 	ldh	r5,14(r16)
    a26c:	d80d883a 	mov	r6,sp
    a270:	8809883a 	mov	r4,r17
    a274:	000a41c0 	call	a41c <_fstat_r>
    a278:	103f891e 	bne	r2,zero,a0a0 <__alt_mem_nios_system_shared_memory+0xfffca0a0>
    a27c:	dd800417 	ldw	r22,16(sp)
    a280:	adad883a 	add	r22,r21,r22
    a284:	b83fc926 	beq	r23,zero,a1ac <__alt_mem_nios_system_shared_memory+0xfffca1ac>
    a288:	81400c17 	ldw	r5,48(r16)
    a28c:	81800117 	ldw	r6,4(r16)
    a290:	28005026 	beq	r5,zero,a3d4 <_fseeko_r+0x418>
    a294:	81c00f17 	ldw	r7,60(r16)
    a298:	003fce06 	br	a1d4 <__alt_mem_nios_system_shared_memory+0xfffca1d4>
    a29c:	84c01317 	ldw	r19,76(r16)
    a2a0:	81400717 	ldw	r5,28(r16)
    a2a4:	000f883a 	mov	r7,zero
    a2a8:	04e7c83a 	sub	r19,zero,r19
    a2ac:	9da6703a 	and	r19,r19,r22
    a2b0:	980d883a 	mov	r6,r19
    a2b4:	8809883a 	mov	r4,r17
    a2b8:	a03ee83a 	callr	r20
    a2bc:	00ffffc4 	movi	r3,-1
    a2c0:	10ff7726 	beq	r2,r3,a0a0 <__alt_mem_nios_system_shared_memory+0xfffca0a0>
    a2c4:	80800417 	ldw	r2,16(r16)
    a2c8:	81400c17 	ldw	r5,48(r16)
    a2cc:	80000115 	stw	zero,4(r16)
    a2d0:	80800015 	stw	r2,0(r16)
    a2d4:	28000526 	beq	r5,zero,a2ec <_fseeko_r+0x330>
    a2d8:	80801004 	addi	r2,r16,64
    a2dc:	28800226 	beq	r5,r2,a2e8 <_fseeko_r+0x32c>
    a2e0:	8809883a 	mov	r4,r17
    a2e4:	0009c8c0 	call	9c8c <_free_r>
    a2e8:	80000c15 	stw	zero,48(r16)
    a2ec:	8080030b 	ldhu	r2,12(r16)
    a2f0:	b4e7c83a 	sub	r19,r22,r19
    a2f4:	10bff7cc 	andi	r2,r2,65503
    a2f8:	8080030d 	sth	r2,12(r16)
    a2fc:	98000b26 	beq	r19,zero,a32c <_fseeko_r+0x370>
    a300:	800b883a 	mov	r5,r16
    a304:	8809883a 	mov	r4,r17
    a308:	000b4f80 	call	b4f8 <__srefill_r>
    a30c:	103f641e 	bne	r2,zero,a0a0 <__alt_mem_nios_system_shared_memory+0xfffca0a0>
    a310:	80800117 	ldw	r2,4(r16)
    a314:	14ff6236 	bltu	r2,r19,a0a0 <__alt_mem_nios_system_shared_memory+0xfffca0a0>
    a318:	80c00017 	ldw	r3,0(r16)
    a31c:	14c5c83a 	sub	r2,r2,r19
    a320:	80800115 	stw	r2,4(r16)
    a324:	1ce7883a 	add	r19,r3,r19
    a328:	84c00015 	stw	r19,0(r16)
    a32c:	01800204 	movi	r6,8
    a330:	000b883a 	mov	r5,zero
    a334:	81001704 	addi	r4,r16,92
    a338:	000b1f40 	call	b1f4 <memset>
    a33c:	0027883a 	mov	r19,zero
    a340:	003f3d06 	br	a038 <__alt_mem_nios_system_shared_memory+0xfffca038>
    a344:	80800417 	ldw	r2,16(r16)
    a348:	003f8306 	br	a158 <__alt_mem_nios_system_shared_memory+0xfffca158>
    a34c:	81400717 	ldw	r5,28(r16)
    a350:	900f883a 	mov	r7,r18
    a354:	000d883a 	mov	r6,zero
    a358:	8809883a 	mov	r4,r17
    a35c:	a03ee83a 	callr	r20
    a360:	1027883a 	mov	r19,r2
    a364:	00bfffc4 	movi	r2,-1
    a368:	98bf3226 	beq	r19,r2,a034 <__alt_mem_nios_system_shared_memory+0xfffca034>
    a36c:	8080030b 	ldhu	r2,12(r16)
    a370:	003f7006 	br	a134 <__alt_mem_nios_system_shared_memory+0xfffca134>
    a374:	8140038f 	ldh	r5,14(r16)
    a378:	283f4716 	blt	r5,zero,a098 <__alt_mem_nios_system_shared_memory+0xfffca098>
    a37c:	d80d883a 	mov	r6,sp
    a380:	8809883a 	mov	r4,r17
    a384:	000a41c0 	call	a41c <_fstat_r>
    a388:	1000041e 	bne	r2,zero,a39c <_fseeko_r+0x3e0>
    a38c:	d8800117 	ldw	r2,4(sp)
    a390:	00e00014 	movui	r3,32768
    a394:	10bc000c 	andi	r2,r2,61440
    a398:	10ff7c26 	beq	r2,r3,a18c <__alt_mem_nios_system_shared_memory+0xfffca18c>
    a39c:	8080030b 	ldhu	r2,12(r16)
    a3a0:	003f3d06 	br	a098 <__alt_mem_nios_system_shared_memory+0xfffca098>
    a3a4:	800b883a 	mov	r5,r16
    a3a8:	8809883a 	mov	r4,r17
    a3ac:	000a6000 	call	a600 <__smakebuf_r>
    a3b0:	003f3106 	br	a078 <__alt_mem_nios_system_shared_memory+0xfffca078>
    a3b4:	81400717 	ldw	r5,28(r16)
    a3b8:	01c00044 	movi	r7,1
    a3bc:	000d883a 	mov	r6,zero
    a3c0:	8809883a 	mov	r4,r17
    a3c4:	a03ee83a 	callr	r20
    a3c8:	00ffffc4 	movi	r3,-1
    a3cc:	10ff7b1e 	bne	r2,r3,a1bc <__alt_mem_nios_system_shared_memory+0xfffca1bc>
    a3d0:	003f3306 	br	a0a0 <__alt_mem_nios_system_shared_memory+0xfffca0a0>
    a3d4:	80c00017 	ldw	r3,0(r16)
    a3d8:	80800417 	ldw	r2,16(r16)
    a3dc:	000b883a 	mov	r5,zero
    a3e0:	1887c83a 	sub	r3,r3,r2
    a3e4:	98e7c83a 	sub	r19,r19,r3
    a3e8:	30c7883a 	add	r3,r6,r3
    a3ec:	003f7f06 	br	a1ec <__alt_mem_nios_system_shared_memory+0xfffca1ec>
    a3f0:	00800744 	movi	r2,29
    a3f4:	88800015 	stw	r2,0(r17)
    a3f8:	04ffffc4 	movi	r19,-1
    a3fc:	003f0e06 	br	a038 <__alt_mem_nios_system_shared_memory+0xfffca038>

0000a400 <fseeko>:
    a400:	008000b4 	movhi	r2,2
    a404:	10824204 	addi	r2,r2,2312
    a408:	300f883a 	mov	r7,r6
    a40c:	280d883a 	mov	r6,r5
    a410:	200b883a 	mov	r5,r4
    a414:	11000017 	ldw	r4,0(r2)
    a418:	0009fbc1 	jmpi	9fbc <_fseeko_r>

0000a41c <_fstat_r>:
    a41c:	defffd04 	addi	sp,sp,-12
    a420:	2805883a 	mov	r2,r5
    a424:	dc000015 	stw	r16,0(sp)
    a428:	040000b4 	movhi	r16,2
    a42c:	dc400115 	stw	r17,4(sp)
    a430:	84094804 	addi	r16,r16,9504
    a434:	2023883a 	mov	r17,r4
    a438:	300b883a 	mov	r5,r6
    a43c:	1009883a 	mov	r4,r2
    a440:	dfc00215 	stw	ra,8(sp)
    a444:	80000015 	stw	zero,0(r16)
    a448:	001aef00 	call	1aef0 <fstat>
    a44c:	00ffffc4 	movi	r3,-1
    a450:	10c00526 	beq	r2,r3,a468 <_fstat_r+0x4c>
    a454:	dfc00217 	ldw	ra,8(sp)
    a458:	dc400117 	ldw	r17,4(sp)
    a45c:	dc000017 	ldw	r16,0(sp)
    a460:	dec00304 	addi	sp,sp,12
    a464:	f800283a 	ret
    a468:	80c00017 	ldw	r3,0(r16)
    a46c:	183ff926 	beq	r3,zero,a454 <__alt_mem_nios_system_shared_memory+0xfffca454>
    a470:	88c00015 	stw	r3,0(r17)
    a474:	003ff706 	br	a454 <__alt_mem_nios_system_shared_memory+0xfffca454>

0000a478 <_fwalk>:
    a478:	defff704 	addi	sp,sp,-36
    a47c:	dd000415 	stw	r20,16(sp)
    a480:	dfc00815 	stw	ra,32(sp)
    a484:	ddc00715 	stw	r23,28(sp)
    a488:	dd800615 	stw	r22,24(sp)
    a48c:	dd400515 	stw	r21,20(sp)
    a490:	dcc00315 	stw	r19,12(sp)
    a494:	dc800215 	stw	r18,8(sp)
    a498:	dc400115 	stw	r17,4(sp)
    a49c:	dc000015 	stw	r16,0(sp)
    a4a0:	2500b804 	addi	r20,r4,736
    a4a4:	a0002326 	beq	r20,zero,a534 <_fwalk+0xbc>
    a4a8:	282b883a 	mov	r21,r5
    a4ac:	002f883a 	mov	r23,zero
    a4b0:	05800044 	movi	r22,1
    a4b4:	04ffffc4 	movi	r19,-1
    a4b8:	a4400117 	ldw	r17,4(r20)
    a4bc:	a4800217 	ldw	r18,8(r20)
    a4c0:	8c7fffc4 	addi	r17,r17,-1
    a4c4:	88000d16 	blt	r17,zero,a4fc <_fwalk+0x84>
    a4c8:	94000304 	addi	r16,r18,12
    a4cc:	94800384 	addi	r18,r18,14
    a4d0:	8080000b 	ldhu	r2,0(r16)
    a4d4:	8c7fffc4 	addi	r17,r17,-1
    a4d8:	813ffd04 	addi	r4,r16,-12
    a4dc:	b080042e 	bgeu	r22,r2,a4f0 <_fwalk+0x78>
    a4e0:	9080000f 	ldh	r2,0(r18)
    a4e4:	14c00226 	beq	r2,r19,a4f0 <_fwalk+0x78>
    a4e8:	a83ee83a 	callr	r21
    a4ec:	b8aeb03a 	or	r23,r23,r2
    a4f0:	84001a04 	addi	r16,r16,104
    a4f4:	94801a04 	addi	r18,r18,104
    a4f8:	8cfff51e 	bne	r17,r19,a4d0 <__alt_mem_nios_system_shared_memory+0xfffca4d0>
    a4fc:	a5000017 	ldw	r20,0(r20)
    a500:	a03fed1e 	bne	r20,zero,a4b8 <__alt_mem_nios_system_shared_memory+0xfffca4b8>
    a504:	b805883a 	mov	r2,r23
    a508:	dfc00817 	ldw	ra,32(sp)
    a50c:	ddc00717 	ldw	r23,28(sp)
    a510:	dd800617 	ldw	r22,24(sp)
    a514:	dd400517 	ldw	r21,20(sp)
    a518:	dd000417 	ldw	r20,16(sp)
    a51c:	dcc00317 	ldw	r19,12(sp)
    a520:	dc800217 	ldw	r18,8(sp)
    a524:	dc400117 	ldw	r17,4(sp)
    a528:	dc000017 	ldw	r16,0(sp)
    a52c:	dec00904 	addi	sp,sp,36
    a530:	f800283a 	ret
    a534:	002f883a 	mov	r23,zero
    a538:	003ff206 	br	a504 <__alt_mem_nios_system_shared_memory+0xfffca504>

0000a53c <_fwalk_reent>:
    a53c:	defff704 	addi	sp,sp,-36
    a540:	dd000415 	stw	r20,16(sp)
    a544:	dfc00815 	stw	ra,32(sp)
    a548:	ddc00715 	stw	r23,28(sp)
    a54c:	dd800615 	stw	r22,24(sp)
    a550:	dd400515 	stw	r21,20(sp)
    a554:	dcc00315 	stw	r19,12(sp)
    a558:	dc800215 	stw	r18,8(sp)
    a55c:	dc400115 	stw	r17,4(sp)
    a560:	dc000015 	stw	r16,0(sp)
    a564:	2500b804 	addi	r20,r4,736
    a568:	a0002326 	beq	r20,zero,a5f8 <_fwalk_reent+0xbc>
    a56c:	282b883a 	mov	r21,r5
    a570:	2027883a 	mov	r19,r4
    a574:	002f883a 	mov	r23,zero
    a578:	05800044 	movi	r22,1
    a57c:	04bfffc4 	movi	r18,-1
    a580:	a4400117 	ldw	r17,4(r20)
    a584:	a4000217 	ldw	r16,8(r20)
    a588:	8c7fffc4 	addi	r17,r17,-1
    a58c:	88000c16 	blt	r17,zero,a5c0 <_fwalk_reent+0x84>
    a590:	84000304 	addi	r16,r16,12
    a594:	8080000b 	ldhu	r2,0(r16)
    a598:	8c7fffc4 	addi	r17,r17,-1
    a59c:	817ffd04 	addi	r5,r16,-12
    a5a0:	b080052e 	bgeu	r22,r2,a5b8 <_fwalk_reent+0x7c>
    a5a4:	8080008f 	ldh	r2,2(r16)
    a5a8:	9809883a 	mov	r4,r19
    a5ac:	14800226 	beq	r2,r18,a5b8 <_fwalk_reent+0x7c>
    a5b0:	a83ee83a 	callr	r21
    a5b4:	b8aeb03a 	or	r23,r23,r2
    a5b8:	84001a04 	addi	r16,r16,104
    a5bc:	8cbff51e 	bne	r17,r18,a594 <__alt_mem_nios_system_shared_memory+0xfffca594>
    a5c0:	a5000017 	ldw	r20,0(r20)
    a5c4:	a03fee1e 	bne	r20,zero,a580 <__alt_mem_nios_system_shared_memory+0xfffca580>
    a5c8:	b805883a 	mov	r2,r23
    a5cc:	dfc00817 	ldw	ra,32(sp)
    a5d0:	ddc00717 	ldw	r23,28(sp)
    a5d4:	dd800617 	ldw	r22,24(sp)
    a5d8:	dd400517 	ldw	r21,20(sp)
    a5dc:	dd000417 	ldw	r20,16(sp)
    a5e0:	dcc00317 	ldw	r19,12(sp)
    a5e4:	dc800217 	ldw	r18,8(sp)
    a5e8:	dc400117 	ldw	r17,4(sp)
    a5ec:	dc000017 	ldw	r16,0(sp)
    a5f0:	dec00904 	addi	sp,sp,36
    a5f4:	f800283a 	ret
    a5f8:	002f883a 	mov	r23,zero
    a5fc:	003ff206 	br	a5c8 <__alt_mem_nios_system_shared_memory+0xfffca5c8>

0000a600 <__smakebuf_r>:
    a600:	2880030b 	ldhu	r2,12(r5)
    a604:	10c0008c 	andi	r3,r2,2
    a608:	1800411e 	bne	r3,zero,a710 <__smakebuf_r+0x110>
    a60c:	deffec04 	addi	sp,sp,-80
    a610:	dc000f15 	stw	r16,60(sp)
    a614:	2821883a 	mov	r16,r5
    a618:	2940038f 	ldh	r5,14(r5)
    a61c:	dc401015 	stw	r17,64(sp)
    a620:	dfc01315 	stw	ra,76(sp)
    a624:	dcc01215 	stw	r19,72(sp)
    a628:	dc801115 	stw	r18,68(sp)
    a62c:	2023883a 	mov	r17,r4
    a630:	28001c16 	blt	r5,zero,a6a4 <__smakebuf_r+0xa4>
    a634:	d80d883a 	mov	r6,sp
    a638:	000a41c0 	call	a41c <_fstat_r>
    a63c:	10001816 	blt	r2,zero,a6a0 <__smakebuf_r+0xa0>
    a640:	d8800117 	ldw	r2,4(sp)
    a644:	00e00014 	movui	r3,32768
    a648:	10bc000c 	andi	r2,r2,61440
    a64c:	14c80020 	cmpeqi	r19,r2,8192
    a650:	10c03726 	beq	r2,r3,a730 <__smakebuf_r+0x130>
    a654:	80c0030b 	ldhu	r3,12(r16)
    a658:	18c20014 	ori	r3,r3,2048
    a65c:	80c0030d 	sth	r3,12(r16)
    a660:	00c80004 	movi	r3,8192
    a664:	10c0521e 	bne	r2,r3,a7b0 <__smakebuf_r+0x1b0>
    a668:	8140038f 	ldh	r5,14(r16)
    a66c:	8809883a 	mov	r4,r17
    a670:	0014e340 	call	14e34 <_isatty_r>
    a674:	10004c26 	beq	r2,zero,a7a8 <__smakebuf_r+0x1a8>
    a678:	8080030b 	ldhu	r2,12(r16)
    a67c:	80c010c4 	addi	r3,r16,67
    a680:	80c00015 	stw	r3,0(r16)
    a684:	10800054 	ori	r2,r2,1
    a688:	8080030d 	sth	r2,12(r16)
    a68c:	00800044 	movi	r2,1
    a690:	80c00415 	stw	r3,16(r16)
    a694:	80800515 	stw	r2,20(r16)
    a698:	04810004 	movi	r18,1024
    a69c:	00000706 	br	a6bc <__smakebuf_r+0xbc>
    a6a0:	8080030b 	ldhu	r2,12(r16)
    a6a4:	10c0200c 	andi	r3,r2,128
    a6a8:	18001f1e 	bne	r3,zero,a728 <__smakebuf_r+0x128>
    a6ac:	04810004 	movi	r18,1024
    a6b0:	10820014 	ori	r2,r2,2048
    a6b4:	8080030d 	sth	r2,12(r16)
    a6b8:	0027883a 	mov	r19,zero
    a6bc:	900b883a 	mov	r5,r18
    a6c0:	8809883a 	mov	r4,r17
    a6c4:	000a7bc0 	call	a7bc <_malloc_r>
    a6c8:	10002c26 	beq	r2,zero,a77c <__smakebuf_r+0x17c>
    a6cc:	80c0030b 	ldhu	r3,12(r16)
    a6d0:	01000074 	movhi	r4,1
    a6d4:	21259a04 	addi	r4,r4,-27032
    a6d8:	89000f15 	stw	r4,60(r17)
    a6dc:	18c02014 	ori	r3,r3,128
    a6e0:	80c0030d 	sth	r3,12(r16)
    a6e4:	80800015 	stw	r2,0(r16)
    a6e8:	80800415 	stw	r2,16(r16)
    a6ec:	84800515 	stw	r18,20(r16)
    a6f0:	98001a1e 	bne	r19,zero,a75c <__smakebuf_r+0x15c>
    a6f4:	dfc01317 	ldw	ra,76(sp)
    a6f8:	dcc01217 	ldw	r19,72(sp)
    a6fc:	dc801117 	ldw	r18,68(sp)
    a700:	dc401017 	ldw	r17,64(sp)
    a704:	dc000f17 	ldw	r16,60(sp)
    a708:	dec01404 	addi	sp,sp,80
    a70c:	f800283a 	ret
    a710:	288010c4 	addi	r2,r5,67
    a714:	28800015 	stw	r2,0(r5)
    a718:	28800415 	stw	r2,16(r5)
    a71c:	00800044 	movi	r2,1
    a720:	28800515 	stw	r2,20(r5)
    a724:	f800283a 	ret
    a728:	04801004 	movi	r18,64
    a72c:	003fe006 	br	a6b0 <__alt_mem_nios_system_shared_memory+0xfffca6b0>
    a730:	81000a17 	ldw	r4,40(r16)
    a734:	00c00074 	movhi	r3,1
    a738:	18ee2f04 	addi	r3,r3,-18244
    a73c:	20ffc51e 	bne	r4,r3,a654 <__alt_mem_nios_system_shared_memory+0xfffca654>
    a740:	8080030b 	ldhu	r2,12(r16)
    a744:	04810004 	movi	r18,1024
    a748:	84801315 	stw	r18,76(r16)
    a74c:	1484b03a 	or	r2,r2,r18
    a750:	8080030d 	sth	r2,12(r16)
    a754:	0027883a 	mov	r19,zero
    a758:	003fd806 	br	a6bc <__alt_mem_nios_system_shared_memory+0xfffca6bc>
    a75c:	8140038f 	ldh	r5,14(r16)
    a760:	8809883a 	mov	r4,r17
    a764:	0014e340 	call	14e34 <_isatty_r>
    a768:	103fe226 	beq	r2,zero,a6f4 <__alt_mem_nios_system_shared_memory+0xfffca6f4>
    a76c:	8080030b 	ldhu	r2,12(r16)
    a770:	10800054 	ori	r2,r2,1
    a774:	8080030d 	sth	r2,12(r16)
    a778:	003fde06 	br	a6f4 <__alt_mem_nios_system_shared_memory+0xfffca6f4>
    a77c:	8080030b 	ldhu	r2,12(r16)
    a780:	10c0800c 	andi	r3,r2,512
    a784:	183fdb1e 	bne	r3,zero,a6f4 <__alt_mem_nios_system_shared_memory+0xfffca6f4>
    a788:	10800094 	ori	r2,r2,2
    a78c:	80c010c4 	addi	r3,r16,67
    a790:	8080030d 	sth	r2,12(r16)
    a794:	00800044 	movi	r2,1
    a798:	80c00015 	stw	r3,0(r16)
    a79c:	80c00415 	stw	r3,16(r16)
    a7a0:	80800515 	stw	r2,20(r16)
    a7a4:	003fd306 	br	a6f4 <__alt_mem_nios_system_shared_memory+0xfffca6f4>
    a7a8:	04810004 	movi	r18,1024
    a7ac:	003fc306 	br	a6bc <__alt_mem_nios_system_shared_memory+0xfffca6bc>
    a7b0:	0027883a 	mov	r19,zero
    a7b4:	04810004 	movi	r18,1024
    a7b8:	003fc006 	br	a6bc <__alt_mem_nios_system_shared_memory+0xfffca6bc>

0000a7bc <_malloc_r>:
    a7bc:	defff504 	addi	sp,sp,-44
    a7c0:	dc800315 	stw	r18,12(sp)
    a7c4:	dfc00a15 	stw	ra,40(sp)
    a7c8:	df000915 	stw	fp,36(sp)
    a7cc:	ddc00815 	stw	r23,32(sp)
    a7d0:	dd800715 	stw	r22,28(sp)
    a7d4:	dd400615 	stw	r21,24(sp)
    a7d8:	dd000515 	stw	r20,20(sp)
    a7dc:	dcc00415 	stw	r19,16(sp)
    a7e0:	dc400215 	stw	r17,8(sp)
    a7e4:	dc000115 	stw	r16,4(sp)
    a7e8:	288002c4 	addi	r2,r5,11
    a7ec:	00c00584 	movi	r3,22
    a7f0:	2025883a 	mov	r18,r4
    a7f4:	18807f2e 	bgeu	r3,r2,a9f4 <_malloc_r+0x238>
    a7f8:	047ffe04 	movi	r17,-8
    a7fc:	1462703a 	and	r17,r2,r17
    a800:	8800a316 	blt	r17,zero,aa90 <_malloc_r+0x2d4>
    a804:	8940a236 	bltu	r17,r5,aa90 <_malloc_r+0x2d4>
    a808:	001b3100 	call	1b310 <__malloc_lock>
    a80c:	00807dc4 	movi	r2,503
    a810:	1441e92e 	bgeu	r2,r17,afb8 <_malloc_r+0x7fc>
    a814:	8804d27a 	srli	r2,r17,9
    a818:	1000a126 	beq	r2,zero,aaa0 <_malloc_r+0x2e4>
    a81c:	00c00104 	movi	r3,4
    a820:	18811e36 	bltu	r3,r2,ac9c <_malloc_r+0x4e0>
    a824:	8804d1ba 	srli	r2,r17,6
    a828:	12000e44 	addi	r8,r2,57
    a82c:	11c00e04 	addi	r7,r2,56
    a830:	4209883a 	add	r4,r8,r8
    a834:	04c000b4 	movhi	r19,2
    a838:	2109883a 	add	r4,r4,r4
    a83c:	9cfc6904 	addi	r19,r19,-3676
    a840:	2109883a 	add	r4,r4,r4
    a844:	9909883a 	add	r4,r19,r4
    a848:	24000117 	ldw	r16,4(r4)
    a84c:	213ffe04 	addi	r4,r4,-8
    a850:	24009726 	beq	r4,r16,aab0 <_malloc_r+0x2f4>
    a854:	80800117 	ldw	r2,4(r16)
    a858:	01bfff04 	movi	r6,-4
    a85c:	014003c4 	movi	r5,15
    a860:	1184703a 	and	r2,r2,r6
    a864:	1447c83a 	sub	r3,r2,r17
    a868:	28c00716 	blt	r5,r3,a888 <_malloc_r+0xcc>
    a86c:	1800920e 	bge	r3,zero,aab8 <_malloc_r+0x2fc>
    a870:	84000317 	ldw	r16,12(r16)
    a874:	24008e26 	beq	r4,r16,aab0 <_malloc_r+0x2f4>
    a878:	80800117 	ldw	r2,4(r16)
    a87c:	1184703a 	and	r2,r2,r6
    a880:	1447c83a 	sub	r3,r2,r17
    a884:	28fff90e 	bge	r5,r3,a86c <__alt_mem_nios_system_shared_memory+0xfffca86c>
    a888:	3809883a 	mov	r4,r7
    a88c:	018000b4 	movhi	r6,2
    a890:	9c000417 	ldw	r16,16(r19)
    a894:	31bc6904 	addi	r6,r6,-3676
    a898:	32000204 	addi	r8,r6,8
    a89c:	82013426 	beq	r16,r8,ad70 <_malloc_r+0x5b4>
    a8a0:	80c00117 	ldw	r3,4(r16)
    a8a4:	00bfff04 	movi	r2,-4
    a8a8:	188e703a 	and	r7,r3,r2
    a8ac:	3c45c83a 	sub	r2,r7,r17
    a8b0:	00c003c4 	movi	r3,15
    a8b4:	18811f16 	blt	r3,r2,ad34 <_malloc_r+0x578>
    a8b8:	32000515 	stw	r8,20(r6)
    a8bc:	32000415 	stw	r8,16(r6)
    a8c0:	10007f0e 	bge	r2,zero,aac0 <_malloc_r+0x304>
    a8c4:	00807fc4 	movi	r2,511
    a8c8:	11c0fd36 	bltu	r2,r7,acc0 <_malloc_r+0x504>
    a8cc:	3806d0fa 	srli	r3,r7,3
    a8d0:	01c00044 	movi	r7,1
    a8d4:	30800117 	ldw	r2,4(r6)
    a8d8:	19400044 	addi	r5,r3,1
    a8dc:	294b883a 	add	r5,r5,r5
    a8e0:	1807d0ba 	srai	r3,r3,2
    a8e4:	294b883a 	add	r5,r5,r5
    a8e8:	294b883a 	add	r5,r5,r5
    a8ec:	298b883a 	add	r5,r5,r6
    a8f0:	38c6983a 	sll	r3,r7,r3
    a8f4:	29c00017 	ldw	r7,0(r5)
    a8f8:	2a7ffe04 	addi	r9,r5,-8
    a8fc:	1886b03a 	or	r3,r3,r2
    a900:	82400315 	stw	r9,12(r16)
    a904:	81c00215 	stw	r7,8(r16)
    a908:	30c00115 	stw	r3,4(r6)
    a90c:	2c000015 	stw	r16,0(r5)
    a910:	3c000315 	stw	r16,12(r7)
    a914:	2005d0ba 	srai	r2,r4,2
    a918:	01400044 	movi	r5,1
    a91c:	288a983a 	sll	r5,r5,r2
    a920:	19406f36 	bltu	r3,r5,aae0 <_malloc_r+0x324>
    a924:	28c4703a 	and	r2,r5,r3
    a928:	10000a1e 	bne	r2,zero,a954 <_malloc_r+0x198>
    a92c:	00bfff04 	movi	r2,-4
    a930:	294b883a 	add	r5,r5,r5
    a934:	2088703a 	and	r4,r4,r2
    a938:	28c4703a 	and	r2,r5,r3
    a93c:	21000104 	addi	r4,r4,4
    a940:	1000041e 	bne	r2,zero,a954 <_malloc_r+0x198>
    a944:	294b883a 	add	r5,r5,r5
    a948:	28c4703a 	and	r2,r5,r3
    a94c:	21000104 	addi	r4,r4,4
    a950:	103ffc26 	beq	r2,zero,a944 <__alt_mem_nios_system_shared_memory+0xfffca944>
    a954:	02bfff04 	movi	r10,-4
    a958:	024003c4 	movi	r9,15
    a95c:	21800044 	addi	r6,r4,1
    a960:	318d883a 	add	r6,r6,r6
    a964:	318d883a 	add	r6,r6,r6
    a968:	318d883a 	add	r6,r6,r6
    a96c:	998d883a 	add	r6,r19,r6
    a970:	333ffe04 	addi	r12,r6,-8
    a974:	2017883a 	mov	r11,r4
    a978:	31800104 	addi	r6,r6,4
    a97c:	34000017 	ldw	r16,0(r6)
    a980:	31fffd04 	addi	r7,r6,-12
    a984:	81c0041e 	bne	r16,r7,a998 <_malloc_r+0x1dc>
    a988:	0000fb06 	br	ad78 <_malloc_r+0x5bc>
    a98c:	1801030e 	bge	r3,zero,ad9c <_malloc_r+0x5e0>
    a990:	84000317 	ldw	r16,12(r16)
    a994:	81c0f826 	beq	r16,r7,ad78 <_malloc_r+0x5bc>
    a998:	80800117 	ldw	r2,4(r16)
    a99c:	1284703a 	and	r2,r2,r10
    a9a0:	1447c83a 	sub	r3,r2,r17
    a9a4:	48fff90e 	bge	r9,r3,a98c <__alt_mem_nios_system_shared_memory+0xfffca98c>
    a9a8:	80800317 	ldw	r2,12(r16)
    a9ac:	81000217 	ldw	r4,8(r16)
    a9b0:	89400054 	ori	r5,r17,1
    a9b4:	81400115 	stw	r5,4(r16)
    a9b8:	20800315 	stw	r2,12(r4)
    a9bc:	11000215 	stw	r4,8(r2)
    a9c0:	8463883a 	add	r17,r16,r17
    a9c4:	9c400515 	stw	r17,20(r19)
    a9c8:	9c400415 	stw	r17,16(r19)
    a9cc:	18800054 	ori	r2,r3,1
    a9d0:	88800115 	stw	r2,4(r17)
    a9d4:	8a000315 	stw	r8,12(r17)
    a9d8:	8a000215 	stw	r8,8(r17)
    a9dc:	88e3883a 	add	r17,r17,r3
    a9e0:	88c00015 	stw	r3,0(r17)
    a9e4:	9009883a 	mov	r4,r18
    a9e8:	001b3340 	call	1b334 <__malloc_unlock>
    a9ec:	80800204 	addi	r2,r16,8
    a9f0:	00001b06 	br	aa60 <_malloc_r+0x2a4>
    a9f4:	04400404 	movi	r17,16
    a9f8:	89402536 	bltu	r17,r5,aa90 <_malloc_r+0x2d4>
    a9fc:	001b3100 	call	1b310 <__malloc_lock>
    aa00:	00800184 	movi	r2,6
    aa04:	01000084 	movi	r4,2
    aa08:	04c000b4 	movhi	r19,2
    aa0c:	1085883a 	add	r2,r2,r2
    aa10:	9cfc6904 	addi	r19,r19,-3676
    aa14:	1085883a 	add	r2,r2,r2
    aa18:	9885883a 	add	r2,r19,r2
    aa1c:	14000117 	ldw	r16,4(r2)
    aa20:	10fffe04 	addi	r3,r2,-8
    aa24:	80c0d926 	beq	r16,r3,ad8c <_malloc_r+0x5d0>
    aa28:	80c00117 	ldw	r3,4(r16)
    aa2c:	81000317 	ldw	r4,12(r16)
    aa30:	00bfff04 	movi	r2,-4
    aa34:	1884703a 	and	r2,r3,r2
    aa38:	81400217 	ldw	r5,8(r16)
    aa3c:	8085883a 	add	r2,r16,r2
    aa40:	10c00117 	ldw	r3,4(r2)
    aa44:	29000315 	stw	r4,12(r5)
    aa48:	21400215 	stw	r5,8(r4)
    aa4c:	18c00054 	ori	r3,r3,1
    aa50:	10c00115 	stw	r3,4(r2)
    aa54:	9009883a 	mov	r4,r18
    aa58:	001b3340 	call	1b334 <__malloc_unlock>
    aa5c:	80800204 	addi	r2,r16,8
    aa60:	dfc00a17 	ldw	ra,40(sp)
    aa64:	df000917 	ldw	fp,36(sp)
    aa68:	ddc00817 	ldw	r23,32(sp)
    aa6c:	dd800717 	ldw	r22,28(sp)
    aa70:	dd400617 	ldw	r21,24(sp)
    aa74:	dd000517 	ldw	r20,20(sp)
    aa78:	dcc00417 	ldw	r19,16(sp)
    aa7c:	dc800317 	ldw	r18,12(sp)
    aa80:	dc400217 	ldw	r17,8(sp)
    aa84:	dc000117 	ldw	r16,4(sp)
    aa88:	dec00b04 	addi	sp,sp,44
    aa8c:	f800283a 	ret
    aa90:	00800304 	movi	r2,12
    aa94:	90800015 	stw	r2,0(r18)
    aa98:	0005883a 	mov	r2,zero
    aa9c:	003ff006 	br	aa60 <__alt_mem_nios_system_shared_memory+0xfffcaa60>
    aaa0:	01002004 	movi	r4,128
    aaa4:	02001004 	movi	r8,64
    aaa8:	01c00fc4 	movi	r7,63
    aaac:	003f6106 	br	a834 <__alt_mem_nios_system_shared_memory+0xfffca834>
    aab0:	4009883a 	mov	r4,r8
    aab4:	003f7506 	br	a88c <__alt_mem_nios_system_shared_memory+0xfffca88c>
    aab8:	81000317 	ldw	r4,12(r16)
    aabc:	003fde06 	br	aa38 <__alt_mem_nios_system_shared_memory+0xfffcaa38>
    aac0:	81c5883a 	add	r2,r16,r7
    aac4:	11400117 	ldw	r5,4(r2)
    aac8:	9009883a 	mov	r4,r18
    aacc:	29400054 	ori	r5,r5,1
    aad0:	11400115 	stw	r5,4(r2)
    aad4:	001b3340 	call	1b334 <__malloc_unlock>
    aad8:	80800204 	addi	r2,r16,8
    aadc:	003fe006 	br	aa60 <__alt_mem_nios_system_shared_memory+0xfffcaa60>
    aae0:	9c000217 	ldw	r16,8(r19)
    aae4:	00bfff04 	movi	r2,-4
    aae8:	85800117 	ldw	r22,4(r16)
    aaec:	b0ac703a 	and	r22,r22,r2
    aaf0:	b4400336 	bltu	r22,r17,ab00 <_malloc_r+0x344>
    aaf4:	b445c83a 	sub	r2,r22,r17
    aaf8:	00c003c4 	movi	r3,15
    aafc:	18805d16 	blt	r3,r2,ac74 <_malloc_r+0x4b8>
    ab00:	05c000b4 	movhi	r23,2
    ab04:	008000b4 	movhi	r2,2
    ab08:	10894b04 	addi	r2,r2,9516
    ab0c:	bdc24304 	addi	r23,r23,2316
    ab10:	15400017 	ldw	r21,0(r2)
    ab14:	b8c00017 	ldw	r3,0(r23)
    ab18:	00bfffc4 	movi	r2,-1
    ab1c:	858d883a 	add	r6,r16,r22
    ab20:	8d6b883a 	add	r21,r17,r21
    ab24:	1880ea26 	beq	r3,r2,aed0 <_malloc_r+0x714>
    ab28:	ad4403c4 	addi	r21,r21,4111
    ab2c:	00bc0004 	movi	r2,-4096
    ab30:	a8aa703a 	and	r21,r21,r2
    ab34:	a80b883a 	mov	r5,r21
    ab38:	9009883a 	mov	r4,r18
    ab3c:	d9800015 	stw	r6,0(sp)
    ab40:	000b6cc0 	call	b6cc <_sbrk_r>
    ab44:	1029883a 	mov	r20,r2
    ab48:	00bfffc4 	movi	r2,-1
    ab4c:	d9800017 	ldw	r6,0(sp)
    ab50:	a080e826 	beq	r20,r2,aef4 <_malloc_r+0x738>
    ab54:	a180a636 	bltu	r20,r6,adf0 <_malloc_r+0x634>
    ab58:	070000b4 	movhi	fp,2
    ab5c:	e7097604 	addi	fp,fp,9688
    ab60:	e0800017 	ldw	r2,0(fp)
    ab64:	a887883a 	add	r3,r21,r2
    ab68:	e0c00015 	stw	r3,0(fp)
    ab6c:	3500e626 	beq	r6,r20,af08 <_malloc_r+0x74c>
    ab70:	b9000017 	ldw	r4,0(r23)
    ab74:	00bfffc4 	movi	r2,-1
    ab78:	2080ee26 	beq	r4,r2,af34 <_malloc_r+0x778>
    ab7c:	a185c83a 	sub	r2,r20,r6
    ab80:	10c5883a 	add	r2,r2,r3
    ab84:	e0800015 	stw	r2,0(fp)
    ab88:	a0c001cc 	andi	r3,r20,7
    ab8c:	1800bc26 	beq	r3,zero,ae80 <_malloc_r+0x6c4>
    ab90:	a0e9c83a 	sub	r20,r20,r3
    ab94:	00840204 	movi	r2,4104
    ab98:	a5000204 	addi	r20,r20,8
    ab9c:	10c7c83a 	sub	r3,r2,r3
    aba0:	a545883a 	add	r2,r20,r21
    aba4:	1083ffcc 	andi	r2,r2,4095
    aba8:	18abc83a 	sub	r21,r3,r2
    abac:	a80b883a 	mov	r5,r21
    abb0:	9009883a 	mov	r4,r18
    abb4:	000b6cc0 	call	b6cc <_sbrk_r>
    abb8:	00ffffc4 	movi	r3,-1
    abbc:	10c0e126 	beq	r2,r3,af44 <_malloc_r+0x788>
    abc0:	1505c83a 	sub	r2,r2,r20
    abc4:	1545883a 	add	r2,r2,r21
    abc8:	10800054 	ori	r2,r2,1
    abcc:	e0c00017 	ldw	r3,0(fp)
    abd0:	9d000215 	stw	r20,8(r19)
    abd4:	a0800115 	stw	r2,4(r20)
    abd8:	a8c7883a 	add	r3,r21,r3
    abdc:	e0c00015 	stw	r3,0(fp)
    abe0:	84c00e26 	beq	r16,r19,ac1c <_malloc_r+0x460>
    abe4:	018003c4 	movi	r6,15
    abe8:	3580a72e 	bgeu	r6,r22,ae88 <_malloc_r+0x6cc>
    abec:	81400117 	ldw	r5,4(r16)
    abf0:	013ffe04 	movi	r4,-8
    abf4:	b0bffd04 	addi	r2,r22,-12
    abf8:	1104703a 	and	r2,r2,r4
    abfc:	2900004c 	andi	r4,r5,1
    ac00:	2088b03a 	or	r4,r4,r2
    ac04:	81000115 	stw	r4,4(r16)
    ac08:	01400144 	movi	r5,5
    ac0c:	8089883a 	add	r4,r16,r2
    ac10:	21400115 	stw	r5,4(r4)
    ac14:	21400215 	stw	r5,8(r4)
    ac18:	3080cd36 	bltu	r6,r2,af50 <_malloc_r+0x794>
    ac1c:	008000b4 	movhi	r2,2
    ac20:	10894a04 	addi	r2,r2,9512
    ac24:	11000017 	ldw	r4,0(r2)
    ac28:	20c0012e 	bgeu	r4,r3,ac30 <_malloc_r+0x474>
    ac2c:	10c00015 	stw	r3,0(r2)
    ac30:	008000b4 	movhi	r2,2
    ac34:	10894904 	addi	r2,r2,9508
    ac38:	11000017 	ldw	r4,0(r2)
    ac3c:	9c000217 	ldw	r16,8(r19)
    ac40:	20c0012e 	bgeu	r4,r3,ac48 <_malloc_r+0x48c>
    ac44:	10c00015 	stw	r3,0(r2)
    ac48:	80c00117 	ldw	r3,4(r16)
    ac4c:	00bfff04 	movi	r2,-4
    ac50:	1886703a 	and	r3,r3,r2
    ac54:	1c45c83a 	sub	r2,r3,r17
    ac58:	1c400236 	bltu	r3,r17,ac64 <_malloc_r+0x4a8>
    ac5c:	00c003c4 	movi	r3,15
    ac60:	18800416 	blt	r3,r2,ac74 <_malloc_r+0x4b8>
    ac64:	9009883a 	mov	r4,r18
    ac68:	001b3340 	call	1b334 <__malloc_unlock>
    ac6c:	0005883a 	mov	r2,zero
    ac70:	003f7b06 	br	aa60 <__alt_mem_nios_system_shared_memory+0xfffcaa60>
    ac74:	88c00054 	ori	r3,r17,1
    ac78:	80c00115 	stw	r3,4(r16)
    ac7c:	8463883a 	add	r17,r16,r17
    ac80:	10800054 	ori	r2,r2,1
    ac84:	9c400215 	stw	r17,8(r19)
    ac88:	88800115 	stw	r2,4(r17)
    ac8c:	9009883a 	mov	r4,r18
    ac90:	001b3340 	call	1b334 <__malloc_unlock>
    ac94:	80800204 	addi	r2,r16,8
    ac98:	003f7106 	br	aa60 <__alt_mem_nios_system_shared_memory+0xfffcaa60>
    ac9c:	00c00504 	movi	r3,20
    aca0:	18804a2e 	bgeu	r3,r2,adcc <_malloc_r+0x610>
    aca4:	00c01504 	movi	r3,84
    aca8:	18806e36 	bltu	r3,r2,ae64 <_malloc_r+0x6a8>
    acac:	8804d33a 	srli	r2,r17,12
    acb0:	12001bc4 	addi	r8,r2,111
    acb4:	11c01b84 	addi	r7,r2,110
    acb8:	4209883a 	add	r4,r8,r8
    acbc:	003edd06 	br	a834 <__alt_mem_nios_system_shared_memory+0xfffca834>
    acc0:	3804d27a 	srli	r2,r7,9
    acc4:	00c00104 	movi	r3,4
    acc8:	1880442e 	bgeu	r3,r2,addc <_malloc_r+0x620>
    accc:	00c00504 	movi	r3,20
    acd0:	18808136 	bltu	r3,r2,aed8 <_malloc_r+0x71c>
    acd4:	11401704 	addi	r5,r2,92
    acd8:	10c016c4 	addi	r3,r2,91
    acdc:	294b883a 	add	r5,r5,r5
    ace0:	294b883a 	add	r5,r5,r5
    ace4:	294b883a 	add	r5,r5,r5
    ace8:	994b883a 	add	r5,r19,r5
    acec:	28800017 	ldw	r2,0(r5)
    acf0:	018000b4 	movhi	r6,2
    acf4:	297ffe04 	addi	r5,r5,-8
    acf8:	31bc6904 	addi	r6,r6,-3676
    acfc:	28806526 	beq	r5,r2,ae94 <_malloc_r+0x6d8>
    ad00:	01bfff04 	movi	r6,-4
    ad04:	10c00117 	ldw	r3,4(r2)
    ad08:	1986703a 	and	r3,r3,r6
    ad0c:	38c0022e 	bgeu	r7,r3,ad18 <_malloc_r+0x55c>
    ad10:	10800217 	ldw	r2,8(r2)
    ad14:	28bffb1e 	bne	r5,r2,ad04 <__alt_mem_nios_system_shared_memory+0xfffcad04>
    ad18:	11400317 	ldw	r5,12(r2)
    ad1c:	98c00117 	ldw	r3,4(r19)
    ad20:	81400315 	stw	r5,12(r16)
    ad24:	80800215 	stw	r2,8(r16)
    ad28:	2c000215 	stw	r16,8(r5)
    ad2c:	14000315 	stw	r16,12(r2)
    ad30:	003ef806 	br	a914 <__alt_mem_nios_system_shared_memory+0xfffca914>
    ad34:	88c00054 	ori	r3,r17,1
    ad38:	80c00115 	stw	r3,4(r16)
    ad3c:	8463883a 	add	r17,r16,r17
    ad40:	34400515 	stw	r17,20(r6)
    ad44:	34400415 	stw	r17,16(r6)
    ad48:	10c00054 	ori	r3,r2,1
    ad4c:	8a000315 	stw	r8,12(r17)
    ad50:	8a000215 	stw	r8,8(r17)
    ad54:	88c00115 	stw	r3,4(r17)
    ad58:	88a3883a 	add	r17,r17,r2
    ad5c:	88800015 	stw	r2,0(r17)
    ad60:	9009883a 	mov	r4,r18
    ad64:	001b3340 	call	1b334 <__malloc_unlock>
    ad68:	80800204 	addi	r2,r16,8
    ad6c:	003f3c06 	br	aa60 <__alt_mem_nios_system_shared_memory+0xfffcaa60>
    ad70:	30c00117 	ldw	r3,4(r6)
    ad74:	003ee706 	br	a914 <__alt_mem_nios_system_shared_memory+0xfffca914>
    ad78:	5ac00044 	addi	r11,r11,1
    ad7c:	588000cc 	andi	r2,r11,3
    ad80:	31800204 	addi	r6,r6,8
    ad84:	103efd1e 	bne	r2,zero,a97c <__alt_mem_nios_system_shared_memory+0xfffca97c>
    ad88:	00002406 	br	ae1c <_malloc_r+0x660>
    ad8c:	14000317 	ldw	r16,12(r2)
    ad90:	143f251e 	bne	r2,r16,aa28 <__alt_mem_nios_system_shared_memory+0xfffcaa28>
    ad94:	21000084 	addi	r4,r4,2
    ad98:	003ebc06 	br	a88c <__alt_mem_nios_system_shared_memory+0xfffca88c>
    ad9c:	8085883a 	add	r2,r16,r2
    ada0:	10c00117 	ldw	r3,4(r2)
    ada4:	81000317 	ldw	r4,12(r16)
    ada8:	81400217 	ldw	r5,8(r16)
    adac:	18c00054 	ori	r3,r3,1
    adb0:	10c00115 	stw	r3,4(r2)
    adb4:	29000315 	stw	r4,12(r5)
    adb8:	21400215 	stw	r5,8(r4)
    adbc:	9009883a 	mov	r4,r18
    adc0:	001b3340 	call	1b334 <__malloc_unlock>
    adc4:	80800204 	addi	r2,r16,8
    adc8:	003f2506 	br	aa60 <__alt_mem_nios_system_shared_memory+0xfffcaa60>
    adcc:	12001704 	addi	r8,r2,92
    add0:	11c016c4 	addi	r7,r2,91
    add4:	4209883a 	add	r4,r8,r8
    add8:	003e9606 	br	a834 <__alt_mem_nios_system_shared_memory+0xfffca834>
    addc:	3804d1ba 	srli	r2,r7,6
    ade0:	11400e44 	addi	r5,r2,57
    ade4:	10c00e04 	addi	r3,r2,56
    ade8:	294b883a 	add	r5,r5,r5
    adec:	003fbc06 	br	ace0 <__alt_mem_nios_system_shared_memory+0xfffcace0>
    adf0:	84ff5926 	beq	r16,r19,ab58 <__alt_mem_nios_system_shared_memory+0xfffcab58>
    adf4:	008000b4 	movhi	r2,2
    adf8:	10bc6904 	addi	r2,r2,-3676
    adfc:	14000217 	ldw	r16,8(r2)
    ae00:	00bfff04 	movi	r2,-4
    ae04:	80c00117 	ldw	r3,4(r16)
    ae08:	1886703a 	and	r3,r3,r2
    ae0c:	003f9106 	br	ac54 <__alt_mem_nios_system_shared_memory+0xfffcac54>
    ae10:	60800217 	ldw	r2,8(r12)
    ae14:	213fffc4 	addi	r4,r4,-1
    ae18:	1300651e 	bne	r2,r12,afb0 <_malloc_r+0x7f4>
    ae1c:	208000cc 	andi	r2,r4,3
    ae20:	633ffe04 	addi	r12,r12,-8
    ae24:	103ffa1e 	bne	r2,zero,ae10 <__alt_mem_nios_system_shared_memory+0xfffcae10>
    ae28:	98800117 	ldw	r2,4(r19)
    ae2c:	0146303a 	nor	r3,zero,r5
    ae30:	1884703a 	and	r2,r3,r2
    ae34:	98800115 	stw	r2,4(r19)
    ae38:	294b883a 	add	r5,r5,r5
    ae3c:	117f2836 	bltu	r2,r5,aae0 <__alt_mem_nios_system_shared_memory+0xfffcaae0>
    ae40:	283f2726 	beq	r5,zero,aae0 <__alt_mem_nios_system_shared_memory+0xfffcaae0>
    ae44:	2886703a 	and	r3,r5,r2
    ae48:	5809883a 	mov	r4,r11
    ae4c:	183ec31e 	bne	r3,zero,a95c <__alt_mem_nios_system_shared_memory+0xfffca95c>
    ae50:	294b883a 	add	r5,r5,r5
    ae54:	2886703a 	and	r3,r5,r2
    ae58:	21000104 	addi	r4,r4,4
    ae5c:	183ffc26 	beq	r3,zero,ae50 <__alt_mem_nios_system_shared_memory+0xfffcae50>
    ae60:	003ebe06 	br	a95c <__alt_mem_nios_system_shared_memory+0xfffca95c>
    ae64:	00c05504 	movi	r3,340
    ae68:	18801236 	bltu	r3,r2,aeb4 <_malloc_r+0x6f8>
    ae6c:	8804d3fa 	srli	r2,r17,15
    ae70:	12001e04 	addi	r8,r2,120
    ae74:	11c01dc4 	addi	r7,r2,119
    ae78:	4209883a 	add	r4,r8,r8
    ae7c:	003e6d06 	br	a834 <__alt_mem_nios_system_shared_memory+0xfffca834>
    ae80:	00c40004 	movi	r3,4096
    ae84:	003f4606 	br	aba0 <__alt_mem_nios_system_shared_memory+0xfffcaba0>
    ae88:	00800044 	movi	r2,1
    ae8c:	a0800115 	stw	r2,4(r20)
    ae90:	003f7406 	br	ac64 <__alt_mem_nios_system_shared_memory+0xfffcac64>
    ae94:	1805d0ba 	srai	r2,r3,2
    ae98:	01c00044 	movi	r7,1
    ae9c:	30c00117 	ldw	r3,4(r6)
    aea0:	388e983a 	sll	r7,r7,r2
    aea4:	2805883a 	mov	r2,r5
    aea8:	38c6b03a 	or	r3,r7,r3
    aeac:	30c00115 	stw	r3,4(r6)
    aeb0:	003f9b06 	br	ad20 <__alt_mem_nios_system_shared_memory+0xfffcad20>
    aeb4:	00c15504 	movi	r3,1364
    aeb8:	18801a36 	bltu	r3,r2,af24 <_malloc_r+0x768>
    aebc:	8804d4ba 	srli	r2,r17,18
    aec0:	12001f44 	addi	r8,r2,125
    aec4:	11c01f04 	addi	r7,r2,124
    aec8:	4209883a 	add	r4,r8,r8
    aecc:	003e5906 	br	a834 <__alt_mem_nios_system_shared_memory+0xfffca834>
    aed0:	ad400404 	addi	r21,r21,16
    aed4:	003f1706 	br	ab34 <__alt_mem_nios_system_shared_memory+0xfffcab34>
    aed8:	00c01504 	movi	r3,84
    aedc:	18802336 	bltu	r3,r2,af6c <_malloc_r+0x7b0>
    aee0:	3804d33a 	srli	r2,r7,12
    aee4:	11401bc4 	addi	r5,r2,111
    aee8:	10c01b84 	addi	r3,r2,110
    aeec:	294b883a 	add	r5,r5,r5
    aef0:	003f7b06 	br	ace0 <__alt_mem_nios_system_shared_memory+0xfffcace0>
    aef4:	9c000217 	ldw	r16,8(r19)
    aef8:	00bfff04 	movi	r2,-4
    aefc:	80c00117 	ldw	r3,4(r16)
    af00:	1886703a 	and	r3,r3,r2
    af04:	003f5306 	br	ac54 <__alt_mem_nios_system_shared_memory+0xfffcac54>
    af08:	3083ffcc 	andi	r2,r6,4095
    af0c:	103f181e 	bne	r2,zero,ab70 <__alt_mem_nios_system_shared_memory+0xfffcab70>
    af10:	99000217 	ldw	r4,8(r19)
    af14:	b545883a 	add	r2,r22,r21
    af18:	10800054 	ori	r2,r2,1
    af1c:	20800115 	stw	r2,4(r4)
    af20:	003f3e06 	br	ac1c <__alt_mem_nios_system_shared_memory+0xfffcac1c>
    af24:	01003f84 	movi	r4,254
    af28:	02001fc4 	movi	r8,127
    af2c:	01c01f84 	movi	r7,126
    af30:	003e4006 	br	a834 <__alt_mem_nios_system_shared_memory+0xfffca834>
    af34:	008000b4 	movhi	r2,2
    af38:	10824304 	addi	r2,r2,2316
    af3c:	15000015 	stw	r20,0(r2)
    af40:	003f1106 	br	ab88 <__alt_mem_nios_system_shared_memory+0xfffcab88>
    af44:	00800044 	movi	r2,1
    af48:	002b883a 	mov	r21,zero
    af4c:	003f1f06 	br	abcc <__alt_mem_nios_system_shared_memory+0xfffcabcc>
    af50:	81400204 	addi	r5,r16,8
    af54:	9009883a 	mov	r4,r18
    af58:	0009c8c0 	call	9c8c <_free_r>
    af5c:	008000b4 	movhi	r2,2
    af60:	10897604 	addi	r2,r2,9688
    af64:	10c00017 	ldw	r3,0(r2)
    af68:	003f2c06 	br	ac1c <__alt_mem_nios_system_shared_memory+0xfffcac1c>
    af6c:	00c05504 	movi	r3,340
    af70:	18800536 	bltu	r3,r2,af88 <_malloc_r+0x7cc>
    af74:	3804d3fa 	srli	r2,r7,15
    af78:	11401e04 	addi	r5,r2,120
    af7c:	10c01dc4 	addi	r3,r2,119
    af80:	294b883a 	add	r5,r5,r5
    af84:	003f5606 	br	ace0 <__alt_mem_nios_system_shared_memory+0xfffcace0>
    af88:	00c15504 	movi	r3,1364
    af8c:	18800536 	bltu	r3,r2,afa4 <_malloc_r+0x7e8>
    af90:	3804d4ba 	srli	r2,r7,18
    af94:	11401f44 	addi	r5,r2,125
    af98:	10c01f04 	addi	r3,r2,124
    af9c:	294b883a 	add	r5,r5,r5
    afa0:	003f4f06 	br	ace0 <__alt_mem_nios_system_shared_memory+0xfffcace0>
    afa4:	01403f84 	movi	r5,254
    afa8:	00c01f84 	movi	r3,126
    afac:	003f4c06 	br	ace0 <__alt_mem_nios_system_shared_memory+0xfffcace0>
    afb0:	98800117 	ldw	r2,4(r19)
    afb4:	003fa006 	br	ae38 <__alt_mem_nios_system_shared_memory+0xfffcae38>
    afb8:	8808d0fa 	srli	r4,r17,3
    afbc:	20800044 	addi	r2,r4,1
    afc0:	1085883a 	add	r2,r2,r2
    afc4:	003e9006 	br	aa08 <__alt_mem_nios_system_shared_memory+0xfffcaa08>

0000afc8 <memchr>:
    afc8:	208000cc 	andi	r2,r4,3
    afcc:	280f883a 	mov	r7,r5
    afd0:	10003426 	beq	r2,zero,b0a4 <memchr+0xdc>
    afd4:	30bfffc4 	addi	r2,r6,-1
    afd8:	30001a26 	beq	r6,zero,b044 <memchr+0x7c>
    afdc:	20c00003 	ldbu	r3,0(r4)
    afe0:	29803fcc 	andi	r6,r5,255
    afe4:	30c0051e 	bne	r6,r3,affc <memchr+0x34>
    afe8:	00001806 	br	b04c <memchr+0x84>
    afec:	10001526 	beq	r2,zero,b044 <memchr+0x7c>
    aff0:	20c00003 	ldbu	r3,0(r4)
    aff4:	10bfffc4 	addi	r2,r2,-1
    aff8:	30c01426 	beq	r6,r3,b04c <memchr+0x84>
    affc:	21000044 	addi	r4,r4,1
    b000:	20c000cc 	andi	r3,r4,3
    b004:	183ff91e 	bne	r3,zero,afec <__alt_mem_nios_system_shared_memory+0xfffcafec>
    b008:	020000c4 	movi	r8,3
    b00c:	40801136 	bltu	r8,r2,b054 <memchr+0x8c>
    b010:	10000c26 	beq	r2,zero,b044 <memchr+0x7c>
    b014:	20c00003 	ldbu	r3,0(r4)
    b018:	29403fcc 	andi	r5,r5,255
    b01c:	28c00b26 	beq	r5,r3,b04c <memchr+0x84>
    b020:	20c00044 	addi	r3,r4,1
    b024:	39803fcc 	andi	r6,r7,255
    b028:	2089883a 	add	r4,r4,r2
    b02c:	00000306 	br	b03c <memchr+0x74>
    b030:	18c00044 	addi	r3,r3,1
    b034:	197fffc3 	ldbu	r5,-1(r3)
    b038:	31400526 	beq	r6,r5,b050 <memchr+0x88>
    b03c:	1805883a 	mov	r2,r3
    b040:	20fffb1e 	bne	r4,r3,b030 <__alt_mem_nios_system_shared_memory+0xfffcb030>
    b044:	0005883a 	mov	r2,zero
    b048:	f800283a 	ret
    b04c:	2005883a 	mov	r2,r4
    b050:	f800283a 	ret
    b054:	28c03fcc 	andi	r3,r5,255
    b058:	1812923a 	slli	r9,r3,8
    b05c:	02ffbff4 	movhi	r11,65279
    b060:	02a02074 	movhi	r10,32897
    b064:	48d2b03a 	or	r9,r9,r3
    b068:	4806943a 	slli	r3,r9,16
    b06c:	5affbfc4 	addi	r11,r11,-257
    b070:	52a02004 	addi	r10,r10,-32640
    b074:	48d2b03a 	or	r9,r9,r3
    b078:	20c00017 	ldw	r3,0(r4)
    b07c:	48c6f03a 	xor	r3,r9,r3
    b080:	1acd883a 	add	r6,r3,r11
    b084:	00c6303a 	nor	r3,zero,r3
    b088:	30c6703a 	and	r3,r6,r3
    b08c:	1a86703a 	and	r3,r3,r10
    b090:	183fe01e 	bne	r3,zero,b014 <__alt_mem_nios_system_shared_memory+0xfffcb014>
    b094:	10bfff04 	addi	r2,r2,-4
    b098:	21000104 	addi	r4,r4,4
    b09c:	40bff636 	bltu	r8,r2,b078 <__alt_mem_nios_system_shared_memory+0xfffcb078>
    b0a0:	003fdb06 	br	b010 <__alt_mem_nios_system_shared_memory+0xfffcb010>
    b0a4:	3005883a 	mov	r2,r6
    b0a8:	003fd706 	br	b008 <__alt_mem_nios_system_shared_memory+0xfffcb008>

0000b0ac <memcpy>:
    b0ac:	defffd04 	addi	sp,sp,-12
    b0b0:	dfc00215 	stw	ra,8(sp)
    b0b4:	dc400115 	stw	r17,4(sp)
    b0b8:	dc000015 	stw	r16,0(sp)
    b0bc:	00c003c4 	movi	r3,15
    b0c0:	2005883a 	mov	r2,r4
    b0c4:	1980452e 	bgeu	r3,r6,b1dc <memcpy+0x130>
    b0c8:	2906b03a 	or	r3,r5,r4
    b0cc:	18c000cc 	andi	r3,r3,3
    b0d0:	1800441e 	bne	r3,zero,b1e4 <memcpy+0x138>
    b0d4:	347ffc04 	addi	r17,r6,-16
    b0d8:	8822d13a 	srli	r17,r17,4
    b0dc:	28c00104 	addi	r3,r5,4
    b0e0:	23400104 	addi	r13,r4,4
    b0e4:	8820913a 	slli	r16,r17,4
    b0e8:	2b000204 	addi	r12,r5,8
    b0ec:	22c00204 	addi	r11,r4,8
    b0f0:	84000504 	addi	r16,r16,20
    b0f4:	2a800304 	addi	r10,r5,12
    b0f8:	22400304 	addi	r9,r4,12
    b0fc:	2c21883a 	add	r16,r5,r16
    b100:	2811883a 	mov	r8,r5
    b104:	200f883a 	mov	r7,r4
    b108:	41000017 	ldw	r4,0(r8)
    b10c:	1fc00017 	ldw	ra,0(r3)
    b110:	63c00017 	ldw	r15,0(r12)
    b114:	39000015 	stw	r4,0(r7)
    b118:	53800017 	ldw	r14,0(r10)
    b11c:	6fc00015 	stw	ra,0(r13)
    b120:	5bc00015 	stw	r15,0(r11)
    b124:	4b800015 	stw	r14,0(r9)
    b128:	18c00404 	addi	r3,r3,16
    b12c:	39c00404 	addi	r7,r7,16
    b130:	42000404 	addi	r8,r8,16
    b134:	6b400404 	addi	r13,r13,16
    b138:	63000404 	addi	r12,r12,16
    b13c:	5ac00404 	addi	r11,r11,16
    b140:	52800404 	addi	r10,r10,16
    b144:	4a400404 	addi	r9,r9,16
    b148:	1c3fef1e 	bne	r3,r16,b108 <__alt_mem_nios_system_shared_memory+0xfffcb108>
    b14c:	89c00044 	addi	r7,r17,1
    b150:	380e913a 	slli	r7,r7,4
    b154:	310003cc 	andi	r4,r6,15
    b158:	02c000c4 	movi	r11,3
    b15c:	11c7883a 	add	r3,r2,r7
    b160:	29cb883a 	add	r5,r5,r7
    b164:	5900212e 	bgeu	r11,r4,b1ec <memcpy+0x140>
    b168:	1813883a 	mov	r9,r3
    b16c:	2811883a 	mov	r8,r5
    b170:	200f883a 	mov	r7,r4
    b174:	42800017 	ldw	r10,0(r8)
    b178:	4a400104 	addi	r9,r9,4
    b17c:	39ffff04 	addi	r7,r7,-4
    b180:	4abfff15 	stw	r10,-4(r9)
    b184:	42000104 	addi	r8,r8,4
    b188:	59fffa36 	bltu	r11,r7,b174 <__alt_mem_nios_system_shared_memory+0xfffcb174>
    b18c:	213fff04 	addi	r4,r4,-4
    b190:	2008d0ba 	srli	r4,r4,2
    b194:	318000cc 	andi	r6,r6,3
    b198:	21000044 	addi	r4,r4,1
    b19c:	2109883a 	add	r4,r4,r4
    b1a0:	2109883a 	add	r4,r4,r4
    b1a4:	1907883a 	add	r3,r3,r4
    b1a8:	290b883a 	add	r5,r5,r4
    b1ac:	30000626 	beq	r6,zero,b1c8 <memcpy+0x11c>
    b1b0:	198d883a 	add	r6,r3,r6
    b1b4:	29c00003 	ldbu	r7,0(r5)
    b1b8:	18c00044 	addi	r3,r3,1
    b1bc:	29400044 	addi	r5,r5,1
    b1c0:	19ffffc5 	stb	r7,-1(r3)
    b1c4:	19bffb1e 	bne	r3,r6,b1b4 <__alt_mem_nios_system_shared_memory+0xfffcb1b4>
    b1c8:	dfc00217 	ldw	ra,8(sp)
    b1cc:	dc400117 	ldw	r17,4(sp)
    b1d0:	dc000017 	ldw	r16,0(sp)
    b1d4:	dec00304 	addi	sp,sp,12
    b1d8:	f800283a 	ret
    b1dc:	2007883a 	mov	r3,r4
    b1e0:	003ff206 	br	b1ac <__alt_mem_nios_system_shared_memory+0xfffcb1ac>
    b1e4:	2007883a 	mov	r3,r4
    b1e8:	003ff106 	br	b1b0 <__alt_mem_nios_system_shared_memory+0xfffcb1b0>
    b1ec:	200d883a 	mov	r6,r4
    b1f0:	003fee06 	br	b1ac <__alt_mem_nios_system_shared_memory+0xfffcb1ac>

0000b1f4 <memset>:
    b1f4:	20c000cc 	andi	r3,r4,3
    b1f8:	2005883a 	mov	r2,r4
    b1fc:	18004426 	beq	r3,zero,b310 <memset+0x11c>
    b200:	31ffffc4 	addi	r7,r6,-1
    b204:	30004026 	beq	r6,zero,b308 <memset+0x114>
    b208:	2813883a 	mov	r9,r5
    b20c:	200d883a 	mov	r6,r4
    b210:	2007883a 	mov	r3,r4
    b214:	00000406 	br	b228 <memset+0x34>
    b218:	3a3fffc4 	addi	r8,r7,-1
    b21c:	31800044 	addi	r6,r6,1
    b220:	38003926 	beq	r7,zero,b308 <memset+0x114>
    b224:	400f883a 	mov	r7,r8
    b228:	18c00044 	addi	r3,r3,1
    b22c:	32400005 	stb	r9,0(r6)
    b230:	1a0000cc 	andi	r8,r3,3
    b234:	403ff81e 	bne	r8,zero,b218 <__alt_mem_nios_system_shared_memory+0xfffcb218>
    b238:	010000c4 	movi	r4,3
    b23c:	21c02d2e 	bgeu	r4,r7,b2f4 <memset+0x100>
    b240:	29003fcc 	andi	r4,r5,255
    b244:	200c923a 	slli	r6,r4,8
    b248:	3108b03a 	or	r4,r6,r4
    b24c:	200c943a 	slli	r6,r4,16
    b250:	218cb03a 	or	r6,r4,r6
    b254:	010003c4 	movi	r4,15
    b258:	21c0182e 	bgeu	r4,r7,b2bc <memset+0xc8>
    b25c:	3b3ffc04 	addi	r12,r7,-16
    b260:	6018d13a 	srli	r12,r12,4
    b264:	1a000104 	addi	r8,r3,4
    b268:	1ac00204 	addi	r11,r3,8
    b26c:	6008913a 	slli	r4,r12,4
    b270:	1a800304 	addi	r10,r3,12
    b274:	1813883a 	mov	r9,r3
    b278:	21000504 	addi	r4,r4,20
    b27c:	1909883a 	add	r4,r3,r4
    b280:	49800015 	stw	r6,0(r9)
    b284:	41800015 	stw	r6,0(r8)
    b288:	59800015 	stw	r6,0(r11)
    b28c:	51800015 	stw	r6,0(r10)
    b290:	42000404 	addi	r8,r8,16
    b294:	4a400404 	addi	r9,r9,16
    b298:	5ac00404 	addi	r11,r11,16
    b29c:	52800404 	addi	r10,r10,16
    b2a0:	413ff71e 	bne	r8,r4,b280 <__alt_mem_nios_system_shared_memory+0xfffcb280>
    b2a4:	63000044 	addi	r12,r12,1
    b2a8:	6018913a 	slli	r12,r12,4
    b2ac:	39c003cc 	andi	r7,r7,15
    b2b0:	010000c4 	movi	r4,3
    b2b4:	1b07883a 	add	r3,r3,r12
    b2b8:	21c00e2e 	bgeu	r4,r7,b2f4 <memset+0x100>
    b2bc:	1813883a 	mov	r9,r3
    b2c0:	3811883a 	mov	r8,r7
    b2c4:	010000c4 	movi	r4,3
    b2c8:	49800015 	stw	r6,0(r9)
    b2cc:	423fff04 	addi	r8,r8,-4
    b2d0:	4a400104 	addi	r9,r9,4
    b2d4:	223ffc36 	bltu	r4,r8,b2c8 <__alt_mem_nios_system_shared_memory+0xfffcb2c8>
    b2d8:	393fff04 	addi	r4,r7,-4
    b2dc:	2008d0ba 	srli	r4,r4,2
    b2e0:	39c000cc 	andi	r7,r7,3
    b2e4:	21000044 	addi	r4,r4,1
    b2e8:	2109883a 	add	r4,r4,r4
    b2ec:	2109883a 	add	r4,r4,r4
    b2f0:	1907883a 	add	r3,r3,r4
    b2f4:	38000526 	beq	r7,zero,b30c <memset+0x118>
    b2f8:	19cf883a 	add	r7,r3,r7
    b2fc:	19400005 	stb	r5,0(r3)
    b300:	18c00044 	addi	r3,r3,1
    b304:	38fffd1e 	bne	r7,r3,b2fc <__alt_mem_nios_system_shared_memory+0xfffcb2fc>
    b308:	f800283a 	ret
    b30c:	f800283a 	ret
    b310:	2007883a 	mov	r3,r4
    b314:	300f883a 	mov	r7,r6
    b318:	003fc706 	br	b238 <__alt_mem_nios_system_shared_memory+0xfffcb238>

0000b31c <_open_r>:
    b31c:	defffd04 	addi	sp,sp,-12
    b320:	2805883a 	mov	r2,r5
    b324:	dc000015 	stw	r16,0(sp)
    b328:	040000b4 	movhi	r16,2
    b32c:	dc400115 	stw	r17,4(sp)
    b330:	300b883a 	mov	r5,r6
    b334:	84094804 	addi	r16,r16,9504
    b338:	2023883a 	mov	r17,r4
    b33c:	380d883a 	mov	r6,r7
    b340:	1009883a 	mov	r4,r2
    b344:	dfc00215 	stw	ra,8(sp)
    b348:	80000015 	stw	zero,0(r16)
    b34c:	001b4800 	call	1b480 <open>
    b350:	00ffffc4 	movi	r3,-1
    b354:	10c00526 	beq	r2,r3,b36c <_open_r+0x50>
    b358:	dfc00217 	ldw	ra,8(sp)
    b35c:	dc400117 	ldw	r17,4(sp)
    b360:	dc000017 	ldw	r16,0(sp)
    b364:	dec00304 	addi	sp,sp,12
    b368:	f800283a 	ret
    b36c:	80c00017 	ldw	r3,0(r16)
    b370:	183ff926 	beq	r3,zero,b358 <__alt_mem_nios_system_shared_memory+0xfffcb358>
    b374:	88c00015 	stw	r3,0(r17)
    b378:	003ff706 	br	b358 <__alt_mem_nios_system_shared_memory+0xfffcb358>

0000b37c <_printf_r>:
    b37c:	defffd04 	addi	sp,sp,-12
    b380:	2805883a 	mov	r2,r5
    b384:	dfc00015 	stw	ra,0(sp)
    b388:	d9800115 	stw	r6,4(sp)
    b38c:	d9c00215 	stw	r7,8(sp)
    b390:	21400217 	ldw	r5,8(r4)
    b394:	d9c00104 	addi	r7,sp,4
    b398:	100d883a 	mov	r6,r2
    b39c:	000fda40 	call	fda4 <___vfprintf_internal_r>
    b3a0:	dfc00017 	ldw	ra,0(sp)
    b3a4:	dec00304 	addi	sp,sp,12
    b3a8:	f800283a 	ret

0000b3ac <printf>:
    b3ac:	defffc04 	addi	sp,sp,-16
    b3b0:	dfc00015 	stw	ra,0(sp)
    b3b4:	d9400115 	stw	r5,4(sp)
    b3b8:	d9800215 	stw	r6,8(sp)
    b3bc:	d9c00315 	stw	r7,12(sp)
    b3c0:	008000b4 	movhi	r2,2
    b3c4:	10824204 	addi	r2,r2,2312
    b3c8:	10800017 	ldw	r2,0(r2)
    b3cc:	200b883a 	mov	r5,r4
    b3d0:	d9800104 	addi	r6,sp,4
    b3d4:	11000217 	ldw	r4,8(r2)
    b3d8:	00120800 	call	12080 <__vfprintf_internal>
    b3dc:	dfc00017 	ldw	ra,0(sp)
    b3e0:	dec00404 	addi	sp,sp,16
    b3e4:	f800283a 	ret

0000b3e8 <_putchar_r>:
    b3e8:	21800217 	ldw	r6,8(r4)
    b3ec:	00162541 	jmpi	16254 <_putc_r>

0000b3f0 <putchar>:
    b3f0:	008000b4 	movhi	r2,2
    b3f4:	10824204 	addi	r2,r2,2312
    b3f8:	200b883a 	mov	r5,r4
    b3fc:	11000017 	ldw	r4,0(r2)
    b400:	21800217 	ldw	r6,8(r4)
    b404:	00162541 	jmpi	16254 <_putc_r>

0000b408 <_puts_r>:
    b408:	defff604 	addi	sp,sp,-40
    b40c:	dc000715 	stw	r16,28(sp)
    b410:	2021883a 	mov	r16,r4
    b414:	2809883a 	mov	r4,r5
    b418:	dc400815 	stw	r17,32(sp)
    b41c:	dfc00915 	stw	ra,36(sp)
    b420:	2823883a 	mov	r17,r5
    b424:	000ba8c0 	call	ba8c <strlen>
    b428:	10c00044 	addi	r3,r2,1
    b42c:	d8800115 	stw	r2,4(sp)
    b430:	008000b4 	movhi	r2,2
    b434:	10b98b04 	addi	r2,r2,-6612
    b438:	d8800215 	stw	r2,8(sp)
    b43c:	00800044 	movi	r2,1
    b440:	d8800315 	stw	r2,12(sp)
    b444:	00800084 	movi	r2,2
    b448:	dc400015 	stw	r17,0(sp)
    b44c:	d8c00615 	stw	r3,24(sp)
    b450:	dec00415 	stw	sp,16(sp)
    b454:	d8800515 	stw	r2,20(sp)
    b458:	80000226 	beq	r16,zero,b464 <_puts_r+0x5c>
    b45c:	80800e17 	ldw	r2,56(r16)
    b460:	10001426 	beq	r2,zero,b4b4 <_puts_r+0xac>
    b464:	81400217 	ldw	r5,8(r16)
    b468:	2880030b 	ldhu	r2,12(r5)
    b46c:	10c8000c 	andi	r3,r2,8192
    b470:	1800061e 	bne	r3,zero,b48c <_puts_r+0x84>
    b474:	29001917 	ldw	r4,100(r5)
    b478:	00f7ffc4 	movi	r3,-8193
    b47c:	10880014 	ori	r2,r2,8192
    b480:	20c6703a 	and	r3,r4,r3
    b484:	2880030d 	sth	r2,12(r5)
    b488:	28c01915 	stw	r3,100(r5)
    b48c:	d9800404 	addi	r6,sp,16
    b490:	8009883a 	mov	r4,r16
    b494:	0013dc00 	call	13dc0 <__sfvwrite_r>
    b498:	1000091e 	bne	r2,zero,b4c0 <_puts_r+0xb8>
    b49c:	00800284 	movi	r2,10
    b4a0:	dfc00917 	ldw	ra,36(sp)
    b4a4:	dc400817 	ldw	r17,32(sp)
    b4a8:	dc000717 	ldw	r16,28(sp)
    b4ac:	dec00a04 	addi	sp,sp,40
    b4b0:	f800283a 	ret
    b4b4:	8009883a 	mov	r4,r16
    b4b8:	00099c00 	call	99c0 <__sinit>
    b4bc:	003fe906 	br	b464 <__alt_mem_nios_system_shared_memory+0xfffcb464>
    b4c0:	00bfffc4 	movi	r2,-1
    b4c4:	003ff606 	br	b4a0 <__alt_mem_nios_system_shared_memory+0xfffcb4a0>

0000b4c8 <puts>:
    b4c8:	008000b4 	movhi	r2,2
    b4cc:	10824204 	addi	r2,r2,2312
    b4d0:	200b883a 	mov	r5,r4
    b4d4:	11000017 	ldw	r4,0(r2)
    b4d8:	000b4081 	jmpi	b408 <_puts_r>

0000b4dc <lflush>:
    b4dc:	2080030b 	ldhu	r2,12(r4)
    b4e0:	00c00244 	movi	r3,9
    b4e4:	1080024c 	andi	r2,r2,9
    b4e8:	10c00226 	beq	r2,r3,b4f4 <lflush+0x18>
    b4ec:	0005883a 	mov	r2,zero
    b4f0:	f800283a 	ret
    b4f4:	00094681 	jmpi	9468 <fflush>

0000b4f8 <__srefill_r>:
    b4f8:	defffc04 	addi	sp,sp,-16
    b4fc:	dc400115 	stw	r17,4(sp)
    b500:	dc000015 	stw	r16,0(sp)
    b504:	dfc00315 	stw	ra,12(sp)
    b508:	dc800215 	stw	r18,8(sp)
    b50c:	2023883a 	mov	r17,r4
    b510:	2821883a 	mov	r16,r5
    b514:	20000226 	beq	r4,zero,b520 <__srefill_r+0x28>
    b518:	20800e17 	ldw	r2,56(r4)
    b51c:	10003c26 	beq	r2,zero,b610 <__srefill_r+0x118>
    b520:	80c0030b 	ldhu	r3,12(r16)
    b524:	1908000c 	andi	r4,r3,8192
    b528:	1805883a 	mov	r2,r3
    b52c:	2000071e 	bne	r4,zero,b54c <__srefill_r+0x54>
    b530:	81001917 	ldw	r4,100(r16)
    b534:	18880014 	ori	r2,r3,8192
    b538:	00f7ffc4 	movi	r3,-8193
    b53c:	20c8703a 	and	r4,r4,r3
    b540:	8080030d 	sth	r2,12(r16)
    b544:	1007883a 	mov	r3,r2
    b548:	81001915 	stw	r4,100(r16)
    b54c:	80000115 	stw	zero,4(r16)
    b550:	1100080c 	andi	r4,r2,32
    b554:	2000571e 	bne	r4,zero,b6b4 <__srefill_r+0x1bc>
    b558:	1100010c 	andi	r4,r2,4
    b55c:	20001f26 	beq	r4,zero,b5dc <__srefill_r+0xe4>
    b560:	81400c17 	ldw	r5,48(r16)
    b564:	28000826 	beq	r5,zero,b588 <__srefill_r+0x90>
    b568:	80801004 	addi	r2,r16,64
    b56c:	28800226 	beq	r5,r2,b578 <__srefill_r+0x80>
    b570:	8809883a 	mov	r4,r17
    b574:	0009c8c0 	call	9c8c <_free_r>
    b578:	80800f17 	ldw	r2,60(r16)
    b57c:	80000c15 	stw	zero,48(r16)
    b580:	80800115 	stw	r2,4(r16)
    b584:	1000391e 	bne	r2,zero,b66c <__srefill_r+0x174>
    b588:	80800417 	ldw	r2,16(r16)
    b58c:	10004b26 	beq	r2,zero,b6bc <__srefill_r+0x1c4>
    b590:	8480030b 	ldhu	r18,12(r16)
    b594:	908000cc 	andi	r2,r18,3
    b598:	10001f1e 	bne	r2,zero,b618 <__srefill_r+0x120>
    b59c:	81800417 	ldw	r6,16(r16)
    b5a0:	80800817 	ldw	r2,32(r16)
    b5a4:	81c00517 	ldw	r7,20(r16)
    b5a8:	81400717 	ldw	r5,28(r16)
    b5ac:	81800015 	stw	r6,0(r16)
    b5b0:	8809883a 	mov	r4,r17
    b5b4:	103ee83a 	callr	r2
    b5b8:	80800115 	stw	r2,4(r16)
    b5bc:	00800e0e 	bge	zero,r2,b5f8 <__srefill_r+0x100>
    b5c0:	0005883a 	mov	r2,zero
    b5c4:	dfc00317 	ldw	ra,12(sp)
    b5c8:	dc800217 	ldw	r18,8(sp)
    b5cc:	dc400117 	ldw	r17,4(sp)
    b5d0:	dc000017 	ldw	r16,0(sp)
    b5d4:	dec00404 	addi	sp,sp,16
    b5d8:	f800283a 	ret
    b5dc:	1100040c 	andi	r4,r2,16
    b5e0:	20003026 	beq	r4,zero,b6a4 <__srefill_r+0x1ac>
    b5e4:	1080020c 	andi	r2,r2,8
    b5e8:	1000241e 	bne	r2,zero,b67c <__srefill_r+0x184>
    b5ec:	18c00114 	ori	r3,r3,4
    b5f0:	80c0030d 	sth	r3,12(r16)
    b5f4:	003fe406 	br	b588 <__alt_mem_nios_system_shared_memory+0xfffcb588>
    b5f8:	80c0030b 	ldhu	r3,12(r16)
    b5fc:	1000161e 	bne	r2,zero,b658 <__srefill_r+0x160>
    b600:	18c00814 	ori	r3,r3,32
    b604:	00bfffc4 	movi	r2,-1
    b608:	80c0030d 	sth	r3,12(r16)
    b60c:	003fed06 	br	b5c4 <__alt_mem_nios_system_shared_memory+0xfffcb5c4>
    b610:	00099c00 	call	99c0 <__sinit>
    b614:	003fc206 	br	b520 <__alt_mem_nios_system_shared_memory+0xfffcb520>
    b618:	008000b4 	movhi	r2,2
    b61c:	10824104 	addi	r2,r2,2308
    b620:	11000017 	ldw	r4,0(r2)
    b624:	01400074 	movhi	r5,1
    b628:	00800044 	movi	r2,1
    b62c:	296d3704 	addi	r5,r5,-19236
    b630:	8080030d 	sth	r2,12(r16)
    b634:	000a4780 	call	a478 <_fwalk>
    b638:	00800244 	movi	r2,9
    b63c:	8480030d 	sth	r18,12(r16)
    b640:	9480024c 	andi	r18,r18,9
    b644:	90bfd51e 	bne	r18,r2,b59c <__alt_mem_nios_system_shared_memory+0xfffcb59c>
    b648:	800b883a 	mov	r5,r16
    b64c:	8809883a 	mov	r4,r17
    b650:	00091f00 	call	91f0 <__sflush_r>
    b654:	003fd106 	br	b59c <__alt_mem_nios_system_shared_memory+0xfffcb59c>
    b658:	18c01014 	ori	r3,r3,64
    b65c:	80000115 	stw	zero,4(r16)
    b660:	00bfffc4 	movi	r2,-1
    b664:	80c0030d 	sth	r3,12(r16)
    b668:	003fd606 	br	b5c4 <__alt_mem_nios_system_shared_memory+0xfffcb5c4>
    b66c:	80c00e17 	ldw	r3,56(r16)
    b670:	0005883a 	mov	r2,zero
    b674:	80c00015 	stw	r3,0(r16)
    b678:	003fd206 	br	b5c4 <__alt_mem_nios_system_shared_memory+0xfffcb5c4>
    b67c:	800b883a 	mov	r5,r16
    b680:	8809883a 	mov	r4,r17
    b684:	000940c0 	call	940c <_fflush_r>
    b688:	10000a1e 	bne	r2,zero,b6b4 <__srefill_r+0x1bc>
    b68c:	8080030b 	ldhu	r2,12(r16)
    b690:	00fffdc4 	movi	r3,-9
    b694:	80000215 	stw	zero,8(r16)
    b698:	1886703a 	and	r3,r3,r2
    b69c:	80000615 	stw	zero,24(r16)
    b6a0:	003fd206 	br	b5ec <__alt_mem_nios_system_shared_memory+0xfffcb5ec>
    b6a4:	00800244 	movi	r2,9
    b6a8:	88800015 	stw	r2,0(r17)
    b6ac:	18c01014 	ori	r3,r3,64
    b6b0:	80c0030d 	sth	r3,12(r16)
    b6b4:	00bfffc4 	movi	r2,-1
    b6b8:	003fc206 	br	b5c4 <__alt_mem_nios_system_shared_memory+0xfffcb5c4>
    b6bc:	800b883a 	mov	r5,r16
    b6c0:	8809883a 	mov	r4,r17
    b6c4:	000a6000 	call	a600 <__smakebuf_r>
    b6c8:	003fb106 	br	b590 <__alt_mem_nios_system_shared_memory+0xfffcb590>

0000b6cc <_sbrk_r>:
    b6cc:	defffd04 	addi	sp,sp,-12
    b6d0:	dc000015 	stw	r16,0(sp)
    b6d4:	040000b4 	movhi	r16,2
    b6d8:	dc400115 	stw	r17,4(sp)
    b6dc:	84094804 	addi	r16,r16,9504
    b6e0:	2023883a 	mov	r17,r4
    b6e4:	2809883a 	mov	r4,r5
    b6e8:	dfc00215 	stw	ra,8(sp)
    b6ec:	80000015 	stw	zero,0(r16)
    b6f0:	001b7a00 	call	1b7a0 <sbrk>
    b6f4:	00ffffc4 	movi	r3,-1
    b6f8:	10c00526 	beq	r2,r3,b710 <_sbrk_r+0x44>
    b6fc:	dfc00217 	ldw	ra,8(sp)
    b700:	dc400117 	ldw	r17,4(sp)
    b704:	dc000017 	ldw	r16,0(sp)
    b708:	dec00304 	addi	sp,sp,12
    b70c:	f800283a 	ret
    b710:	80c00017 	ldw	r3,0(r16)
    b714:	183ff926 	beq	r3,zero,b6fc <__alt_mem_nios_system_shared_memory+0xfffcb6fc>
    b718:	88c00015 	stw	r3,0(r17)
    b71c:	003ff706 	br	b6fc <__alt_mem_nios_system_shared_memory+0xfffcb6fc>

0000b720 <_sprintf_r>:
    b720:	deffe404 	addi	sp,sp,-112
    b724:	2807883a 	mov	r3,r5
    b728:	dfc01a15 	stw	ra,104(sp)
    b72c:	d9c01b15 	stw	r7,108(sp)
    b730:	00a00034 	movhi	r2,32768
    b734:	10bfffc4 	addi	r2,r2,-1
    b738:	02008204 	movi	r8,520
    b73c:	d8800215 	stw	r2,8(sp)
    b740:	d8800515 	stw	r2,20(sp)
    b744:	d9c01b04 	addi	r7,sp,108
    b748:	d80b883a 	mov	r5,sp
    b74c:	00bfffc4 	movi	r2,-1
    b750:	d8c00015 	stw	r3,0(sp)
    b754:	d8c00415 	stw	r3,16(sp)
    b758:	da00030d 	sth	r8,12(sp)
    b75c:	d880038d 	sth	r2,14(sp)
    b760:	000dae80 	call	dae8 <___svfprintf_internal_r>
    b764:	d8c00017 	ldw	r3,0(sp)
    b768:	18000005 	stb	zero,0(r3)
    b76c:	dfc01a17 	ldw	ra,104(sp)
    b770:	dec01c04 	addi	sp,sp,112
    b774:	f800283a 	ret

0000b778 <sprintf>:
    b778:	deffe304 	addi	sp,sp,-116
    b77c:	2007883a 	mov	r3,r4
    b780:	dfc01a15 	stw	ra,104(sp)
    b784:	d9801b15 	stw	r6,108(sp)
    b788:	d9c01c15 	stw	r7,112(sp)
    b78c:	010000b4 	movhi	r4,2
    b790:	21024204 	addi	r4,r4,2312
    b794:	21000017 	ldw	r4,0(r4)
    b798:	00a00034 	movhi	r2,32768
    b79c:	10bfffc4 	addi	r2,r2,-1
    b7a0:	280d883a 	mov	r6,r5
    b7a4:	02008204 	movi	r8,520
    b7a8:	d8800215 	stw	r2,8(sp)
    b7ac:	d8800515 	stw	r2,20(sp)
    b7b0:	d9c01b04 	addi	r7,sp,108
    b7b4:	d80b883a 	mov	r5,sp
    b7b8:	00bfffc4 	movi	r2,-1
    b7bc:	d8c00015 	stw	r3,0(sp)
    b7c0:	d8c00415 	stw	r3,16(sp)
    b7c4:	da00030d 	sth	r8,12(sp)
    b7c8:	d880038d 	sth	r2,14(sp)
    b7cc:	000dae80 	call	dae8 <___svfprintf_internal_r>
    b7d0:	d8c00017 	ldw	r3,0(sp)
    b7d4:	18000005 	stb	zero,0(r3)
    b7d8:	dfc01a17 	ldw	ra,104(sp)
    b7dc:	dec01d04 	addi	sp,sp,116
    b7e0:	f800283a 	ret

0000b7e4 <__sread>:
    b7e4:	defffe04 	addi	sp,sp,-8
    b7e8:	dc000015 	stw	r16,0(sp)
    b7ec:	2821883a 	mov	r16,r5
    b7f0:	2940038f 	ldh	r5,14(r5)
    b7f4:	dfc00115 	stw	ra,4(sp)
    b7f8:	00163bc0 	call	163bc <_read_r>
    b7fc:	10000716 	blt	r2,zero,b81c <__sread+0x38>
    b800:	80c01417 	ldw	r3,80(r16)
    b804:	1887883a 	add	r3,r3,r2
    b808:	80c01415 	stw	r3,80(r16)
    b80c:	dfc00117 	ldw	ra,4(sp)
    b810:	dc000017 	ldw	r16,0(sp)
    b814:	dec00204 	addi	sp,sp,8
    b818:	f800283a 	ret
    b81c:	80c0030b 	ldhu	r3,12(r16)
    b820:	18fbffcc 	andi	r3,r3,61439
    b824:	80c0030d 	sth	r3,12(r16)
    b828:	dfc00117 	ldw	ra,4(sp)
    b82c:	dc000017 	ldw	r16,0(sp)
    b830:	dec00204 	addi	sp,sp,8
    b834:	f800283a 	ret

0000b838 <__seofread>:
    b838:	0005883a 	mov	r2,zero
    b83c:	f800283a 	ret

0000b840 <__swrite>:
    b840:	2880030b 	ldhu	r2,12(r5)
    b844:	defffb04 	addi	sp,sp,-20
    b848:	dcc00315 	stw	r19,12(sp)
    b84c:	dc800215 	stw	r18,8(sp)
    b850:	dc400115 	stw	r17,4(sp)
    b854:	dc000015 	stw	r16,0(sp)
    b858:	dfc00415 	stw	ra,16(sp)
    b85c:	10c0400c 	andi	r3,r2,256
    b860:	2821883a 	mov	r16,r5
    b864:	2023883a 	mov	r17,r4
    b868:	3025883a 	mov	r18,r6
    b86c:	3827883a 	mov	r19,r7
    b870:	18000526 	beq	r3,zero,b888 <__swrite+0x48>
    b874:	2940038f 	ldh	r5,14(r5)
    b878:	01c00084 	movi	r7,2
    b87c:	000d883a 	mov	r6,zero
    b880:	0014f640 	call	14f64 <_lseek_r>
    b884:	8080030b 	ldhu	r2,12(r16)
    b888:	8140038f 	ldh	r5,14(r16)
    b88c:	10bbffcc 	andi	r2,r2,61439
    b890:	980f883a 	mov	r7,r19
    b894:	900d883a 	mov	r6,r18
    b898:	8809883a 	mov	r4,r17
    b89c:	8080030d 	sth	r2,12(r16)
    b8a0:	dfc00417 	ldw	ra,16(sp)
    b8a4:	dcc00317 	ldw	r19,12(sp)
    b8a8:	dc800217 	ldw	r18,8(sp)
    b8ac:	dc400117 	ldw	r17,4(sp)
    b8b0:	dc000017 	ldw	r16,0(sp)
    b8b4:	dec00504 	addi	sp,sp,20
    b8b8:	00121581 	jmpi	12158 <_write_r>

0000b8bc <__sseek>:
    b8bc:	defffe04 	addi	sp,sp,-8
    b8c0:	dc000015 	stw	r16,0(sp)
    b8c4:	2821883a 	mov	r16,r5
    b8c8:	2940038f 	ldh	r5,14(r5)
    b8cc:	dfc00115 	stw	ra,4(sp)
    b8d0:	0014f640 	call	14f64 <_lseek_r>
    b8d4:	00ffffc4 	movi	r3,-1
    b8d8:	10c00826 	beq	r2,r3,b8fc <__sseek+0x40>
    b8dc:	80c0030b 	ldhu	r3,12(r16)
    b8e0:	80801415 	stw	r2,80(r16)
    b8e4:	18c40014 	ori	r3,r3,4096
    b8e8:	80c0030d 	sth	r3,12(r16)
    b8ec:	dfc00117 	ldw	ra,4(sp)
    b8f0:	dc000017 	ldw	r16,0(sp)
    b8f4:	dec00204 	addi	sp,sp,8
    b8f8:	f800283a 	ret
    b8fc:	80c0030b 	ldhu	r3,12(r16)
    b900:	18fbffcc 	andi	r3,r3,61439
    b904:	80c0030d 	sth	r3,12(r16)
    b908:	dfc00117 	ldw	ra,4(sp)
    b90c:	dc000017 	ldw	r16,0(sp)
    b910:	dec00204 	addi	sp,sp,8
    b914:	f800283a 	ret

0000b918 <__sclose>:
    b918:	2940038f 	ldh	r5,14(r5)
    b91c:	001230c1 	jmpi	1230c <_close_r>

0000b920 <strcmp>:
    b920:	2144b03a 	or	r2,r4,r5
    b924:	108000cc 	andi	r2,r2,3
    b928:	1000171e 	bne	r2,zero,b988 <strcmp+0x68>
    b92c:	20800017 	ldw	r2,0(r4)
    b930:	28c00017 	ldw	r3,0(r5)
    b934:	10c0141e 	bne	r2,r3,b988 <strcmp+0x68>
    b938:	027fbff4 	movhi	r9,65279
    b93c:	4a7fbfc4 	addi	r9,r9,-257
    b940:	0086303a 	nor	r3,zero,r2
    b944:	02202074 	movhi	r8,32897
    b948:	1245883a 	add	r2,r2,r9
    b94c:	42202004 	addi	r8,r8,-32640
    b950:	10c4703a 	and	r2,r2,r3
    b954:	1204703a 	and	r2,r2,r8
    b958:	10000226 	beq	r2,zero,b964 <strcmp+0x44>
    b95c:	00002306 	br	b9ec <strcmp+0xcc>
    b960:	1000221e 	bne	r2,zero,b9ec <strcmp+0xcc>
    b964:	21000104 	addi	r4,r4,4
    b968:	20c00017 	ldw	r3,0(r4)
    b96c:	29400104 	addi	r5,r5,4
    b970:	29800017 	ldw	r6,0(r5)
    b974:	1a4f883a 	add	r7,r3,r9
    b978:	00c4303a 	nor	r2,zero,r3
    b97c:	3884703a 	and	r2,r7,r2
    b980:	1204703a 	and	r2,r2,r8
    b984:	19bff626 	beq	r3,r6,b960 <__alt_mem_nios_system_shared_memory+0xfffcb960>
    b988:	20800003 	ldbu	r2,0(r4)
    b98c:	10c03fcc 	andi	r3,r2,255
    b990:	18c0201c 	xori	r3,r3,128
    b994:	18ffe004 	addi	r3,r3,-128
    b998:	18000c26 	beq	r3,zero,b9cc <strcmp+0xac>
    b99c:	29800007 	ldb	r6,0(r5)
    b9a0:	19800326 	beq	r3,r6,b9b0 <strcmp+0x90>
    b9a4:	00001306 	br	b9f4 <strcmp+0xd4>
    b9a8:	29800007 	ldb	r6,0(r5)
    b9ac:	11800b1e 	bne	r2,r6,b9dc <strcmp+0xbc>
    b9b0:	21000044 	addi	r4,r4,1
    b9b4:	20c00003 	ldbu	r3,0(r4)
    b9b8:	29400044 	addi	r5,r5,1
    b9bc:	18803fcc 	andi	r2,r3,255
    b9c0:	1080201c 	xori	r2,r2,128
    b9c4:	10bfe004 	addi	r2,r2,-128
    b9c8:	103ff71e 	bne	r2,zero,b9a8 <__alt_mem_nios_system_shared_memory+0xfffcb9a8>
    b9cc:	0007883a 	mov	r3,zero
    b9d0:	28800003 	ldbu	r2,0(r5)
    b9d4:	1885c83a 	sub	r2,r3,r2
    b9d8:	f800283a 	ret
    b9dc:	28800003 	ldbu	r2,0(r5)
    b9e0:	18c03fcc 	andi	r3,r3,255
    b9e4:	1885c83a 	sub	r2,r3,r2
    b9e8:	f800283a 	ret
    b9ec:	0005883a 	mov	r2,zero
    b9f0:	f800283a 	ret
    b9f4:	10c03fcc 	andi	r3,r2,255
    b9f8:	003ff506 	br	b9d0 <__alt_mem_nios_system_shared_memory+0xfffcb9d0>

0000b9fc <strcpy>:
    b9fc:	2906b03a 	or	r3,r5,r4
    ba00:	18c000cc 	andi	r3,r3,3
    ba04:	2005883a 	mov	r2,r4
    ba08:	1800161e 	bne	r3,zero,ba64 <strcpy+0x68>
    ba0c:	29c00017 	ldw	r7,0(r5)
    ba10:	02ffbff4 	movhi	r11,65279
    ba14:	5affbfc4 	addi	r11,r11,-257
    ba18:	02a02074 	movhi	r10,32897
    ba1c:	01c6303a 	nor	r3,zero,r7
    ba20:	3ac9883a 	add	r4,r7,r11
    ba24:	52a02004 	addi	r10,r10,-32640
    ba28:	20c6703a 	and	r3,r4,r3
    ba2c:	1a86703a 	and	r3,r3,r10
    ba30:	18000c1e 	bne	r3,zero,ba64 <strcpy+0x68>
    ba34:	1011883a 	mov	r8,r2
    ba38:	41c00015 	stw	r7,0(r8)
    ba3c:	29400104 	addi	r5,r5,4
    ba40:	29c00017 	ldw	r7,0(r5)
    ba44:	41800104 	addi	r6,r8,4
    ba48:	3011883a 	mov	r8,r6
    ba4c:	3ad3883a 	add	r9,r7,r11
    ba50:	01c6303a 	nor	r3,zero,r7
    ba54:	48c6703a 	and	r3,r9,r3
    ba58:	1a86703a 	and	r3,r3,r10
    ba5c:	183ff626 	beq	r3,zero,ba38 <__alt_mem_nios_system_shared_memory+0xfffcba38>
    ba60:	00000106 	br	ba68 <strcpy+0x6c>
    ba64:	100d883a 	mov	r6,r2
    ba68:	28c00003 	ldbu	r3,0(r5)
    ba6c:	31800044 	addi	r6,r6,1
    ba70:	29400044 	addi	r5,r5,1
    ba74:	30ffffc5 	stb	r3,-1(r6)
    ba78:	18c03fcc 	andi	r3,r3,255
    ba7c:	18c0201c 	xori	r3,r3,128
    ba80:	18ffe004 	addi	r3,r3,-128
    ba84:	183ff81e 	bne	r3,zero,ba68 <__alt_mem_nios_system_shared_memory+0xfffcba68>
    ba88:	f800283a 	ret

0000ba8c <strlen>:
    ba8c:	208000cc 	andi	r2,r4,3
    ba90:	10002026 	beq	r2,zero,bb14 <strlen+0x88>
    ba94:	20800007 	ldb	r2,0(r4)
    ba98:	10002026 	beq	r2,zero,bb1c <strlen+0x90>
    ba9c:	2005883a 	mov	r2,r4
    baa0:	00000206 	br	baac <strlen+0x20>
    baa4:	10c00007 	ldb	r3,0(r2)
    baa8:	18001826 	beq	r3,zero,bb0c <strlen+0x80>
    baac:	10800044 	addi	r2,r2,1
    bab0:	10c000cc 	andi	r3,r2,3
    bab4:	183ffb1e 	bne	r3,zero,baa4 <__alt_mem_nios_system_shared_memory+0xfffcbaa4>
    bab8:	10c00017 	ldw	r3,0(r2)
    babc:	01ffbff4 	movhi	r7,65279
    bac0:	39ffbfc4 	addi	r7,r7,-257
    bac4:	00ca303a 	nor	r5,zero,r3
    bac8:	01a02074 	movhi	r6,32897
    bacc:	19c7883a 	add	r3,r3,r7
    bad0:	31a02004 	addi	r6,r6,-32640
    bad4:	1946703a 	and	r3,r3,r5
    bad8:	1986703a 	and	r3,r3,r6
    badc:	1800091e 	bne	r3,zero,bb04 <strlen+0x78>
    bae0:	10800104 	addi	r2,r2,4
    bae4:	10c00017 	ldw	r3,0(r2)
    bae8:	19cb883a 	add	r5,r3,r7
    baec:	00c6303a 	nor	r3,zero,r3
    baf0:	28c6703a 	and	r3,r5,r3
    baf4:	1986703a 	and	r3,r3,r6
    baf8:	183ff926 	beq	r3,zero,bae0 <__alt_mem_nios_system_shared_memory+0xfffcbae0>
    bafc:	00000106 	br	bb04 <strlen+0x78>
    bb00:	10800044 	addi	r2,r2,1
    bb04:	10c00007 	ldb	r3,0(r2)
    bb08:	183ffd1e 	bne	r3,zero,bb00 <__alt_mem_nios_system_shared_memory+0xfffcbb00>
    bb0c:	1105c83a 	sub	r2,r2,r4
    bb10:	f800283a 	ret
    bb14:	2005883a 	mov	r2,r4
    bb18:	003fe706 	br	bab8 <__alt_mem_nios_system_shared_memory+0xfffcbab8>
    bb1c:	0005883a 	mov	r2,zero
    bb20:	f800283a 	ret

0000bb24 <critical_factorization>:
    bb24:	02c00044 	movi	r11,1
    bb28:	5811883a 	mov	r8,r11
    bb2c:	0013883a 	mov	r9,zero
    bb30:	00bfffc4 	movi	r2,-1
    bb34:	2087883a 	add	r3,r4,r2
    bb38:	1a0f883a 	add	r7,r3,r8
    bb3c:	4a07883a 	add	r3,r9,r8
    bb40:	20d5883a 	add	r10,r4,r3
    bb44:	1940102e 	bgeu	r3,r5,bb88 <critical_factorization+0x64>
    bb48:	52800003 	ldbu	r10,0(r10)
    bb4c:	39c00003 	ldbu	r7,0(r7)
    bb50:	51c0042e 	bgeu	r10,r7,bb64 <critical_factorization+0x40>
    bb54:	1897c83a 	sub	r11,r3,r2
    bb58:	1813883a 	mov	r9,r3
    bb5c:	02000044 	movi	r8,1
    bb60:	003ff406 	br	bb34 <__alt_mem_nios_system_shared_memory+0xfffcbb34>
    bb64:	51c00526 	beq	r10,r7,bb7c <critical_factorization+0x58>
    bb68:	02c00044 	movi	r11,1
    bb6c:	4805883a 	mov	r2,r9
    bb70:	5811883a 	mov	r8,r11
    bb74:	4ad3883a 	add	r9,r9,r11
    bb78:	003fee06 	br	bb34 <__alt_mem_nios_system_shared_memory+0xfffcbb34>
    bb7c:	42c02226 	beq	r8,r11,bc08 <critical_factorization+0xe4>
    bb80:	42000044 	addi	r8,r8,1
    bb84:	003feb06 	br	bb34 <__alt_mem_nios_system_shared_memory+0xfffcbb34>
    bb88:	03000044 	movi	r12,1
    bb8c:	32c00015 	stw	r11,0(r6)
    bb90:	6011883a 	mov	r8,r12
    bb94:	0013883a 	mov	r9,zero
    bb98:	02ffffc4 	movi	r11,-1
    bb9c:	22c7883a 	add	r3,r4,r11
    bba0:	1a0f883a 	add	r7,r3,r8
    bba4:	4a07883a 	add	r3,r9,r8
    bba8:	20d5883a 	add	r10,r4,r3
    bbac:	1940102e 	bgeu	r3,r5,bbf0 <critical_factorization+0xcc>
    bbb0:	52800003 	ldbu	r10,0(r10)
    bbb4:	39c00003 	ldbu	r7,0(r7)
    bbb8:	3a80042e 	bgeu	r7,r10,bbcc <critical_factorization+0xa8>
    bbbc:	1ad9c83a 	sub	r12,r3,r11
    bbc0:	1813883a 	mov	r9,r3
    bbc4:	02000044 	movi	r8,1
    bbc8:	003ff406 	br	bb9c <__alt_mem_nios_system_shared_memory+0xfffcbb9c>
    bbcc:	51c00526 	beq	r10,r7,bbe4 <critical_factorization+0xc0>
    bbd0:	03000044 	movi	r12,1
    bbd4:	4817883a 	mov	r11,r9
    bbd8:	6011883a 	mov	r8,r12
    bbdc:	4b13883a 	add	r9,r9,r12
    bbe0:	003fee06 	br	bb9c <__alt_mem_nios_system_shared_memory+0xfffcbb9c>
    bbe4:	43000c26 	beq	r8,r12,bc18 <critical_factorization+0xf4>
    bbe8:	42000044 	addi	r8,r8,1
    bbec:	003feb06 	br	bb9c <__alt_mem_nios_system_shared_memory+0xfffcbb9c>
    bbf0:	5ac00044 	addi	r11,r11,1
    bbf4:	10800044 	addi	r2,r2,1
    bbf8:	58800236 	bltu	r11,r2,bc04 <critical_factorization+0xe0>
    bbfc:	33000015 	stw	r12,0(r6)
    bc00:	5805883a 	mov	r2,r11
    bc04:	f800283a 	ret
    bc08:	4017883a 	mov	r11,r8
    bc0c:	1813883a 	mov	r9,r3
    bc10:	02000044 	movi	r8,1
    bc14:	003fc706 	br	bb34 <__alt_mem_nios_system_shared_memory+0xfffcbb34>
    bc18:	4019883a 	mov	r12,r8
    bc1c:	1813883a 	mov	r9,r3
    bc20:	02000044 	movi	r8,1
    bc24:	003fdd06 	br	bb9c <__alt_mem_nios_system_shared_memory+0xfffcbb9c>

0000bc28 <two_way_long_needle>:
    bc28:	defef104 	addi	sp,sp,-1084
    bc2c:	dc810715 	stw	r18,1052(sp)
    bc30:	dc410615 	stw	r17,1048(sp)
    bc34:	dc810004 	addi	r18,sp,1024
    bc38:	3023883a 	mov	r17,r6
    bc3c:	2807883a 	mov	r3,r5
    bc40:	ddc10c15 	stw	r23,1072(sp)
    bc44:	900d883a 	mov	r6,r18
    bc48:	202f883a 	mov	r23,r4
    bc4c:	380b883a 	mov	r5,r7
    bc50:	8809883a 	mov	r4,r17
    bc54:	dd810b15 	stw	r22,1068(sp)
    bc58:	dc010515 	stw	r16,1044(sp)
    bc5c:	d8c10415 	stw	r3,1040(sp)
    bc60:	dfc10e15 	stw	ra,1080(sp)
    bc64:	df010d15 	stw	fp,1076(sp)
    bc68:	dd410a15 	stw	r21,1064(sp)
    bc6c:	dd010915 	stw	r20,1060(sp)
    bc70:	dcc10815 	stw	r19,1056(sp)
    bc74:	382d883a 	mov	r22,r7
    bc78:	000bb240 	call	bb24 <critical_factorization>
    bc7c:	d8c10417 	ldw	r3,1040(sp)
    bc80:	1021883a 	mov	r16,r2
    bc84:	d805883a 	mov	r2,sp
    bc88:	15800015 	stw	r22,0(r2)
    bc8c:	10800104 	addi	r2,r2,4
    bc90:	90bffd1e 	bne	r18,r2,bc88 <__alt_mem_nios_system_shared_memory+0xfffcbc88>
    bc94:	b0000b26 	beq	r22,zero,bcc4 <two_way_long_needle+0x9c>
    bc98:	b17fffc4 	addi	r5,r22,-1
    bc9c:	8809883a 	mov	r4,r17
    bca0:	8d8d883a 	add	r6,r17,r22
    bca4:	20800003 	ldbu	r2,0(r4)
    bca8:	21000044 	addi	r4,r4,1
    bcac:	1085883a 	add	r2,r2,r2
    bcb0:	1085883a 	add	r2,r2,r2
    bcb4:	d885883a 	add	r2,sp,r2
    bcb8:	11400015 	stw	r5,0(r2)
    bcbc:	297fffc4 	addi	r5,r5,-1
    bcc0:	21bff81e 	bne	r4,r6,bca4 <__alt_mem_nios_system_shared_memory+0xfffcbca4>
    bcc4:	d9410017 	ldw	r5,1024(sp)
    bcc8:	800d883a 	mov	r6,r16
    bccc:	8809883a 	mov	r4,r17
    bcd0:	894b883a 	add	r5,r17,r5
    bcd4:	d8c10415 	stw	r3,1040(sp)
    bcd8:	0014fc40 	call	14fc4 <memcmp>
    bcdc:	d8c10417 	ldw	r3,1040(sp)
    bce0:	10006a1e 	bne	r2,zero,be8c <two_way_long_needle+0x264>
    bce4:	84bfffc4 	addi	r18,r16,-1
    bce8:	8c85883a 	add	r2,r17,r18
    bcec:	d8810215 	stw	r2,1032(sp)
    bcf0:	00800044 	movi	r2,1
    bcf4:	813fff84 	addi	r4,r16,-2
    bcf8:	1405c83a 	sub	r2,r2,r16
    bcfc:	0029883a 	mov	r20,zero
    bd00:	0039883a 	mov	fp,zero
    bd04:	b57fffc4 	addi	r21,r22,-1
    bd08:	d9010115 	stw	r4,1028(sp)
    bd0c:	d8810315 	stw	r2,1036(sp)
    bd10:	00000706 	br	bd30 <two_way_long_needle+0x108>
    bd14:	a0000326 	beq	r20,zero,bd24 <two_way_long_needle+0xfc>
    bd18:	d8c10017 	ldw	r3,1024(sp)
    bd1c:	10c0012e 	bgeu	r2,r3,bd24 <two_way_long_needle+0xfc>
    bd20:	b0c5c83a 	sub	r2,r22,r3
    bd24:	e0b9883a 	add	fp,fp,r2
    bd28:	0029883a 	mov	r20,zero
    bd2c:	9807883a 	mov	r3,r19
    bd30:	e5a7883a 	add	r19,fp,r22
    bd34:	98cdc83a 	sub	r6,r19,r3
    bd38:	000b883a 	mov	r5,zero
    bd3c:	b8c9883a 	add	r4,r23,r3
    bd40:	000afc80 	call	afc8 <memchr>
    bd44:	1000441e 	bne	r2,zero,be58 <two_way_long_needle+0x230>
    bd48:	98004326 	beq	r19,zero,be58 <two_way_long_needle+0x230>
    bd4c:	bcc5883a 	add	r2,r23,r19
    bd50:	10bfffc3 	ldbu	r2,-1(r2)
    bd54:	1085883a 	add	r2,r2,r2
    bd58:	1085883a 	add	r2,r2,r2
    bd5c:	d885883a 	add	r2,sp,r2
    bd60:	10800017 	ldw	r2,0(r2)
    bd64:	103feb1e 	bne	r2,zero,bd14 <__alt_mem_nios_system_shared_memory+0xfffcbd14>
    bd68:	a015883a 	mov	r10,r20
    bd6c:	a400012e 	bgeu	r20,r16,bd74 <two_way_long_needle+0x14c>
    bd70:	8015883a 	mov	r10,r16
    bd74:	5540152e 	bgeu	r10,r21,bdcc <two_way_long_needle+0x1a4>
    bd78:	bf05883a 	add	r2,r23,fp
    bd7c:	8a87883a 	add	r3,r17,r10
    bd80:	1285883a 	add	r2,r2,r10
    bd84:	18c00003 	ldbu	r3,0(r3)
    bd88:	10800003 	ldbu	r2,0(r2)
    bd8c:	18802d1e 	bne	r3,r2,be44 <two_way_long_needle+0x21c>
    bd90:	e1400044 	addi	r5,fp,1
    bd94:	50800044 	addi	r2,r10,1
    bd98:	2a8b883a 	add	r5,r5,r10
    bd9c:	888d883a 	add	r6,r17,r2
    bda0:	b94b883a 	add	r5,r23,r5
    bda4:	00000706 	br	bdc4 <two_way_long_needle+0x19c>
    bda8:	31000003 	ldbu	r4,0(r6)
    bdac:	28c00003 	ldbu	r3,0(r5)
    bdb0:	31800044 	addi	r6,r6,1
    bdb4:	21003fcc 	andi	r4,r4,255
    bdb8:	29400044 	addi	r5,r5,1
    bdbc:	20c0211e 	bne	r4,r3,be44 <two_way_long_needle+0x21c>
    bdc0:	10800044 	addi	r2,r2,1
    bdc4:	1015883a 	mov	r10,r2
    bdc8:	157ff736 	bltu	r2,r21,bda8 <__alt_mem_nios_system_shared_memory+0xfffcbda8>
    bdcc:	900d883a 	mov	r6,r18
    bdd0:	a4007d2e 	bgeu	r20,r16,bfc8 <two_way_long_needle+0x3a0>
    bdd4:	d9410217 	ldw	r5,1032(sp)
    bdd8:	bf05883a 	add	r2,r23,fp
    bddc:	1485883a 	add	r2,r2,r18
    bde0:	28c00003 	ldbu	r3,0(r5)
    bde4:	10800003 	ldbu	r2,0(r2)
    bde8:	1880771e 	bne	r3,r2,bfc8 <two_way_long_needle+0x3a0>
    bdec:	d8c10117 	ldw	r3,1028(sp)
    bdf0:	a2ffffc4 	addi	r11,r20,-1
    bdf4:	8ad7883a 	add	r11,r17,r11
    bdf8:	e0cb883a 	add	r5,fp,r3
    bdfc:	88c5883a 	add	r2,r17,r3
    be00:	b94b883a 	add	r5,r23,r5
    be04:	00000706 	br	be24 <two_way_long_needle+0x1fc>
    be08:	11000003 	ldbu	r4,0(r2)
    be0c:	28c00003 	ldbu	r3,0(r5)
    be10:	10bfffc4 	addi	r2,r2,-1
    be14:	21003fcc 	andi	r4,r4,255
    be18:	297fffc4 	addi	r5,r5,-1
    be1c:	20c0031e 	bne	r4,r3,be2c <two_way_long_needle+0x204>
    be20:	500d883a 	mov	r6,r10
    be24:	32bfffc4 	addi	r10,r6,-1
    be28:	58bff71e 	bne	r11,r2,be08 <__alt_mem_nios_system_shared_memory+0xfffcbe08>
    be2c:	a2400044 	addi	r9,r20,1
    be30:	32406736 	bltu	r6,r9,bfd0 <two_way_long_needle+0x3a8>
    be34:	da410017 	ldw	r9,1024(sp)
    be38:	e279883a 	add	fp,fp,r9
    be3c:	b269c83a 	sub	r20,r22,r9
    be40:	003fba06 	br	bd2c <__alt_mem_nios_system_shared_memory+0xfffcbd2c>
    be44:	d8c10317 	ldw	r3,1036(sp)
    be48:	0029883a 	mov	r20,zero
    be4c:	1f39883a 	add	fp,r3,fp
    be50:	e2b9883a 	add	fp,fp,r10
    be54:	003fb506 	br	bd2c <__alt_mem_nios_system_shared_memory+0xfffcbd2c>
    be58:	0005883a 	mov	r2,zero
    be5c:	dfc10e17 	ldw	ra,1080(sp)
    be60:	df010d17 	ldw	fp,1076(sp)
    be64:	ddc10c17 	ldw	r23,1072(sp)
    be68:	dd810b17 	ldw	r22,1068(sp)
    be6c:	dd410a17 	ldw	r21,1064(sp)
    be70:	dd010917 	ldw	r20,1060(sp)
    be74:	dcc10817 	ldw	r19,1056(sp)
    be78:	dc810717 	ldw	r18,1052(sp)
    be7c:	dc410617 	ldw	r17,1048(sp)
    be80:	dc010517 	ldw	r16,1044(sp)
    be84:	dec10f04 	addi	sp,sp,1084
    be88:	f800283a 	ret
    be8c:	b405c83a 	sub	r2,r22,r16
    be90:	14004b36 	bltu	r2,r16,bfc0 <two_way_long_needle+0x398>
    be94:	10800044 	addi	r2,r2,1
    be98:	84bfffc4 	addi	r18,r16,-1
    be9c:	d8810015 	stw	r2,1024(sp)
    bea0:	00800044 	movi	r2,1
    bea4:	8c89883a 	add	r4,r17,r18
    bea8:	817fff84 	addi	r5,r16,-2
    beac:	1405c83a 	sub	r2,r2,r16
    beb0:	0029883a 	mov	r20,zero
    beb4:	b73fffc4 	addi	fp,r22,-1
    beb8:	d9010215 	stw	r4,1032(sp)
    bebc:	d9410115 	stw	r5,1028(sp)
    bec0:	8d7fffc4 	addi	r21,r17,-1
    bec4:	d8810315 	stw	r2,1036(sp)
    bec8:	a5a7883a 	add	r19,r20,r22
    becc:	98cdc83a 	sub	r6,r19,r3
    bed0:	000b883a 	mov	r5,zero
    bed4:	b8c9883a 	add	r4,r23,r3
    bed8:	000afc80 	call	afc8 <memchr>
    bedc:	103fde1e 	bne	r2,zero,be58 <__alt_mem_nios_system_shared_memory+0xfffcbe58>
    bee0:	983fdd26 	beq	r19,zero,be58 <__alt_mem_nios_system_shared_memory+0xfffcbe58>
    bee4:	bcc5883a 	add	r2,r23,r19
    bee8:	10bfffc3 	ldbu	r2,-1(r2)
    beec:	1085883a 	add	r2,r2,r2
    bef0:	1085883a 	add	r2,r2,r2
    bef4:	d885883a 	add	r2,sp,r2
    bef8:	10800017 	ldw	r2,0(r2)
    befc:	1000291e 	bne	r2,zero,bfa4 <two_way_long_needle+0x37c>
    bf00:	bd05883a 	add	r2,r23,r20
    bf04:	8700142e 	bgeu	r16,fp,bf58 <two_way_long_needle+0x330>
    bf08:	8c07883a 	add	r3,r17,r16
    bf0c:	140b883a 	add	r5,r2,r16
    bf10:	19000003 	ldbu	r4,0(r3)
    bf14:	28c00003 	ldbu	r3,0(r5)
    bf18:	800d883a 	mov	r6,r16
    bf1c:	20c0241e 	bne	r4,r3,bfb0 <two_way_long_needle+0x388>
    bf20:	81400044 	addi	r5,r16,1
    bf24:	a155883a 	add	r10,r20,r5
    bf28:	ba95883a 	add	r10,r23,r10
    bf2c:	894b883a 	add	r5,r17,r5
    bf30:	800d883a 	mov	r6,r16
    bf34:	00000606 	br	bf50 <two_way_long_needle+0x328>
    bf38:	29000003 	ldbu	r4,0(r5)
    bf3c:	50c00003 	ldbu	r3,0(r10)
    bf40:	29400044 	addi	r5,r5,1
    bf44:	21003fcc 	andi	r4,r4,255
    bf48:	52800044 	addi	r10,r10,1
    bf4c:	20c0181e 	bne	r4,r3,bfb0 <two_way_long_needle+0x388>
    bf50:	31800044 	addi	r6,r6,1
    bf54:	373ff836 	bltu	r6,fp,bf38 <__alt_mem_nios_system_shared_memory+0xfffcbf38>
    bf58:	00ffffc4 	movi	r3,-1
    bf5c:	90ffbf26 	beq	r18,r3,be5c <__alt_mem_nios_system_shared_memory+0xfffcbe5c>
    bf60:	d9410217 	ldw	r5,1032(sp)
    bf64:	1487883a 	add	r3,r2,r18
    bf68:	18c00003 	ldbu	r3,0(r3)
    bf6c:	29000003 	ldbu	r4,0(r5)
    bf70:	20c00b1e 	bne	r4,r3,bfa0 <two_way_long_needle+0x378>
    bf74:	d8c10117 	ldw	r3,1028(sp)
    bf78:	a0cd883a 	add	r6,r20,r3
    bf7c:	b98d883a 	add	r6,r23,r6
    bf80:	88c7883a 	add	r3,r17,r3
    bf84:	1d7fb526 	beq	r3,r21,be5c <__alt_mem_nios_system_shared_memory+0xfffcbe5c>
    bf88:	19400003 	ldbu	r5,0(r3)
    bf8c:	31000003 	ldbu	r4,0(r6)
    bf90:	18ffffc4 	addi	r3,r3,-1
    bf94:	29403fcc 	andi	r5,r5,255
    bf98:	31bfffc4 	addi	r6,r6,-1
    bf9c:	293ff926 	beq	r5,r4,bf84 <__alt_mem_nios_system_shared_memory+0xfffcbf84>
    bfa0:	d8810017 	ldw	r2,1024(sp)
    bfa4:	a0a9883a 	add	r20,r20,r2
    bfa8:	9807883a 	mov	r3,r19
    bfac:	003fc606 	br	bec8 <__alt_mem_nios_system_shared_memory+0xfffcbec8>
    bfb0:	d8c10317 	ldw	r3,1036(sp)
    bfb4:	1d11883a 	add	r8,r3,r20
    bfb8:	41a9883a 	add	r20,r8,r6
    bfbc:	003ffa06 	br	bfa8 <__alt_mem_nios_system_shared_memory+0xfffcbfa8>
    bfc0:	8005883a 	mov	r2,r16
    bfc4:	003fb306 	br	be94 <__alt_mem_nios_system_shared_memory+0xfffcbe94>
    bfc8:	800d883a 	mov	r6,r16
    bfcc:	003f9706 	br	be2c <__alt_mem_nios_system_shared_memory+0xfffcbe2c>
    bfd0:	bf05883a 	add	r2,r23,fp
    bfd4:	003fa106 	br	be5c <__alt_mem_nios_system_shared_memory+0xfffcbe5c>

0000bfd8 <strstr>:
    bfd8:	21800007 	ldb	r6,0(r4)
    bfdc:	30009226 	beq	r6,zero,c228 <strstr+0x250>
    bfe0:	28c00007 	ldb	r3,0(r5)
    bfe4:	18000f26 	beq	r3,zero,c024 <strstr+0x4c>
    bfe8:	280f883a 	mov	r7,r5
    bfec:	2011883a 	mov	r8,r4
    bff0:	02400044 	movi	r9,1
    bff4:	00000206 	br	c000 <strstr+0x28>
    bff8:	38c00007 	ldb	r3,0(r7)
    bffc:	18000826 	beq	r3,zero,c020 <strstr+0x48>
    c000:	42000044 	addi	r8,r8,1
    c004:	1987003a 	cmpeq	r3,r3,r6
    c008:	41800007 	ldb	r6,0(r8)
    c00c:	39c00044 	addi	r7,r7,1
    c010:	48d2703a 	and	r9,r9,r3
    c014:	303ff81e 	bne	r6,zero,bff8 <__alt_mem_nios_system_shared_memory+0xfffcbff8>
    c018:	38800007 	ldb	r2,0(r7)
    c01c:	1000841e 	bne	r2,zero,c230 <strstr+0x258>
    c020:	48000226 	beq	r9,zero,c02c <strstr+0x54>
    c024:	2005883a 	mov	r2,r4
    c028:	f800283a 	ret
    c02c:	defff104 	addi	sp,sp,-60
    c030:	ddc00c15 	stw	r23,48(sp)
    c034:	dd800b15 	stw	r22,44(sp)
    c038:	dd400a15 	stw	r21,40(sp)
    c03c:	dc000515 	stw	r16,20(sp)
    c040:	dfc00e15 	stw	ra,56(sp)
    c044:	df000d15 	stw	fp,52(sp)
    c048:	dd000915 	stw	r20,36(sp)
    c04c:	dcc00815 	stw	r19,32(sp)
    c050:	dc800715 	stw	r18,28(sp)
    c054:	dc400615 	stw	r17,24(sp)
    c058:	282d883a 	mov	r22,r5
    c05c:	29400007 	ldb	r5,0(r5)
    c060:	202b883a 	mov	r21,r4
    c064:	21000044 	addi	r4,r4,1
    c068:	3da1c83a 	sub	r16,r7,r22
    c06c:	00169f40 	call	169f4 <strchr>
    c070:	102f883a 	mov	r23,r2
    c074:	10007526 	beq	r2,zero,c24c <strstr+0x274>
    c078:	00c00044 	movi	r3,1
    c07c:	80c00a26 	beq	r16,r3,c0a8 <strstr+0xd0>
    c080:	ac09883a 	add	r4,r21,r16
    c084:	20800136 	bltu	r4,r2,c08c <strstr+0xb4>
    c088:	2087c83a 	sub	r3,r4,r2
    c08c:	008007c4 	movi	r2,31
    c090:	1400112e 	bgeu	r2,r16,c0d8 <strstr+0x100>
    c094:	800f883a 	mov	r7,r16
    c098:	b00d883a 	mov	r6,r22
    c09c:	180b883a 	mov	r5,r3
    c0a0:	b809883a 	mov	r4,r23
    c0a4:	000bc280 	call	bc28 <two_way_long_needle>
    c0a8:	dfc00e17 	ldw	ra,56(sp)
    c0ac:	df000d17 	ldw	fp,52(sp)
    c0b0:	ddc00c17 	ldw	r23,48(sp)
    c0b4:	dd800b17 	ldw	r22,44(sp)
    c0b8:	dd400a17 	ldw	r21,40(sp)
    c0bc:	dd000917 	ldw	r20,36(sp)
    c0c0:	dcc00817 	ldw	r19,32(sp)
    c0c4:	dc800717 	ldw	r18,28(sp)
    c0c8:	dc400617 	ldw	r17,24(sp)
    c0cc:	dc000517 	ldw	r16,20(sp)
    c0d0:	dec00f04 	addi	sp,sp,60
    c0d4:	f800283a 	ret
    c0d8:	d80d883a 	mov	r6,sp
    c0dc:	800b883a 	mov	r5,r16
    c0e0:	b009883a 	mov	r4,r22
    c0e4:	d8c00415 	stw	r3,16(sp)
    c0e8:	000bb240 	call	bb24 <critical_factorization>
    c0ec:	d9400017 	ldw	r5,0(sp)
    c0f0:	100d883a 	mov	r6,r2
    c0f4:	b009883a 	mov	r4,r22
    c0f8:	b14b883a 	add	r5,r22,r5
    c0fc:	1039883a 	mov	fp,r2
    c100:	0014fc40 	call	14fc4 <memcmp>
    c104:	d8c00417 	ldw	r3,16(sp)
    c108:	1000521e 	bne	r2,zero,c254 <strstr+0x27c>
    c10c:	e47fffc4 	addi	r17,fp,-1
    c110:	04c00044 	movi	r19,1
    c114:	b445883a 	add	r2,r22,r17
    c118:	9f27c83a 	sub	r19,r19,fp
    c11c:	0029883a 	mov	r20,zero
    c120:	002b883a 	mov	r21,zero
    c124:	d8800215 	stw	r2,8(sp)
    c128:	e4bfff84 	addi	r18,fp,-2
    c12c:	dcc00115 	stw	r19,4(sp)
    c130:	8567883a 	add	r19,r16,r21
    c134:	98cdc83a 	sub	r6,r19,r3
    c138:	000b883a 	mov	r5,zero
    c13c:	b8c9883a 	add	r4,r23,r3
    c140:	000afc80 	call	afc8 <memchr>
    c144:	1000411e 	bne	r2,zero,c24c <strstr+0x274>
    c148:	98004026 	beq	r19,zero,c24c <strstr+0x274>
    c14c:	e00b883a 	mov	r5,fp
    c150:	e500012e 	bgeu	fp,r20,c158 <strstr+0x180>
    c154:	a00b883a 	mov	r5,r20
    c158:	2c00152e 	bgeu	r5,r16,c1b0 <strstr+0x1d8>
    c15c:	b947883a 	add	r3,r23,r5
    c160:	1d47883a 	add	r3,r3,r21
    c164:	b145883a 	add	r2,r22,r5
    c168:	18c00003 	ldbu	r3,0(r3)
    c16c:	10800003 	ldbu	r2,0(r2)
    c170:	1880311e 	bne	r3,r2,c238 <strstr+0x260>
    c174:	a8800044 	addi	r2,r21,1
    c178:	28c00044 	addi	r3,r5,1
    c17c:	1145883a 	add	r2,r2,r5
    c180:	b0c9883a 	add	r4,r22,r3
    c184:	b885883a 	add	r2,r23,r2
    c188:	00000706 	br	c1a8 <strstr+0x1d0>
    c18c:	21c00003 	ldbu	r7,0(r4)
    c190:	11800003 	ldbu	r6,0(r2)
    c194:	21000044 	addi	r4,r4,1
    c198:	39c03fcc 	andi	r7,r7,255
    c19c:	10800044 	addi	r2,r2,1
    c1a0:	3980251e 	bne	r7,r6,c238 <strstr+0x260>
    c1a4:	18c00044 	addi	r3,r3,1
    c1a8:	180b883a 	mov	r5,r3
    c1ac:	1c3ff736 	bltu	r3,r16,c18c <__alt_mem_nios_system_shared_memory+0xfffcc18c>
    c1b0:	880d883a 	mov	r6,r17
    c1b4:	a700702e 	bgeu	r20,fp,c378 <strstr+0x3a0>
    c1b8:	d9000217 	ldw	r4,8(sp)
    c1bc:	bd45883a 	add	r2,r23,r21
    c1c0:	1445883a 	add	r2,r2,r17
    c1c4:	20c00003 	ldbu	r3,0(r4)
    c1c8:	10800003 	ldbu	r2,0(r2)
    c1cc:	18806a1e 	bne	r3,r2,c378 <strstr+0x3a0>
    c1d0:	954b883a 	add	r5,r18,r21
    c1d4:	a2bfffc4 	addi	r10,r20,-1
    c1d8:	b485883a 	add	r2,r22,r18
    c1dc:	b94b883a 	add	r5,r23,r5
    c1e0:	b295883a 	add	r10,r22,r10
    c1e4:	00000706 	br	c204 <strstr+0x22c>
    c1e8:	11000003 	ldbu	r4,0(r2)
    c1ec:	28c00003 	ldbu	r3,0(r5)
    c1f0:	10bfffc4 	addi	r2,r2,-1
    c1f4:	21003fcc 	andi	r4,r4,255
    c1f8:	297fffc4 	addi	r5,r5,-1
    c1fc:	20c0031e 	bne	r4,r3,c20c <strstr+0x234>
    c200:	380d883a 	mov	r6,r7
    c204:	31ffffc4 	addi	r7,r6,-1
    c208:	12bff71e 	bne	r2,r10,c1e8 <__alt_mem_nios_system_shared_memory+0xfffcc1e8>
    c20c:	a2000044 	addi	r8,r20,1
    c210:	32005b36 	bltu	r6,r8,c380 <strstr+0x3a8>
    c214:	da000017 	ldw	r8,0(sp)
    c218:	aa2b883a 	add	r21,r21,r8
    c21c:	8229c83a 	sub	r20,r16,r8
    c220:	9807883a 	mov	r3,r19
    c224:	003fc206 	br	c130 <__alt_mem_nios_system_shared_memory+0xfffcc130>
    c228:	28800007 	ldb	r2,0(r5)
    c22c:	103f7d26 	beq	r2,zero,c024 <__alt_mem_nios_system_shared_memory+0xfffcc024>
    c230:	0005883a 	mov	r2,zero
    c234:	f800283a 	ret
    c238:	d8c00117 	ldw	r3,4(sp)
    c23c:	0029883a 	mov	r20,zero
    c240:	1d6b883a 	add	r21,r3,r21
    c244:	a96b883a 	add	r21,r21,r5
    c248:	003ff506 	br	c220 <__alt_mem_nios_system_shared_memory+0xfffcc220>
    c24c:	0005883a 	mov	r2,zero
    c250:	003f9506 	br	c0a8 <__alt_mem_nios_system_shared_memory+0xfffcc0a8>
    c254:	8705c83a 	sub	r2,r16,fp
    c258:	1700012e 	bgeu	r2,fp,c260 <strstr+0x288>
    c25c:	e005883a 	mov	r2,fp
    c260:	10800044 	addi	r2,r2,1
    c264:	e4bfffc4 	addi	r18,fp,-1
    c268:	05000044 	movi	r20,1
    c26c:	a729c83a 	sub	r20,r20,fp
    c270:	d8800015 	stw	r2,0(sp)
    c274:	b48b883a 	add	r5,r22,r18
    c278:	e0bfff84 	addi	r2,fp,-2
    c27c:	dd000215 	stw	r20,8(sp)
    c280:	002b883a 	mov	r21,zero
    c284:	e4400044 	addi	r17,fp,1
    c288:	d9400315 	stw	r5,12(sp)
    c28c:	d8800115 	stw	r2,4(sp)
    c290:	b53fffc4 	addi	r20,r22,-1
    c294:	8567883a 	add	r19,r16,r21
    c298:	98cdc83a 	sub	r6,r19,r3
    c29c:	000b883a 	mov	r5,zero
    c2a0:	b8c9883a 	add	r4,r23,r3
    c2a4:	000afc80 	call	afc8 <memchr>
    c2a8:	103fe81e 	bne	r2,zero,c24c <__alt_mem_nios_system_shared_memory+0xfffcc24c>
    c2ac:	983fe726 	beq	r19,zero,c24c <__alt_mem_nios_system_shared_memory+0xfffcc24c>
    c2b0:	e400132e 	bgeu	fp,r16,c300 <strstr+0x328>
    c2b4:	bf07883a 	add	r3,r23,fp
    c2b8:	1d47883a 	add	r3,r3,r21
    c2bc:	b705883a 	add	r2,r22,fp
    c2c0:	18c00003 	ldbu	r3,0(r3)
    c2c4:	10800003 	ldbu	r2,0(r2)
    c2c8:	1880241e 	bne	r3,r2,c35c <strstr+0x384>
    c2cc:	ac45883a 	add	r2,r21,r17
    c2d0:	b44b883a 	add	r5,r22,r17
    c2d4:	b885883a 	add	r2,r23,r2
    c2d8:	e009883a 	mov	r4,fp
    c2dc:	00000606 	br	c2f8 <strstr+0x320>
    c2e0:	29800003 	ldbu	r6,0(r5)
    c2e4:	10c00003 	ldbu	r3,0(r2)
    c2e8:	29400044 	addi	r5,r5,1
    c2ec:	31803fcc 	andi	r6,r6,255
    c2f0:	10800044 	addi	r2,r2,1
    c2f4:	30c01a1e 	bne	r6,r3,c360 <strstr+0x388>
    c2f8:	21000044 	addi	r4,r4,1
    c2fc:	243ff836 	bltu	r4,r16,c2e0 <__alt_mem_nios_system_shared_memory+0xfffcc2e0>
    c300:	00bfffc4 	movi	r2,-1
    c304:	bd49883a 	add	r4,r23,r21
    c308:	90801926 	beq	r18,r2,c370 <strstr+0x398>
    c30c:	d9400317 	ldw	r5,12(sp)
    c310:	2485883a 	add	r2,r4,r18
    c314:	10800003 	ldbu	r2,0(r2)
    c318:	28c00003 	ldbu	r3,0(r5)
    c31c:	18800b1e 	bne	r3,r2,c34c <strstr+0x374>
    c320:	d8c00117 	ldw	r3,4(sp)
    c324:	a8c5883a 	add	r2,r21,r3
    c328:	b885883a 	add	r2,r23,r2
    c32c:	b0c7883a 	add	r3,r22,r3
    c330:	1d000f26 	beq	r3,r20,c370 <strstr+0x398>
    c334:	19800003 	ldbu	r6,0(r3)
    c338:	11400003 	ldbu	r5,0(r2)
    c33c:	18ffffc4 	addi	r3,r3,-1
    c340:	31803fcc 	andi	r6,r6,255
    c344:	10bfffc4 	addi	r2,r2,-1
    c348:	317ff926 	beq	r6,r5,c330 <__alt_mem_nios_system_shared_memory+0xfffcc330>
    c34c:	d8800017 	ldw	r2,0(sp)
    c350:	a8ab883a 	add	r21,r21,r2
    c354:	9807883a 	mov	r3,r19
    c358:	003fce06 	br	c294 <__alt_mem_nios_system_shared_memory+0xfffcc294>
    c35c:	e009883a 	mov	r4,fp
    c360:	d8c00217 	ldw	r3,8(sp)
    c364:	1d4f883a 	add	r7,r3,r21
    c368:	392b883a 	add	r21,r7,r4
    c36c:	003ff906 	br	c354 <__alt_mem_nios_system_shared_memory+0xfffcc354>
    c370:	2005883a 	mov	r2,r4
    c374:	003f4c06 	br	c0a8 <__alt_mem_nios_system_shared_memory+0xfffcc0a8>
    c378:	e00d883a 	mov	r6,fp
    c37c:	003fa306 	br	c20c <__alt_mem_nios_system_shared_memory+0xfffcc20c>
    c380:	bd45883a 	add	r2,r23,r21
    c384:	003f4806 	br	c0a8 <__alt_mem_nios_system_shared_memory+0xfffcc0a8>

0000c388 <sulp>:
    c388:	defffd04 	addi	sp,sp,-12
    c38c:	dc400115 	stw	r17,4(sp)
    c390:	3023883a 	mov	r17,r6
    c394:	dc000015 	stw	r16,0(sp)
    c398:	dfc00215 	stw	ra,8(sp)
    c39c:	2821883a 	mov	r16,r5
    c3a0:	0015d7c0 	call	15d7c <__ulp>
    c3a4:	88000c26 	beq	r17,zero,c3d8 <sulp+0x50>
    c3a8:	841ffc2c 	andhi	r16,r16,32752
    c3ac:	8020d53a 	srli	r16,r16,20
    c3b0:	01c01ac4 	movi	r7,107
    c3b4:	3c21c83a 	sub	r16,r7,r16
    c3b8:	0400070e 	bge	zero,r16,c3d8 <sulp+0x50>
    c3bc:	8020953a 	slli	r16,r16,20
    c3c0:	01cffc34 	movhi	r7,16368
    c3c4:	000d883a 	mov	r6,zero
    c3c8:	81cf883a 	add	r7,r16,r7
    c3cc:	1009883a 	mov	r4,r2
    c3d0:	180b883a 	mov	r5,r3
    c3d4:	0007c800 	call	7c80 <__muldf3>
    c3d8:	dfc00217 	ldw	ra,8(sp)
    c3dc:	dc400117 	ldw	r17,4(sp)
    c3e0:	dc000017 	ldw	r16,0(sp)
    c3e4:	dec00304 	addi	sp,sp,12
    c3e8:	f800283a 	ret

0000c3ec <_strtod_r>:
    c3ec:	deffe204 	addi	sp,sp,-120
    c3f0:	ddc01b15 	stw	r23,108(sp)
    c3f4:	dd801a15 	stw	r22,104(sp)
    c3f8:	dc401515 	stw	r17,84(sp)
    c3fc:	dfc01d15 	stw	ra,116(sp)
    c400:	df001c15 	stw	fp,112(sp)
    c404:	dd401915 	stw	r21,100(sp)
    c408:	dd001815 	stw	r20,96(sp)
    c40c:	dcc01715 	stw	r19,92(sp)
    c410:	dc801615 	stw	r18,88(sp)
    c414:	dc001415 	stw	r16,80(sp)
    c418:	d8000515 	stw	zero,20(sp)
    c41c:	d9400615 	stw	r5,24(sp)
    c420:	2807883a 	mov	r3,r5
    c424:	1f000003 	ldbu	fp,0(r3)
    c428:	01c00074 	movhi	r7,1
    c42c:	2023883a 	mov	r17,r4
    c430:	d9400715 	stw	r5,28(sp)
    c434:	d9800915 	stw	r6,36(sp)
    c438:	01000b44 	movi	r4,45
    c43c:	e0803fcc 	andi	r2,fp,255
    c440:	39f11804 	addi	r7,r7,-15264
    c444:	002f883a 	mov	r23,zero
    c448:	002d883a 	mov	r22,zero
    c44c:	20809c36 	bltu	r4,r2,c6c0 <_strtod_r+0x2d4>
    c450:	100490ba 	slli	r2,r2,2
    c454:	11c5883a 	add	r2,r2,r7
    c458:	10800017 	ldw	r2,0(r2)
    c45c:	1000683a 	jmp	r2
    c460:	0000c520 	cmpeqi	zero,zero,788
    c464:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c468:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c46c:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c470:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c474:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c478:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c47c:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c480:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c484:	0000c6ac 	andhi	zero,zero,794
    c488:	0000c6ac 	andhi	zero,zero,794
    c48c:	0000c6ac 	andhi	zero,zero,794
    c490:	0000c6ac 	andhi	zero,zero,794
    c494:	0000c6ac 	andhi	zero,zero,794
    c498:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c49c:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4a0:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4a4:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4a8:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4ac:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4b0:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4b4:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4b8:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4bc:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4c0:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4c4:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4c8:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4cc:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4d0:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4d4:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4d8:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4dc:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4e0:	0000c6ac 	andhi	zero,zero,794
    c4e4:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4e8:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4ec:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4f0:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4f4:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4f8:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c4fc:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c500:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c504:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c508:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c50c:	0000c584 	movi	zero,790
    c510:	0000c6c0 	call	c6c <OC_I2CL_Read+0xf0>
    c514:	0000c6a0 	cmpeqi	zero,zero,794
    c518:	00801244 	movi	r2,73
    c51c:	b8844726 	beq	r23,r2,d63c <_strtod_r+0x1250>
    c520:	d9000917 	ldw	r4,36(sp)
    c524:	d8000815 	stw	zero,32(sp)
    c528:	0039883a 	mov	fp,zero
    c52c:	20000726 	beq	r4,zero,c54c <_strtod_r+0x160>
    c530:	dc800717 	ldw	r18,28(sp)
    c534:	d8000a15 	stw	zero,40(sp)
    c538:	d9400917 	ldw	r5,36(sp)
    c53c:	2c800015 	stw	r18,0(r5)
    c540:	d8800a17 	ldw	r2,40(sp)
    c544:	10000126 	beq	r2,zero,c54c <_strtod_r+0x160>
    c548:	e720003c 	xorhi	fp,fp,32768
    c54c:	d8800817 	ldw	r2,32(sp)
    c550:	e007883a 	mov	r3,fp
    c554:	dfc01d17 	ldw	ra,116(sp)
    c558:	df001c17 	ldw	fp,112(sp)
    c55c:	ddc01b17 	ldw	r23,108(sp)
    c560:	dd801a17 	ldw	r22,104(sp)
    c564:	dd401917 	ldw	r21,100(sp)
    c568:	dd001817 	ldw	r20,96(sp)
    c56c:	dcc01717 	ldw	r19,92(sp)
    c570:	dc801617 	ldw	r18,88(sp)
    c574:	dc401517 	ldw	r17,84(sp)
    c578:	dc001417 	ldw	r16,80(sp)
    c57c:	dec01e04 	addi	sp,sp,120
    c580:	f800283a 	ret
    c584:	d8000a15 	stw	zero,40(sp)
    c588:	1c000044 	addi	r16,r3,1
    c58c:	dc000615 	stw	r16,24(sp)
    c590:	1f000043 	ldbu	fp,1(r3)
    c594:	e0803fcc 	andi	r2,fp,255
    c598:	1080201c 	xori	r2,r2,128
    c59c:	10bfe004 	addi	r2,r2,-128
    c5a0:	103fdf26 	beq	r2,zero,c520 <__alt_mem_nios_system_shared_memory+0xfffcc520>
    c5a4:	e1003fcc 	andi	r4,fp,255
    c5a8:	2100201c 	xori	r4,r4,128
    c5ac:	213fe004 	addi	r4,r4,-128
    c5b0:	00800c04 	movi	r2,48
    c5b4:	2080d426 	beq	r4,r2,c908 <_strtod_r+0x51c>
    c5b8:	dc000815 	stw	r16,32(sp)
    c5bc:	d8000c15 	stw	zero,48(sp)
    c5c0:	e0bff404 	addi	r2,fp,-48
    c5c4:	10803fcc 	andi	r2,r2,255
    c5c8:	05400244 	movi	r21,9
    c5cc:	a8837836 	bltu	r21,r2,d3b0 <_strtod_r+0xfc4>
    c5d0:	dc800817 	ldw	r18,32(sp)
    c5d4:	0029883a 	mov	r20,zero
    c5d8:	0027883a 	mov	r19,zero
    c5dc:	0021883a 	mov	r16,zero
    c5e0:	05800204 	movi	r22,8
    c5e4:	b4003916 	blt	r22,r16,c6cc <_strtod_r+0x2e0>
    c5e8:	e7003fcc 	andi	fp,fp,255
    c5ec:	9809883a 	mov	r4,r19
    c5f0:	01400284 	movi	r5,10
    c5f4:	e700201c 	xori	fp,fp,128
    c5f8:	00051580 	call	5158 <__mulsi3>
    c5fc:	e73fe004 	addi	fp,fp,-128
    c600:	1705883a 	add	r2,r2,fp
    c604:	14fff404 	addi	r19,r2,-48
    c608:	94800044 	addi	r18,r18,1
    c60c:	dc800615 	stw	r18,24(sp)
    c610:	97000003 	ldbu	fp,0(r18)
    c614:	84000044 	addi	r16,r16,1
    c618:	e0bff404 	addi	r2,fp,-48
    c61c:	10803fcc 	andi	r2,r2,255
    c620:	a8bff02e 	bgeu	r21,r2,c5e4 <__alt_mem_nios_system_shared_memory+0xfffcc5e4>
    c624:	e5c03fcc 	andi	r23,fp,255
    c628:	bdc0201c 	xori	r23,r23,128
    c62c:	bdffe004 	addi	r23,r23,-128
    c630:	8809883a 	mov	r4,r17
    c634:	0014f340 	call	14f34 <_localeconv_r>
    c638:	8809883a 	mov	r4,r17
    c63c:	15400017 	ldw	r21,0(r2)
    c640:	0014f340 	call	14f34 <_localeconv_r>
    c644:	11000017 	ldw	r4,0(r2)
    c648:	000ba8c0 	call	ba8c <strlen>
    c64c:	100d883a 	mov	r6,r2
    c650:	a80b883a 	mov	r5,r21
    c654:	9009883a 	mov	r4,r18
    c658:	0016b580 	call	16b58 <strncmp>
    c65c:	1000bd26 	beq	r2,zero,c954 <_strtod_r+0x568>
    c660:	8039883a 	mov	fp,r16
    c664:	002d883a 	mov	r22,zero
    c668:	d8000b15 	stw	zero,44(sp)
    c66c:	0025883a 	mov	r18,zero
    c670:	00801944 	movi	r2,101
    c674:	b8806026 	beq	r23,r2,c7f8 <_strtod_r+0x40c>
    c678:	00801144 	movi	r2,69
    c67c:	b8805e26 	beq	r23,r2,c7f8 <_strtod_r+0x40c>
    c680:	0009883a 	mov	r4,zero
    c684:	e0001a1e 	bne	fp,zero,c6f0 <_strtod_r+0x304>
    c688:	b000cd26 	beq	r22,zero,c9c0 <_strtod_r+0x5d4>
    c68c:	d8000815 	stw	zero,32(sp)
    c690:	d9000917 	ldw	r4,36(sp)
    c694:	203faa26 	beq	r4,zero,c540 <__alt_mem_nios_system_shared_memory+0xfffcc540>
    c698:	dc800617 	ldw	r18,24(sp)
    c69c:	003fa606 	br	c538 <__alt_mem_nios_system_shared_memory+0xfffcc538>
    c6a0:	00800044 	movi	r2,1
    c6a4:	d8800a15 	stw	r2,40(sp)
    c6a8:	003fb706 	br	c588 <__alt_mem_nios_system_shared_memory+0xfffcc588>
    c6ac:	18c00044 	addi	r3,r3,1
    c6b0:	d8c00615 	stw	r3,24(sp)
    c6b4:	1f000003 	ldbu	fp,0(r3)
    c6b8:	e0803fcc 	andi	r2,fp,255
    c6bc:	20bf642e 	bgeu	r4,r2,c450 <__alt_mem_nios_system_shared_memory+0xfffcc450>
    c6c0:	1821883a 	mov	r16,r3
    c6c4:	d8000a15 	stw	zero,40(sp)
    c6c8:	003fb606 	br	c5a4 <__alt_mem_nios_system_shared_memory+0xfffcc5a4>
    c6cc:	e7003fcc 	andi	fp,fp,255
    c6d0:	a009883a 	mov	r4,r20
    c6d4:	01400284 	movi	r5,10
    c6d8:	e700201c 	xori	fp,fp,128
    c6dc:	00051580 	call	5158 <__mulsi3>
    c6e0:	e73fe004 	addi	fp,fp,-128
    c6e4:	1705883a 	add	r2,r2,fp
    c6e8:	153ff404 	addi	r20,r2,-48
    c6ec:	003fc606 	br	c608 <__alt_mem_nios_system_shared_memory+0xfffcc608>
    c6f0:	d8c00b17 	ldw	r3,44(sp)
    c6f4:	20ebc83a 	sub	r21,r4,r3
    c6f8:	8000011e 	bne	r16,zero,c700 <_strtod_r+0x314>
    c6fc:	e021883a 	mov	r16,fp
    c700:	00800404 	movi	r2,16
    c704:	e025883a 	mov	r18,fp
    c708:	1700010e 	bge	r2,fp,c710 <_strtod_r+0x324>
    c70c:	1025883a 	mov	r18,r2
    c710:	9809883a 	mov	r4,r19
    c714:	001ab680 	call	1ab68 <__floatunsidf>
    c718:	102f883a 	mov	r23,r2
    c71c:	00800244 	movi	r2,9
    c720:	182d883a 	mov	r22,r3
    c724:	1480150e 	bge	r2,r18,c77c <_strtod_r+0x390>
    c728:	90bffdc4 	addi	r2,r18,-9
    c72c:	100490fa 	slli	r2,r2,3
    c730:	180b883a 	mov	r5,r3
    c734:	00c000b4 	movhi	r3,2
    c738:	18fb0604 	addi	r3,r3,-5096
    c73c:	1885883a 	add	r2,r3,r2
    c740:	11800017 	ldw	r6,0(r2)
    c744:	11c00117 	ldw	r7,4(r2)
    c748:	b809883a 	mov	r4,r23
    c74c:	0007c800 	call	7c80 <__muldf3>
    c750:	a009883a 	mov	r4,r20
    c754:	102f883a 	mov	r23,r2
    c758:	182d883a 	mov	r22,r3
    c75c:	001ab680 	call	1ab68 <__floatunsidf>
    c760:	b809883a 	mov	r4,r23
    c764:	b00b883a 	mov	r5,r22
    c768:	100d883a 	mov	r6,r2
    c76c:	180f883a 	mov	r7,r3
    c770:	00067ac0 	call	67ac <__adddf3>
    c774:	102f883a 	mov	r23,r2
    c778:	182d883a 	mov	r22,r3
    c77c:	008003c4 	movi	r2,15
    c780:	17009416 	blt	r2,fp,c9d4 <_strtod_r+0x5e8>
    c784:	a8001926 	beq	r21,zero,c7ec <_strtod_r+0x400>
    c788:	05439c0e 	bge	zero,r21,d5fc <_strtod_r+0x1210>
    c78c:	00c00584 	movi	r3,22
    c790:	1d430f16 	blt	r3,r21,d3d0 <_strtod_r+0xfe4>
    c794:	a82a90fa 	slli	r21,r21,3
    c798:	008000b4 	movhi	r2,2
    c79c:	10bb0604 	addi	r2,r2,-5096
    c7a0:	1545883a 	add	r2,r2,r21
    c7a4:	11000017 	ldw	r4,0(r2)
    c7a8:	11400117 	ldw	r5,4(r2)
    c7ac:	b80d883a 	mov	r6,r23
    c7b0:	b00f883a 	mov	r7,r22
    c7b4:	0007c800 	call	7c80 <__muldf3>
    c7b8:	d8800815 	stw	r2,32(sp)
    c7bc:	1839883a 	mov	fp,r3
    c7c0:	003fb306 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    c7c4:	014000b4 	movhi	r5,2
    c7c8:	297a7404 	addi	r5,r5,-5680
    c7cc:	d9800204 	addi	r6,sp,8
    c7d0:	d9000604 	addi	r4,sp,24
    c7d4:	0014bd80 	call	14bd8 <__hexnan>
    c7d8:	00c00144 	movi	r3,5
    c7dc:	10c2161e 	bne	r2,r3,d038 <_strtod_r+0xc4c>
    c7e0:	dd800317 	ldw	r22,12(sp)
    c7e4:	ddc00217 	ldw	r23,8(sp)
    c7e8:	b59ffc34 	orhi	r22,r22,32752
    c7ec:	ddc00815 	stw	r23,32(sp)
    c7f0:	b039883a 	mov	fp,r22
    c7f4:	003fa606 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    c7f8:	e001a926 	beq	fp,zero,cea0 <_strtod_r+0xab4>
    c7fc:	d8c00617 	ldw	r3,24(sp)
    c800:	18800044 	addi	r2,r3,1
    c804:	d8800615 	stw	r2,24(sp)
    c808:	d8c00715 	stw	r3,28(sp)
    c80c:	18c00047 	ldb	r3,1(r3)
    c810:	00800ac4 	movi	r2,43
    c814:	1881e526 	beq	r3,r2,cfac <_strtod_r+0xbc0>
    c818:	00800b44 	movi	r2,45
    c81c:	1881dc26 	beq	r3,r2,cf90 <_strtod_r+0xba4>
    c820:	182f883a 	mov	r23,r3
    c824:	d8000e15 	stw	zero,56(sp)
    c828:	b8bff404 	addi	r2,r23,-48
    c82c:	01000244 	movi	r4,9
    c830:	2081ab36 	bltu	r4,r2,cee0 <_strtod_r+0xaf4>
    c834:	00800c04 	movi	r2,48
    c838:	b880071e 	bne	r23,r2,c858 <_strtod_r+0x46c>
    c83c:	d8800617 	ldw	r2,24(sp)
    c840:	b809883a 	mov	r4,r23
    c844:	10800044 	addi	r2,r2,1
    c848:	d8800615 	stw	r2,24(sp)
    c84c:	15c00007 	ldb	r23,0(r2)
    c850:	10800044 	addi	r2,r2,1
    c854:	b93ffc26 	beq	r23,r4,c848 <__alt_mem_nios_system_shared_memory+0xfffcc848>
    c858:	b8bff3c4 	addi	r2,r23,-49
    c85c:	01000204 	movi	r4,8
    c860:	20bf8736 	bltu	r4,r2,c680 <__alt_mem_nios_system_shared_memory+0xfffcc680>
    c864:	d8c00617 	ldw	r3,24(sp)
    c868:	b93ff404 	addi	r4,r23,-48
    c86c:	01400244 	movi	r5,9
    c870:	1ac00044 	addi	r11,r3,1
    c874:	dac00615 	stw	r11,24(sp)
    c878:	d8c00d15 	stw	r3,52(sp)
    c87c:	18c00043 	ldbu	r3,1(r3)
    c880:	18bff404 	addi	r2,r3,-48
    c884:	1dc03fcc 	andi	r23,r3,255
    c888:	bdc0201c 	xori	r23,r23,128
    c88c:	10803fcc 	andi	r2,r2,255
    c890:	bdffe004 	addi	r23,r23,-128
    c894:	28801136 	bltu	r5,r2,c8dc <_strtod_r+0x4f0>
    c898:	d8c00d17 	ldw	r3,52(sp)
    c89c:	1d400084 	addi	r21,r3,2
    c8a0:	01400284 	movi	r5,10
    c8a4:	00051580 	call	5158 <__mulsi3>
    c8a8:	dd400615 	stw	r21,24(sp)
    c8ac:	a9400003 	ldbu	r5,0(r21)
    c8b0:	15c5883a 	add	r2,r2,r23
    c8b4:	a817883a 	mov	r11,r21
    c8b8:	28fff404 	addi	r3,r5,-48
    c8bc:	2dc03fcc 	andi	r23,r5,255
    c8c0:	bdc0201c 	xori	r23,r23,128
    c8c4:	18c03fcc 	andi	r3,r3,255
    c8c8:	01400244 	movi	r5,9
    c8cc:	113ff404 	addi	r4,r2,-48
    c8d0:	bdffe004 	addi	r23,r23,-128
    c8d4:	ad400044 	addi	r21,r21,1
    c8d8:	28fff12e 	bgeu	r5,r3,c8a0 <__alt_mem_nios_system_shared_memory+0xfffcc8a0>
    c8dc:	d8c00d17 	ldw	r3,52(sp)
    c8e0:	00800204 	movi	r2,8
    c8e4:	58d7c83a 	sub	r11,r11,r3
    c8e8:	12c2ab16 	blt	r2,r11,d398 <_strtod_r+0xfac>
    c8ec:	009387c4 	movi	r2,19999
    c8f0:	1100010e 	bge	r2,r4,c8f8 <_strtod_r+0x50c>
    c8f4:	1009883a 	mov	r4,r2
    c8f8:	d8c00e17 	ldw	r3,56(sp)
    c8fc:	183f6126 	beq	r3,zero,c684 <__alt_mem_nios_system_shared_memory+0xfffcc684>
    c900:	0109c83a 	sub	r4,zero,r4
    c904:	003f5f06 	br	c684 <__alt_mem_nios_system_shared_memory+0xfffcc684>
    c908:	80800047 	ldb	r2,1(r16)
    c90c:	00c01604 	movi	r3,88
    c910:	10c20026 	beq	r2,r3,d114 <_strtod_r+0xd28>
    c914:	00c01e04 	movi	r3,120
    c918:	10c1fe26 	beq	r2,r3,d114 <_strtod_r+0xd28>
    c91c:	80800044 	addi	r2,r16,1
    c920:	1021883a 	mov	r16,r2
    c924:	d8800615 	stw	r2,24(sp)
    c928:	10800044 	addi	r2,r2,1
    c92c:	173fffc3 	ldbu	fp,-1(r2)
    c930:	e0c03fcc 	andi	r3,fp,255
    c934:	18c0201c 	xori	r3,r3,128
    c938:	18ffe004 	addi	r3,r3,-128
    c93c:	193ff826 	beq	r3,r4,c920 <__alt_mem_nios_system_shared_memory+0xfffcc920>
    c940:	18002126 	beq	r3,zero,c9c8 <_strtod_r+0x5dc>
    c944:	00c00044 	movi	r3,1
    c948:	dc000815 	stw	r16,32(sp)
    c94c:	d8c00c15 	stw	r3,48(sp)
    c950:	003f1b06 	br	c5c0 <__alt_mem_nios_system_shared_memory+0xfffcc5c0>
    c954:	8809883a 	mov	r4,r17
    c958:	0014f340 	call	14f34 <_localeconv_r>
    c95c:	11000017 	ldw	r4,0(r2)
    c960:	000ba8c0 	call	ba8c <strlen>
    c964:	d8c00617 	ldw	r3,24(sp)
    c968:	1885883a 	add	r2,r3,r2
    c96c:	d8800615 	stw	r2,24(sp)
    c970:	15c00007 	ldb	r23,0(r2)
    c974:	8001771e 	bne	r16,zero,cf54 <_strtod_r+0xb68>
    c978:	01000c04 	movi	r4,48
    c97c:	b903581e 	bne	r23,r4,d6e0 <_strtod_r+0x12f4>
    c980:	11000044 	addi	r4,r2,1
    c984:	b80b883a 	mov	r5,r23
    c988:	d9000615 	stw	r4,24(sp)
    c98c:	25c00007 	ldb	r23,0(r4)
    c990:	20adc83a 	sub	r22,r4,r2
    c994:	21000044 	addi	r4,r4,1
    c998:	b97ffb26 	beq	r23,r5,c988 <__alt_mem_nios_system_shared_memory+0xfffcc988>
    c99c:	b8bff3c4 	addi	r2,r23,-49
    c9a0:	01000204 	movi	r4,8
    c9a4:	2083002e 	bgeu	r4,r2,d5a8 <_strtod_r+0x11bc>
    c9a8:	00801944 	movi	r2,101
    c9ac:	b8813a26 	beq	r23,r2,ce98 <_strtod_r+0xaac>
    c9b0:	0039883a 	mov	fp,zero
    c9b4:	d8000b15 	stw	zero,44(sp)
    c9b8:	04800044 	movi	r18,1
    c9bc:	003f2e06 	br	c678 <__alt_mem_nios_system_shared_memory+0xfffcc678>
    c9c0:	d8c00c17 	ldw	r3,48(sp)
    c9c4:	18017d26 	beq	r3,zero,cfbc <_strtod_r+0xbd0>
    c9c8:	d8000815 	stw	zero,32(sp)
    c9cc:	0039883a 	mov	fp,zero
    c9d0:	003f2f06 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    c9d4:	e4a5c83a 	sub	r18,fp,r18
    c9d8:	9565883a 	add	r18,r18,r21
    c9dc:	0482370e 	bge	zero,r18,d2bc <_strtod_r+0xed0>
    c9e0:	908003cc 	andi	r2,r18,15
    c9e4:	10000b26 	beq	r2,zero,ca14 <_strtod_r+0x628>
    c9e8:	100490fa 	slli	r2,r2,3
    c9ec:	00c000b4 	movhi	r3,2
    c9f0:	18fb0604 	addi	r3,r3,-5096
    c9f4:	1885883a 	add	r2,r3,r2
    c9f8:	11000017 	ldw	r4,0(r2)
    c9fc:	11400117 	ldw	r5,4(r2)
    ca00:	b80d883a 	mov	r6,r23
    ca04:	b00f883a 	mov	r7,r22
    ca08:	0007c800 	call	7c80 <__muldf3>
    ca0c:	102f883a 	mov	r23,r2
    ca10:	182d883a 	mov	r22,r3
    ca14:	053ffc04 	movi	r20,-16
    ca18:	9524703a 	and	r18,r18,r20
    ca1c:	90003826 	beq	r18,zero,cb00 <_strtod_r+0x714>
    ca20:	00804d04 	movi	r2,308
    ca24:	1481eb16 	blt	r2,r18,d1d4 <_strtod_r+0xde8>
    ca28:	9029d13a 	srai	r20,r18,4
    ca2c:	02c00044 	movi	r11,1
    ca30:	5d03900e 	bge	r11,r20,d874 <_strtod_r+0x1488>
    ca34:	010000b4 	movhi	r4,2
    ca38:	213afc04 	addi	r4,r4,-5136
    ca3c:	2011883a 	mov	r8,r4
    ca40:	0025883a 	mov	r18,zero
    ca44:	880b883a 	mov	r5,r17
    ca48:	d9000715 	stw	r4,28(sp)
    ca4c:	dc000b15 	stw	r16,44(sp)
    ca50:	9023883a 	mov	r17,r18
    ca54:	b805883a 	mov	r2,r23
    ca58:	b007883a 	mov	r3,r22
    ca5c:	0009883a 	mov	r4,zero
    ca60:	4021883a 	mov	r16,r8
    ca64:	2825883a 	mov	r18,r5
    ca68:	a180004c 	andi	r6,r20,1
    ca6c:	30000826 	beq	r6,zero,ca90 <_strtod_r+0x6a4>
    ca70:	81800017 	ldw	r6,0(r16)
    ca74:	81c00117 	ldw	r7,4(r16)
    ca78:	1009883a 	mov	r4,r2
    ca7c:	180b883a 	mov	r5,r3
    ca80:	dac01315 	stw	r11,76(sp)
    ca84:	0007c800 	call	7c80 <__muldf3>
    ca88:	dac01317 	ldw	r11,76(sp)
    ca8c:	01000044 	movi	r4,1
    ca90:	a029d07a 	srai	r20,r20,1
    ca94:	8c400044 	addi	r17,r17,1
    ca98:	84000204 	addi	r16,r16,8
    ca9c:	a2fff21e 	bne	r20,r11,ca68 <__alt_mem_nios_system_shared_memory+0xfffcca68>
    caa0:	900b883a 	mov	r5,r18
    caa4:	21003fcc 	andi	r4,r4,255
    caa8:	8825883a 	mov	r18,r17
    caac:	dc000b17 	ldw	r16,44(sp)
    cab0:	2823883a 	mov	r17,r5
    cab4:	2003c01e 	bne	r4,zero,d9b8 <_strtod_r+0x15cc>
    cab8:	901490fa 	slli	r10,r18,3
    cabc:	d8800717 	ldw	r2,28(sp)
    cac0:	01ff2c34 	movhi	r7,64688
    cac4:	b80d883a 	mov	r6,r23
    cac8:	12a5883a 	add	r18,r2,r10
    cacc:	91000017 	ldw	r4,0(r18)
    cad0:	91400117 	ldw	r5,4(r18)
    cad4:	b1cf883a 	add	r7,r22,r7
    cad8:	0007c800 	call	7c80 <__muldf3>
    cadc:	102f883a 	mov	r23,r2
    cae0:	011f2834 	movhi	r4,31904
    cae4:	189ffc2c 	andhi	r2,r3,32752
    cae8:	2081ba36 	bltu	r4,r2,d1d4 <_strtod_r+0xde8>
    caec:	011f2434 	movhi	r4,31888
    caf0:	20834a2e 	bgeu	r4,r2,d81c <_strtod_r+0x1430>
    caf4:	059ffc34 	movhi	r22,32752
    caf8:	b5bfffc4 	addi	r22,r22,-1
    cafc:	05ffffc4 	movi	r23,-1
    cb00:	d8000715 	stw	zero,28(sp)
    cb04:	d9400817 	ldw	r5,32(sp)
    cb08:	dcc00015 	stw	r19,0(sp)
    cb0c:	e00f883a 	mov	r7,fp
    cb10:	800d883a 	mov	r6,r16
    cb14:	8809883a 	mov	r4,r17
    cb18:	00153b40 	call	153b4 <__s2b>
    cb1c:	d8800b15 	stw	r2,44(sp)
    cb20:	1001ac26 	beq	r2,zero,d1d4 <_strtod_r+0xde8>
    cb24:	a807d7fa 	srai	r3,r21,31
    cb28:	0545c83a 	sub	r2,zero,r21
    cb2c:	dd400c15 	stw	r21,48(sp)
    cb30:	1886703a 	and	r3,r3,r2
    cb34:	d8c00e15 	stw	r3,56(sp)
    cb38:	a8015916 	blt	r21,zero,d0a0 <_strtod_r+0xcb4>
    cb3c:	d9400b17 	ldw	r5,44(sp)
    cb40:	0011883a 	mov	r8,zero
    cb44:	0021883a 	mov	r16,zero
    cb48:	29400304 	addi	r5,r5,12
    cb4c:	d9401115 	stw	r5,68(sp)
    cb50:	4025883a 	mov	r18,r8
    cb54:	d8800b17 	ldw	r2,44(sp)
    cb58:	8809883a 	mov	r4,r17
    cb5c:	11400117 	ldw	r5,4(r2)
    cb60:	001519c0 	call	1519c <_Balloc>
    cb64:	1027883a 	mov	r19,r2
    cb68:	10015226 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cb6c:	d8c00b17 	ldw	r3,44(sp)
    cb70:	d9401117 	ldw	r5,68(sp)
    cb74:	11000304 	addi	r4,r2,12
    cb78:	19800417 	ldw	r6,16(r3)
    cb7c:	31800084 	addi	r6,r6,2
    cb80:	318d883a 	add	r6,r6,r6
    cb84:	318d883a 	add	r6,r6,r6
    cb88:	000b0ac0 	call	b0ac <memcpy>
    cb8c:	d9000204 	addi	r4,sp,8
    cb90:	d9000015 	stw	r4,0(sp)
    cb94:	d9c00404 	addi	r7,sp,16
    cb98:	b80b883a 	mov	r5,r23
    cb9c:	b00d883a 	mov	r6,r22
    cba0:	8809883a 	mov	r4,r17
    cba4:	0015eec0 	call	15eec <__d2b>
    cba8:	d8800515 	stw	r2,20(sp)
    cbac:	ddc00815 	stw	r23,32(sp)
    cbb0:	dd801215 	stw	r22,72(sp)
    cbb4:	10029f26 	beq	r2,zero,d634 <_strtod_r+0x1248>
    cbb8:	01400044 	movi	r5,1
    cbbc:	8809883a 	mov	r4,r17
    cbc0:	00155d00 	call	155d0 <__i2b>
    cbc4:	1021883a 	mov	r16,r2
    cbc8:	10013a26 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cbcc:	d8800417 	ldw	r2,16(sp)
    cbd0:	1000b816 	blt	r2,zero,ceb4 <_strtod_r+0xac8>
    cbd4:	d9400e17 	ldw	r5,56(sp)
    cbd8:	d9000c17 	ldw	r4,48(sp)
    cbdc:	28a9883a 	add	r20,r5,r2
    cbe0:	d9400717 	ldw	r5,28(sp)
    cbe4:	dd400217 	ldw	r21,8(sp)
    cbe8:	073f0084 	movi	fp,-1022
    cbec:	1147c83a 	sub	r3,r2,r5
    cbf0:	1d47883a 	add	r3,r3,r21
    cbf4:	00800d84 	movi	r2,54
    cbf8:	18ffffc4 	addi	r3,r3,-1
    cbfc:	156bc83a 	sub	r21,r2,r21
    cc00:	1f00950e 	bge	r3,fp,ce58 <_strtod_r+0xa6c>
    cc04:	e0f9c83a 	sub	fp,fp,r3
    cc08:	008007c4 	movi	r2,31
    cc0c:	af2bc83a 	sub	r21,r21,fp
    cc10:	1700ac16 	blt	r2,fp,cec4 <_strtod_r+0xad8>
    cc14:	00800044 	movi	r2,1
    cc18:	1704983a 	sll	r2,r2,fp
    cc1c:	d8000d15 	stw	zero,52(sp)
    cc20:	d8800f15 	stw	r2,60(sp)
    cc24:	2547883a 	add	r3,r4,r21
    cc28:	d9000717 	ldw	r4,28(sp)
    cc2c:	a56b883a 	add	r21,r20,r21
    cc30:	20f9883a 	add	fp,r4,r3
    cc34:	a009883a 	mov	r4,r20
    cc38:	ad00010e 	bge	r21,r20,cc40 <_strtod_r+0x854>
    cc3c:	a809883a 	mov	r4,r21
    cc40:	e005883a 	mov	r2,fp
    cc44:	2700010e 	bge	r4,fp,cc4c <_strtod_r+0x860>
    cc48:	2005883a 	mov	r2,r4
    cc4c:	0080030e 	bge	zero,r2,cc5c <_strtod_r+0x870>
    cc50:	a8abc83a 	sub	r21,r21,r2
    cc54:	e0b9c83a 	sub	fp,fp,r2
    cc58:	a0a9c83a 	sub	r20,r20,r2
    cc5c:	d9400e17 	ldw	r5,56(sp)
    cc60:	28001126 	beq	r5,zero,cca8 <_strtod_r+0x8bc>
    cc64:	280d883a 	mov	r6,r5
    cc68:	8809883a 	mov	r4,r17
    cc6c:	800b883a 	mov	r5,r16
    cc70:	00158980 	call	15898 <__pow5mult>
    cc74:	1021883a 	mov	r16,r2
    cc78:	10010e26 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cc7c:	d9800517 	ldw	r6,20(sp)
    cc80:	100b883a 	mov	r5,r2
    cc84:	8809883a 	mov	r4,r17
    cc88:	001560c0 	call	1560c <__multiply>
    cc8c:	10010926 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cc90:	d9400517 	ldw	r5,20(sp)
    cc94:	8809883a 	mov	r4,r17
    cc98:	d8801315 	stw	r2,76(sp)
    cc9c:	00152440 	call	15244 <_Bfree>
    cca0:	d8801317 	ldw	r2,76(sp)
    cca4:	d8800515 	stw	r2,20(sp)
    cca8:	0540060e 	bge	zero,r21,ccc4 <_strtod_r+0x8d8>
    ccac:	d9400517 	ldw	r5,20(sp)
    ccb0:	a80d883a 	mov	r6,r21
    ccb4:	8809883a 	mov	r4,r17
    ccb8:	00159d80 	call	159d8 <__lshift>
    ccbc:	d8800515 	stw	r2,20(sp)
    ccc0:	10025c26 	beq	r2,zero,d634 <_strtod_r+0x1248>
    ccc4:	d8800c17 	ldw	r2,48(sp)
    ccc8:	10000626 	beq	r2,zero,cce4 <_strtod_r+0x8f8>
    cccc:	d9800c17 	ldw	r6,48(sp)
    ccd0:	980b883a 	mov	r5,r19
    ccd4:	8809883a 	mov	r4,r17
    ccd8:	00158980 	call	15898 <__pow5mult>
    ccdc:	1027883a 	mov	r19,r2
    cce0:	1000f426 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cce4:	0700060e 	bge	zero,fp,cd00 <_strtod_r+0x914>
    cce8:	980b883a 	mov	r5,r19
    ccec:	e00d883a 	mov	r6,fp
    ccf0:	8809883a 	mov	r4,r17
    ccf4:	00159d80 	call	159d8 <__lshift>
    ccf8:	1027883a 	mov	r19,r2
    ccfc:	1000ed26 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cd00:	0500060e 	bge	zero,r20,cd1c <_strtod_r+0x930>
    cd04:	800b883a 	mov	r5,r16
    cd08:	a00d883a 	mov	r6,r20
    cd0c:	8809883a 	mov	r4,r17
    cd10:	00159d80 	call	159d8 <__lshift>
    cd14:	1021883a 	mov	r16,r2
    cd18:	1000e626 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cd1c:	d9400517 	ldw	r5,20(sp)
    cd20:	980d883a 	mov	r6,r19
    cd24:	8809883a 	mov	r4,r17
    cd28:	0015b800 	call	15b80 <__mdiff>
    cd2c:	1025883a 	mov	r18,r2
    cd30:	1000e026 	beq	r2,zero,d0b4 <_strtod_r+0xcc8>
    cd34:	15400317 	ldw	r21,12(r2)
    cd38:	800b883a 	mov	r5,r16
    cd3c:	10000315 	stw	zero,12(r2)
    cd40:	1009883a 	mov	r4,r2
    cd44:	0015b200 	call	15b20 <__mcmp>
    cd48:	10026716 	blt	r2,zero,d6e8 <_strtod_r+0x12fc>
    cd4c:	10029626 	beq	r2,zero,d7a8 <_strtod_r+0x13bc>
    cd50:	800b883a 	mov	r5,r16
    cd54:	9009883a 	mov	r4,r18
    cd58:	00160380 	call	16038 <__ratio>
    cd5c:	000d883a 	mov	r6,zero
    cd60:	01d00034 	movhi	r7,16384
    cd64:	1009883a 	mov	r4,r2
    cd68:	180b883a 	mov	r5,r3
    cd6c:	1039883a 	mov	fp,r2
    cd70:	1829883a 	mov	r20,r3
    cd74:	0007b8c0 	call	7b8c <__ledf2>
    cd78:	00803b16 	blt	zero,r2,ce68 <_strtod_r+0xa7c>
    cd7c:	a8005e26 	beq	r21,zero,cef8 <_strtod_r+0xb0c>
    cd80:	050ffc34 	movhi	r20,16368
    cd84:	d8000f15 	stw	zero,60(sp)
    cd88:	d8001015 	stw	zero,64(sp)
    cd8c:	dd000d15 	stw	r20,52(sp)
    cd90:	b71ffc2c 	andhi	fp,r22,32752
    cd94:	009ff834 	movhi	r2,32736
    cd98:	e080f226 	beq	fp,r2,d164 <_strtod_r+0xd78>
    cd9c:	d9000717 	ldw	r4,28(sp)
    cda0:	20000c26 	beq	r4,zero,cdd4 <_strtod_r+0x9e8>
    cda4:	0081a834 	movhi	r2,1696
    cda8:	17000a36 	bltu	r2,fp,cdd4 <_strtod_r+0x9e8>
    cdac:	d9001017 	ldw	r4,64(sp)
    cdb0:	d9400d17 	ldw	r5,52(sp)
    cdb4:	01d07834 	movhi	r7,16864
    cdb8:	39ffffc4 	addi	r7,r7,-1
    cdbc:	01bff034 	movhi	r6,65472
    cdc0:	0007b8c0 	call	7b8c <__ledf2>
    cdc4:	0080a70e 	bge	zero,r2,d064 <_strtod_r+0xc78>
    cdc8:	0081ac34 	movhi	r2,1712
    cdcc:	a091883a 	add	r8,r20,r2
    cdd0:	4729c83a 	sub	r20,r8,fp
    cdd4:	b809883a 	mov	r4,r23
    cdd8:	b00b883a 	mov	r5,r22
    cddc:	0015d7c0 	call	15d7c <__ulp>
    cde0:	d9000f17 	ldw	r4,60(sp)
    cde4:	a00b883a 	mov	r5,r20
    cde8:	100d883a 	mov	r6,r2
    cdec:	180f883a 	mov	r7,r3
    cdf0:	0007c800 	call	7c80 <__muldf3>
    cdf4:	b80d883a 	mov	r6,r23
    cdf8:	b00f883a 	mov	r7,r22
    cdfc:	1009883a 	mov	r4,r2
    ce00:	180b883a 	mov	r5,r3
    ce04:	00067ac0 	call	67ac <__adddf3>
    ce08:	102f883a 	mov	r23,r2
    ce0c:	182d883a 	mov	r22,r3
    ce10:	1829883a 	mov	r20,r3
    ce14:	d9000717 	ldw	r4,28(sp)
    ce18:	2000021e 	bne	r4,zero,ce24 <_strtod_r+0xa38>
    ce1c:	a09ffc2c 	andhi	r2,r20,32752
    ce20:	e080f126 	beq	fp,r2,d1e8 <_strtod_r+0xdfc>
    ce24:	d9400517 	ldw	r5,20(sp)
    ce28:	8809883a 	mov	r4,r17
    ce2c:	00152440 	call	15244 <_Bfree>
    ce30:	980b883a 	mov	r5,r19
    ce34:	8809883a 	mov	r4,r17
    ce38:	00152440 	call	15244 <_Bfree>
    ce3c:	800b883a 	mov	r5,r16
    ce40:	8809883a 	mov	r4,r17
    ce44:	00152440 	call	15244 <_Bfree>
    ce48:	900b883a 	mov	r5,r18
    ce4c:	8809883a 	mov	r4,r17
    ce50:	00152440 	call	15244 <_Bfree>
    ce54:	003f3f06 	br	cb54 <__alt_mem_nios_system_shared_memory+0xfffccb54>
    ce58:	00c00044 	movi	r3,1
    ce5c:	d8000d15 	stw	zero,52(sp)
    ce60:	d8c00f15 	stw	r3,60(sp)
    ce64:	003f6f06 	br	cc24 <__alt_mem_nios_system_shared_memory+0xfffccc24>
    ce68:	000d883a 	mov	r6,zero
    ce6c:	01cff834 	movhi	r7,16352
    ce70:	e009883a 	mov	r4,fp
    ce74:	a00b883a 	mov	r5,r20
    ce78:	0007c800 	call	7c80 <__muldf3>
    ce7c:	d8801015 	stw	r2,64(sp)
    ce80:	d8c00d15 	stw	r3,52(sp)
    ce84:	a8001a1e 	bne	r21,zero,cef0 <_strtod_r+0xb04>
    ce88:	1a20003c 	xorhi	r8,r3,32768
    ce8c:	d8800f15 	stw	r2,60(sp)
    ce90:	4029883a 	mov	r20,r8
    ce94:	003fbe06 	br	cd90 <__alt_mem_nios_system_shared_memory+0xfffccd90>
    ce98:	d8000b15 	stw	zero,44(sp)
    ce9c:	04800044 	movi	r18,1
    cea0:	b000021e 	bne	r22,zero,ceac <_strtod_r+0xac0>
    cea4:	d8c00c17 	ldw	r3,48(sp)
    cea8:	183d9d26 	beq	r3,zero,c520 <__alt_mem_nios_system_shared_memory+0xfffcc520>
    ceac:	0039883a 	mov	fp,zero
    ceb0:	003e5206 	br	c7fc <__alt_mem_nios_system_shared_memory+0xfffcc7fc>
    ceb4:	d8c00c17 	ldw	r3,48(sp)
    ceb8:	dd000e17 	ldw	r20,56(sp)
    cebc:	1889c83a 	sub	r4,r3,r2
    cec0:	003f4706 	br	cbe0 <__alt_mem_nios_system_shared_memory+0xfffccbe0>
    cec4:	00bef884 	movi	r2,-1054
    cec8:	07000044 	movi	fp,1
    cecc:	10c5c83a 	sub	r2,r2,r3
    ced0:	e084983a 	sll	r2,fp,r2
    ced4:	df000f15 	stw	fp,60(sp)
    ced8:	d8800d15 	stw	r2,52(sp)
    cedc:	003f5106 	br	cc24 <__alt_mem_nios_system_shared_memory+0xfffccc24>
    cee0:	d8c00717 	ldw	r3,28(sp)
    cee4:	0009883a 	mov	r4,zero
    cee8:	d8c00615 	stw	r3,24(sp)
    ceec:	003de506 	br	c684 <__alt_mem_nios_system_shared_memory+0xfffcc684>
    cef0:	da000d17 	ldw	r8,52(sp)
    cef4:	003fe506 	br	ce8c <__alt_mem_nios_system_shared_memory+0xfffcce8c>
    cef8:	b800521e 	bne	r23,zero,d044 <_strtod_r+0xc58>
    cefc:	01000434 	movhi	r4,16
    cf00:	213fffc4 	addi	r4,r4,-1
    cf04:	b104703a 	and	r2,r22,r4
    cf08:	1000501e 	bne	r2,zero,d04c <_strtod_r+0xc60>
    cf0c:	000d883a 	mov	r6,zero
    cf10:	01cffc34 	movhi	r7,16368
    cf14:	e009883a 	mov	r4,fp
    cf18:	a00b883a 	mov	r5,r20
    cf1c:	0007b8c0 	call	7b8c <__ledf2>
    cf20:	10024216 	blt	r2,zero,d82c <_strtod_r+0x1440>
    cf24:	a00b883a 	mov	r5,r20
    cf28:	000d883a 	mov	r6,zero
    cf2c:	01cff834 	movhi	r7,16352
    cf30:	e009883a 	mov	r4,fp
    cf34:	0007c800 	call	7c80 <__muldf3>
    cf38:	d8801015 	stw	r2,64(sp)
    cf3c:	d8c00d15 	stw	r3,52(sp)
    cf40:	1029883a 	mov	r20,r2
    cf44:	1a20003c 	xorhi	r8,r3,32768
    cf48:	dd000f15 	stw	r20,60(sp)
    cf4c:	4029883a 	mov	r20,r8
    cf50:	003f8f06 	br	cd90 <__alt_mem_nios_system_shared_memory+0xfffccd90>
    cf54:	8039883a 	mov	fp,r16
    cf58:	002d883a 	mov	r22,zero
    cf5c:	d8000b15 	stw	zero,44(sp)
    cf60:	bd7ff404 	addi	r21,r23,-48
    cf64:	00800244 	movi	r2,9
    cf68:	15401236 	bltu	r2,r21,cfb4 <_strtod_r+0xbc8>
    cf6c:	dd400e15 	stw	r21,56(sp)
    cf70:	b0800044 	addi	r2,r22,1
    cf74:	a801701e 	bne	r21,zero,d538 <_strtod_r+0x114c>
    cf78:	ddc00617 	ldw	r23,24(sp)
    cf7c:	102d883a 	mov	r22,r2
    cf80:	b8800044 	addi	r2,r23,1
    cf84:	d8800615 	stw	r2,24(sp)
    cf88:	bdc00047 	ldb	r23,1(r23)
    cf8c:	003ff406 	br	cf60 <__alt_mem_nios_system_shared_memory+0xfffccf60>
    cf90:	00c00044 	movi	r3,1
    cf94:	d8c00e15 	stw	r3,56(sp)
    cf98:	d8c00717 	ldw	r3,28(sp)
    cf9c:	18800084 	addi	r2,r3,2
    cfa0:	d8800615 	stw	r2,24(sp)
    cfa4:	1dc00087 	ldb	r23,2(r3)
    cfa8:	003e1f06 	br	c828 <__alt_mem_nios_system_shared_memory+0xfffcc828>
    cfac:	d8000e15 	stw	zero,56(sp)
    cfb0:	003ff906 	br	cf98 <__alt_mem_nios_system_shared_memory+0xfffccf98>
    cfb4:	04800044 	movi	r18,1
    cfb8:	003dad06 	br	c670 <__alt_mem_nios_system_shared_memory+0xfffcc670>
    cfbc:	903d581e 	bne	r18,zero,c520 <__alt_mem_nios_system_shared_memory+0xfffcc520>
    cfc0:	00801384 	movi	r2,78
    cfc4:	b8800526 	beq	r23,r2,cfdc <_strtod_r+0xbf0>
    cfc8:	15fd530e 	bge	r2,r23,c518 <__alt_mem_nios_system_shared_memory+0xfffcc518>
    cfcc:	00801a44 	movi	r2,105
    cfd0:	b8819a26 	beq	r23,r2,d63c <_strtod_r+0x1250>
    cfd4:	00801b84 	movi	r2,110
    cfd8:	b8bd511e 	bne	r23,r2,c520 <__alt_mem_nios_system_shared_memory+0xfffcc520>
    cfdc:	014000b4 	movhi	r5,2
    cfe0:	d9000617 	ldw	r4,24(sp)
    cfe4:	297a7304 	addi	r5,r5,-5684
    cfe8:	01c00644 	movi	r7,25
    cfec:	00000b06 	br	d01c <_strtod_r+0xc30>
    cff0:	21000044 	addi	r4,r4,1
    cff4:	20800003 	ldbu	r2,0(r4)
    cff8:	10ffefc4 	addi	r3,r2,-65
    cffc:	10803fcc 	andi	r2,r2,255
    d000:	1080201c 	xori	r2,r2,128
    d004:	18c03fcc 	andi	r3,r3,255
    d008:	10bfe004 	addi	r2,r2,-128
    d00c:	38c00136 	bltu	r7,r3,d014 <_strtod_r+0xc28>
    d010:	10800804 	addi	r2,r2,32
    d014:	29400044 	addi	r5,r5,1
    d018:	11bd411e 	bne	r2,r6,c520 <__alt_mem_nios_system_shared_memory+0xfffcc520>
    d01c:	29800007 	ldb	r6,0(r5)
    d020:	303ff31e 	bne	r6,zero,cff0 <__alt_mem_nios_system_shared_memory+0xfffccff0>
    d024:	20800044 	addi	r2,r4,1
    d028:	d8800615 	stw	r2,24(sp)
    d02c:	20c00047 	ldb	r3,1(r4)
    d030:	00800a04 	movi	r2,40
    d034:	18bde326 	beq	r3,r2,c7c4 <__alt_mem_nios_system_shared_memory+0xfffcc7c4>
    d038:	05bffe34 	movhi	r22,65528
    d03c:	002f883a 	mov	r23,zero
    d040:	003dea06 	br	c7ec <__alt_mem_nios_system_shared_memory+0xfffcc7ec>
    d044:	00800044 	movi	r2,1
    d048:	b880ff26 	beq	r23,r2,d448 <_strtod_r+0x105c>
    d04c:	014ffc34 	movhi	r5,16368
    d050:	d8000f15 	stw	zero,60(sp)
    d054:	052ffc34 	movhi	r20,49136
    d058:	d8001015 	stw	zero,64(sp)
    d05c:	d9400d15 	stw	r5,52(sp)
    d060:	003f4b06 	br	cd90 <__alt_mem_nios_system_shared_memory+0xfffccd90>
    d064:	d9001017 	ldw	r4,64(sp)
    d068:	d9400d17 	ldw	r5,52(sp)
    d06c:	0019eb40 	call	19eb4 <__fixunsdfsi>
    d070:	1000f126 	beq	r2,zero,d438 <_strtod_r+0x104c>
    d074:	1009883a 	mov	r4,r2
    d078:	001ab680 	call	1ab68 <__floatunsidf>
    d07c:	d8801015 	stw	r2,64(sp)
    d080:	d8c00d15 	stw	r3,52(sp)
    d084:	a800ea1e 	bne	r21,zero,d430 <_strtod_r+0x1044>
    d088:	d8800d17 	ldw	r2,52(sp)
    d08c:	1220003c 	xorhi	r8,r2,32768
    d090:	d8c01017 	ldw	r3,64(sp)
    d094:	4029883a 	mov	r20,r8
    d098:	d8c00f15 	stw	r3,60(sp)
    d09c:	003f4a06 	br	cdc8 <__alt_mem_nios_system_shared_memory+0xfffccdc8>
    d0a0:	d8000c15 	stw	zero,48(sp)
    d0a4:	003ea506 	br	cb3c <__alt_mem_nios_system_shared_memory+0xfffccb3c>
    d0a8:	d8c00817 	ldw	r3,32(sp)
    d0ac:	00bfffc4 	movi	r2,-1
    d0b0:	1880441e 	bne	r3,r2,d1c4 <_strtod_r+0xdd8>
    d0b4:	9011883a 	mov	r8,r18
    d0b8:	d8800517 	ldw	r2,20(sp)
    d0bc:	00c00884 	movi	r3,34
    d0c0:	88c00015 	stw	r3,0(r17)
    d0c4:	d8000815 	stw	zero,32(sp)
    d0c8:	071ffc34 	movhi	fp,32752
    d0cc:	100b883a 	mov	r5,r2
    d0d0:	8809883a 	mov	r4,r17
    d0d4:	da001315 	stw	r8,76(sp)
    d0d8:	00152440 	call	15244 <_Bfree>
    d0dc:	980b883a 	mov	r5,r19
    d0e0:	8809883a 	mov	r4,r17
    d0e4:	00152440 	call	15244 <_Bfree>
    d0e8:	800b883a 	mov	r5,r16
    d0ec:	8809883a 	mov	r4,r17
    d0f0:	00152440 	call	15244 <_Bfree>
    d0f4:	d9400b17 	ldw	r5,44(sp)
    d0f8:	8809883a 	mov	r4,r17
    d0fc:	00152440 	call	15244 <_Bfree>
    d100:	da001317 	ldw	r8,76(sp)
    d104:	8809883a 	mov	r4,r17
    d108:	400b883a 	mov	r5,r8
    d10c:	00152440 	call	15244 <_Bfree>
    d110:	003d5f06 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    d114:	d8c00a17 	ldw	r3,40(sp)
    d118:	d8800504 	addi	r2,sp,20
    d11c:	018000b4 	movhi	r6,2
    d120:	31ba7904 	addi	r6,r6,-5660
    d124:	d8c00115 	stw	r3,4(sp)
    d128:	d8800015 	stw	r2,0(sp)
    d12c:	d9c00404 	addi	r7,sp,16
    d130:	d9400604 	addi	r5,sp,24
    d134:	8809883a 	mov	r4,r17
    d138:	00143880 	call	14388 <__gethex>
    d13c:	148001cc 	andi	r18,r2,7
    d140:	903e2126 	beq	r18,zero,c9c8 <__alt_mem_nios_system_shared_memory+0xfffcc9c8>
    d144:	00c00184 	movi	r3,6
    d148:	90c0c71e 	bne	r18,r3,d468 <_strtod_r+0x107c>
    d14c:	84000044 	addi	r16,r16,1
    d150:	dc000615 	stw	r16,24(sp)
    d154:	d8000815 	stw	zero,32(sp)
    d158:	0039883a 	mov	fp,zero
    d15c:	d8000a15 	stw	zero,40(sp)
    d160:	003d4b06 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    d164:	00bf2c34 	movhi	r2,64688
    d168:	b0ad883a 	add	r22,r22,r2
    d16c:	b809883a 	mov	r4,r23
    d170:	b00b883a 	mov	r5,r22
    d174:	0015d7c0 	call	15d7c <__ulp>
    d178:	d9000f17 	ldw	r4,60(sp)
    d17c:	100d883a 	mov	r6,r2
    d180:	180f883a 	mov	r7,r3
    d184:	a00b883a 	mov	r5,r20
    d188:	0007c800 	call	7c80 <__muldf3>
    d18c:	b80d883a 	mov	r6,r23
    d190:	1009883a 	mov	r4,r2
    d194:	b00f883a 	mov	r7,r22
    d198:	180b883a 	mov	r5,r3
    d19c:	00067ac0 	call	67ac <__adddf3>
    d1a0:	011f2834 	movhi	r4,31904
    d1a4:	102f883a 	mov	r23,r2
    d1a8:	213fffc4 	addi	r4,r4,-1
    d1ac:	189ffc2c 	andhi	r2,r3,32752
    d1b0:	20807b2e 	bgeu	r4,r2,d3a0 <_strtod_r+0xfb4>
    d1b4:	d9401217 	ldw	r5,72(sp)
    d1b8:	009ffc34 	movhi	r2,32752
    d1bc:	10bfffc4 	addi	r2,r2,-1
    d1c0:	28bfb926 	beq	r5,r2,d0a8 <__alt_mem_nios_system_shared_memory+0xfffcd0a8>
    d1c4:	059ffc34 	movhi	r22,32752
    d1c8:	b5bfffc4 	addi	r22,r22,-1
    d1cc:	05ffffc4 	movi	r23,-1
    d1d0:	003f1406 	br	ce24 <__alt_mem_nios_system_shared_memory+0xfffcce24>
    d1d4:	00800884 	movi	r2,34
    d1d8:	88800015 	stw	r2,0(r17)
    d1dc:	d8000815 	stw	zero,32(sp)
    d1e0:	071ffc34 	movhi	fp,32752
    d1e4:	003d2a06 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    d1e8:	d9400d17 	ldw	r5,52(sp)
    d1ec:	d9001017 	ldw	r4,64(sp)
    d1f0:	001aae80 	call	1aae8 <__fixdfsi>
    d1f4:	1009883a 	mov	r4,r2
    d1f8:	0008de80 	call	8de8 <__floatsidf>
    d1fc:	d9001017 	ldw	r4,64(sp)
    d200:	d9400d17 	ldw	r5,52(sp)
    d204:	100d883a 	mov	r6,r2
    d208:	180f883a 	mov	r7,r3
    d20c:	00084ec0 	call	84ec <__subdf3>
    d210:	1011883a 	mov	r8,r2
    d214:	1839883a 	mov	fp,r3
    d218:	a800121e 	bne	r21,zero,d264 <_strtod_r+0xe78>
    d21c:	b800111e 	bne	r23,zero,d264 <_strtod_r+0xe78>
    d220:	01400434 	movhi	r5,16
    d224:	297fffc4 	addi	r5,r5,-1
    d228:	a168703a 	and	r20,r20,r5
    d22c:	a0000d1e 	bne	r20,zero,d264 <_strtod_r+0xe78>
    d230:	01a52834 	movhi	r6,38048
    d234:	01cff434 	movhi	r7,16336
    d238:	318d6544 	addi	r6,r6,13717
    d23c:	39ffffc4 	addi	r7,r7,-1
    d240:	1009883a 	mov	r4,r2
    d244:	180b883a 	mov	r5,r3
    d248:	0007b8c0 	call	7b8c <__ledf2>
    d24c:	103ef50e 	bge	r2,zero,ce24 <__alt_mem_nios_system_shared_memory+0xfffcce24>
    d250:	9011883a 	mov	r8,r18
    d254:	d8800517 	ldw	r2,20(sp)
    d258:	d8000815 	stw	zero,32(sp)
    d25c:	b039883a 	mov	fp,r22
    d260:	003f9a06 	br	d0cc <__alt_mem_nios_system_shared_memory+0xfffcd0cc>
    d264:	01a52834 	movhi	r6,38048
    d268:	01cff834 	movhi	r7,16352
    d26c:	4009883a 	mov	r4,r8
    d270:	318d6544 	addi	r6,r6,13717
    d274:	39ffffc4 	addi	r7,r7,-1
    d278:	e00b883a 	mov	r5,fp
    d27c:	da001315 	stw	r8,76(sp)
    d280:	0007b8c0 	call	7b8c <__ledf2>
    d284:	da001317 	ldw	r8,76(sp)
    d288:	10000716 	blt	r2,zero,d2a8 <_strtod_r+0xebc>
    d28c:	018d6c34 	movhi	r6,13744
    d290:	31b94d44 	addi	r6,r6,-6859
    d294:	01cff834 	movhi	r7,16352
    d298:	4009883a 	mov	r4,r8
    d29c:	e00b883a 	mov	r5,fp
    d2a0:	0007ab00 	call	7ab0 <__gedf2>
    d2a4:	00bedf0e 	bge	zero,r2,ce24 <__alt_mem_nios_system_shared_memory+0xfffcce24>
    d2a8:	9011883a 	mov	r8,r18
    d2ac:	d8800517 	ldw	r2,20(sp)
    d2b0:	ddc00815 	stw	r23,32(sp)
    d2b4:	b039883a 	mov	fp,r22
    d2b8:	003f8406 	br	d0cc <__alt_mem_nios_system_shared_memory+0xfffcd0cc>
    d2bc:	903e1026 	beq	r18,zero,cb00 <__alt_mem_nios_system_shared_memory+0xfffccb00>
    d2c0:	04a5c83a 	sub	r18,zero,r18
    d2c4:	908003cc 	andi	r2,r18,15
    d2c8:	10000b26 	beq	r2,zero,d2f8 <_strtod_r+0xf0c>
    d2cc:	100490fa 	slli	r2,r2,3
    d2d0:	00c000b4 	movhi	r3,2
    d2d4:	18fb0604 	addi	r3,r3,-5096
    d2d8:	1885883a 	add	r2,r3,r2
    d2dc:	11800017 	ldw	r6,0(r2)
    d2e0:	11c00117 	ldw	r7,4(r2)
    d2e4:	b809883a 	mov	r4,r23
    d2e8:	b00b883a 	mov	r5,r22
    d2ec:	00070580 	call	7058 <__divdf3>
    d2f0:	102f883a 	mov	r23,r2
    d2f4:	182d883a 	mov	r22,r3
    d2f8:	9025d13a 	srai	r18,r18,4
    d2fc:	903e0026 	beq	r18,zero,cb00 <__alt_mem_nios_system_shared_memory+0xfffccb00>
    d300:	008007c4 	movi	r2,31
    d304:	14801f16 	blt	r2,r18,d384 <_strtod_r+0xf98>
    d308:	9080040c 	andi	r2,r18,16
    d30c:	10018d26 	beq	r2,zero,d944 <_strtod_r+0x1558>
    d310:	00c01a84 	movi	r3,106
    d314:	d8c00715 	stw	r3,28(sp)
    d318:	04817e0e 	bge	zero,r18,d914 <_strtod_r+0x1528>
    d31c:	050000b4 	movhi	r20,2
    d320:	a53a7e04 	addi	r20,r20,-5640
    d324:	b805883a 	mov	r2,r23
    d328:	b007883a 	mov	r3,r22
    d32c:	0009883a 	mov	r4,zero
    d330:	9180004c 	andi	r6,r18,1
    d334:	30000626 	beq	r6,zero,d350 <_strtod_r+0xf64>
    d338:	a1800017 	ldw	r6,0(r20)
    d33c:	a1c00117 	ldw	r7,4(r20)
    d340:	1009883a 	mov	r4,r2
    d344:	180b883a 	mov	r5,r3
    d348:	0007c800 	call	7c80 <__muldf3>
    d34c:	01000044 	movi	r4,1
    d350:	9025d07a 	srai	r18,r18,1
    d354:	a5000204 	addi	r20,r20,8
    d358:	903ff51e 	bne	r18,zero,d330 <__alt_mem_nios_system_shared_memory+0xfffcd330>
    d35c:	21003fcc 	andi	r4,r4,255
    d360:	2001891e 	bne	r4,zero,d988 <_strtod_r+0x159c>
    d364:	d9000717 	ldw	r4,28(sp)
    d368:	20016a1e 	bne	r4,zero,d914 <_strtod_r+0x1528>
    d36c:	000d883a 	mov	r6,zero
    d370:	000f883a 	mov	r7,zero
    d374:	b809883a 	mov	r4,r23
    d378:	b00b883a 	mov	r5,r22
    d37c:	0007a280 	call	7a28 <__eqdf2>
    d380:	103de01e 	bne	r2,zero,cb04 <__alt_mem_nios_system_shared_memory+0xfffccb04>
    d384:	00800884 	movi	r2,34
    d388:	88800015 	stw	r2,0(r17)
    d38c:	d8000815 	stw	zero,32(sp)
    d390:	0039883a 	mov	fp,zero
    d394:	003cbe06 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    d398:	011387c4 	movi	r4,19999
    d39c:	003d5606 	br	c8f8 <__alt_mem_nios_system_shared_memory+0xfffcc8f8>
    d3a0:	0580d434 	movhi	r22,848
    d3a4:	1dad883a 	add	r22,r3,r22
    d3a8:	b029883a 	mov	r20,r22
    d3ac:	003e9906 	br	ce14 <__alt_mem_nios_system_shared_memory+0xfffcce14>
    d3b0:	e5c03fcc 	andi	r23,fp,255
    d3b4:	bdc0201c 	xori	r23,r23,128
    d3b8:	bdffe004 	addi	r23,r23,-128
    d3bc:	dc800817 	ldw	r18,32(sp)
    d3c0:	0029883a 	mov	r20,zero
    d3c4:	0027883a 	mov	r19,zero
    d3c8:	0021883a 	mov	r16,zero
    d3cc:	003c9806 	br	c630 <__alt_mem_nios_system_shared_memory+0xfffcc630>
    d3d0:	00c00944 	movi	r3,37
    d3d4:	1f07c83a 	sub	r3,r3,fp
    d3d8:	1d7d7e16 	blt	r3,r21,c9d4 <__alt_mem_nios_system_shared_memory+0xfffcc9d4>
    d3dc:	1721c83a 	sub	r16,r2,fp
    d3e0:	800490fa 	slli	r2,r16,3
    d3e4:	044000b4 	movhi	r17,2
    d3e8:	8c7b0604 	addi	r17,r17,-5096
    d3ec:	8885883a 	add	r2,r17,r2
    d3f0:	11000017 	ldw	r4,0(r2)
    d3f4:	11400117 	ldw	r5,4(r2)
    d3f8:	b80d883a 	mov	r6,r23
    d3fc:	b00f883a 	mov	r7,r22
    d400:	0007c800 	call	7c80 <__muldf3>
    d404:	ac2bc83a 	sub	r21,r21,r16
    d408:	a80c90fa 	slli	r6,r21,3
    d40c:	1009883a 	mov	r4,r2
    d410:	180b883a 	mov	r5,r3
    d414:	8985883a 	add	r2,r17,r6
    d418:	11800017 	ldw	r6,0(r2)
    d41c:	11c00117 	ldw	r7,4(r2)
    d420:	0007c800 	call	7c80 <__muldf3>
    d424:	d8800815 	stw	r2,32(sp)
    d428:	1839883a 	mov	fp,r3
    d42c:	003c9806 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    d430:	da000d17 	ldw	r8,52(sp)
    d434:	003f1606 	br	d090 <__alt_mem_nios_system_shared_memory+0xfffcd090>
    d438:	014ffc34 	movhi	r5,16368
    d43c:	d8001015 	stw	zero,64(sp)
    d440:	d9400d15 	stw	r5,52(sp)
    d444:	003f0f06 	br	d084 <__alt_mem_nios_system_shared_memory+0xfffcd084>
    d448:	b03f001e 	bne	r22,zero,d04c <__alt_mem_nios_system_shared_memory+0xfffcd04c>
    d44c:	9011883a 	mov	r8,r18
    d450:	00800884 	movi	r2,34
    d454:	88800015 	stw	r2,0(r17)
    d458:	d8000815 	stw	zero,32(sp)
    d45c:	d8800517 	ldw	r2,20(sp)
    d460:	0039883a 	mov	fp,zero
    d464:	003f1906 	br	d0cc <__alt_mem_nios_system_shared_memory+0xfffcd0cc>
    d468:	d9800517 	ldw	r6,20(sp)
    d46c:	30000826 	beq	r6,zero,d490 <_strtod_r+0x10a4>
    d470:	01400d44 	movi	r5,53
    d474:	d9000204 	addi	r4,sp,8
    d478:	d8801315 	stw	r2,76(sp)
    d47c:	00161500 	call	16150 <__copybits>
    d480:	d9400517 	ldw	r5,20(sp)
    d484:	8809883a 	mov	r4,r17
    d488:	00152440 	call	15244 <_Bfree>
    d48c:	d8801317 	ldw	r2,76(sp)
    d490:	00c00184 	movi	r3,6
    d494:	1c800f36 	bltu	r3,r18,d4d4 <_strtod_r+0x10e8>
    d498:	902490ba 	slli	r18,r18,2
    d49c:	00c00074 	movhi	r3,1
    d4a0:	18f52c04 	addi	r3,r3,-11088
    d4a4:	90e5883a 	add	r18,r18,r3
    d4a8:	90c00017 	ldw	r3,0(r18)
    d4ac:	1800683a 	jmp	r3
    d4b0:	0000d52c 	andhi	zero,zero,852
    d4b4:	0000d504 	movi	zero,852
    d4b8:	0000d4e8 	cmpgeui	zero,zero,851
    d4bc:	0000d4cc 	andi	zero,zero,851
    d4c0:	0000d4f4 	movhi	zero,851
    d4c4:	0000d504 	movi	zero,852
    d4c8:	0000d52c 	andhi	zero,zero,852
    d4cc:	059ffc34 	movhi	r22,32752
    d4d0:	002f883a 	mov	r23,zero
    d4d4:	1080020c 	andi	r2,r2,8
    d4d8:	ddc00815 	stw	r23,32(sp)
    d4dc:	103cc426 	beq	r2,zero,c7f0 <__alt_mem_nios_system_shared_memory+0xfffcc7f0>
    d4e0:	b7200034 	orhi	fp,r22,32768
    d4e4:	003c6a06 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    d4e8:	ddc00217 	ldw	r23,8(sp)
    d4ec:	dd800317 	ldw	r22,12(sp)
    d4f0:	003ff806 	br	d4d4 <__alt_mem_nios_system_shared_memory+0xfffcd4d4>
    d4f4:	05a00034 	movhi	r22,32768
    d4f8:	b5bfffc4 	addi	r22,r22,-1
    d4fc:	05ffffc4 	movi	r23,-1
    d500:	003ff406 	br	d4d4 <__alt_mem_nios_system_shared_memory+0xfffcd4d4>
    d504:	d8c00417 	ldw	r3,16(sp)
    d508:	dd800317 	ldw	r22,12(sp)
    d50c:	013ffc34 	movhi	r4,65520
    d510:	18c10cc4 	addi	r3,r3,1075
    d514:	1806953a 	slli	r3,r3,20
    d518:	213fffc4 	addi	r4,r4,-1
    d51c:	b12c703a 	and	r22,r22,r4
    d520:	ddc00217 	ldw	r23,8(sp)
    d524:	b0ecb03a 	or	r22,r22,r3
    d528:	003fea06 	br	d4d4 <__alt_mem_nios_system_shared_memory+0xfffcd4d4>
    d52c:	002d883a 	mov	r22,zero
    d530:	002f883a 	mov	r23,zero
    d534:	003fe706 	br	d4d4 <__alt_mem_nios_system_shared_memory+0xfffcd4d4>
    d538:	d8c00b17 	ldw	r3,44(sp)
    d53c:	b72d883a 	add	r22,r22,fp
    d540:	1887883a 	add	r3,r3,r2
    d544:	d8c00b15 	stw	r3,44(sp)
    d548:	00c00044 	movi	r3,1
    d54c:	10c11126 	beq	r2,r3,d994 <_strtod_r+0x15a8>
    d550:	05c00204 	movi	r23,8
    d554:	04800404 	movi	r18,16
    d558:	e7000044 	addi	fp,fp,1
    d55c:	e0bfffc4 	addi	r2,fp,-1
    d560:	b8802016 	blt	r23,r2,d5e4 <_strtod_r+0x11f8>
    d564:	9809883a 	mov	r4,r19
    d568:	01400284 	movi	r5,10
    d56c:	00051580 	call	5158 <__mulsi3>
    d570:	1027883a 	mov	r19,r2
    d574:	e5bff81e 	bne	fp,r22,d558 <__alt_mem_nios_system_shared_memory+0xfffcd558>
    d578:	ddc00617 	ldw	r23,24(sp)
    d57c:	e7000044 	addi	fp,fp,1
    d580:	00800204 	movi	r2,8
    d584:	1580100e 	bge	r2,r22,d5c8 <_strtod_r+0x11dc>
    d588:	00800404 	movi	r2,16
    d58c:	002d883a 	mov	r22,zero
    d590:	173e7b16 	blt	r2,fp,cf80 <__alt_mem_nios_system_shared_memory+0xfffccf80>
    d594:	a009883a 	mov	r4,r20
    d598:	01400284 	movi	r5,10
    d59c:	00051580 	call	5158 <__mulsi3>
    d5a0:	a8a9883a 	add	r20,r21,r2
    d5a4:	003e7606 	br	cf80 <__alt_mem_nios_system_shared_memory+0xfffccf80>
    d5a8:	d9000617 	ldw	r4,24(sp)
    d5ac:	bdfff404 	addi	r23,r23,-48
    d5b0:	b5800044 	addi	r22,r22,1
    d5b4:	ddc00e15 	stw	r23,56(sp)
    d5b8:	d9000815 	stw	r4,32(sp)
    d5bc:	dd800b15 	stw	r22,44(sp)
    d5c0:	202f883a 	mov	r23,r4
    d5c4:	07000044 	movi	fp,1
    d5c8:	9809883a 	mov	r4,r19
    d5cc:	01400284 	movi	r5,10
    d5d0:	00051580 	call	5158 <__mulsi3>
    d5d4:	d8c00e17 	ldw	r3,56(sp)
    d5d8:	002d883a 	mov	r22,zero
    d5dc:	18a7883a 	add	r19,r3,r2
    d5e0:	003e6706 	br	cf80 <__alt_mem_nios_system_shared_memory+0xfffccf80>
    d5e4:	973fe316 	blt	r18,fp,d574 <__alt_mem_nios_system_shared_memory+0xfffcd574>
    d5e8:	a009883a 	mov	r4,r20
    d5ec:	01400284 	movi	r5,10
    d5f0:	00051580 	call	5158 <__mulsi3>
    d5f4:	1029883a 	mov	r20,r2
    d5f8:	003fde06 	br	d574 <__alt_mem_nios_system_shared_memory+0xfffcd574>
    d5fc:	00bffa84 	movi	r2,-22
    d600:	a8bcf416 	blt	r21,r2,c9d4 <__alt_mem_nios_system_shared_memory+0xfffcc9d4>
    d604:	a82a90fa 	slli	r21,r21,3
    d608:	008000b4 	movhi	r2,2
    d60c:	10bb0604 	addi	r2,r2,-5096
    d610:	1545c83a 	sub	r2,r2,r21
    d614:	11800017 	ldw	r6,0(r2)
    d618:	11c00117 	ldw	r7,4(r2)
    d61c:	b809883a 	mov	r4,r23
    d620:	b00b883a 	mov	r5,r22
    d624:	00070580 	call	7058 <__divdf3>
    d628:	d8800815 	stw	r2,32(sp)
    d62c:	1839883a 	mov	fp,r3
    d630:	003c1706 	br	c690 <__alt_mem_nios_system_shared_memory+0xfffcc690>
    d634:	9011883a 	mov	r8,r18
    d638:	003ea006 	br	d0bc <__alt_mem_nios_system_shared_memory+0xfffcd0bc>
    d63c:	014000b4 	movhi	r5,2
    d640:	d9000617 	ldw	r4,24(sp)
    d644:	297a7004 	addi	r5,r5,-5696
    d648:	01c00644 	movi	r7,25
    d64c:	00000b06 	br	d67c <_strtod_r+0x1290>
    d650:	21000044 	addi	r4,r4,1
    d654:	20800003 	ldbu	r2,0(r4)
    d658:	10ffefc4 	addi	r3,r2,-65
    d65c:	10803fcc 	andi	r2,r2,255
    d660:	1080201c 	xori	r2,r2,128
    d664:	18c03fcc 	andi	r3,r3,255
    d668:	10bfe004 	addi	r2,r2,-128
    d66c:	38c00136 	bltu	r7,r3,d674 <_strtod_r+0x1288>
    d670:	10800804 	addi	r2,r2,32
    d674:	29400044 	addi	r5,r5,1
    d678:	11bba91e 	bne	r2,r6,c520 <__alt_mem_nios_system_shared_memory+0xfffcc520>
    d67c:	29800007 	ldb	r6,0(r5)
    d680:	303ff31e 	bne	r6,zero,d650 <__alt_mem_nios_system_shared_memory+0xfffcd650>
    d684:	018000b4 	movhi	r6,2
    d688:	d9000615 	stw	r4,24(sp)
    d68c:	31ba7104 	addi	r6,r6,-5692
    d690:	200b883a 	mov	r5,r4
    d694:	02000644 	movi	r8,25
    d698:	00000a06 	br	d6c4 <_strtod_r+0x12d8>
    d69c:	28800003 	ldbu	r2,0(r5)
    d6a0:	10ffefc4 	addi	r3,r2,-65
    d6a4:	10803fcc 	andi	r2,r2,255
    d6a8:	1080201c 	xori	r2,r2,128
    d6ac:	18c03fcc 	andi	r3,r3,255
    d6b0:	10bfe004 	addi	r2,r2,-128
    d6b4:	40c00136 	bltu	r8,r3,d6bc <_strtod_r+0x12d0>
    d6b8:	10800804 	addi	r2,r2,32
    d6bc:	31800044 	addi	r6,r6,1
    d6c0:	11c0691e 	bne	r2,r7,d868 <_strtod_r+0x147c>
    d6c4:	31c00007 	ldb	r7,0(r6)
    d6c8:	29400044 	addi	r5,r5,1
    d6cc:	383ff31e 	bne	r7,zero,d69c <__alt_mem_nios_system_shared_memory+0xfffcd69c>
    d6d0:	d9400615 	stw	r5,24(sp)
    d6d4:	059ffc34 	movhi	r22,32752
    d6d8:	002f883a 	mov	r23,zero
    d6dc:	003c4306 	br	c7ec <__alt_mem_nios_system_shared_memory+0xfffcc7ec>
    d6e0:	002d883a 	mov	r22,zero
    d6e4:	003cad06 	br	c99c <__alt_mem_nios_system_shared_memory+0xfffcc99c>
    d6e8:	9011883a 	mov	r8,r18
    d6ec:	df001217 	ldw	fp,72(sp)
    d6f0:	a800461e 	bne	r21,zero,d80c <_strtod_r+0x1420>
    d6f4:	b800451e 	bne	r23,zero,d80c <_strtod_r+0x1420>
    d6f8:	00800434 	movhi	r2,16
    d6fc:	10bfffc4 	addi	r2,r2,-1
    d700:	b084703a 	and	r2,r22,r2
    d704:	1000411e 	bne	r2,zero,d80c <_strtod_r+0x1420>
    d708:	b49ffc2c 	andhi	r18,r22,32752
    d70c:	0081ac34 	movhi	r2,1712
    d710:	14803e2e 	bgeu	r2,r18,d80c <_strtod_r+0x1420>
    d714:	40800517 	ldw	r2,20(r8)
    d718:	1000031e 	bne	r2,zero,d728 <_strtod_r+0x133c>
    d71c:	40800417 	ldw	r2,16(r8)
    d720:	00c00044 	movi	r3,1
    d724:	1880390e 	bge	r3,r2,d80c <_strtod_r+0x1420>
    d728:	400b883a 	mov	r5,r8
    d72c:	01800044 	movi	r6,1
    d730:	8809883a 	mov	r4,r17
    d734:	00159d80 	call	159d8 <__lshift>
    d738:	800b883a 	mov	r5,r16
    d73c:	1009883a 	mov	r4,r2
    d740:	d8801315 	stw	r2,76(sp)
    d744:	0015b200 	call	15b20 <__mcmp>
    d748:	da001317 	ldw	r8,76(sp)
    d74c:	00802f0e 	bge	zero,r2,d80c <_strtod_r+0x1420>
    d750:	d9000717 	ldw	r4,28(sp)
    d754:	20008026 	beq	r4,zero,d958 <_strtod_r+0x156c>
    d758:	0081ac34 	movhi	r2,1712
    d75c:	14807e16 	blt	r2,r18,d958 <_strtod_r+0x156c>
    d760:	0080dc34 	movhi	r2,880
    d764:	14bf3a0e 	bge	r2,r18,d450 <__alt_mem_nios_system_shared_memory+0xfffcd450>
    d768:	d9000817 	ldw	r4,32(sp)
    d76c:	e00b883a 	mov	r5,fp
    d770:	000d883a 	mov	r6,zero
    d774:	01ce5434 	movhi	r7,14672
    d778:	da001315 	stw	r8,76(sp)
    d77c:	0007c800 	call	7c80 <__muldf3>
    d780:	d8800815 	stw	r2,32(sp)
    d784:	1839883a 	mov	fp,r3
    d788:	da001317 	ldw	r8,76(sp)
    d78c:	1800211e 	bne	r3,zero,d814 <_strtod_r+0x1428>
    d790:	d8c00817 	ldw	r3,32(sp)
    d794:	d8800517 	ldw	r2,20(sp)
    d798:	183e4c1e 	bne	r3,zero,d0cc <__alt_mem_nios_system_shared_memory+0xfffcd0cc>
    d79c:	00c00884 	movi	r3,34
    d7a0:	88c00015 	stw	r3,0(r17)
    d7a4:	003e4906 	br	d0cc <__alt_mem_nios_system_shared_memory+0xfffcd0cc>
    d7a8:	00800434 	movhi	r2,16
    d7ac:	9011883a 	mov	r8,r18
    d7b0:	df001217 	ldw	fp,72(sp)
    d7b4:	10bfffc4 	addi	r2,r2,-1
    d7b8:	a8002226 	beq	r21,zero,d844 <_strtod_r+0x1458>
    d7bc:	b086703a 	and	r3,r22,r2
    d7c0:	18804126 	beq	r3,r2,d8c8 <_strtod_r+0x14dc>
    d7c4:	d8c00d17 	ldw	r3,52(sp)
    d7c8:	18002326 	beq	r3,zero,d858 <_strtod_r+0x146c>
    d7cc:	1da4703a 	and	r18,r3,r22
    d7d0:	90000e26 	beq	r18,zero,d80c <_strtod_r+0x1420>
    d7d4:	da001315 	stw	r8,76(sp)
    d7d8:	d9800717 	ldw	r6,28(sp)
    d7dc:	b809883a 	mov	r4,r23
    d7e0:	b00b883a 	mov	r5,r22
    d7e4:	a8002826 	beq	r21,zero,d888 <_strtod_r+0x149c>
    d7e8:	000c3880 	call	c388 <sulp>
    d7ec:	100d883a 	mov	r6,r2
    d7f0:	180f883a 	mov	r7,r3
    d7f4:	b809883a 	mov	r4,r23
    d7f8:	b00b883a 	mov	r5,r22
    d7fc:	00067ac0 	call	67ac <__adddf3>
    d800:	da001317 	ldw	r8,76(sp)
    d804:	d8800815 	stw	r2,32(sp)
    d808:	1839883a 	mov	fp,r3
    d80c:	d8800717 	ldw	r2,28(sp)
    d810:	103fd51e 	bne	r2,zero,d768 <__alt_mem_nios_system_shared_memory+0xfffcd768>
    d814:	d8800517 	ldw	r2,20(sp)
    d818:	003e2c06 	br	d0cc <__alt_mem_nios_system_shared_memory+0xfffcd0cc>
    d81c:	0580d434 	movhi	r22,848
    d820:	1dad883a 	add	r22,r3,r22
    d824:	d8000715 	stw	zero,28(sp)
    d828:	003cb606 	br	cb04 <__alt_mem_nios_system_shared_memory+0xfffccb04>
    d82c:	008ff834 	movhi	r2,16352
    d830:	0029883a 	mov	r20,zero
    d834:	022ff834 	movhi	r8,49120
    d838:	d8001015 	stw	zero,64(sp)
    d83c:	d8800d15 	stw	r2,52(sp)
    d840:	003dc106 	br	cf48 <__alt_mem_nios_system_shared_memory+0xfffccf48>
    d844:	b084703a 	and	r2,r22,r2
    d848:	103fde1e 	bne	r2,zero,d7c4 <__alt_mem_nios_system_shared_memory+0xfffcd7c4>
    d84c:	b83fdd1e 	bne	r23,zero,d7c4 <__alt_mem_nios_system_shared_memory+0xfffcd7c4>
    d850:	b49ffc2c 	andhi	r18,r22,32752
    d854:	003fbe06 	br	d750 <__alt_mem_nios_system_shared_memory+0xfffcd750>
    d858:	d8c00f17 	ldw	r3,60(sp)
    d85c:	1de8703a 	and	r20,r3,r23
    d860:	a03fea26 	beq	r20,zero,d80c <__alt_mem_nios_system_shared_memory+0xfffcd80c>
    d864:	003fdb06 	br	d7d4 <__alt_mem_nios_system_shared_memory+0xfffcd7d4>
    d868:	21000044 	addi	r4,r4,1
    d86c:	d9000615 	stw	r4,24(sp)
    d870:	003f9806 	br	d6d4 <__alt_mem_nios_system_shared_memory+0xfffcd6d4>
    d874:	014000b4 	movhi	r5,2
    d878:	297afc04 	addi	r5,r5,-5136
    d87c:	d9400715 	stw	r5,28(sp)
    d880:	0025883a 	mov	r18,zero
    d884:	003c8c06 	br	cab8 <__alt_mem_nios_system_shared_memory+0xfffccab8>
    d888:	000c3880 	call	c388 <sulp>
    d88c:	100d883a 	mov	r6,r2
    d890:	180f883a 	mov	r7,r3
    d894:	b809883a 	mov	r4,r23
    d898:	b00b883a 	mov	r5,r22
    d89c:	00084ec0 	call	84ec <__subdf3>
    d8a0:	000d883a 	mov	r6,zero
    d8a4:	000f883a 	mov	r7,zero
    d8a8:	1009883a 	mov	r4,r2
    d8ac:	180b883a 	mov	r5,r3
    d8b0:	d8800815 	stw	r2,32(sp)
    d8b4:	1839883a 	mov	fp,r3
    d8b8:	0007a280 	call	7a28 <__eqdf2>
    d8bc:	da001317 	ldw	r8,76(sp)
    d8c0:	103ee326 	beq	r2,zero,d450 <__alt_mem_nios_system_shared_memory+0xfffcd450>
    d8c4:	003fd106 	br	d80c <__alt_mem_nios_system_shared_memory+0xfffcd80c>
    d8c8:	d8c00717 	ldw	r3,28(sp)
    d8cc:	18002026 	beq	r3,zero,d950 <_strtod_r+0x1564>
    d8d0:	b09ffc2c 	andhi	r2,r22,32752
    d8d4:	00c1a834 	movhi	r3,1696
    d8d8:	18801d36 	bltu	r3,r2,d950 <_strtod_r+0x1564>
    d8dc:	1004d53a 	srli	r2,r2,20
    d8e0:	00c01ac4 	movi	r3,107
    d8e4:	1887c83a 	sub	r3,r3,r2
    d8e8:	00bfffc4 	movi	r2,-1
    d8ec:	10c4983a 	sll	r2,r2,r3
    d8f0:	15ffb41e 	bne	r2,r23,d7c4 <__alt_mem_nios_system_shared_memory+0xfffcd7c4>
    d8f4:	00dffc34 	movhi	r3,32752
    d8f8:	18ffffc4 	addi	r3,r3,-1
    d8fc:	b0c03126 	beq	r22,r3,d9c4 <_strtod_r+0x15d8>
    d900:	b59ffc2c 	andhi	r22,r22,32752
    d904:	00800434 	movhi	r2,16
    d908:	d8000815 	stw	zero,32(sp)
    d90c:	b0b9883a 	add	fp,r22,r2
    d910:	003fbe06 	br	d80c <__alt_mem_nios_system_shared_memory+0xfffcd80c>
    d914:	b49ffc2c 	andhi	r18,r22,32752
    d918:	9024d53a 	srli	r18,r18,20
    d91c:	00801ac4 	movi	r2,107
    d920:	14a5c83a 	sub	r18,r2,r18
    d924:	04be910e 	bge	zero,r18,d36c <__alt_mem_nios_system_shared_memory+0xfffcd36c>
    d928:	008007c4 	movi	r2,31
    d92c:	1480120e 	bge	r2,r18,d978 <_strtod_r+0x158c>
    d930:	00800d04 	movi	r2,52
    d934:	002f883a 	mov	r23,zero
    d938:	14801a0e 	bge	r2,r18,d9a4 <_strtod_r+0x15b8>
    d93c:	0580dc34 	movhi	r22,880
    d940:	003e8a06 	br	d36c <__alt_mem_nios_system_shared_memory+0xfffcd36c>
    d944:	d8000715 	stw	zero,28(sp)
    d948:	04be7416 	blt	zero,r18,d31c <__alt_mem_nios_system_shared_memory+0xfffcd31c>
    d94c:	003e8706 	br	d36c <__alt_mem_nios_system_shared_memory+0xfffcd36c>
    d950:	00bfffc4 	movi	r2,-1
    d954:	003fe606 	br	d8f0 <__alt_mem_nios_system_shared_memory+0xfffcd8f0>
    d958:	073ffc34 	movhi	fp,65520
    d95c:	9725883a 	add	r18,r18,fp
    d960:	017fffc4 	movi	r5,-1
    d964:	07000434 	movhi	fp,16
    d968:	e179883a 	add	fp,fp,r5
    d96c:	d9400815 	stw	r5,32(sp)
    d970:	9738b03a 	or	fp,r18,fp
    d974:	003fa506 	br	d80c <__alt_mem_nios_system_shared_memory+0xfffcd80c>
    d978:	00bfffc4 	movi	r2,-1
    d97c:	14a4983a 	sll	r18,r2,r18
    d980:	95ee703a 	and	r23,r18,r23
    d984:	003e7906 	br	d36c <__alt_mem_nios_system_shared_memory+0xfffcd36c>
    d988:	102f883a 	mov	r23,r2
    d98c:	182d883a 	mov	r22,r3
    d990:	003e7406 	br	d364 <__alt_mem_nios_system_shared_memory+0xfffcd364>
    d994:	e02d883a 	mov	r22,fp
    d998:	ddc00617 	ldw	r23,24(sp)
    d99c:	e0f9883a 	add	fp,fp,r3
    d9a0:	003ef706 	br	d580 <__alt_mem_nios_system_shared_memory+0xfffcd580>
    d9a4:	94bff804 	addi	r18,r18,-32
    d9a8:	00bfffc4 	movi	r2,-1
    d9ac:	14a4983a 	sll	r18,r2,r18
    d9b0:	95ac703a 	and	r22,r18,r22
    d9b4:	003e6d06 	br	d36c <__alt_mem_nios_system_shared_memory+0xfffcd36c>
    d9b8:	102f883a 	mov	r23,r2
    d9bc:	182d883a 	mov	r22,r3
    d9c0:	003c3d06 	br	cab8 <__alt_mem_nios_system_shared_memory+0xfffccab8>
    d9c4:	00ffffc4 	movi	r3,-1
    d9c8:	10ffcd1e 	bne	r2,r3,d900 <__alt_mem_nios_system_shared_memory+0xfffcd900>
    d9cc:	003dba06 	br	d0b8 <__alt_mem_nios_system_shared_memory+0xfffcd0b8>

0000d9d0 <strtod>:
    d9d0:	008000b4 	movhi	r2,2
    d9d4:	10824204 	addi	r2,r2,2312
    d9d8:	280d883a 	mov	r6,r5
    d9dc:	200b883a 	mov	r5,r4
    d9e0:	11000017 	ldw	r4,0(r2)
    d9e4:	000c3ec1 	jmpi	c3ec <_strtod_r>

0000d9e8 <strtof>:
    d9e8:	defffb04 	addi	sp,sp,-20
    d9ec:	dcc00315 	stw	r19,12(sp)
    d9f0:	04c000b4 	movhi	r19,2
    d9f4:	9cc24204 	addi	r19,r19,2312
    d9f8:	280d883a 	mov	r6,r5
    d9fc:	200b883a 	mov	r5,r4
    da00:	99000017 	ldw	r4,0(r19)
    da04:	dfc00415 	stw	ra,16(sp)
    da08:	dc800215 	stw	r18,8(sp)
    da0c:	dc400115 	stw	r17,4(sp)
    da10:	dc000015 	stw	r16,0(sp)
    da14:	000c3ec0 	call	c3ec <_strtod_r>
    da18:	1009883a 	mov	r4,r2
    da1c:	180b883a 	mov	r5,r3
    da20:	1025883a 	mov	r18,r2
    da24:	1823883a 	mov	r17,r3
    da28:	0008fd40 	call	8fd4 <__truncdfsf2>
    da2c:	000b883a 	mov	r5,zero
    da30:	1009883a 	mov	r4,r2
    da34:	1021883a 	mov	r16,r2
    da38:	0005a880 	call	5a88 <__eqsf2>
    da3c:	1000111e 	bne	r2,zero,da84 <strtof+0x9c>
    da40:	000d883a 	mov	r6,zero
    da44:	000f883a 	mov	r7,zero
    da48:	9009883a 	mov	r4,r18
    da4c:	880b883a 	mov	r5,r17
    da50:	0007a280 	call	7a28 <__eqdf2>
    da54:	10000b26 	beq	r2,zero,da84 <strtof+0x9c>
    da58:	98800017 	ldw	r2,0(r19)
    da5c:	00c00884 	movi	r3,34
    da60:	10c00015 	stw	r3,0(r2)
    da64:	8005883a 	mov	r2,r16
    da68:	dfc00417 	ldw	ra,16(sp)
    da6c:	dcc00317 	ldw	r19,12(sp)
    da70:	dc800217 	ldw	r18,8(sp)
    da74:	dc400117 	ldw	r17,4(sp)
    da78:	dc000017 	ldw	r16,0(sp)
    da7c:	dec00504 	addi	sp,sp,20
    da80:	f800283a 	ret
    da84:	015fe034 	movhi	r5,32640
    da88:	297fffc4 	addi	r5,r5,-1
    da8c:	8009883a 	mov	r4,r16
    da90:	0005b000 	call	5b00 <__gesf2>
    da94:	0080070e 	bge	zero,r2,dab4 <strtof+0xcc>
    da98:	01dffc34 	movhi	r7,32752
    da9c:	39ffffc4 	addi	r7,r7,-1
    daa0:	01bfffc4 	movi	r6,-1
    daa4:	9009883a 	mov	r4,r18
    daa8:	880b883a 	mov	r5,r17
    daac:	0007ab00 	call	7ab0 <__gedf2>
    dab0:	00bfe90e 	bge	zero,r2,da58 <__alt_mem_nios_system_shared_memory+0xfffcda58>
    dab4:	017fe034 	movhi	r5,65408
    dab8:	297fffc4 	addi	r5,r5,-1
    dabc:	8009883a 	mov	r4,r16
    dac0:	0005bbc0 	call	5bbc <__lesf2>
    dac4:	103fe70e 	bge	r2,zero,da64 <__alt_mem_nios_system_shared_memory+0xfffcda64>
    dac8:	01fffc34 	movhi	r7,65520
    dacc:	39ffffc4 	addi	r7,r7,-1
    dad0:	01bfffc4 	movi	r6,-1
    dad4:	9009883a 	mov	r4,r18
    dad8:	880b883a 	mov	r5,r17
    dadc:	0007b8c0 	call	7b8c <__ledf2>
    dae0:	103fdd0e 	bge	r2,zero,da58 <__alt_mem_nios_system_shared_memory+0xfffcda58>
    dae4:	003fdf06 	br	da64 <__alt_mem_nios_system_shared_memory+0xfffcda64>

0000dae8 <___svfprintf_internal_r>:
    dae8:	deffb704 	addi	sp,sp,-292
    daec:	dfc04815 	stw	ra,288(sp)
    daf0:	ddc04615 	stw	r23,280(sp)
    daf4:	d9402d15 	stw	r5,180(sp)
    daf8:	d9003915 	stw	r4,228(sp)
    dafc:	302f883a 	mov	r23,r6
    db00:	d9c02e15 	stw	r7,184(sp)
    db04:	df004715 	stw	fp,284(sp)
    db08:	dd804515 	stw	r22,276(sp)
    db0c:	dd404415 	stw	r21,272(sp)
    db10:	dd004315 	stw	r20,268(sp)
    db14:	dcc04215 	stw	r19,264(sp)
    db18:	dc804115 	stw	r18,260(sp)
    db1c:	dc404015 	stw	r17,256(sp)
    db20:	dc003f15 	stw	r16,252(sp)
    db24:	0014f340 	call	14f34 <_localeconv_r>
    db28:	10800017 	ldw	r2,0(r2)
    db2c:	1009883a 	mov	r4,r2
    db30:	d8803415 	stw	r2,208(sp)
    db34:	000ba8c0 	call	ba8c <strlen>
    db38:	d8c02d17 	ldw	r3,180(sp)
    db3c:	d8803815 	stw	r2,224(sp)
    db40:	1880030b 	ldhu	r2,12(r3)
    db44:	1080200c 	andi	r2,r2,128
    db48:	10000226 	beq	r2,zero,db54 <___svfprintf_internal_r+0x6c>
    db4c:	18800417 	ldw	r2,16(r3)
    db50:	1006b126 	beq	r2,zero,f618 <___svfprintf_internal_r+0x1b30>
    db54:	dcc03917 	ldw	r19,228(sp)
    db58:	d8c00404 	addi	r3,sp,16
    db5c:	054000b4 	movhi	r21,2
    db60:	d9001e04 	addi	r4,sp,120
    db64:	ad7a97c4 	addi	r21,r21,-5537
    db68:	d8c01e15 	stw	r3,120(sp)
    db6c:	d8002015 	stw	zero,128(sp)
    db70:	d8001f15 	stw	zero,124(sp)
    db74:	d8003315 	stw	zero,204(sp)
    db78:	d8003615 	stw	zero,216(sp)
    db7c:	d8003715 	stw	zero,220(sp)
    db80:	1811883a 	mov	r8,r3
    db84:	d8003a15 	stw	zero,232(sp)
    db88:	d8003b15 	stw	zero,236(sp)
    db8c:	d8002f15 	stw	zero,188(sp)
    db90:	d9002815 	stw	r4,160(sp)
    db94:	b8800007 	ldb	r2,0(r23)
    db98:	10027726 	beq	r2,zero,e578 <___svfprintf_internal_r+0xa90>
    db9c:	00c00944 	movi	r3,37
    dba0:	b823883a 	mov	r17,r23
    dba4:	10c0021e 	bne	r2,r3,dbb0 <___svfprintf_internal_r+0xc8>
    dba8:	00001406 	br	dbfc <___svfprintf_internal_r+0x114>
    dbac:	10c00326 	beq	r2,r3,dbbc <___svfprintf_internal_r+0xd4>
    dbb0:	8c400044 	addi	r17,r17,1
    dbb4:	88800007 	ldb	r2,0(r17)
    dbb8:	103ffc1e 	bne	r2,zero,dbac <__alt_mem_nios_system_shared_memory+0xfffcdbac>
    dbbc:	8de1c83a 	sub	r16,r17,r23
    dbc0:	80000e26 	beq	r16,zero,dbfc <___svfprintf_internal_r+0x114>
    dbc4:	d8c02017 	ldw	r3,128(sp)
    dbc8:	d8801f17 	ldw	r2,124(sp)
    dbcc:	45c00015 	stw	r23,0(r8)
    dbd0:	1c07883a 	add	r3,r3,r16
    dbd4:	10800044 	addi	r2,r2,1
    dbd8:	d8c02015 	stw	r3,128(sp)
    dbdc:	44000115 	stw	r16,4(r8)
    dbe0:	d8801f15 	stw	r2,124(sp)
    dbe4:	00c001c4 	movi	r3,7
    dbe8:	18809916 	blt	r3,r2,de50 <___svfprintf_internal_r+0x368>
    dbec:	42000204 	addi	r8,r8,8
    dbf0:	d9402f17 	ldw	r5,188(sp)
    dbf4:	2c0b883a 	add	r5,r5,r16
    dbf8:	d9402f15 	stw	r5,188(sp)
    dbfc:	88800007 	ldb	r2,0(r17)
    dc00:	10009a26 	beq	r2,zero,de6c <___svfprintf_internal_r+0x384>
    dc04:	8dc00044 	addi	r23,r17,1
    dc08:	8c400047 	ldb	r17,1(r17)
    dc0c:	0021883a 	mov	r16,zero
    dc10:	00bfffc4 	movi	r2,-1
    dc14:	0025883a 	mov	r18,zero
    dc18:	dc002905 	stb	r16,164(sp)
    dc1c:	d8002785 	stb	zero,158(sp)
    dc20:	d8002b05 	stb	zero,172(sp)
    dc24:	d8802a15 	stw	r2,168(sp)
    dc28:	d8003115 	stw	zero,196(sp)
    dc2c:	05001604 	movi	r20,88
    dc30:	05800244 	movi	r22,9
    dc34:	4039883a 	mov	fp,r8
    dc38:	9021883a 	mov	r16,r18
    dc3c:	bdc00044 	addi	r23,r23,1
    dc40:	88bff804 	addi	r2,r17,-32
    dc44:	a0831e36 	bltu	r20,r2,e8c0 <___svfprintf_internal_r+0xdd8>
    dc48:	100490ba 	slli	r2,r2,2
    dc4c:	00c00074 	movhi	r3,1
    dc50:	18f71804 	addi	r3,r3,-9120
    dc54:	10c5883a 	add	r2,r2,r3
    dc58:	10800017 	ldw	r2,0(r2)
    dc5c:	1000683a 	jmp	r2
    dc60:	0000e808 	cmpgei	zero,zero,928
    dc64:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc68:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc6c:	0000e7fc 	xorhi	zero,zero,927
    dc70:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc74:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc78:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc7c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc80:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc84:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc88:	0000dec8 	cmpgei	zero,zero,891
    dc8c:	0000e70c 	andi	zero,zero,924
    dc90:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dc94:	0000ddd4 	movui	zero,887
    dc98:	0000deec 	andhi	zero,zero,891
    dc9c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dca0:	0000df78 	rdprs	zero,zero,893
    dca4:	0000df3c 	xorhi	zero,zero,892
    dca8:	0000df3c 	xorhi	zero,zero,892
    dcac:	0000df3c 	xorhi	zero,zero,892
    dcb0:	0000df3c 	xorhi	zero,zero,892
    dcb4:	0000df3c 	xorhi	zero,zero,892
    dcb8:	0000df3c 	xorhi	zero,zero,892
    dcbc:	0000df3c 	xorhi	zero,zero,892
    dcc0:	0000df3c 	xorhi	zero,zero,892
    dcc4:	0000df3c 	xorhi	zero,zero,892
    dcc8:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dccc:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dcd0:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dcd4:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dcd8:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dcdc:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dce0:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dce4:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dce8:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dcec:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dcf0:	0000e03c 	xorhi	zero,zero,896
    dcf4:	0000df84 	movi	zero,894
    dcf8:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dcfc:	0000df84 	movi	zero,894
    dd00:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd04:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd08:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd0c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd10:	0000e030 	cmpltui	zero,zero,896
    dd14:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd18:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd1c:	0000e104 	movi	zero,900
    dd20:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd24:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd28:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd2c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd30:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd34:	0000e580 	call	e58 <esp8266_send_command+0x68>
    dd38:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd3c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd40:	0000e5ec 	andhi	zero,zero,919
    dd44:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd48:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd4c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd50:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd54:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd58:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd5c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd60:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd64:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd68:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd6c:	0000e6a8 	cmpgeui	zero,zero,922
    dd70:	0000e828 	cmpgeui	zero,zero,928
    dd74:	0000df84 	movi	zero,894
    dd78:	0000df84 	movi	zero,894
    dd7c:	0000df84 	movi	zero,894
    dd80:	0000e89c 	xori	zero,zero,930
    dd84:	0000e828 	cmpgeui	zero,zero,928
    dd88:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd8c:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd90:	0000e848 	cmpgei	zero,zero,929
    dd94:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    dd98:	0000e85c 	xori	zero,zero,929
    dd9c:	0000e6ec 	andhi	zero,zero,923
    dda0:	0000dde0 	cmpeqi	zero,zero,887
    dda4:	0000e724 	muli	zero,zero,924
    dda8:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    ddac:	0000e730 	cmpltui	zero,zero,924
    ddb0:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    ddb4:	0000e794 	movui	zero,926
    ddb8:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    ddbc:	0000e8c0 	call	e8c <esp8266_send_command+0x9c>
    ddc0:	0000e7b4 	movhi	zero,926
    ddc4:	d8c03117 	ldw	r3,196(sp)
    ddc8:	d8802e15 	stw	r2,184(sp)
    ddcc:	00c7c83a 	sub	r3,zero,r3
    ddd0:	d8c03115 	stw	r3,196(sp)
    ddd4:	84000114 	ori	r16,r16,4
    ddd8:	bc400007 	ldb	r17,0(r23)
    dddc:	003f9706 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    dde0:	00800c04 	movi	r2,48
    dde4:	d8802705 	stb	r2,156(sp)
    dde8:	00801e04 	movi	r2,120
    ddec:	d8802745 	stb	r2,157(sp)
    ddf0:	d9002a17 	ldw	r4,168(sp)
    ddf4:	d8802e17 	ldw	r2,184(sp)
    ddf8:	d8002785 	stb	zero,158(sp)
    ddfc:	e011883a 	mov	r8,fp
    de00:	10c00104 	addi	r3,r2,4
    de04:	15000017 	ldw	r20,0(r2)
    de08:	002d883a 	mov	r22,zero
    de0c:	80800094 	ori	r2,r16,2
    de10:	2002b616 	blt	r4,zero,e8ec <___svfprintf_internal_r+0xe04>
    de14:	00bfdfc4 	movi	r2,-129
    de18:	80a4703a 	and	r18,r16,r2
    de1c:	d8c02e15 	stw	r3,184(sp)
    de20:	94800094 	ori	r18,r18,2
    de24:	a002a01e 	bne	r20,zero,e8a8 <___svfprintf_internal_r+0xdc0>
    de28:	014000b4 	movhi	r5,2
    de2c:	297a9104 	addi	r5,r5,-5564
    de30:	d9403a15 	stw	r5,232(sp)
    de34:	04401e04 	movi	r17,120
    de38:	d8c02a17 	ldw	r3,168(sp)
    de3c:	0039883a 	mov	fp,zero
    de40:	1801e626 	beq	r3,zero,e5dc <___svfprintf_internal_r+0xaf4>
    de44:	0029883a 	mov	r20,zero
    de48:	002d883a 	mov	r22,zero
    de4c:	00020506 	br	e664 <___svfprintf_internal_r+0xb7c>
    de50:	d9402d17 	ldw	r5,180(sp)
    de54:	d9801e04 	addi	r6,sp,120
    de58:	9809883a 	mov	r4,r19
    de5c:	0016c280 	call	16c28 <__ssprint_r>
    de60:	1000081e 	bne	r2,zero,de84 <___svfprintf_internal_r+0x39c>
    de64:	da000404 	addi	r8,sp,16
    de68:	003f6106 	br	dbf0 <__alt_mem_nios_system_shared_memory+0xfffcdbf0>
    de6c:	d8802017 	ldw	r2,128(sp)
    de70:	10000426 	beq	r2,zero,de84 <___svfprintf_internal_r+0x39c>
    de74:	d9402d17 	ldw	r5,180(sp)
    de78:	d9003917 	ldw	r4,228(sp)
    de7c:	d9801e04 	addi	r6,sp,120
    de80:	0016c280 	call	16c28 <__ssprint_r>
    de84:	d8802d17 	ldw	r2,180(sp)
    de88:	10c0030b 	ldhu	r3,12(r2)
    de8c:	d8802f17 	ldw	r2,188(sp)
    de90:	18c0100c 	andi	r3,r3,64
    de94:	1806251e 	bne	r3,zero,f72c <___svfprintf_internal_r+0x1c44>
    de98:	dfc04817 	ldw	ra,288(sp)
    de9c:	df004717 	ldw	fp,284(sp)
    dea0:	ddc04617 	ldw	r23,280(sp)
    dea4:	dd804517 	ldw	r22,276(sp)
    dea8:	dd404417 	ldw	r21,272(sp)
    deac:	dd004317 	ldw	r20,268(sp)
    deb0:	dcc04217 	ldw	r19,264(sp)
    deb4:	dc804117 	ldw	r18,260(sp)
    deb8:	dc404017 	ldw	r17,256(sp)
    debc:	dc003f17 	ldw	r16,252(sp)
    dec0:	dec04904 	addi	sp,sp,292
    dec4:	f800283a 	ret
    dec8:	d9002e17 	ldw	r4,184(sp)
    decc:	d9402e17 	ldw	r5,184(sp)
    ded0:	21000017 	ldw	r4,0(r4)
    ded4:	28800104 	addi	r2,r5,4
    ded8:	d9003115 	stw	r4,196(sp)
    dedc:	203fb916 	blt	r4,zero,ddc4 <__alt_mem_nios_system_shared_memory+0xfffcddc4>
    dee0:	d8802e15 	stw	r2,184(sp)
    dee4:	bc400007 	ldb	r17,0(r23)
    dee8:	003f5406 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    deec:	bc400007 	ldb	r17,0(r23)
    def0:	01000a84 	movi	r4,42
    def4:	b8c00044 	addi	r3,r23,1
    def8:	89076926 	beq	r17,r4,fca0 <___svfprintf_internal_r+0x21b8>
    defc:	8cbff404 	addi	r18,r17,-48
    df00:	b486b936 	bltu	r22,r18,f9e8 <___svfprintf_internal_r+0x1f00>
    df04:	0009883a 	mov	r4,zero
    df08:	1823883a 	mov	r17,r3
    df0c:	01400284 	movi	r5,10
    df10:	00051580 	call	5158 <__mulsi3>
    df14:	88c00007 	ldb	r3,0(r17)
    df18:	1489883a 	add	r4,r2,r18
    df1c:	8dc00044 	addi	r23,r17,1
    df20:	1cbff404 	addi	r18,r3,-48
    df24:	b823883a 	mov	r17,r23
    df28:	b4bff82e 	bgeu	r22,r18,df0c <__alt_mem_nios_system_shared_memory+0xfffcdf0c>
    df2c:	1823883a 	mov	r17,r3
    df30:	20060416 	blt	r4,zero,f744 <___svfprintf_internal_r+0x1c5c>
    df34:	d9002a15 	stw	r4,168(sp)
    df38:	003f4106 	br	dc40 <__alt_mem_nios_system_shared_memory+0xfffcdc40>
    df3c:	8cbff404 	addi	r18,r17,-48
    df40:	d8003115 	stw	zero,196(sp)
    df44:	0009883a 	mov	r4,zero
    df48:	b823883a 	mov	r17,r23
    df4c:	01400284 	movi	r5,10
    df50:	00051580 	call	5158 <__mulsi3>
    df54:	88c00007 	ldb	r3,0(r17)
    df58:	9089883a 	add	r4,r18,r2
    df5c:	bdc00044 	addi	r23,r23,1
    df60:	1cbff404 	addi	r18,r3,-48
    df64:	b823883a 	mov	r17,r23
    df68:	b4bff82e 	bgeu	r22,r18,df4c <__alt_mem_nios_system_shared_memory+0xfffcdf4c>
    df6c:	1823883a 	mov	r17,r3
    df70:	d9003115 	stw	r4,196(sp)
    df74:	003f3206 	br	dc40 <__alt_mem_nios_system_shared_memory+0xfffcdc40>
    df78:	84002014 	ori	r16,r16,128
    df7c:	bc400007 	ldb	r17,0(r23)
    df80:	003f2e06 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    df84:	8025883a 	mov	r18,r16
    df88:	dc002903 	ldbu	r16,164(sp)
    df8c:	e011883a 	mov	r8,fp
    df90:	84003fcc 	andi	r16,r16,255
    df94:	8007721e 	bne	r16,zero,fd60 <___svfprintf_internal_r+0x2278>
    df98:	9080020c 	andi	r2,r18,8
    df9c:	1004a526 	beq	r2,zero,f234 <___svfprintf_internal_r+0x174c>
    dfa0:	d9002e17 	ldw	r4,184(sp)
    dfa4:	d9402e17 	ldw	r5,184(sp)
    dfa8:	d8802e17 	ldw	r2,184(sp)
    dfac:	21000017 	ldw	r4,0(r4)
    dfb0:	29400117 	ldw	r5,4(r5)
    dfb4:	10800204 	addi	r2,r2,8
    dfb8:	d9003615 	stw	r4,216(sp)
    dfbc:	d9403715 	stw	r5,220(sp)
    dfc0:	d8802e15 	stw	r2,184(sp)
    dfc4:	d9003617 	ldw	r4,216(sp)
    dfc8:	d9403717 	ldw	r5,220(sp)
    dfcc:	da003e15 	stw	r8,248(sp)
    dfd0:	04000044 	movi	r16,1
    dfd4:	00169800 	call	16980 <__fpclassifyd>
    dfd8:	da003e17 	ldw	r8,248(sp)
    dfdc:	1404731e 	bne	r2,r16,f1ac <___svfprintf_internal_r+0x16c4>
    dfe0:	d9003617 	ldw	r4,216(sp)
    dfe4:	d9403717 	ldw	r5,220(sp)
    dfe8:	000d883a 	mov	r6,zero
    dfec:	000f883a 	mov	r7,zero
    dff0:	0007b8c0 	call	7b8c <__ledf2>
    dff4:	da003e17 	ldw	r8,248(sp)
    dff8:	10061b16 	blt	r2,zero,f868 <___svfprintf_internal_r+0x1d80>
    dffc:	df002783 	ldbu	fp,158(sp)
    e000:	008011c4 	movi	r2,71
    e004:	1445810e 	bge	r2,r17,f60c <___svfprintf_internal_r+0x1b24>
    e008:	040000b4 	movhi	r16,2
    e00c:	843a8904 	addi	r16,r16,-5596
    e010:	00c000c4 	movi	r3,3
    e014:	00bfdfc4 	movi	r2,-129
    e018:	d8c02915 	stw	r3,164(sp)
    e01c:	90a4703a 	and	r18,r18,r2
    e020:	d8c02b15 	stw	r3,172(sp)
    e024:	d8002a15 	stw	zero,168(sp)
    e028:	d8003215 	stw	zero,200(sp)
    e02c:	00006c06 	br	e1e0 <___svfprintf_internal_r+0x6f8>
    e030:	84000214 	ori	r16,r16,8
    e034:	bc400007 	ldb	r17,0(r23)
    e038:	003f0006 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    e03c:	8025883a 	mov	r18,r16
    e040:	dc002903 	ldbu	r16,164(sp)
    e044:	e011883a 	mov	r8,fp
    e048:	84003fcc 	andi	r16,r16,255
    e04c:	80073f1e 	bne	r16,zero,fd4c <___svfprintf_internal_r+0x2264>
    e050:	94800414 	ori	r18,r18,16
    e054:	9080080c 	andi	r2,r18,32
    e058:	1003bb26 	beq	r2,zero,ef48 <___svfprintf_internal_r+0x1460>
    e05c:	d9002e17 	ldw	r4,184(sp)
    e060:	20800117 	ldw	r2,4(r4)
    e064:	25000017 	ldw	r20,0(r4)
    e068:	21000204 	addi	r4,r4,8
    e06c:	d9002e15 	stw	r4,184(sp)
    e070:	102d883a 	mov	r22,r2
    e074:	1003bd16 	blt	r2,zero,ef6c <___svfprintf_internal_r+0x1484>
    e078:	d9002a17 	ldw	r4,168(sp)
    e07c:	df002783 	ldbu	fp,158(sp)
    e080:	2003d016 	blt	r4,zero,efc4 <___svfprintf_internal_r+0x14dc>
    e084:	00ffdfc4 	movi	r3,-129
    e088:	a584b03a 	or	r2,r20,r22
    e08c:	90e4703a 	and	r18,r18,r3
    e090:	10015026 	beq	r2,zero,e5d4 <___svfprintf_internal_r+0xaec>
    e094:	b0037026 	beq	r22,zero,ee58 <___svfprintf_internal_r+0x1370>
    e098:	dc402915 	stw	r17,164(sp)
    e09c:	dc001e04 	addi	r16,sp,120
    e0a0:	b023883a 	mov	r17,r22
    e0a4:	402d883a 	mov	r22,r8
    e0a8:	a009883a 	mov	r4,r20
    e0ac:	880b883a 	mov	r5,r17
    e0b0:	01800284 	movi	r6,10
    e0b4:	000f883a 	mov	r7,zero
    e0b8:	001a5240 	call	1a524 <__umoddi3>
    e0bc:	10800c04 	addi	r2,r2,48
    e0c0:	843fffc4 	addi	r16,r16,-1
    e0c4:	a009883a 	mov	r4,r20
    e0c8:	880b883a 	mov	r5,r17
    e0cc:	80800005 	stb	r2,0(r16)
    e0d0:	01800284 	movi	r6,10
    e0d4:	000f883a 	mov	r7,zero
    e0d8:	0019f280 	call	19f28 <__udivdi3>
    e0dc:	1029883a 	mov	r20,r2
    e0e0:	10c4b03a 	or	r2,r2,r3
    e0e4:	1823883a 	mov	r17,r3
    e0e8:	103fef1e 	bne	r2,zero,e0a8 <__alt_mem_nios_system_shared_memory+0xfffce0a8>
    e0ec:	d8c02817 	ldw	r3,160(sp)
    e0f0:	dc402917 	ldw	r17,164(sp)
    e0f4:	b011883a 	mov	r8,r22
    e0f8:	1c07c83a 	sub	r3,r3,r16
    e0fc:	d8c02b15 	stw	r3,172(sp)
    e100:	00003106 	br	e1c8 <___svfprintf_internal_r+0x6e0>
    e104:	8025883a 	mov	r18,r16
    e108:	dc002903 	ldbu	r16,164(sp)
    e10c:	e011883a 	mov	r8,fp
    e110:	84003fcc 	andi	r16,r16,255
    e114:	80070a1e 	bne	r16,zero,fd40 <___svfprintf_internal_r+0x2258>
    e118:	94800414 	ori	r18,r18,16
    e11c:	9080080c 	andi	r2,r18,32
    e120:	1002f626 	beq	r2,zero,ecfc <___svfprintf_internal_r+0x1214>
    e124:	d9002e17 	ldw	r4,184(sp)
    e128:	d9402a17 	ldw	r5,168(sp)
    e12c:	d8002785 	stb	zero,158(sp)
    e130:	20800204 	addi	r2,r4,8
    e134:	25000017 	ldw	r20,0(r4)
    e138:	25800117 	ldw	r22,4(r4)
    e13c:	28043716 	blt	r5,zero,f21c <___svfprintf_internal_r+0x1734>
    e140:	013fdfc4 	movi	r4,-129
    e144:	a586b03a 	or	r3,r20,r22
    e148:	d8802e15 	stw	r2,184(sp)
    e14c:	9124703a 	and	r18,r18,r4
    e150:	1802f71e 	bne	r3,zero,ed30 <___svfprintf_internal_r+0x1248>
    e154:	d9402a17 	ldw	r5,168(sp)
    e158:	0039883a 	mov	fp,zero
    e15c:	2806df26 	beq	r5,zero,fcdc <___svfprintf_internal_r+0x21f4>
    e160:	0029883a 	mov	r20,zero
    e164:	002d883a 	mov	r22,zero
    e168:	dc001e04 	addi	r16,sp,120
    e16c:	a006d0fa 	srli	r3,r20,3
    e170:	b008977a 	slli	r4,r22,29
    e174:	b02cd0fa 	srli	r22,r22,3
    e178:	a50001cc 	andi	r20,r20,7
    e17c:	a0800c04 	addi	r2,r20,48
    e180:	843fffc4 	addi	r16,r16,-1
    e184:	20e8b03a 	or	r20,r4,r3
    e188:	80800005 	stb	r2,0(r16)
    e18c:	a586b03a 	or	r3,r20,r22
    e190:	183ff61e 	bne	r3,zero,e16c <__alt_mem_nios_system_shared_memory+0xfffce16c>
    e194:	90c0004c 	andi	r3,r18,1
    e198:	18013f26 	beq	r3,zero,e698 <___svfprintf_internal_r+0xbb0>
    e19c:	10803fcc 	andi	r2,r2,255
    e1a0:	1080201c 	xori	r2,r2,128
    e1a4:	10bfe004 	addi	r2,r2,-128
    e1a8:	00c00c04 	movi	r3,48
    e1ac:	10c13a26 	beq	r2,r3,e698 <___svfprintf_internal_r+0xbb0>
    e1b0:	80ffffc5 	stb	r3,-1(r16)
    e1b4:	d8c02817 	ldw	r3,160(sp)
    e1b8:	80bfffc4 	addi	r2,r16,-1
    e1bc:	1021883a 	mov	r16,r2
    e1c0:	1887c83a 	sub	r3,r3,r2
    e1c4:	d8c02b15 	stw	r3,172(sp)
    e1c8:	d8802b17 	ldw	r2,172(sp)
    e1cc:	d9002a17 	ldw	r4,168(sp)
    e1d0:	1100010e 	bge	r2,r4,e1d8 <___svfprintf_internal_r+0x6f0>
    e1d4:	2005883a 	mov	r2,r4
    e1d8:	d8802915 	stw	r2,164(sp)
    e1dc:	d8003215 	stw	zero,200(sp)
    e1e0:	e7003fcc 	andi	fp,fp,255
    e1e4:	e700201c 	xori	fp,fp,128
    e1e8:	e73fe004 	addi	fp,fp,-128
    e1ec:	e0000326 	beq	fp,zero,e1fc <___svfprintf_internal_r+0x714>
    e1f0:	d8c02917 	ldw	r3,164(sp)
    e1f4:	18c00044 	addi	r3,r3,1
    e1f8:	d8c02915 	stw	r3,164(sp)
    e1fc:	90c0008c 	andi	r3,r18,2
    e200:	d8c02c15 	stw	r3,176(sp)
    e204:	18000326 	beq	r3,zero,e214 <___svfprintf_internal_r+0x72c>
    e208:	d8c02917 	ldw	r3,164(sp)
    e20c:	18c00084 	addi	r3,r3,2
    e210:	d8c02915 	stw	r3,164(sp)
    e214:	90c0210c 	andi	r3,r18,132
    e218:	d8c03015 	stw	r3,192(sp)
    e21c:	1801c31e 	bne	r3,zero,e92c <___svfprintf_internal_r+0xe44>
    e220:	d9003117 	ldw	r4,196(sp)
    e224:	d8c02917 	ldw	r3,164(sp)
    e228:	20e9c83a 	sub	r20,r4,r3
    e22c:	0501bf0e 	bge	zero,r20,e92c <___svfprintf_internal_r+0xe44>
    e230:	02400404 	movi	r9,16
    e234:	d8c02017 	ldw	r3,128(sp)
    e238:	d8801f17 	ldw	r2,124(sp)
    e23c:	4d053d0e 	bge	r9,r20,f734 <___svfprintf_internal_r+0x1c4c>
    e240:	014000b4 	movhi	r5,2
    e244:	297a9bc4 	addi	r5,r5,-5521
    e248:	dc403c15 	stw	r17,240(sp)
    e24c:	d9403515 	stw	r5,212(sp)
    e250:	a023883a 	mov	r17,r20
    e254:	482d883a 	mov	r22,r9
    e258:	9029883a 	mov	r20,r18
    e25c:	070001c4 	movi	fp,7
    e260:	8025883a 	mov	r18,r16
    e264:	dc002d17 	ldw	r16,180(sp)
    e268:	00000306 	br	e278 <___svfprintf_internal_r+0x790>
    e26c:	8c7ffc04 	addi	r17,r17,-16
    e270:	42000204 	addi	r8,r8,8
    e274:	b440130e 	bge	r22,r17,e2c4 <___svfprintf_internal_r+0x7dc>
    e278:	010000b4 	movhi	r4,2
    e27c:	18c00404 	addi	r3,r3,16
    e280:	10800044 	addi	r2,r2,1
    e284:	213a9bc4 	addi	r4,r4,-5521
    e288:	41000015 	stw	r4,0(r8)
    e28c:	45800115 	stw	r22,4(r8)
    e290:	d8c02015 	stw	r3,128(sp)
    e294:	d8801f15 	stw	r2,124(sp)
    e298:	e0bff40e 	bge	fp,r2,e26c <__alt_mem_nios_system_shared_memory+0xfffce26c>
    e29c:	d9801e04 	addi	r6,sp,120
    e2a0:	800b883a 	mov	r5,r16
    e2a4:	9809883a 	mov	r4,r19
    e2a8:	0016c280 	call	16c28 <__ssprint_r>
    e2ac:	103ef51e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    e2b0:	8c7ffc04 	addi	r17,r17,-16
    e2b4:	d8c02017 	ldw	r3,128(sp)
    e2b8:	d8801f17 	ldw	r2,124(sp)
    e2bc:	da000404 	addi	r8,sp,16
    e2c0:	b47fed16 	blt	r22,r17,e278 <__alt_mem_nios_system_shared_memory+0xfffce278>
    e2c4:	9021883a 	mov	r16,r18
    e2c8:	a025883a 	mov	r18,r20
    e2cc:	8829883a 	mov	r20,r17
    e2d0:	dc403c17 	ldw	r17,240(sp)
    e2d4:	d9403517 	ldw	r5,212(sp)
    e2d8:	a0c7883a 	add	r3,r20,r3
    e2dc:	10800044 	addi	r2,r2,1
    e2e0:	41400015 	stw	r5,0(r8)
    e2e4:	45000115 	stw	r20,4(r8)
    e2e8:	d8c02015 	stw	r3,128(sp)
    e2ec:	d8801f15 	stw	r2,124(sp)
    e2f0:	010001c4 	movi	r4,7
    e2f4:	2082c116 	blt	r4,r2,edfc <___svfprintf_internal_r+0x1314>
    e2f8:	df002787 	ldb	fp,158(sp)
    e2fc:	42000204 	addi	r8,r8,8
    e300:	e0000c26 	beq	fp,zero,e334 <___svfprintf_internal_r+0x84c>
    e304:	d8801f17 	ldw	r2,124(sp)
    e308:	d9002784 	addi	r4,sp,158
    e30c:	18c00044 	addi	r3,r3,1
    e310:	10800044 	addi	r2,r2,1
    e314:	41000015 	stw	r4,0(r8)
    e318:	01000044 	movi	r4,1
    e31c:	41000115 	stw	r4,4(r8)
    e320:	d8c02015 	stw	r3,128(sp)
    e324:	d8801f15 	stw	r2,124(sp)
    e328:	010001c4 	movi	r4,7
    e32c:	20825a16 	blt	r4,r2,ec98 <___svfprintf_internal_r+0x11b0>
    e330:	42000204 	addi	r8,r8,8
    e334:	d8802c17 	ldw	r2,176(sp)
    e338:	10000c26 	beq	r2,zero,e36c <___svfprintf_internal_r+0x884>
    e33c:	d8801f17 	ldw	r2,124(sp)
    e340:	d9002704 	addi	r4,sp,156
    e344:	18c00084 	addi	r3,r3,2
    e348:	10800044 	addi	r2,r2,1
    e34c:	41000015 	stw	r4,0(r8)
    e350:	01000084 	movi	r4,2
    e354:	41000115 	stw	r4,4(r8)
    e358:	d8c02015 	stw	r3,128(sp)
    e35c:	d8801f15 	stw	r2,124(sp)
    e360:	010001c4 	movi	r4,7
    e364:	20825416 	blt	r4,r2,ecb8 <___svfprintf_internal_r+0x11d0>
    e368:	42000204 	addi	r8,r8,8
    e36c:	d9003017 	ldw	r4,192(sp)
    e370:	00802004 	movi	r2,128
    e374:	2081b926 	beq	r4,r2,ea5c <___svfprintf_internal_r+0xf74>
    e378:	d9402a17 	ldw	r5,168(sp)
    e37c:	d8802b17 	ldw	r2,172(sp)
    e380:	28adc83a 	sub	r22,r5,r2
    e384:	05802f0e 	bge	zero,r22,e444 <___svfprintf_internal_r+0x95c>
    e388:	07000404 	movi	fp,16
    e38c:	d8801f17 	ldw	r2,124(sp)
    e390:	e583e20e 	bge	fp,r22,f31c <___svfprintf_internal_r+0x1834>
    e394:	014000b4 	movhi	r5,2
    e398:	297a97c4 	addi	r5,r5,-5537
    e39c:	dc402a15 	stw	r17,168(sp)
    e3a0:	d9402c15 	stw	r5,176(sp)
    e3a4:	b023883a 	mov	r17,r22
    e3a8:	050001c4 	movi	r20,7
    e3ac:	902d883a 	mov	r22,r18
    e3b0:	8025883a 	mov	r18,r16
    e3b4:	dc002d17 	ldw	r16,180(sp)
    e3b8:	00000306 	br	e3c8 <___svfprintf_internal_r+0x8e0>
    e3bc:	8c7ffc04 	addi	r17,r17,-16
    e3c0:	42000204 	addi	r8,r8,8
    e3c4:	e440110e 	bge	fp,r17,e40c <___svfprintf_internal_r+0x924>
    e3c8:	18c00404 	addi	r3,r3,16
    e3cc:	10800044 	addi	r2,r2,1
    e3d0:	45400015 	stw	r21,0(r8)
    e3d4:	47000115 	stw	fp,4(r8)
    e3d8:	d8c02015 	stw	r3,128(sp)
    e3dc:	d8801f15 	stw	r2,124(sp)
    e3e0:	a0bff60e 	bge	r20,r2,e3bc <__alt_mem_nios_system_shared_memory+0xfffce3bc>
    e3e4:	d9801e04 	addi	r6,sp,120
    e3e8:	800b883a 	mov	r5,r16
    e3ec:	9809883a 	mov	r4,r19
    e3f0:	0016c280 	call	16c28 <__ssprint_r>
    e3f4:	103ea31e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    e3f8:	8c7ffc04 	addi	r17,r17,-16
    e3fc:	d8c02017 	ldw	r3,128(sp)
    e400:	d8801f17 	ldw	r2,124(sp)
    e404:	da000404 	addi	r8,sp,16
    e408:	e47fef16 	blt	fp,r17,e3c8 <__alt_mem_nios_system_shared_memory+0xfffce3c8>
    e40c:	9021883a 	mov	r16,r18
    e410:	b025883a 	mov	r18,r22
    e414:	882d883a 	mov	r22,r17
    e418:	dc402a17 	ldw	r17,168(sp)
    e41c:	d9002c17 	ldw	r4,176(sp)
    e420:	1d87883a 	add	r3,r3,r22
    e424:	10800044 	addi	r2,r2,1
    e428:	41000015 	stw	r4,0(r8)
    e42c:	45800115 	stw	r22,4(r8)
    e430:	d8c02015 	stw	r3,128(sp)
    e434:	d8801f15 	stw	r2,124(sp)
    e438:	010001c4 	movi	r4,7
    e43c:	20820e16 	blt	r4,r2,ec78 <___svfprintf_internal_r+0x1190>
    e440:	42000204 	addi	r8,r8,8
    e444:	9080400c 	andi	r2,r18,256
    e448:	10013a1e 	bne	r2,zero,e934 <___svfprintf_internal_r+0xe4c>
    e44c:	d9402b17 	ldw	r5,172(sp)
    e450:	d8801f17 	ldw	r2,124(sp)
    e454:	44000015 	stw	r16,0(r8)
    e458:	1947883a 	add	r3,r3,r5
    e45c:	10800044 	addi	r2,r2,1
    e460:	41400115 	stw	r5,4(r8)
    e464:	d8c02015 	stw	r3,128(sp)
    e468:	d8801f15 	stw	r2,124(sp)
    e46c:	010001c4 	movi	r4,7
    e470:	2081f316 	blt	r4,r2,ec40 <___svfprintf_internal_r+0x1158>
    e474:	42000204 	addi	r8,r8,8
    e478:	9480010c 	andi	r18,r18,4
    e47c:	90003226 	beq	r18,zero,e548 <___svfprintf_internal_r+0xa60>
    e480:	d9403117 	ldw	r5,196(sp)
    e484:	d8802917 	ldw	r2,164(sp)
    e488:	28a1c83a 	sub	r16,r5,r2
    e48c:	04002e0e 	bge	zero,r16,e548 <___svfprintf_internal_r+0xa60>
    e490:	04400404 	movi	r17,16
    e494:	d8801f17 	ldw	r2,124(sp)
    e498:	8c04db0e 	bge	r17,r16,f808 <___svfprintf_internal_r+0x1d20>
    e49c:	014000b4 	movhi	r5,2
    e4a0:	297a9bc4 	addi	r5,r5,-5521
    e4a4:	d9403515 	stw	r5,212(sp)
    e4a8:	048001c4 	movi	r18,7
    e4ac:	dd002d17 	ldw	r20,180(sp)
    e4b0:	00000306 	br	e4c0 <___svfprintf_internal_r+0x9d8>
    e4b4:	843ffc04 	addi	r16,r16,-16
    e4b8:	42000204 	addi	r8,r8,8
    e4bc:	8c00130e 	bge	r17,r16,e50c <___svfprintf_internal_r+0xa24>
    e4c0:	010000b4 	movhi	r4,2
    e4c4:	18c00404 	addi	r3,r3,16
    e4c8:	10800044 	addi	r2,r2,1
    e4cc:	213a9bc4 	addi	r4,r4,-5521
    e4d0:	41000015 	stw	r4,0(r8)
    e4d4:	44400115 	stw	r17,4(r8)
    e4d8:	d8c02015 	stw	r3,128(sp)
    e4dc:	d8801f15 	stw	r2,124(sp)
    e4e0:	90bff40e 	bge	r18,r2,e4b4 <__alt_mem_nios_system_shared_memory+0xfffce4b4>
    e4e4:	d9801e04 	addi	r6,sp,120
    e4e8:	a00b883a 	mov	r5,r20
    e4ec:	9809883a 	mov	r4,r19
    e4f0:	0016c280 	call	16c28 <__ssprint_r>
    e4f4:	103e631e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    e4f8:	843ffc04 	addi	r16,r16,-16
    e4fc:	d8c02017 	ldw	r3,128(sp)
    e500:	d8801f17 	ldw	r2,124(sp)
    e504:	da000404 	addi	r8,sp,16
    e508:	8c3fed16 	blt	r17,r16,e4c0 <__alt_mem_nios_system_shared_memory+0xfffce4c0>
    e50c:	d9403517 	ldw	r5,212(sp)
    e510:	1c07883a 	add	r3,r3,r16
    e514:	10800044 	addi	r2,r2,1
    e518:	41400015 	stw	r5,0(r8)
    e51c:	44000115 	stw	r16,4(r8)
    e520:	d8c02015 	stw	r3,128(sp)
    e524:	d8801f15 	stw	r2,124(sp)
    e528:	010001c4 	movi	r4,7
    e52c:	2080060e 	bge	r4,r2,e548 <___svfprintf_internal_r+0xa60>
    e530:	d9402d17 	ldw	r5,180(sp)
    e534:	d9801e04 	addi	r6,sp,120
    e538:	9809883a 	mov	r4,r19
    e53c:	0016c280 	call	16c28 <__ssprint_r>
    e540:	103e501e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    e544:	d8c02017 	ldw	r3,128(sp)
    e548:	d8803117 	ldw	r2,196(sp)
    e54c:	d9002917 	ldw	r4,164(sp)
    e550:	1100010e 	bge	r2,r4,e558 <___svfprintf_internal_r+0xa70>
    e554:	2005883a 	mov	r2,r4
    e558:	d9402f17 	ldw	r5,188(sp)
    e55c:	288b883a 	add	r5,r5,r2
    e560:	d9402f15 	stw	r5,188(sp)
    e564:	1801be1e 	bne	r3,zero,ec60 <___svfprintf_internal_r+0x1178>
    e568:	b8800007 	ldb	r2,0(r23)
    e56c:	d8001f15 	stw	zero,124(sp)
    e570:	da000404 	addi	r8,sp,16
    e574:	103d891e 	bne	r2,zero,db9c <__alt_mem_nios_system_shared_memory+0xfffcdb9c>
    e578:	b823883a 	mov	r17,r23
    e57c:	003d9f06 	br	dbfc <__alt_mem_nios_system_shared_memory+0xfffcdbfc>
    e580:	8025883a 	mov	r18,r16
    e584:	dc002903 	ldbu	r16,164(sp)
    e588:	e011883a 	mov	r8,fp
    e58c:	84003fcc 	andi	r16,r16,255
    e590:	8005e61e 	bne	r16,zero,fd2c <___svfprintf_internal_r+0x2244>
    e594:	94800414 	ori	r18,r18,16
    e598:	9080080c 	andi	r2,r18,32
    e59c:	10022026 	beq	r2,zero,ee20 <___svfprintf_internal_r+0x1338>
    e5a0:	d9002e17 	ldw	r4,184(sp)
    e5a4:	d9402a17 	ldw	r5,168(sp)
    e5a8:	d8002785 	stb	zero,158(sp)
    e5ac:	20c00204 	addi	r3,r4,8
    e5b0:	25000017 	ldw	r20,0(r4)
    e5b4:	25800117 	ldw	r22,4(r4)
    e5b8:	2803ad16 	blt	r5,zero,f470 <___svfprintf_internal_r+0x1988>
    e5bc:	013fdfc4 	movi	r4,-129
    e5c0:	a584b03a 	or	r2,r20,r22
    e5c4:	d8c02e15 	stw	r3,184(sp)
    e5c8:	9124703a 	and	r18,r18,r4
    e5cc:	0039883a 	mov	fp,zero
    e5d0:	103eb01e 	bne	r2,zero,e094 <__alt_mem_nios_system_shared_memory+0xfffce094>
    e5d4:	d8802a17 	ldw	r2,168(sp)
    e5d8:	1002e71e 	bne	r2,zero,f178 <___svfprintf_internal_r+0x1690>
    e5dc:	d8002a15 	stw	zero,168(sp)
    e5e0:	d8002b15 	stw	zero,172(sp)
    e5e4:	dc001e04 	addi	r16,sp,120
    e5e8:	003ef706 	br	e1c8 <__alt_mem_nios_system_shared_memory+0xfffce1c8>
    e5ec:	8025883a 	mov	r18,r16
    e5f0:	dc002903 	ldbu	r16,164(sp)
    e5f4:	e011883a 	mov	r8,fp
    e5f8:	84003fcc 	andi	r16,r16,255
    e5fc:	8005c81e 	bne	r16,zero,fd20 <___svfprintf_internal_r+0x2238>
    e600:	010000b4 	movhi	r4,2
    e604:	213a8c04 	addi	r4,r4,-5584
    e608:	d9003a15 	stw	r4,232(sp)
    e60c:	9080080c 	andi	r2,r18,32
    e610:	10007226 	beq	r2,zero,e7dc <___svfprintf_internal_r+0xcf4>
    e614:	d9402e17 	ldw	r5,184(sp)
    e618:	2d000017 	ldw	r20,0(r5)
    e61c:	2d800117 	ldw	r22,4(r5)
    e620:	29400204 	addi	r5,r5,8
    e624:	d9402e15 	stw	r5,184(sp)
    e628:	9080004c 	andi	r2,r18,1
    e62c:	1001aa26 	beq	r2,zero,ecd8 <___svfprintf_internal_r+0x11f0>
    e630:	a584b03a 	or	r2,r20,r22
    e634:	10032526 	beq	r2,zero,f2cc <___svfprintf_internal_r+0x17e4>
    e638:	d8c02a17 	ldw	r3,168(sp)
    e63c:	00800c04 	movi	r2,48
    e640:	d8802705 	stb	r2,156(sp)
    e644:	dc402745 	stb	r17,157(sp)
    e648:	d8002785 	stb	zero,158(sp)
    e64c:	90800094 	ori	r2,r18,2
    e650:	1804a316 	blt	r3,zero,f8e0 <___svfprintf_internal_r+0x1df8>
    e654:	00bfdfc4 	movi	r2,-129
    e658:	90a4703a 	and	r18,r18,r2
    e65c:	94800094 	ori	r18,r18,2
    e660:	0039883a 	mov	fp,zero
    e664:	d9003a17 	ldw	r4,232(sp)
    e668:	dc001e04 	addi	r16,sp,120
    e66c:	a08003cc 	andi	r2,r20,15
    e670:	b006973a 	slli	r3,r22,28
    e674:	2085883a 	add	r2,r4,r2
    e678:	a028d13a 	srli	r20,r20,4
    e67c:	10800003 	ldbu	r2,0(r2)
    e680:	b02cd13a 	srli	r22,r22,4
    e684:	843fffc4 	addi	r16,r16,-1
    e688:	1d28b03a 	or	r20,r3,r20
    e68c:	80800005 	stb	r2,0(r16)
    e690:	a584b03a 	or	r2,r20,r22
    e694:	103ff51e 	bne	r2,zero,e66c <__alt_mem_nios_system_shared_memory+0xfffce66c>
    e698:	d8c02817 	ldw	r3,160(sp)
    e69c:	1c07c83a 	sub	r3,r3,r16
    e6a0:	d8c02b15 	stw	r3,172(sp)
    e6a4:	003ec806 	br	e1c8 <__alt_mem_nios_system_shared_memory+0xfffce1c8>
    e6a8:	d8c02e17 	ldw	r3,184(sp)
    e6ac:	d9002e17 	ldw	r4,184(sp)
    e6b0:	8025883a 	mov	r18,r16
    e6b4:	18800017 	ldw	r2,0(r3)
    e6b8:	21000104 	addi	r4,r4,4
    e6bc:	00c00044 	movi	r3,1
    e6c0:	e011883a 	mov	r8,fp
    e6c4:	d8c02915 	stw	r3,164(sp)
    e6c8:	d8002785 	stb	zero,158(sp)
    e6cc:	d8801405 	stb	r2,80(sp)
    e6d0:	d9002e15 	stw	r4,184(sp)
    e6d4:	d8c02b15 	stw	r3,172(sp)
    e6d8:	d8002a15 	stw	zero,168(sp)
    e6dc:	d8003215 	stw	zero,200(sp)
    e6e0:	dc001404 	addi	r16,sp,80
    e6e4:	0039883a 	mov	fp,zero
    e6e8:	003ec406 	br	e1fc <__alt_mem_nios_system_shared_memory+0xfffce1fc>
    e6ec:	8025883a 	mov	r18,r16
    e6f0:	dc002903 	ldbu	r16,164(sp)
    e6f4:	e011883a 	mov	r8,fp
    e6f8:	84003fcc 	andi	r16,r16,255
    e6fc:	803e8726 	beq	r16,zero,e11c <__alt_mem_nios_system_shared_memory+0xfffce11c>
    e700:	d8c02b03 	ldbu	r3,172(sp)
    e704:	d8c02785 	stb	r3,158(sp)
    e708:	003e8406 	br	e11c <__alt_mem_nios_system_shared_memory+0xfffce11c>
    e70c:	00c00044 	movi	r3,1
    e710:	d8c02905 	stb	r3,164(sp)
    e714:	00c00ac4 	movi	r3,43
    e718:	d8c02b05 	stb	r3,172(sp)
    e71c:	bc400007 	ldb	r17,0(r23)
    e720:	003d4606 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    e724:	84000814 	ori	r16,r16,32
    e728:	bc400007 	ldb	r17,0(r23)
    e72c:	003d4306 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    e730:	d8802e17 	ldw	r2,184(sp)
    e734:	8025883a 	mov	r18,r16
    e738:	d8002785 	stb	zero,158(sp)
    e73c:	14000017 	ldw	r16,0(r2)
    e740:	e011883a 	mov	r8,fp
    e744:	15000104 	addi	r20,r2,4
    e748:	80042126 	beq	r16,zero,f7d0 <___svfprintf_internal_r+0x1ce8>
    e74c:	d8c02a17 	ldw	r3,168(sp)
    e750:	1803ee16 	blt	r3,zero,f70c <___svfprintf_internal_r+0x1c24>
    e754:	180d883a 	mov	r6,r3
    e758:	000b883a 	mov	r5,zero
    e75c:	8009883a 	mov	r4,r16
    e760:	df003e15 	stw	fp,248(sp)
    e764:	000afc80 	call	afc8 <memchr>
    e768:	da003e17 	ldw	r8,248(sp)
    e76c:	10046a26 	beq	r2,zero,f918 <___svfprintf_internal_r+0x1e30>
    e770:	1405c83a 	sub	r2,r2,r16
    e774:	d8802b15 	stw	r2,172(sp)
    e778:	1003ea16 	blt	r2,zero,f724 <___svfprintf_internal_r+0x1c3c>
    e77c:	df002783 	ldbu	fp,158(sp)
    e780:	d8802915 	stw	r2,164(sp)
    e784:	dd002e15 	stw	r20,184(sp)
    e788:	d8002a15 	stw	zero,168(sp)
    e78c:	d8003215 	stw	zero,200(sp)
    e790:	003e9306 	br	e1e0 <__alt_mem_nios_system_shared_memory+0xfffce1e0>
    e794:	8025883a 	mov	r18,r16
    e798:	dc002903 	ldbu	r16,164(sp)
    e79c:	e011883a 	mov	r8,fp
    e7a0:	84003fcc 	andi	r16,r16,255
    e7a4:	803f7c26 	beq	r16,zero,e598 <__alt_mem_nios_system_shared_memory+0xfffce598>
    e7a8:	d8c02b03 	ldbu	r3,172(sp)
    e7ac:	d8c02785 	stb	r3,158(sp)
    e7b0:	003f7906 	br	e598 <__alt_mem_nios_system_shared_memory+0xfffce598>
    e7b4:	8025883a 	mov	r18,r16
    e7b8:	dc002903 	ldbu	r16,164(sp)
    e7bc:	e011883a 	mov	r8,fp
    e7c0:	84003fcc 	andi	r16,r16,255
    e7c4:	8005741e 	bne	r16,zero,fd98 <___svfprintf_internal_r+0x22b0>
    e7c8:	010000b4 	movhi	r4,2
    e7cc:	213a9104 	addi	r4,r4,-5564
    e7d0:	d9003a15 	stw	r4,232(sp)
    e7d4:	9080080c 	andi	r2,r18,32
    e7d8:	103f8e1e 	bne	r2,zero,e614 <__alt_mem_nios_system_shared_memory+0xfffce614>
    e7dc:	9080040c 	andi	r2,r18,16
    e7e0:	1002a726 	beq	r2,zero,f280 <___svfprintf_internal_r+0x1798>
    e7e4:	d8802e17 	ldw	r2,184(sp)
    e7e8:	002d883a 	mov	r22,zero
    e7ec:	15000017 	ldw	r20,0(r2)
    e7f0:	10800104 	addi	r2,r2,4
    e7f4:	d8802e15 	stw	r2,184(sp)
    e7f8:	003f8b06 	br	e628 <__alt_mem_nios_system_shared_memory+0xfffce628>
    e7fc:	84000054 	ori	r16,r16,1
    e800:	bc400007 	ldb	r17,0(r23)
    e804:	003d0d06 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    e808:	d8802b07 	ldb	r2,172(sp)
    e80c:	1002a41e 	bne	r2,zero,f2a0 <___svfprintf_internal_r+0x17b8>
    e810:	00c00044 	movi	r3,1
    e814:	d8c02905 	stb	r3,164(sp)
    e818:	00c00804 	movi	r3,32
    e81c:	d8c02b05 	stb	r3,172(sp)
    e820:	bc400007 	ldb	r17,0(r23)
    e824:	003d0506 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    e828:	8025883a 	mov	r18,r16
    e82c:	dc002903 	ldbu	r16,164(sp)
    e830:	e011883a 	mov	r8,fp
    e834:	84003fcc 	andi	r16,r16,255
    e838:	803e0626 	beq	r16,zero,e054 <__alt_mem_nios_system_shared_memory+0xfffce054>
    e83c:	d8c02b03 	ldbu	r3,172(sp)
    e840:	d8c02785 	stb	r3,158(sp)
    e844:	003e0306 	br	e054 <__alt_mem_nios_system_shared_memory+0xfffce054>
    e848:	bc400007 	ldb	r17,0(r23)
    e84c:	00801b04 	movi	r2,108
    e850:	88830a26 	beq	r17,r2,f47c <___svfprintf_internal_r+0x1994>
    e854:	84000414 	ori	r16,r16,16
    e858:	003cf806 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    e85c:	8025883a 	mov	r18,r16
    e860:	dc002903 	ldbu	r16,164(sp)
    e864:	e011883a 	mov	r8,fp
    e868:	84003fcc 	andi	r16,r16,255
    e86c:	8005471e 	bne	r16,zero,fd8c <___svfprintf_internal_r+0x22a4>
    e870:	9080080c 	andi	r2,r18,32
    e874:	10028c26 	beq	r2,zero,f2a8 <___svfprintf_internal_r+0x17c0>
    e878:	d9002e17 	ldw	r4,184(sp)
    e87c:	d9402f17 	ldw	r5,188(sp)
    e880:	20800017 	ldw	r2,0(r4)
    e884:	2807d7fa 	srai	r3,r5,31
    e888:	21000104 	addi	r4,r4,4
    e88c:	d9002e15 	stw	r4,184(sp)
    e890:	11400015 	stw	r5,0(r2)
    e894:	10c00115 	stw	r3,4(r2)
    e898:	003cbe06 	br	db94 <__alt_mem_nios_system_shared_memory+0xfffcdb94>
    e89c:	84001014 	ori	r16,r16,64
    e8a0:	bc400007 	ldb	r17,0(r23)
    e8a4:	003ce506 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    e8a8:	010000b4 	movhi	r4,2
    e8ac:	213a9104 	addi	r4,r4,-5564
    e8b0:	0039883a 	mov	fp,zero
    e8b4:	d9003a15 	stw	r4,232(sp)
    e8b8:	04401e04 	movi	r17,120
    e8bc:	003f6906 	br	e664 <__alt_mem_nios_system_shared_memory+0xfffce664>
    e8c0:	8025883a 	mov	r18,r16
    e8c4:	dc002903 	ldbu	r16,164(sp)
    e8c8:	e011883a 	mov	r8,fp
    e8cc:	84003fcc 	andi	r16,r16,255
    e8d0:	8005261e 	bne	r16,zero,fd6c <___svfprintf_internal_r+0x2284>
    e8d4:	883d6526 	beq	r17,zero,de6c <__alt_mem_nios_system_shared_memory+0xfffcde6c>
    e8d8:	00c00044 	movi	r3,1
    e8dc:	d8c02915 	stw	r3,164(sp)
    e8e0:	dc401405 	stb	r17,80(sp)
    e8e4:	d8002785 	stb	zero,158(sp)
    e8e8:	003f7a06 	br	e6d4 <__alt_mem_nios_system_shared_memory+0xfffce6d4>
    e8ec:	010000b4 	movhi	r4,2
    e8f0:	213a9104 	addi	r4,r4,-5564
    e8f4:	d9003a15 	stw	r4,232(sp)
    e8f8:	d8c02e15 	stw	r3,184(sp)
    e8fc:	1025883a 	mov	r18,r2
    e900:	04401e04 	movi	r17,120
    e904:	a584b03a 	or	r2,r20,r22
    e908:	1000fa1e 	bne	r2,zero,ecf4 <___svfprintf_internal_r+0x120c>
    e90c:	0039883a 	mov	fp,zero
    e910:	00800084 	movi	r2,2
    e914:	10803fcc 	andi	r2,r2,255
    e918:	00c00044 	movi	r3,1
    e91c:	10c21626 	beq	r2,r3,f178 <___svfprintf_internal_r+0x1690>
    e920:	00c00084 	movi	r3,2
    e924:	10fe0e1e 	bne	r2,r3,e160 <__alt_mem_nios_system_shared_memory+0xfffce160>
    e928:	003d4606 	br	de44 <__alt_mem_nios_system_shared_memory+0xfffcde44>
    e92c:	d8c02017 	ldw	r3,128(sp)
    e930:	003e7306 	br	e300 <__alt_mem_nios_system_shared_memory+0xfffce300>
    e934:	00801944 	movi	r2,101
    e938:	14407c0e 	bge	r2,r17,eb2c <___svfprintf_internal_r+0x1044>
    e93c:	d9003617 	ldw	r4,216(sp)
    e940:	d9403717 	ldw	r5,220(sp)
    e944:	000d883a 	mov	r6,zero
    e948:	000f883a 	mov	r7,zero
    e94c:	d8c03d15 	stw	r3,244(sp)
    e950:	da003e15 	stw	r8,248(sp)
    e954:	0007a280 	call	7a28 <__eqdf2>
    e958:	d8c03d17 	ldw	r3,244(sp)
    e95c:	da003e17 	ldw	r8,248(sp)
    e960:	1000f51e 	bne	r2,zero,ed38 <___svfprintf_internal_r+0x1250>
    e964:	d8801f17 	ldw	r2,124(sp)
    e968:	010000b4 	movhi	r4,2
    e96c:	21397504 	addi	r4,r4,-6700
    e970:	18c00044 	addi	r3,r3,1
    e974:	10800044 	addi	r2,r2,1
    e978:	41000015 	stw	r4,0(r8)
    e97c:	01000044 	movi	r4,1
    e980:	41000115 	stw	r4,4(r8)
    e984:	d8c02015 	stw	r3,128(sp)
    e988:	d8801f15 	stw	r2,124(sp)
    e98c:	010001c4 	movi	r4,7
    e990:	20826616 	blt	r4,r2,f32c <___svfprintf_internal_r+0x1844>
    e994:	42000204 	addi	r8,r8,8
    e998:	d8802617 	ldw	r2,152(sp)
    e99c:	d9403317 	ldw	r5,204(sp)
    e9a0:	11400216 	blt	r2,r5,e9ac <___svfprintf_internal_r+0xec4>
    e9a4:	9080004c 	andi	r2,r18,1
    e9a8:	103eb326 	beq	r2,zero,e478 <__alt_mem_nios_system_shared_memory+0xfffce478>
    e9ac:	d8803817 	ldw	r2,224(sp)
    e9b0:	d9003417 	ldw	r4,208(sp)
    e9b4:	d9403817 	ldw	r5,224(sp)
    e9b8:	1887883a 	add	r3,r3,r2
    e9bc:	d8801f17 	ldw	r2,124(sp)
    e9c0:	41000015 	stw	r4,0(r8)
    e9c4:	41400115 	stw	r5,4(r8)
    e9c8:	10800044 	addi	r2,r2,1
    e9cc:	d8c02015 	stw	r3,128(sp)
    e9d0:	d8801f15 	stw	r2,124(sp)
    e9d4:	010001c4 	movi	r4,7
    e9d8:	2082af16 	blt	r4,r2,f498 <___svfprintf_internal_r+0x19b0>
    e9dc:	42000204 	addi	r8,r8,8
    e9e0:	d8803317 	ldw	r2,204(sp)
    e9e4:	143fffc4 	addi	r16,r2,-1
    e9e8:	043ea30e 	bge	zero,r16,e478 <__alt_mem_nios_system_shared_memory+0xfffce478>
    e9ec:	04400404 	movi	r17,16
    e9f0:	d8801f17 	ldw	r2,124(sp)
    e9f4:	8c00860e 	bge	r17,r16,ec10 <___svfprintf_internal_r+0x1128>
    e9f8:	014000b4 	movhi	r5,2
    e9fc:	297a97c4 	addi	r5,r5,-5537
    ea00:	d9402c15 	stw	r5,176(sp)
    ea04:	058001c4 	movi	r22,7
    ea08:	dd002d17 	ldw	r20,180(sp)
    ea0c:	00000306 	br	ea1c <___svfprintf_internal_r+0xf34>
    ea10:	42000204 	addi	r8,r8,8
    ea14:	843ffc04 	addi	r16,r16,-16
    ea18:	8c00800e 	bge	r17,r16,ec1c <___svfprintf_internal_r+0x1134>
    ea1c:	18c00404 	addi	r3,r3,16
    ea20:	10800044 	addi	r2,r2,1
    ea24:	45400015 	stw	r21,0(r8)
    ea28:	44400115 	stw	r17,4(r8)
    ea2c:	d8c02015 	stw	r3,128(sp)
    ea30:	d8801f15 	stw	r2,124(sp)
    ea34:	b0bff60e 	bge	r22,r2,ea10 <__alt_mem_nios_system_shared_memory+0xfffcea10>
    ea38:	d9801e04 	addi	r6,sp,120
    ea3c:	a00b883a 	mov	r5,r20
    ea40:	9809883a 	mov	r4,r19
    ea44:	0016c280 	call	16c28 <__ssprint_r>
    ea48:	103d0e1e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    ea4c:	d8c02017 	ldw	r3,128(sp)
    ea50:	d8801f17 	ldw	r2,124(sp)
    ea54:	da000404 	addi	r8,sp,16
    ea58:	003fee06 	br	ea14 <__alt_mem_nios_system_shared_memory+0xfffcea14>
    ea5c:	d9403117 	ldw	r5,196(sp)
    ea60:	d8802917 	ldw	r2,164(sp)
    ea64:	28adc83a 	sub	r22,r5,r2
    ea68:	05be430e 	bge	zero,r22,e378 <__alt_mem_nios_system_shared_memory+0xfffce378>
    ea6c:	07000404 	movi	fp,16
    ea70:	d8801f17 	ldw	r2,124(sp)
    ea74:	e583a20e 	bge	fp,r22,f900 <___svfprintf_internal_r+0x1e18>
    ea78:	014000b4 	movhi	r5,2
    ea7c:	297a97c4 	addi	r5,r5,-5537
    ea80:	dc403015 	stw	r17,192(sp)
    ea84:	d9402c15 	stw	r5,176(sp)
    ea88:	b023883a 	mov	r17,r22
    ea8c:	050001c4 	movi	r20,7
    ea90:	902d883a 	mov	r22,r18
    ea94:	8025883a 	mov	r18,r16
    ea98:	dc002d17 	ldw	r16,180(sp)
    ea9c:	00000306 	br	eaac <___svfprintf_internal_r+0xfc4>
    eaa0:	8c7ffc04 	addi	r17,r17,-16
    eaa4:	42000204 	addi	r8,r8,8
    eaa8:	e440110e 	bge	fp,r17,eaf0 <___svfprintf_internal_r+0x1008>
    eaac:	18c00404 	addi	r3,r3,16
    eab0:	10800044 	addi	r2,r2,1
    eab4:	45400015 	stw	r21,0(r8)
    eab8:	47000115 	stw	fp,4(r8)
    eabc:	d8c02015 	stw	r3,128(sp)
    eac0:	d8801f15 	stw	r2,124(sp)
    eac4:	a0bff60e 	bge	r20,r2,eaa0 <__alt_mem_nios_system_shared_memory+0xfffceaa0>
    eac8:	d9801e04 	addi	r6,sp,120
    eacc:	800b883a 	mov	r5,r16
    ead0:	9809883a 	mov	r4,r19
    ead4:	0016c280 	call	16c28 <__ssprint_r>
    ead8:	103cea1e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    eadc:	8c7ffc04 	addi	r17,r17,-16
    eae0:	d8c02017 	ldw	r3,128(sp)
    eae4:	d8801f17 	ldw	r2,124(sp)
    eae8:	da000404 	addi	r8,sp,16
    eaec:	e47fef16 	blt	fp,r17,eaac <__alt_mem_nios_system_shared_memory+0xfffceaac>
    eaf0:	9021883a 	mov	r16,r18
    eaf4:	b025883a 	mov	r18,r22
    eaf8:	882d883a 	mov	r22,r17
    eafc:	dc403017 	ldw	r17,192(sp)
    eb00:	d9002c17 	ldw	r4,176(sp)
    eb04:	1d87883a 	add	r3,r3,r22
    eb08:	10800044 	addi	r2,r2,1
    eb0c:	41000015 	stw	r4,0(r8)
    eb10:	45800115 	stw	r22,4(r8)
    eb14:	d8c02015 	stw	r3,128(sp)
    eb18:	d8801f15 	stw	r2,124(sp)
    eb1c:	010001c4 	movi	r4,7
    eb20:	20819a16 	blt	r4,r2,f18c <___svfprintf_internal_r+0x16a4>
    eb24:	42000204 	addi	r8,r8,8
    eb28:	003e1306 	br	e378 <__alt_mem_nios_system_shared_memory+0xfffce378>
    eb2c:	d9403317 	ldw	r5,204(sp)
    eb30:	00800044 	movi	r2,1
    eb34:	18c00044 	addi	r3,r3,1
    eb38:	1141710e 	bge	r2,r5,f100 <___svfprintf_internal_r+0x1618>
    eb3c:	dc401f17 	ldw	r17,124(sp)
    eb40:	00800044 	movi	r2,1
    eb44:	40800115 	stw	r2,4(r8)
    eb48:	8c400044 	addi	r17,r17,1
    eb4c:	44000015 	stw	r16,0(r8)
    eb50:	d8c02015 	stw	r3,128(sp)
    eb54:	dc401f15 	stw	r17,124(sp)
    eb58:	008001c4 	movi	r2,7
    eb5c:	14417416 	blt	r2,r17,f130 <___svfprintf_internal_r+0x1648>
    eb60:	42000204 	addi	r8,r8,8
    eb64:	d8803817 	ldw	r2,224(sp)
    eb68:	d9003417 	ldw	r4,208(sp)
    eb6c:	8c400044 	addi	r17,r17,1
    eb70:	10c7883a 	add	r3,r2,r3
    eb74:	40800115 	stw	r2,4(r8)
    eb78:	41000015 	stw	r4,0(r8)
    eb7c:	d8c02015 	stw	r3,128(sp)
    eb80:	dc401f15 	stw	r17,124(sp)
    eb84:	008001c4 	movi	r2,7
    eb88:	14417216 	blt	r2,r17,f154 <___svfprintf_internal_r+0x166c>
    eb8c:	45800204 	addi	r22,r8,8
    eb90:	d9003617 	ldw	r4,216(sp)
    eb94:	d9403717 	ldw	r5,220(sp)
    eb98:	000d883a 	mov	r6,zero
    eb9c:	000f883a 	mov	r7,zero
    eba0:	d8c03d15 	stw	r3,244(sp)
    eba4:	0007a280 	call	7a28 <__eqdf2>
    eba8:	d8c03d17 	ldw	r3,244(sp)
    ebac:	1000b326 	beq	r2,zero,ee7c <___svfprintf_internal_r+0x1394>
    ebb0:	d9403317 	ldw	r5,204(sp)
    ebb4:	84000044 	addi	r16,r16,1
    ebb8:	8c400044 	addi	r17,r17,1
    ebbc:	28bfffc4 	addi	r2,r5,-1
    ebc0:	1887883a 	add	r3,r3,r2
    ebc4:	b0800115 	stw	r2,4(r22)
    ebc8:	b4000015 	stw	r16,0(r22)
    ebcc:	d8c02015 	stw	r3,128(sp)
    ebd0:	dc401f15 	stw	r17,124(sp)
    ebd4:	008001c4 	movi	r2,7
    ebd8:	1440d216 	blt	r2,r17,ef24 <___svfprintf_internal_r+0x143c>
    ebdc:	b5800204 	addi	r22,r22,8
    ebe0:	d9003b17 	ldw	r4,236(sp)
    ebe4:	df0022c4 	addi	fp,sp,139
    ebe8:	8c400044 	addi	r17,r17,1
    ebec:	20c7883a 	add	r3,r4,r3
    ebf0:	b7000015 	stw	fp,0(r22)
    ebf4:	b1000115 	stw	r4,4(r22)
    ebf8:	d8c02015 	stw	r3,128(sp)
    ebfc:	dc401f15 	stw	r17,124(sp)
    ec00:	008001c4 	movi	r2,7
    ec04:	14400e16 	blt	r2,r17,ec40 <___svfprintf_internal_r+0x1158>
    ec08:	b2000204 	addi	r8,r22,8
    ec0c:	003e1a06 	br	e478 <__alt_mem_nios_system_shared_memory+0xfffce478>
    ec10:	010000b4 	movhi	r4,2
    ec14:	213a97c4 	addi	r4,r4,-5537
    ec18:	d9002c15 	stw	r4,176(sp)
    ec1c:	d9002c17 	ldw	r4,176(sp)
    ec20:	1c07883a 	add	r3,r3,r16
    ec24:	44000115 	stw	r16,4(r8)
    ec28:	41000015 	stw	r4,0(r8)
    ec2c:	10800044 	addi	r2,r2,1
    ec30:	d8c02015 	stw	r3,128(sp)
    ec34:	d8801f15 	stw	r2,124(sp)
    ec38:	010001c4 	movi	r4,7
    ec3c:	20be0d0e 	bge	r4,r2,e474 <__alt_mem_nios_system_shared_memory+0xfffce474>
    ec40:	d9402d17 	ldw	r5,180(sp)
    ec44:	d9801e04 	addi	r6,sp,120
    ec48:	9809883a 	mov	r4,r19
    ec4c:	0016c280 	call	16c28 <__ssprint_r>
    ec50:	103c8c1e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    ec54:	d8c02017 	ldw	r3,128(sp)
    ec58:	da000404 	addi	r8,sp,16
    ec5c:	003e0606 	br	e478 <__alt_mem_nios_system_shared_memory+0xfffce478>
    ec60:	d9402d17 	ldw	r5,180(sp)
    ec64:	d9801e04 	addi	r6,sp,120
    ec68:	9809883a 	mov	r4,r19
    ec6c:	0016c280 	call	16c28 <__ssprint_r>
    ec70:	103e3d26 	beq	r2,zero,e568 <__alt_mem_nios_system_shared_memory+0xfffce568>
    ec74:	003c8306 	br	de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    ec78:	d9402d17 	ldw	r5,180(sp)
    ec7c:	d9801e04 	addi	r6,sp,120
    ec80:	9809883a 	mov	r4,r19
    ec84:	0016c280 	call	16c28 <__ssprint_r>
    ec88:	103c7e1e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    ec8c:	d8c02017 	ldw	r3,128(sp)
    ec90:	da000404 	addi	r8,sp,16
    ec94:	003deb06 	br	e444 <__alt_mem_nios_system_shared_memory+0xfffce444>
    ec98:	d9402d17 	ldw	r5,180(sp)
    ec9c:	d9801e04 	addi	r6,sp,120
    eca0:	9809883a 	mov	r4,r19
    eca4:	0016c280 	call	16c28 <__ssprint_r>
    eca8:	103c761e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    ecac:	d8c02017 	ldw	r3,128(sp)
    ecb0:	da000404 	addi	r8,sp,16
    ecb4:	003d9f06 	br	e334 <__alt_mem_nios_system_shared_memory+0xfffce334>
    ecb8:	d9402d17 	ldw	r5,180(sp)
    ecbc:	d9801e04 	addi	r6,sp,120
    ecc0:	9809883a 	mov	r4,r19
    ecc4:	0016c280 	call	16c28 <__ssprint_r>
    ecc8:	103c6e1e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    eccc:	d8c02017 	ldw	r3,128(sp)
    ecd0:	da000404 	addi	r8,sp,16
    ecd4:	003da506 	br	e36c <__alt_mem_nios_system_shared_memory+0xfffce36c>
    ecd8:	d9402a17 	ldw	r5,168(sp)
    ecdc:	d8002785 	stb	zero,158(sp)
    ece0:	283f0816 	blt	r5,zero,e904 <__alt_mem_nios_system_shared_memory+0xfffce904>
    ece4:	00ffdfc4 	movi	r3,-129
    ece8:	a584b03a 	or	r2,r20,r22
    ecec:	90e4703a 	and	r18,r18,r3
    ecf0:	103c5126 	beq	r2,zero,de38 <__alt_mem_nios_system_shared_memory+0xfffcde38>
    ecf4:	0039883a 	mov	fp,zero
    ecf8:	003e5a06 	br	e664 <__alt_mem_nios_system_shared_memory+0xfffce664>
    ecfc:	9080040c 	andi	r2,r18,16
    ed00:	10013d26 	beq	r2,zero,f1f8 <___svfprintf_internal_r+0x1710>
    ed04:	d8c02e17 	ldw	r3,184(sp)
    ed08:	d9002a17 	ldw	r4,168(sp)
    ed0c:	d8002785 	stb	zero,158(sp)
    ed10:	18800104 	addi	r2,r3,4
    ed14:	1d000017 	ldw	r20,0(r3)
    ed18:	002d883a 	mov	r22,zero
    ed1c:	20013f16 	blt	r4,zero,f21c <___svfprintf_internal_r+0x1734>
    ed20:	00ffdfc4 	movi	r3,-129
    ed24:	d8802e15 	stw	r2,184(sp)
    ed28:	90e4703a 	and	r18,r18,r3
    ed2c:	a03d0926 	beq	r20,zero,e154 <__alt_mem_nios_system_shared_memory+0xfffce154>
    ed30:	0039883a 	mov	fp,zero
    ed34:	003d0c06 	br	e168 <__alt_mem_nios_system_shared_memory+0xfffce168>
    ed38:	dc402617 	ldw	r17,152(sp)
    ed3c:	0441830e 	bge	zero,r17,f34c <___svfprintf_internal_r+0x1864>
    ed40:	dc403217 	ldw	r17,200(sp)
    ed44:	d8803317 	ldw	r2,204(sp)
    ed48:	1440010e 	bge	r2,r17,ed50 <___svfprintf_internal_r+0x1268>
    ed4c:	1023883a 	mov	r17,r2
    ed50:	04400a0e 	bge	zero,r17,ed7c <___svfprintf_internal_r+0x1294>
    ed54:	d8801f17 	ldw	r2,124(sp)
    ed58:	1c47883a 	add	r3,r3,r17
    ed5c:	44000015 	stw	r16,0(r8)
    ed60:	10800044 	addi	r2,r2,1
    ed64:	44400115 	stw	r17,4(r8)
    ed68:	d8c02015 	stw	r3,128(sp)
    ed6c:	d8801f15 	stw	r2,124(sp)
    ed70:	010001c4 	movi	r4,7
    ed74:	20827516 	blt	r4,r2,f74c <___svfprintf_internal_r+0x1c64>
    ed78:	42000204 	addi	r8,r8,8
    ed7c:	88027b16 	blt	r17,zero,f76c <___svfprintf_internal_r+0x1c84>
    ed80:	d9003217 	ldw	r4,200(sp)
    ed84:	2463c83a 	sub	r17,r4,r17
    ed88:	0440990e 	bge	zero,r17,eff0 <___svfprintf_internal_r+0x1508>
    ed8c:	05800404 	movi	r22,16
    ed90:	d8801f17 	ldw	r2,124(sp)
    ed94:	b441530e 	bge	r22,r17,f2e4 <___svfprintf_internal_r+0x17fc>
    ed98:	010000b4 	movhi	r4,2
    ed9c:	213a97c4 	addi	r4,r4,-5537
    eda0:	d9002c15 	stw	r4,176(sp)
    eda4:	070001c4 	movi	fp,7
    eda8:	dd002d17 	ldw	r20,180(sp)
    edac:	00000306 	br	edbc <___svfprintf_internal_r+0x12d4>
    edb0:	42000204 	addi	r8,r8,8
    edb4:	8c7ffc04 	addi	r17,r17,-16
    edb8:	b4414d0e 	bge	r22,r17,f2f0 <___svfprintf_internal_r+0x1808>
    edbc:	18c00404 	addi	r3,r3,16
    edc0:	10800044 	addi	r2,r2,1
    edc4:	45400015 	stw	r21,0(r8)
    edc8:	45800115 	stw	r22,4(r8)
    edcc:	d8c02015 	stw	r3,128(sp)
    edd0:	d8801f15 	stw	r2,124(sp)
    edd4:	e0bff60e 	bge	fp,r2,edb0 <__alt_mem_nios_system_shared_memory+0xfffcedb0>
    edd8:	d9801e04 	addi	r6,sp,120
    eddc:	a00b883a 	mov	r5,r20
    ede0:	9809883a 	mov	r4,r19
    ede4:	0016c280 	call	16c28 <__ssprint_r>
    ede8:	103c261e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    edec:	d8c02017 	ldw	r3,128(sp)
    edf0:	d8801f17 	ldw	r2,124(sp)
    edf4:	da000404 	addi	r8,sp,16
    edf8:	003fee06 	br	edb4 <__alt_mem_nios_system_shared_memory+0xfffcedb4>
    edfc:	d9402d17 	ldw	r5,180(sp)
    ee00:	d9801e04 	addi	r6,sp,120
    ee04:	9809883a 	mov	r4,r19
    ee08:	0016c280 	call	16c28 <__ssprint_r>
    ee0c:	103c1d1e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    ee10:	d8c02017 	ldw	r3,128(sp)
    ee14:	df002787 	ldb	fp,158(sp)
    ee18:	da000404 	addi	r8,sp,16
    ee1c:	003d3806 	br	e300 <__alt_mem_nios_system_shared_memory+0xfffce300>
    ee20:	9080040c 	andi	r2,r18,16
    ee24:	10005c26 	beq	r2,zero,ef98 <___svfprintf_internal_r+0x14b0>
    ee28:	d8c02e17 	ldw	r3,184(sp)
    ee2c:	d9002a17 	ldw	r4,168(sp)
    ee30:	d8002785 	stb	zero,158(sp)
    ee34:	18800104 	addi	r2,r3,4
    ee38:	1d000017 	ldw	r20,0(r3)
    ee3c:	002d883a 	mov	r22,zero
    ee40:	20005e16 	blt	r4,zero,efbc <___svfprintf_internal_r+0x14d4>
    ee44:	00ffdfc4 	movi	r3,-129
    ee48:	d8802e15 	stw	r2,184(sp)
    ee4c:	90e4703a 	and	r18,r18,r3
    ee50:	0039883a 	mov	fp,zero
    ee54:	a03ddf26 	beq	r20,zero,e5d4 <__alt_mem_nios_system_shared_memory+0xfffce5d4>
    ee58:	00800244 	movi	r2,9
    ee5c:	153c8e36 	bltu	r2,r20,e098 <__alt_mem_nios_system_shared_memory+0xfffce098>
    ee60:	a5000c04 	addi	r20,r20,48
    ee64:	dc001dc4 	addi	r16,sp,119
    ee68:	dd001dc5 	stb	r20,119(sp)
    ee6c:	d8c02817 	ldw	r3,160(sp)
    ee70:	1c07c83a 	sub	r3,r3,r16
    ee74:	d8c02b15 	stw	r3,172(sp)
    ee78:	003cd306 	br	e1c8 <__alt_mem_nios_system_shared_memory+0xfffce1c8>
    ee7c:	d8803317 	ldw	r2,204(sp)
    ee80:	143fffc4 	addi	r16,r2,-1
    ee84:	043f560e 	bge	zero,r16,ebe0 <__alt_mem_nios_system_shared_memory+0xfffcebe0>
    ee88:	07000404 	movi	fp,16
    ee8c:	e403530e 	bge	fp,r16,fbdc <___svfprintf_internal_r+0x20f4>
    ee90:	014000b4 	movhi	r5,2
    ee94:	297a97c4 	addi	r5,r5,-5537
    ee98:	d9402c15 	stw	r5,176(sp)
    ee9c:	01c001c4 	movi	r7,7
    eea0:	dd002d17 	ldw	r20,180(sp)
    eea4:	00000306 	br	eeb4 <___svfprintf_internal_r+0x13cc>
    eea8:	843ffc04 	addi	r16,r16,-16
    eeac:	b5800204 	addi	r22,r22,8
    eeb0:	e400130e 	bge	fp,r16,ef00 <___svfprintf_internal_r+0x1418>
    eeb4:	18c00404 	addi	r3,r3,16
    eeb8:	8c400044 	addi	r17,r17,1
    eebc:	b5400015 	stw	r21,0(r22)
    eec0:	b7000115 	stw	fp,4(r22)
    eec4:	d8c02015 	stw	r3,128(sp)
    eec8:	dc401f15 	stw	r17,124(sp)
    eecc:	3c7ff60e 	bge	r7,r17,eea8 <__alt_mem_nios_system_shared_memory+0xfffceea8>
    eed0:	d9801e04 	addi	r6,sp,120
    eed4:	a00b883a 	mov	r5,r20
    eed8:	9809883a 	mov	r4,r19
    eedc:	d9c03d15 	stw	r7,244(sp)
    eee0:	0016c280 	call	16c28 <__ssprint_r>
    eee4:	d9c03d17 	ldw	r7,244(sp)
    eee8:	103be61e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    eeec:	843ffc04 	addi	r16,r16,-16
    eef0:	d8c02017 	ldw	r3,128(sp)
    eef4:	dc401f17 	ldw	r17,124(sp)
    eef8:	dd800404 	addi	r22,sp,16
    eefc:	e43fed16 	blt	fp,r16,eeb4 <__alt_mem_nios_system_shared_memory+0xfffceeb4>
    ef00:	d8802c17 	ldw	r2,176(sp)
    ef04:	1c07883a 	add	r3,r3,r16
    ef08:	8c400044 	addi	r17,r17,1
    ef0c:	b0800015 	stw	r2,0(r22)
    ef10:	b4000115 	stw	r16,4(r22)
    ef14:	d8c02015 	stw	r3,128(sp)
    ef18:	dc401f15 	stw	r17,124(sp)
    ef1c:	008001c4 	movi	r2,7
    ef20:	147f2e0e 	bge	r2,r17,ebdc <__alt_mem_nios_system_shared_memory+0xfffcebdc>
    ef24:	d9402d17 	ldw	r5,180(sp)
    ef28:	d9801e04 	addi	r6,sp,120
    ef2c:	9809883a 	mov	r4,r19
    ef30:	0016c280 	call	16c28 <__ssprint_r>
    ef34:	103bd31e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    ef38:	d8c02017 	ldw	r3,128(sp)
    ef3c:	dc401f17 	ldw	r17,124(sp)
    ef40:	dd800404 	addi	r22,sp,16
    ef44:	003f2606 	br	ebe0 <__alt_mem_nios_system_shared_memory+0xfffcebe0>
    ef48:	9080040c 	andi	r2,r18,16
    ef4c:	1000c326 	beq	r2,zero,f25c <___svfprintf_internal_r+0x1774>
    ef50:	d9402e17 	ldw	r5,184(sp)
    ef54:	2d000017 	ldw	r20,0(r5)
    ef58:	29400104 	addi	r5,r5,4
    ef5c:	d9402e15 	stw	r5,184(sp)
    ef60:	a02dd7fa 	srai	r22,r20,31
    ef64:	b005883a 	mov	r2,r22
    ef68:	103c430e 	bge	r2,zero,e078 <__alt_mem_nios_system_shared_memory+0xfffce078>
    ef6c:	d9402a17 	ldw	r5,168(sp)
    ef70:	0529c83a 	sub	r20,zero,r20
    ef74:	07000b44 	movi	fp,45
    ef78:	a004c03a 	cmpne	r2,r20,zero
    ef7c:	05adc83a 	sub	r22,zero,r22
    ef80:	df002785 	stb	fp,158(sp)
    ef84:	b0adc83a 	sub	r22,r22,r2
    ef88:	28022e16 	blt	r5,zero,f844 <___svfprintf_internal_r+0x1d5c>
    ef8c:	00bfdfc4 	movi	r2,-129
    ef90:	90a4703a 	and	r18,r18,r2
    ef94:	003c3f06 	br	e094 <__alt_mem_nios_system_shared_memory+0xfffce094>
    ef98:	9080100c 	andi	r2,r18,64
    ef9c:	d8002785 	stb	zero,158(sp)
    efa0:	10012526 	beq	r2,zero,f438 <___svfprintf_internal_r+0x1950>
    efa4:	d9402e17 	ldw	r5,184(sp)
    efa8:	d8c02a17 	ldw	r3,168(sp)
    efac:	002d883a 	mov	r22,zero
    efb0:	28800104 	addi	r2,r5,4
    efb4:	2d00000b 	ldhu	r20,0(r5)
    efb8:	183fa20e 	bge	r3,zero,ee44 <__alt_mem_nios_system_shared_memory+0xfffcee44>
    efbc:	d8802e15 	stw	r2,184(sp)
    efc0:	0039883a 	mov	fp,zero
    efc4:	a584b03a 	or	r2,r20,r22
    efc8:	103c321e 	bne	r2,zero,e094 <__alt_mem_nios_system_shared_memory+0xfffce094>
    efcc:	00800044 	movi	r2,1
    efd0:	003e5006 	br	e914 <__alt_mem_nios_system_shared_memory+0xfffce914>
    efd4:	d9402d17 	ldw	r5,180(sp)
    efd8:	d9801e04 	addi	r6,sp,120
    efdc:	9809883a 	mov	r4,r19
    efe0:	0016c280 	call	16c28 <__ssprint_r>
    efe4:	103ba71e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    efe8:	d8c02017 	ldw	r3,128(sp)
    efec:	da000404 	addi	r8,sp,16
    eff0:	d9003217 	ldw	r4,200(sp)
    eff4:	d8802617 	ldw	r2,152(sp)
    eff8:	d9403317 	ldw	r5,204(sp)
    effc:	8123883a 	add	r17,r16,r4
    f000:	11400216 	blt	r2,r5,f00c <___svfprintf_internal_r+0x1524>
    f004:	9100004c 	andi	r4,r18,1
    f008:	20000d26 	beq	r4,zero,f040 <___svfprintf_internal_r+0x1558>
    f00c:	d9003817 	ldw	r4,224(sp)
    f010:	d9403417 	ldw	r5,208(sp)
    f014:	1907883a 	add	r3,r3,r4
    f018:	d9001f17 	ldw	r4,124(sp)
    f01c:	41400015 	stw	r5,0(r8)
    f020:	d9403817 	ldw	r5,224(sp)
    f024:	21000044 	addi	r4,r4,1
    f028:	d8c02015 	stw	r3,128(sp)
    f02c:	41400115 	stw	r5,4(r8)
    f030:	d9001f15 	stw	r4,124(sp)
    f034:	014001c4 	movi	r5,7
    f038:	2901dc16 	blt	r5,r4,f7ac <___svfprintf_internal_r+0x1cc4>
    f03c:	42000204 	addi	r8,r8,8
    f040:	d9003317 	ldw	r4,204(sp)
    f044:	8121883a 	add	r16,r16,r4
    f048:	2085c83a 	sub	r2,r4,r2
    f04c:	8461c83a 	sub	r16,r16,r17
    f050:	1400010e 	bge	r2,r16,f058 <___svfprintf_internal_r+0x1570>
    f054:	1021883a 	mov	r16,r2
    f058:	04000a0e 	bge	zero,r16,f084 <___svfprintf_internal_r+0x159c>
    f05c:	d9001f17 	ldw	r4,124(sp)
    f060:	1c07883a 	add	r3,r3,r16
    f064:	44400015 	stw	r17,0(r8)
    f068:	21000044 	addi	r4,r4,1
    f06c:	44000115 	stw	r16,4(r8)
    f070:	d8c02015 	stw	r3,128(sp)
    f074:	d9001f15 	stw	r4,124(sp)
    f078:	014001c4 	movi	r5,7
    f07c:	2901e616 	blt	r5,r4,f818 <___svfprintf_internal_r+0x1d30>
    f080:	42000204 	addi	r8,r8,8
    f084:	8001f616 	blt	r16,zero,f860 <___svfprintf_internal_r+0x1d78>
    f088:	1421c83a 	sub	r16,r2,r16
    f08c:	043cfa0e 	bge	zero,r16,e478 <__alt_mem_nios_system_shared_memory+0xfffce478>
    f090:	04400404 	movi	r17,16
    f094:	d8801f17 	ldw	r2,124(sp)
    f098:	8c3edd0e 	bge	r17,r16,ec10 <__alt_mem_nios_system_shared_memory+0xfffcec10>
    f09c:	014000b4 	movhi	r5,2
    f0a0:	297a97c4 	addi	r5,r5,-5537
    f0a4:	d9402c15 	stw	r5,176(sp)
    f0a8:	058001c4 	movi	r22,7
    f0ac:	dd002d17 	ldw	r20,180(sp)
    f0b0:	00000306 	br	f0c0 <___svfprintf_internal_r+0x15d8>
    f0b4:	42000204 	addi	r8,r8,8
    f0b8:	843ffc04 	addi	r16,r16,-16
    f0bc:	8c3ed70e 	bge	r17,r16,ec1c <__alt_mem_nios_system_shared_memory+0xfffcec1c>
    f0c0:	18c00404 	addi	r3,r3,16
    f0c4:	10800044 	addi	r2,r2,1
    f0c8:	45400015 	stw	r21,0(r8)
    f0cc:	44400115 	stw	r17,4(r8)
    f0d0:	d8c02015 	stw	r3,128(sp)
    f0d4:	d8801f15 	stw	r2,124(sp)
    f0d8:	b0bff60e 	bge	r22,r2,f0b4 <__alt_mem_nios_system_shared_memory+0xfffcf0b4>
    f0dc:	d9801e04 	addi	r6,sp,120
    f0e0:	a00b883a 	mov	r5,r20
    f0e4:	9809883a 	mov	r4,r19
    f0e8:	0016c280 	call	16c28 <__ssprint_r>
    f0ec:	103b651e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f0f0:	d8c02017 	ldw	r3,128(sp)
    f0f4:	d8801f17 	ldw	r2,124(sp)
    f0f8:	da000404 	addi	r8,sp,16
    f0fc:	003fee06 	br	f0b8 <__alt_mem_nios_system_shared_memory+0xfffcf0b8>
    f100:	9088703a 	and	r4,r18,r2
    f104:	203e8d1e 	bne	r4,zero,eb3c <__alt_mem_nios_system_shared_memory+0xfffceb3c>
    f108:	dc401f17 	ldw	r17,124(sp)
    f10c:	40800115 	stw	r2,4(r8)
    f110:	44000015 	stw	r16,0(r8)
    f114:	8c400044 	addi	r17,r17,1
    f118:	d8c02015 	stw	r3,128(sp)
    f11c:	dc401f15 	stw	r17,124(sp)
    f120:	008001c4 	movi	r2,7
    f124:	147f7f16 	blt	r2,r17,ef24 <__alt_mem_nios_system_shared_memory+0xfffcef24>
    f128:	45800204 	addi	r22,r8,8
    f12c:	003eac06 	br	ebe0 <__alt_mem_nios_system_shared_memory+0xfffcebe0>
    f130:	d9402d17 	ldw	r5,180(sp)
    f134:	d9801e04 	addi	r6,sp,120
    f138:	9809883a 	mov	r4,r19
    f13c:	0016c280 	call	16c28 <__ssprint_r>
    f140:	103b501e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f144:	d8c02017 	ldw	r3,128(sp)
    f148:	dc401f17 	ldw	r17,124(sp)
    f14c:	da000404 	addi	r8,sp,16
    f150:	003e8406 	br	eb64 <__alt_mem_nios_system_shared_memory+0xfffceb64>
    f154:	d9402d17 	ldw	r5,180(sp)
    f158:	d9801e04 	addi	r6,sp,120
    f15c:	9809883a 	mov	r4,r19
    f160:	0016c280 	call	16c28 <__ssprint_r>
    f164:	103b471e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f168:	d8c02017 	ldw	r3,128(sp)
    f16c:	dc401f17 	ldw	r17,124(sp)
    f170:	dd800404 	addi	r22,sp,16
    f174:	003e8606 	br	eb90 <__alt_mem_nios_system_shared_memory+0xfffceb90>
    f178:	0029883a 	mov	r20,zero
    f17c:	a5000c04 	addi	r20,r20,48
    f180:	dc001dc4 	addi	r16,sp,119
    f184:	dd001dc5 	stb	r20,119(sp)
    f188:	003f3806 	br	ee6c <__alt_mem_nios_system_shared_memory+0xfffcee6c>
    f18c:	d9402d17 	ldw	r5,180(sp)
    f190:	d9801e04 	addi	r6,sp,120
    f194:	9809883a 	mov	r4,r19
    f198:	0016c280 	call	16c28 <__ssprint_r>
    f19c:	103b391e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f1a0:	d8c02017 	ldw	r3,128(sp)
    f1a4:	da000404 	addi	r8,sp,16
    f1a8:	003c7306 	br	e378 <__alt_mem_nios_system_shared_memory+0xfffce378>
    f1ac:	d9003617 	ldw	r4,216(sp)
    f1b0:	d9403717 	ldw	r5,220(sp)
    f1b4:	da003e15 	stw	r8,248(sp)
    f1b8:	00169800 	call	16980 <__fpclassifyd>
    f1bc:	da003e17 	ldw	r8,248(sp)
    f1c0:	1000bd1e 	bne	r2,zero,f4b8 <___svfprintf_internal_r+0x19d0>
    f1c4:	008011c4 	movi	r2,71
    f1c8:	14411e0e 	bge	r2,r17,f644 <___svfprintf_internal_r+0x1b5c>
    f1cc:	040000b4 	movhi	r16,2
    f1d0:	843a8b04 	addi	r16,r16,-5588
    f1d4:	00c000c4 	movi	r3,3
    f1d8:	00bfdfc4 	movi	r2,-129
    f1dc:	d8c02915 	stw	r3,164(sp)
    f1e0:	90a4703a 	and	r18,r18,r2
    f1e4:	df002783 	ldbu	fp,158(sp)
    f1e8:	d8c02b15 	stw	r3,172(sp)
    f1ec:	d8002a15 	stw	zero,168(sp)
    f1f0:	d8003215 	stw	zero,200(sp)
    f1f4:	003bfa06 	br	e1e0 <__alt_mem_nios_system_shared_memory+0xfffce1e0>
    f1f8:	9080100c 	andi	r2,r18,64
    f1fc:	d8002785 	stb	zero,158(sp)
    f200:	10009426 	beq	r2,zero,f454 <___svfprintf_internal_r+0x196c>
    f204:	d9402e17 	ldw	r5,184(sp)
    f208:	d8c02a17 	ldw	r3,168(sp)
    f20c:	002d883a 	mov	r22,zero
    f210:	28800104 	addi	r2,r5,4
    f214:	2d00000b 	ldhu	r20,0(r5)
    f218:	183ec10e 	bge	r3,zero,ed20 <__alt_mem_nios_system_shared_memory+0xfffced20>
    f21c:	a586b03a 	or	r3,r20,r22
    f220:	d8802e15 	stw	r2,184(sp)
    f224:	183ec21e 	bne	r3,zero,ed30 <__alt_mem_nios_system_shared_memory+0xfffced30>
    f228:	0039883a 	mov	fp,zero
    f22c:	0005883a 	mov	r2,zero
    f230:	003db806 	br	e914 <__alt_mem_nios_system_shared_memory+0xfffce914>
    f234:	d8c02e17 	ldw	r3,184(sp)
    f238:	d9002e17 	ldw	r4,184(sp)
    f23c:	d9402e17 	ldw	r5,184(sp)
    f240:	18c00017 	ldw	r3,0(r3)
    f244:	21000117 	ldw	r4,4(r4)
    f248:	29400204 	addi	r5,r5,8
    f24c:	d8c03615 	stw	r3,216(sp)
    f250:	d9003715 	stw	r4,220(sp)
    f254:	d9402e15 	stw	r5,184(sp)
    f258:	003b5a06 	br	dfc4 <__alt_mem_nios_system_shared_memory+0xfffcdfc4>
    f25c:	9080100c 	andi	r2,r18,64
    f260:	10010726 	beq	r2,zero,f680 <___svfprintf_internal_r+0x1b98>
    f264:	d8802e17 	ldw	r2,184(sp)
    f268:	1500000f 	ldh	r20,0(r2)
    f26c:	10800104 	addi	r2,r2,4
    f270:	d8802e15 	stw	r2,184(sp)
    f274:	a02dd7fa 	srai	r22,r20,31
    f278:	b005883a 	mov	r2,r22
    f27c:	003b7d06 	br	e074 <__alt_mem_nios_system_shared_memory+0xfffce074>
    f280:	9080100c 	andi	r2,r18,64
    f284:	10010526 	beq	r2,zero,f69c <___svfprintf_internal_r+0x1bb4>
    f288:	d8c02e17 	ldw	r3,184(sp)
    f28c:	002d883a 	mov	r22,zero
    f290:	1d00000b 	ldhu	r20,0(r3)
    f294:	18c00104 	addi	r3,r3,4
    f298:	d8c02e15 	stw	r3,184(sp)
    f29c:	003ce206 	br	e628 <__alt_mem_nios_system_shared_memory+0xfffce628>
    f2a0:	bc400007 	ldb	r17,0(r23)
    f2a4:	003a6506 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    f2a8:	9080040c 	andi	r2,r18,16
    f2ac:	10010126 	beq	r2,zero,f6b4 <___svfprintf_internal_r+0x1bcc>
    f2b0:	d8c02e17 	ldw	r3,184(sp)
    f2b4:	d9002f17 	ldw	r4,188(sp)
    f2b8:	18800017 	ldw	r2,0(r3)
    f2bc:	18c00104 	addi	r3,r3,4
    f2c0:	d8c02e15 	stw	r3,184(sp)
    f2c4:	11000015 	stw	r4,0(r2)
    f2c8:	003a3206 	br	db94 <__alt_mem_nios_system_shared_memory+0xfffcdb94>
    f2cc:	d9002a17 	ldw	r4,168(sp)
    f2d0:	d8002785 	stb	zero,158(sp)
    f2d4:	203d8d16 	blt	r4,zero,e90c <__alt_mem_nios_system_shared_memory+0xfffce90c>
    f2d8:	00bfdfc4 	movi	r2,-129
    f2dc:	90a4703a 	and	r18,r18,r2
    f2e0:	003ad506 	br	de38 <__alt_mem_nios_system_shared_memory+0xfffcde38>
    f2e4:	014000b4 	movhi	r5,2
    f2e8:	297a97c4 	addi	r5,r5,-5537
    f2ec:	d9402c15 	stw	r5,176(sp)
    f2f0:	d9402c17 	ldw	r5,176(sp)
    f2f4:	1c47883a 	add	r3,r3,r17
    f2f8:	10800044 	addi	r2,r2,1
    f2fc:	41400015 	stw	r5,0(r8)
    f300:	44400115 	stw	r17,4(r8)
    f304:	d8c02015 	stw	r3,128(sp)
    f308:	d8801f15 	stw	r2,124(sp)
    f30c:	010001c4 	movi	r4,7
    f310:	20bf3016 	blt	r4,r2,efd4 <__alt_mem_nios_system_shared_memory+0xfffcefd4>
    f314:	42000204 	addi	r8,r8,8
    f318:	003f3506 	br	eff0 <__alt_mem_nios_system_shared_memory+0xfffceff0>
    f31c:	010000b4 	movhi	r4,2
    f320:	213a97c4 	addi	r4,r4,-5537
    f324:	d9002c15 	stw	r4,176(sp)
    f328:	003c3c06 	br	e41c <__alt_mem_nios_system_shared_memory+0xfffce41c>
    f32c:	d9402d17 	ldw	r5,180(sp)
    f330:	d9801e04 	addi	r6,sp,120
    f334:	9809883a 	mov	r4,r19
    f338:	0016c280 	call	16c28 <__ssprint_r>
    f33c:	103ad11e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f340:	d8c02017 	ldw	r3,128(sp)
    f344:	da000404 	addi	r8,sp,16
    f348:	003d9306 	br	e998 <__alt_mem_nios_system_shared_memory+0xfffce998>
    f34c:	d8801f17 	ldw	r2,124(sp)
    f350:	014000b4 	movhi	r5,2
    f354:	01000044 	movi	r4,1
    f358:	18c00044 	addi	r3,r3,1
    f35c:	10800044 	addi	r2,r2,1
    f360:	29797504 	addi	r5,r5,-6700
    f364:	41000115 	stw	r4,4(r8)
    f368:	41400015 	stw	r5,0(r8)
    f36c:	d8c02015 	stw	r3,128(sp)
    f370:	d8801f15 	stw	r2,124(sp)
    f374:	010001c4 	movi	r4,7
    f378:	2080b516 	blt	r4,r2,f650 <___svfprintf_internal_r+0x1b68>
    f37c:	42000204 	addi	r8,r8,8
    f380:	8800041e 	bne	r17,zero,f394 <___svfprintf_internal_r+0x18ac>
    f384:	d8803317 	ldw	r2,204(sp)
    f388:	1000021e 	bne	r2,zero,f394 <___svfprintf_internal_r+0x18ac>
    f38c:	9080004c 	andi	r2,r18,1
    f390:	103c3926 	beq	r2,zero,e478 <__alt_mem_nios_system_shared_memory+0xfffce478>
    f394:	d9003817 	ldw	r4,224(sp)
    f398:	d8801f17 	ldw	r2,124(sp)
    f39c:	d9403417 	ldw	r5,208(sp)
    f3a0:	20c7883a 	add	r3,r4,r3
    f3a4:	10800044 	addi	r2,r2,1
    f3a8:	41000115 	stw	r4,4(r8)
    f3ac:	41400015 	stw	r5,0(r8)
    f3b0:	d8c02015 	stw	r3,128(sp)
    f3b4:	d8801f15 	stw	r2,124(sp)
    f3b8:	010001c4 	movi	r4,7
    f3bc:	20818016 	blt	r4,r2,f9c0 <___svfprintf_internal_r+0x1ed8>
    f3c0:	42000204 	addi	r8,r8,8
    f3c4:	0463c83a 	sub	r17,zero,r17
    f3c8:	0440cb0e 	bge	zero,r17,f6f8 <___svfprintf_internal_r+0x1c10>
    f3cc:	05800404 	movi	r22,16
    f3d0:	b440e80e 	bge	r22,r17,f774 <___svfprintf_internal_r+0x1c8c>
    f3d4:	014000b4 	movhi	r5,2
    f3d8:	297a97c4 	addi	r5,r5,-5537
    f3dc:	d9402c15 	stw	r5,176(sp)
    f3e0:	070001c4 	movi	fp,7
    f3e4:	dd002d17 	ldw	r20,180(sp)
    f3e8:	00000306 	br	f3f8 <___svfprintf_internal_r+0x1910>
    f3ec:	42000204 	addi	r8,r8,8
    f3f0:	8c7ffc04 	addi	r17,r17,-16
    f3f4:	b440e20e 	bge	r22,r17,f780 <___svfprintf_internal_r+0x1c98>
    f3f8:	18c00404 	addi	r3,r3,16
    f3fc:	10800044 	addi	r2,r2,1
    f400:	45400015 	stw	r21,0(r8)
    f404:	45800115 	stw	r22,4(r8)
    f408:	d8c02015 	stw	r3,128(sp)
    f40c:	d8801f15 	stw	r2,124(sp)
    f410:	e0bff60e 	bge	fp,r2,f3ec <__alt_mem_nios_system_shared_memory+0xfffcf3ec>
    f414:	d9801e04 	addi	r6,sp,120
    f418:	a00b883a 	mov	r5,r20
    f41c:	9809883a 	mov	r4,r19
    f420:	0016c280 	call	16c28 <__ssprint_r>
    f424:	103a971e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f428:	d8c02017 	ldw	r3,128(sp)
    f42c:	d8801f17 	ldw	r2,124(sp)
    f430:	da000404 	addi	r8,sp,16
    f434:	003fee06 	br	f3f0 <__alt_mem_nios_system_shared_memory+0xfffcf3f0>
    f438:	d9002e17 	ldw	r4,184(sp)
    f43c:	d9402a17 	ldw	r5,168(sp)
    f440:	002d883a 	mov	r22,zero
    f444:	20800104 	addi	r2,r4,4
    f448:	25000017 	ldw	r20,0(r4)
    f44c:	283e7d0e 	bge	r5,zero,ee44 <__alt_mem_nios_system_shared_memory+0xfffcee44>
    f450:	003eda06 	br	efbc <__alt_mem_nios_system_shared_memory+0xfffcefbc>
    f454:	d9002e17 	ldw	r4,184(sp)
    f458:	d9402a17 	ldw	r5,168(sp)
    f45c:	002d883a 	mov	r22,zero
    f460:	20800104 	addi	r2,r4,4
    f464:	25000017 	ldw	r20,0(r4)
    f468:	283e2d0e 	bge	r5,zero,ed20 <__alt_mem_nios_system_shared_memory+0xfffced20>
    f46c:	003f6b06 	br	f21c <__alt_mem_nios_system_shared_memory+0xfffcf21c>
    f470:	d8c02e15 	stw	r3,184(sp)
    f474:	0039883a 	mov	fp,zero
    f478:	003ed206 	br	efc4 <__alt_mem_nios_system_shared_memory+0xfffcefc4>
    f47c:	bc400043 	ldbu	r17,1(r23)
    f480:	84000814 	ori	r16,r16,32
    f484:	bdc00044 	addi	r23,r23,1
    f488:	8c403fcc 	andi	r17,r17,255
    f48c:	8c40201c 	xori	r17,r17,128
    f490:	8c7fe004 	addi	r17,r17,-128
    f494:	0039e906 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    f498:	d9402d17 	ldw	r5,180(sp)
    f49c:	d9801e04 	addi	r6,sp,120
    f4a0:	9809883a 	mov	r4,r19
    f4a4:	0016c280 	call	16c28 <__ssprint_r>
    f4a8:	103a761e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f4ac:	d8c02017 	ldw	r3,128(sp)
    f4b0:	da000404 	addi	r8,sp,16
    f4b4:	003d4a06 	br	e9e0 <__alt_mem_nios_system_shared_memory+0xfffce9e0>
    f4b8:	d9002a17 	ldw	r4,168(sp)
    f4bc:	05bff7c4 	movi	r22,-33
    f4c0:	00bfffc4 	movi	r2,-1
    f4c4:	8dac703a 	and	r22,r17,r22
    f4c8:	20806a26 	beq	r4,r2,f674 <___svfprintf_internal_r+0x1b8c>
    f4cc:	008011c4 	movi	r2,71
    f4d0:	b0813726 	beq	r22,r2,f9b0 <___svfprintf_internal_r+0x1ec8>
    f4d4:	d9003717 	ldw	r4,220(sp)
    f4d8:	90c04014 	ori	r3,r18,256
    f4dc:	d8c02c15 	stw	r3,176(sp)
    f4e0:	20015d16 	blt	r4,zero,fa58 <___svfprintf_internal_r+0x1f70>
    f4e4:	dd003717 	ldw	r20,220(sp)
    f4e8:	d8002905 	stb	zero,164(sp)
    f4ec:	00801984 	movi	r2,102
    f4f0:	88814026 	beq	r17,r2,f9f4 <___svfprintf_internal_r+0x1f0c>
    f4f4:	00801184 	movi	r2,70
    f4f8:	88817126 	beq	r17,r2,fac0 <___svfprintf_internal_r+0x1fd8>
    f4fc:	00801144 	movi	r2,69
    f500:	b0816226 	beq	r22,r2,fa8c <___svfprintf_internal_r+0x1fa4>
    f504:	d8c02a17 	ldw	r3,168(sp)
    f508:	d8802104 	addi	r2,sp,132
    f50c:	d8800315 	stw	r2,12(sp)
    f510:	d9403617 	ldw	r5,216(sp)
    f514:	d8802504 	addi	r2,sp,148
    f518:	d8800215 	stw	r2,8(sp)
    f51c:	d8802604 	addi	r2,sp,152
    f520:	d8c00015 	stw	r3,0(sp)
    f524:	d8800115 	stw	r2,4(sp)
    f528:	01c00084 	movi	r7,2
    f52c:	a00d883a 	mov	r6,r20
    f530:	9809883a 	mov	r4,r19
    f534:	d8c03d15 	stw	r3,244(sp)
    f538:	da003e15 	stw	r8,248(sp)
    f53c:	00125880 	call	12588 <_dtoa_r>
    f540:	1021883a 	mov	r16,r2
    f544:	008019c4 	movi	r2,103
    f548:	d8c03d17 	ldw	r3,244(sp)
    f54c:	da003e17 	ldw	r8,248(sp)
    f550:	8880e726 	beq	r17,r2,f8f0 <___svfprintf_internal_r+0x1e08>
    f554:	008011c4 	movi	r2,71
    f558:	8880d426 	beq	r17,r2,f8ac <___svfprintf_internal_r+0x1dc4>
    f55c:	80f9883a 	add	fp,r16,r3
    f560:	d9003617 	ldw	r4,216(sp)
    f564:	000d883a 	mov	r6,zero
    f568:	000f883a 	mov	r7,zero
    f56c:	a00b883a 	mov	r5,r20
    f570:	da003e15 	stw	r8,248(sp)
    f574:	0007a280 	call	7a28 <__eqdf2>
    f578:	da003e17 	ldw	r8,248(sp)
    f57c:	1000e426 	beq	r2,zero,f910 <___svfprintf_internal_r+0x1e28>
    f580:	d8802117 	ldw	r2,132(sp)
    f584:	1700062e 	bgeu	r2,fp,f5a0 <___svfprintf_internal_r+0x1ab8>
    f588:	01000c04 	movi	r4,48
    f58c:	10c00044 	addi	r3,r2,1
    f590:	d8c02115 	stw	r3,132(sp)
    f594:	11000005 	stb	r4,0(r2)
    f598:	d8802117 	ldw	r2,132(sp)
    f59c:	173ffb36 	bltu	r2,fp,f58c <__alt_mem_nios_system_shared_memory+0xfffcf58c>
    f5a0:	1405c83a 	sub	r2,r2,r16
    f5a4:	d8803315 	stw	r2,204(sp)
    f5a8:	008011c4 	movi	r2,71
    f5ac:	b080c526 	beq	r22,r2,f8c4 <___svfprintf_internal_r+0x1ddc>
    f5b0:	00801944 	movi	r2,101
    f5b4:	1441d80e 	bge	r2,r17,fd18 <___svfprintf_internal_r+0x2230>
    f5b8:	d8c02617 	ldw	r3,152(sp)
    f5bc:	00801984 	movi	r2,102
    f5c0:	d8c03215 	stw	r3,200(sp)
    f5c4:	88813426 	beq	r17,r2,fa98 <___svfprintf_internal_r+0x1fb0>
    f5c8:	d8c03217 	ldw	r3,200(sp)
    f5cc:	d9003317 	ldw	r4,204(sp)
    f5d0:	19012516 	blt	r3,r4,fa68 <___svfprintf_internal_r+0x1f80>
    f5d4:	9480004c 	andi	r18,r18,1
    f5d8:	9001841e 	bne	r18,zero,fbec <___svfprintf_internal_r+0x2104>
    f5dc:	1805883a 	mov	r2,r3
    f5e0:	1801cb16 	blt	r3,zero,fd10 <___svfprintf_internal_r+0x2228>
    f5e4:	d8c03217 	ldw	r3,200(sp)
    f5e8:	044019c4 	movi	r17,103
    f5ec:	d8c02b15 	stw	r3,172(sp)
    f5f0:	df002907 	ldb	fp,164(sp)
    f5f4:	e000a61e 	bne	fp,zero,f890 <___svfprintf_internal_r+0x1da8>
    f5f8:	df002783 	ldbu	fp,158(sp)
    f5fc:	d8802915 	stw	r2,164(sp)
    f600:	dc802c17 	ldw	r18,176(sp)
    f604:	d8002a15 	stw	zero,168(sp)
    f608:	003af506 	br	e1e0 <__alt_mem_nios_system_shared_memory+0xfffce1e0>
    f60c:	040000b4 	movhi	r16,2
    f610:	843a8804 	addi	r16,r16,-5600
    f614:	003a7e06 	br	e010 <__alt_mem_nios_system_shared_memory+0xfffce010>
    f618:	d9003917 	ldw	r4,228(sp)
    f61c:	04001004 	movi	r16,64
    f620:	800b883a 	mov	r5,r16
    f624:	000a7bc0 	call	a7bc <_malloc_r>
    f628:	d9002d17 	ldw	r4,180(sp)
    f62c:	20800015 	stw	r2,0(r4)
    f630:	20800415 	stw	r2,16(r4)
    f634:	1001d026 	beq	r2,zero,fd78 <___svfprintf_internal_r+0x2290>
    f638:	d8802d17 	ldw	r2,180(sp)
    f63c:	14000515 	stw	r16,20(r2)
    f640:	00394406 	br	db54 <__alt_mem_nios_system_shared_memory+0xfffcdb54>
    f644:	040000b4 	movhi	r16,2
    f648:	843a8a04 	addi	r16,r16,-5592
    f64c:	003ee106 	br	f1d4 <__alt_mem_nios_system_shared_memory+0xfffcf1d4>
    f650:	d9402d17 	ldw	r5,180(sp)
    f654:	d9801e04 	addi	r6,sp,120
    f658:	9809883a 	mov	r4,r19
    f65c:	0016c280 	call	16c28 <__ssprint_r>
    f660:	103a081e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f664:	dc402617 	ldw	r17,152(sp)
    f668:	d8c02017 	ldw	r3,128(sp)
    f66c:	da000404 	addi	r8,sp,16
    f670:	003f4306 	br	f380 <__alt_mem_nios_system_shared_memory+0xfffcf380>
    f674:	01400184 	movi	r5,6
    f678:	d9402a15 	stw	r5,168(sp)
    f67c:	003f9506 	br	f4d4 <__alt_mem_nios_system_shared_memory+0xfffcf4d4>
    f680:	d8c02e17 	ldw	r3,184(sp)
    f684:	1d000017 	ldw	r20,0(r3)
    f688:	18c00104 	addi	r3,r3,4
    f68c:	d8c02e15 	stw	r3,184(sp)
    f690:	a02dd7fa 	srai	r22,r20,31
    f694:	b005883a 	mov	r2,r22
    f698:	003a7606 	br	e074 <__alt_mem_nios_system_shared_memory+0xfffce074>
    f69c:	d9002e17 	ldw	r4,184(sp)
    f6a0:	002d883a 	mov	r22,zero
    f6a4:	25000017 	ldw	r20,0(r4)
    f6a8:	21000104 	addi	r4,r4,4
    f6ac:	d9002e15 	stw	r4,184(sp)
    f6b0:	003bdd06 	br	e628 <__alt_mem_nios_system_shared_memory+0xfffce628>
    f6b4:	9480100c 	andi	r18,r18,64
    f6b8:	90006e26 	beq	r18,zero,f874 <___svfprintf_internal_r+0x1d8c>
    f6bc:	d9402e17 	ldw	r5,184(sp)
    f6c0:	d8c02f17 	ldw	r3,188(sp)
    f6c4:	28800017 	ldw	r2,0(r5)
    f6c8:	29400104 	addi	r5,r5,4
    f6cc:	d9402e15 	stw	r5,184(sp)
    f6d0:	10c0000d 	sth	r3,0(r2)
    f6d4:	00392f06 	br	db94 <__alt_mem_nios_system_shared_memory+0xfffcdb94>
    f6d8:	d9402d17 	ldw	r5,180(sp)
    f6dc:	d9801e04 	addi	r6,sp,120
    f6e0:	9809883a 	mov	r4,r19
    f6e4:	0016c280 	call	16c28 <__ssprint_r>
    f6e8:	1039e61e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f6ec:	d8c02017 	ldw	r3,128(sp)
    f6f0:	d8801f17 	ldw	r2,124(sp)
    f6f4:	da000404 	addi	r8,sp,16
    f6f8:	d9403317 	ldw	r5,204(sp)
    f6fc:	10800044 	addi	r2,r2,1
    f700:	44000015 	stw	r16,0(r8)
    f704:	28c7883a 	add	r3,r5,r3
    f708:	003b5506 	br	e460 <__alt_mem_nios_system_shared_memory+0xfffce460>
    f70c:	8009883a 	mov	r4,r16
    f710:	df003e15 	stw	fp,248(sp)
    f714:	000ba8c0 	call	ba8c <strlen>
    f718:	d8802b15 	stw	r2,172(sp)
    f71c:	da003e17 	ldw	r8,248(sp)
    f720:	103c160e 	bge	r2,zero,e77c <__alt_mem_nios_system_shared_memory+0xfffce77c>
    f724:	0005883a 	mov	r2,zero
    f728:	003c1406 	br	e77c <__alt_mem_nios_system_shared_memory+0xfffce77c>
    f72c:	00bfffc4 	movi	r2,-1
    f730:	0039d906 	br	de98 <__alt_mem_nios_system_shared_memory+0xfffcde98>
    f734:	010000b4 	movhi	r4,2
    f738:	213a9bc4 	addi	r4,r4,-5521
    f73c:	d9003515 	stw	r4,212(sp)
    f740:	003ae406 	br	e2d4 <__alt_mem_nios_system_shared_memory+0xfffce2d4>
    f744:	013fffc4 	movi	r4,-1
    f748:	0039fa06 	br	df34 <__alt_mem_nios_system_shared_memory+0xfffcdf34>
    f74c:	d9402d17 	ldw	r5,180(sp)
    f750:	d9801e04 	addi	r6,sp,120
    f754:	9809883a 	mov	r4,r19
    f758:	0016c280 	call	16c28 <__ssprint_r>
    f75c:	1039c91e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f760:	d8c02017 	ldw	r3,128(sp)
    f764:	da000404 	addi	r8,sp,16
    f768:	003d8406 	br	ed7c <__alt_mem_nios_system_shared_memory+0xfffced7c>
    f76c:	0023883a 	mov	r17,zero
    f770:	003d8306 	br	ed80 <__alt_mem_nios_system_shared_memory+0xfffced80>
    f774:	010000b4 	movhi	r4,2
    f778:	213a97c4 	addi	r4,r4,-5537
    f77c:	d9002c15 	stw	r4,176(sp)
    f780:	d9002c17 	ldw	r4,176(sp)
    f784:	1c47883a 	add	r3,r3,r17
    f788:	10800044 	addi	r2,r2,1
    f78c:	41000015 	stw	r4,0(r8)
    f790:	44400115 	stw	r17,4(r8)
    f794:	d8c02015 	stw	r3,128(sp)
    f798:	d8801f15 	stw	r2,124(sp)
    f79c:	010001c4 	movi	r4,7
    f7a0:	20bfcd16 	blt	r4,r2,f6d8 <__alt_mem_nios_system_shared_memory+0xfffcf6d8>
    f7a4:	42000204 	addi	r8,r8,8
    f7a8:	003fd306 	br	f6f8 <__alt_mem_nios_system_shared_memory+0xfffcf6f8>
    f7ac:	d9402d17 	ldw	r5,180(sp)
    f7b0:	d9801e04 	addi	r6,sp,120
    f7b4:	9809883a 	mov	r4,r19
    f7b8:	0016c280 	call	16c28 <__ssprint_r>
    f7bc:	1039b11e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f7c0:	d8802617 	ldw	r2,152(sp)
    f7c4:	d8c02017 	ldw	r3,128(sp)
    f7c8:	da000404 	addi	r8,sp,16
    f7cc:	003e1c06 	br	f040 <__alt_mem_nios_system_shared_memory+0xfffcf040>
    f7d0:	d8802a17 	ldw	r2,168(sp)
    f7d4:	00c00184 	movi	r3,6
    f7d8:	1880012e 	bgeu	r3,r2,f7e0 <___svfprintf_internal_r+0x1cf8>
    f7dc:	1805883a 	mov	r2,r3
    f7e0:	d8802b15 	stw	r2,172(sp)
    f7e4:	1000f316 	blt	r2,zero,fbb4 <___svfprintf_internal_r+0x20cc>
    f7e8:	040000b4 	movhi	r16,2
    f7ec:	d8802915 	stw	r2,164(sp)
    f7f0:	dd002e15 	stw	r20,184(sp)
    f7f4:	d8002a15 	stw	zero,168(sp)
    f7f8:	d8003215 	stw	zero,200(sp)
    f7fc:	843a9604 	addi	r16,r16,-5544
    f800:	0039883a 	mov	fp,zero
    f804:	003a7d06 	br	e1fc <__alt_mem_nios_system_shared_memory+0xfffce1fc>
    f808:	010000b4 	movhi	r4,2
    f80c:	213a9bc4 	addi	r4,r4,-5521
    f810:	d9003515 	stw	r4,212(sp)
    f814:	003b3d06 	br	e50c <__alt_mem_nios_system_shared_memory+0xfffce50c>
    f818:	d9402d17 	ldw	r5,180(sp)
    f81c:	d9801e04 	addi	r6,sp,120
    f820:	9809883a 	mov	r4,r19
    f824:	0016c280 	call	16c28 <__ssprint_r>
    f828:	1039961e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f82c:	d8802617 	ldw	r2,152(sp)
    f830:	d9403317 	ldw	r5,204(sp)
    f834:	d8c02017 	ldw	r3,128(sp)
    f838:	da000404 	addi	r8,sp,16
    f83c:	2885c83a 	sub	r2,r5,r2
    f840:	003e1006 	br	f084 <__alt_mem_nios_system_shared_memory+0xfffcf084>
    f844:	00800044 	movi	r2,1
    f848:	10803fcc 	andi	r2,r2,255
    f84c:	00c00044 	movi	r3,1
    f850:	10fa1026 	beq	r2,r3,e094 <__alt_mem_nios_system_shared_memory+0xfffce094>
    f854:	00c00084 	movi	r3,2
    f858:	10fb8226 	beq	r2,r3,e664 <__alt_mem_nios_system_shared_memory+0xfffce664>
    f85c:	003a4206 	br	e168 <__alt_mem_nios_system_shared_memory+0xfffce168>
    f860:	0021883a 	mov	r16,zero
    f864:	003e0806 	br	f088 <__alt_mem_nios_system_shared_memory+0xfffcf088>
    f868:	07000b44 	movi	fp,45
    f86c:	df002785 	stb	fp,158(sp)
    f870:	0039e306 	br	e000 <__alt_mem_nios_system_shared_memory+0xfffce000>
    f874:	d9002e17 	ldw	r4,184(sp)
    f878:	d9402f17 	ldw	r5,188(sp)
    f87c:	20800017 	ldw	r2,0(r4)
    f880:	21000104 	addi	r4,r4,4
    f884:	d9002e15 	stw	r4,184(sp)
    f888:	11400015 	stw	r5,0(r2)
    f88c:	0038c106 	br	db94 <__alt_mem_nios_system_shared_memory+0xfffcdb94>
    f890:	00c00b44 	movi	r3,45
    f894:	d8c02785 	stb	r3,158(sp)
    f898:	d8802915 	stw	r2,164(sp)
    f89c:	dc802c17 	ldw	r18,176(sp)
    f8a0:	d8002a15 	stw	zero,168(sp)
    f8a4:	07000b44 	movi	fp,45
    f8a8:	003a5106 	br	e1f0 <__alt_mem_nios_system_shared_memory+0xfffce1f0>
    f8ac:	9080004c 	andi	r2,r18,1
    f8b0:	1000941e 	bne	r2,zero,fb04 <___svfprintf_internal_r+0x201c>
    f8b4:	d8802117 	ldw	r2,132(sp)
    f8b8:	1405c83a 	sub	r2,r2,r16
    f8bc:	d8803315 	stw	r2,204(sp)
    f8c0:	b441151e 	bne	r22,r17,fd18 <___svfprintf_internal_r+0x2230>
    f8c4:	dd802617 	ldw	r22,152(sp)
    f8c8:	00bfff44 	movi	r2,-3
    f8cc:	b0801a16 	blt	r22,r2,f938 <___svfprintf_internal_r+0x1e50>
    f8d0:	d9402a17 	ldw	r5,168(sp)
    f8d4:	2d801816 	blt	r5,r22,f938 <___svfprintf_internal_r+0x1e50>
    f8d8:	dd803215 	stw	r22,200(sp)
    f8dc:	003f3a06 	br	f5c8 <__alt_mem_nios_system_shared_memory+0xfffcf5c8>
    f8e0:	1025883a 	mov	r18,r2
    f8e4:	0039883a 	mov	fp,zero
    f8e8:	00800084 	movi	r2,2
    f8ec:	003fd606 	br	f848 <__alt_mem_nios_system_shared_memory+0xfffcf848>
    f8f0:	9080004c 	andi	r2,r18,1
    f8f4:	103f191e 	bne	r2,zero,f55c <__alt_mem_nios_system_shared_memory+0xfffcf55c>
    f8f8:	d8802117 	ldw	r2,132(sp)
    f8fc:	003f2806 	br	f5a0 <__alt_mem_nios_system_shared_memory+0xfffcf5a0>
    f900:	010000b4 	movhi	r4,2
    f904:	213a97c4 	addi	r4,r4,-5537
    f908:	d9002c15 	stw	r4,176(sp)
    f90c:	003c7c06 	br	eb00 <__alt_mem_nios_system_shared_memory+0xfffceb00>
    f910:	e005883a 	mov	r2,fp
    f914:	003f2206 	br	f5a0 <__alt_mem_nios_system_shared_memory+0xfffcf5a0>
    f918:	d9002a17 	ldw	r4,168(sp)
    f91c:	df002783 	ldbu	fp,158(sp)
    f920:	dd002e15 	stw	r20,184(sp)
    f924:	d9002915 	stw	r4,164(sp)
    f928:	d9002b15 	stw	r4,172(sp)
    f92c:	d8002a15 	stw	zero,168(sp)
    f930:	d8003215 	stw	zero,200(sp)
    f934:	003a2a06 	br	e1e0 <__alt_mem_nios_system_shared_memory+0xfffce1e0>
    f938:	8c7fff84 	addi	r17,r17,-2
    f93c:	b5bfffc4 	addi	r22,r22,-1
    f940:	dd802615 	stw	r22,152(sp)
    f944:	dc4022c5 	stb	r17,139(sp)
    f948:	b000c316 	blt	r22,zero,fc58 <___svfprintf_internal_r+0x2170>
    f94c:	00800ac4 	movi	r2,43
    f950:	d8802305 	stb	r2,140(sp)
    f954:	00800244 	movi	r2,9
    f958:	15806e16 	blt	r2,r22,fb14 <___svfprintf_internal_r+0x202c>
    f95c:	00800c04 	movi	r2,48
    f960:	b5800c04 	addi	r22,r22,48
    f964:	d8802345 	stb	r2,141(sp)
    f968:	dd802385 	stb	r22,142(sp)
    f96c:	d88023c4 	addi	r2,sp,143
    f970:	df0022c4 	addi	fp,sp,139
    f974:	d8c03317 	ldw	r3,204(sp)
    f978:	1739c83a 	sub	fp,r2,fp
    f97c:	d9003317 	ldw	r4,204(sp)
    f980:	e0c7883a 	add	r3,fp,r3
    f984:	df003b15 	stw	fp,236(sp)
    f988:	d8c02b15 	stw	r3,172(sp)
    f98c:	00800044 	movi	r2,1
    f990:	1100b70e 	bge	r2,r4,fc70 <___svfprintf_internal_r+0x2188>
    f994:	d8c02b17 	ldw	r3,172(sp)
    f998:	18c00044 	addi	r3,r3,1
    f99c:	d8c02b15 	stw	r3,172(sp)
    f9a0:	1805883a 	mov	r2,r3
    f9a4:	1800b016 	blt	r3,zero,fc68 <___svfprintf_internal_r+0x2180>
    f9a8:	d8003215 	stw	zero,200(sp)
    f9ac:	003f1006 	br	f5f0 <__alt_mem_nios_system_shared_memory+0xfffcf5f0>
    f9b0:	d8802a17 	ldw	r2,168(sp)
    f9b4:	103ec71e 	bne	r2,zero,f4d4 <__alt_mem_nios_system_shared_memory+0xfffcf4d4>
    f9b8:	dc002a15 	stw	r16,168(sp)
    f9bc:	003ec506 	br	f4d4 <__alt_mem_nios_system_shared_memory+0xfffcf4d4>
    f9c0:	d9402d17 	ldw	r5,180(sp)
    f9c4:	d9801e04 	addi	r6,sp,120
    f9c8:	9809883a 	mov	r4,r19
    f9cc:	0016c280 	call	16c28 <__ssprint_r>
    f9d0:	10392c1e 	bne	r2,zero,de84 <__alt_mem_nios_system_shared_memory+0xfffcde84>
    f9d4:	dc402617 	ldw	r17,152(sp)
    f9d8:	d8c02017 	ldw	r3,128(sp)
    f9dc:	d8801f17 	ldw	r2,124(sp)
    f9e0:	da000404 	addi	r8,sp,16
    f9e4:	003e7706 	br	f3c4 <__alt_mem_nios_system_shared_memory+0xfffcf3c4>
    f9e8:	182f883a 	mov	r23,r3
    f9ec:	d8002a15 	stw	zero,168(sp)
    f9f0:	00389306 	br	dc40 <__alt_mem_nios_system_shared_memory+0xfffcdc40>
    f9f4:	d8c02a17 	ldw	r3,168(sp)
    f9f8:	d8802104 	addi	r2,sp,132
    f9fc:	d8800315 	stw	r2,12(sp)
    fa00:	d9403617 	ldw	r5,216(sp)
    fa04:	d8802504 	addi	r2,sp,148
    fa08:	d8800215 	stw	r2,8(sp)
    fa0c:	d8802604 	addi	r2,sp,152
    fa10:	d8c00015 	stw	r3,0(sp)
    fa14:	9809883a 	mov	r4,r19
    fa18:	d8800115 	stw	r2,4(sp)
    fa1c:	01c000c4 	movi	r7,3
    fa20:	a00d883a 	mov	r6,r20
    fa24:	da003e15 	stw	r8,248(sp)
    fa28:	00125880 	call	12588 <_dtoa_r>
    fa2c:	d9002a17 	ldw	r4,168(sp)
    fa30:	da003e17 	ldw	r8,248(sp)
    fa34:	1021883a 	mov	r16,r2
    fa38:	1139883a 	add	fp,r2,r4
    fa3c:	2007883a 	mov	r3,r4
    fa40:	81000007 	ldb	r4,0(r16)
    fa44:	00800c04 	movi	r2,48
    fa48:	20806f26 	beq	r4,r2,fc08 <___svfprintf_internal_r+0x2120>
    fa4c:	d8c02617 	ldw	r3,152(sp)
    fa50:	e0f9883a 	add	fp,fp,r3
    fa54:	003ec206 	br	f560 <__alt_mem_nios_system_shared_memory+0xfffcf560>
    fa58:	00c00b44 	movi	r3,45
    fa5c:	2520003c 	xorhi	r20,r4,32768
    fa60:	d8c02905 	stb	r3,164(sp)
    fa64:	003ea106 	br	f4ec <__alt_mem_nios_system_shared_memory+0xfffcf4ec>
    fa68:	d8c03217 	ldw	r3,200(sp)
    fa6c:	00c0890e 	bge	zero,r3,fc94 <___svfprintf_internal_r+0x21ac>
    fa70:	00800044 	movi	r2,1
    fa74:	d9003317 	ldw	r4,204(sp)
    fa78:	1105883a 	add	r2,r2,r4
    fa7c:	d8802b15 	stw	r2,172(sp)
    fa80:	10005f16 	blt	r2,zero,fc00 <___svfprintf_internal_r+0x2118>
    fa84:	044019c4 	movi	r17,103
    fa88:	003ed906 	br	f5f0 <__alt_mem_nios_system_shared_memory+0xfffcf5f0>
    fa8c:	d9002a17 	ldw	r4,168(sp)
    fa90:	20c00044 	addi	r3,r4,1
    fa94:	003e9c06 	br	f508 <__alt_mem_nios_system_shared_memory+0xfffcf508>
    fa98:	d9002a17 	ldw	r4,168(sp)
    fa9c:	00c0680e 	bge	zero,r3,fc40 <___svfprintf_internal_r+0x2158>
    faa0:	2000461e 	bne	r4,zero,fbbc <___svfprintf_internal_r+0x20d4>
    faa4:	9480004c 	andi	r18,r18,1
    faa8:	9000441e 	bne	r18,zero,fbbc <___svfprintf_internal_r+0x20d4>
    faac:	1805883a 	mov	r2,r3
    fab0:	1800a116 	blt	r3,zero,fd38 <___svfprintf_internal_r+0x2250>
    fab4:	d8c03217 	ldw	r3,200(sp)
    fab8:	d8c02b15 	stw	r3,172(sp)
    fabc:	003ecc06 	br	f5f0 <__alt_mem_nios_system_shared_memory+0xfffcf5f0>
    fac0:	d9402a17 	ldw	r5,168(sp)
    fac4:	d8802104 	addi	r2,sp,132
    fac8:	d8800315 	stw	r2,12(sp)
    facc:	d9400015 	stw	r5,0(sp)
    fad0:	d8802504 	addi	r2,sp,148
    fad4:	d9403617 	ldw	r5,216(sp)
    fad8:	d8800215 	stw	r2,8(sp)
    fadc:	d8802604 	addi	r2,sp,152
    fae0:	d8800115 	stw	r2,4(sp)
    fae4:	01c000c4 	movi	r7,3
    fae8:	a00d883a 	mov	r6,r20
    faec:	9809883a 	mov	r4,r19
    faf0:	da003e15 	stw	r8,248(sp)
    faf4:	00125880 	call	12588 <_dtoa_r>
    faf8:	d8c02a17 	ldw	r3,168(sp)
    fafc:	da003e17 	ldw	r8,248(sp)
    fb00:	1021883a 	mov	r16,r2
    fb04:	00801184 	movi	r2,70
    fb08:	80f9883a 	add	fp,r16,r3
    fb0c:	88bfcc26 	beq	r17,r2,fa40 <__alt_mem_nios_system_shared_memory+0xfffcfa40>
    fb10:	003e9306 	br	f560 <__alt_mem_nios_system_shared_memory+0xfffcf560>
    fb14:	df0022c4 	addi	fp,sp,139
    fb18:	dc002a15 	stw	r16,168(sp)
    fb1c:	9829883a 	mov	r20,r19
    fb20:	e021883a 	mov	r16,fp
    fb24:	4027883a 	mov	r19,r8
    fb28:	b009883a 	mov	r4,r22
    fb2c:	01400284 	movi	r5,10
    fb30:	00050280 	call	5028 <__modsi3>
    fb34:	10800c04 	addi	r2,r2,48
    fb38:	843fffc4 	addi	r16,r16,-1
    fb3c:	b009883a 	mov	r4,r22
    fb40:	01400284 	movi	r5,10
    fb44:	80800005 	stb	r2,0(r16)
    fb48:	0004fa40 	call	4fa4 <__divsi3>
    fb4c:	102d883a 	mov	r22,r2
    fb50:	00800244 	movi	r2,9
    fb54:	15bff416 	blt	r2,r22,fb28 <__alt_mem_nios_system_shared_memory+0xfffcfb28>
    fb58:	9811883a 	mov	r8,r19
    fb5c:	b0800c04 	addi	r2,r22,48
    fb60:	a027883a 	mov	r19,r20
    fb64:	8029883a 	mov	r20,r16
    fb68:	a17fffc4 	addi	r5,r20,-1
    fb6c:	a0bfffc5 	stb	r2,-1(r20)
    fb70:	dc002a17 	ldw	r16,168(sp)
    fb74:	2f00782e 	bgeu	r5,fp,fd58 <___svfprintf_internal_r+0x2270>
    fb78:	d9c02384 	addi	r7,sp,142
    fb7c:	3d0fc83a 	sub	r7,r7,r20
    fb80:	d9002344 	addi	r4,sp,141
    fb84:	e1cf883a 	add	r7,fp,r7
    fb88:	00000106 	br	fb90 <___svfprintf_internal_r+0x20a8>
    fb8c:	28800003 	ldbu	r2,0(r5)
    fb90:	20800005 	stb	r2,0(r4)
    fb94:	21000044 	addi	r4,r4,1
    fb98:	29400044 	addi	r5,r5,1
    fb9c:	21fffb1e 	bne	r4,r7,fb8c <__alt_mem_nios_system_shared_memory+0xfffcfb8c>
    fba0:	d8802304 	addi	r2,sp,140
    fba4:	1505c83a 	sub	r2,r2,r20
    fba8:	d8c02344 	addi	r3,sp,141
    fbac:	1885883a 	add	r2,r3,r2
    fbb0:	003f7006 	br	f974 <__alt_mem_nios_system_shared_memory+0xfffcf974>
    fbb4:	0005883a 	mov	r2,zero
    fbb8:	003f0b06 	br	f7e8 <__alt_mem_nios_system_shared_memory+0xfffcf7e8>
    fbbc:	d9002a17 	ldw	r4,168(sp)
    fbc0:	d8c03217 	ldw	r3,200(sp)
    fbc4:	20800044 	addi	r2,r4,1
    fbc8:	1885883a 	add	r2,r3,r2
    fbcc:	d8802b15 	stw	r2,172(sp)
    fbd0:	103e870e 	bge	r2,zero,f5f0 <__alt_mem_nios_system_shared_memory+0xfffcf5f0>
    fbd4:	0005883a 	mov	r2,zero
    fbd8:	003e8506 	br	f5f0 <__alt_mem_nios_system_shared_memory+0xfffcf5f0>
    fbdc:	010000b4 	movhi	r4,2
    fbe0:	213a97c4 	addi	r4,r4,-5537
    fbe4:	d9002c15 	stw	r4,176(sp)
    fbe8:	003cc506 	br	ef00 <__alt_mem_nios_system_shared_memory+0xfffcef00>
    fbec:	d8c03217 	ldw	r3,200(sp)
    fbf0:	18c00044 	addi	r3,r3,1
    fbf4:	d8c02b15 	stw	r3,172(sp)
    fbf8:	1805883a 	mov	r2,r3
    fbfc:	183fa10e 	bge	r3,zero,fa84 <__alt_mem_nios_system_shared_memory+0xfffcfa84>
    fc00:	0005883a 	mov	r2,zero
    fc04:	003f9f06 	br	fa84 <__alt_mem_nios_system_shared_memory+0xfffcfa84>
    fc08:	d9003617 	ldw	r4,216(sp)
    fc0c:	000d883a 	mov	r6,zero
    fc10:	000f883a 	mov	r7,zero
    fc14:	a00b883a 	mov	r5,r20
    fc18:	d8c03d15 	stw	r3,244(sp)
    fc1c:	da003e15 	stw	r8,248(sp)
    fc20:	0007a280 	call	7a28 <__eqdf2>
    fc24:	d8c03d17 	ldw	r3,244(sp)
    fc28:	da003e17 	ldw	r8,248(sp)
    fc2c:	103f8726 	beq	r2,zero,fa4c <__alt_mem_nios_system_shared_memory+0xfffcfa4c>
    fc30:	00800044 	movi	r2,1
    fc34:	10c7c83a 	sub	r3,r2,r3
    fc38:	d8c02615 	stw	r3,152(sp)
    fc3c:	003f8406 	br	fa50 <__alt_mem_nios_system_shared_memory+0xfffcfa50>
    fc40:	20000e1e 	bne	r4,zero,fc7c <___svfprintf_internal_r+0x2194>
    fc44:	9480004c 	andi	r18,r18,1
    fc48:	90000c1e 	bne	r18,zero,fc7c <___svfprintf_internal_r+0x2194>
    fc4c:	00800044 	movi	r2,1
    fc50:	d8802b15 	stw	r2,172(sp)
    fc54:	003e6606 	br	f5f0 <__alt_mem_nios_system_shared_memory+0xfffcf5f0>
    fc58:	00800b44 	movi	r2,45
    fc5c:	05adc83a 	sub	r22,zero,r22
    fc60:	d8802305 	stb	r2,140(sp)
    fc64:	003f3b06 	br	f954 <__alt_mem_nios_system_shared_memory+0xfffcf954>
    fc68:	0005883a 	mov	r2,zero
    fc6c:	003f4e06 	br	f9a8 <__alt_mem_nios_system_shared_memory+0xfffcf9a8>
    fc70:	90a4703a 	and	r18,r18,r2
    fc74:	903f4a26 	beq	r18,zero,f9a0 <__alt_mem_nios_system_shared_memory+0xfffcf9a0>
    fc78:	003f4606 	br	f994 <__alt_mem_nios_system_shared_memory+0xfffcf994>
    fc7c:	d8c02a17 	ldw	r3,168(sp)
    fc80:	18c00084 	addi	r3,r3,2
    fc84:	d8c02b15 	stw	r3,172(sp)
    fc88:	1805883a 	mov	r2,r3
    fc8c:	183e580e 	bge	r3,zero,f5f0 <__alt_mem_nios_system_shared_memory+0xfffcf5f0>
    fc90:	003fd006 	br	fbd4 <__alt_mem_nios_system_shared_memory+0xfffcfbd4>
    fc94:	00800084 	movi	r2,2
    fc98:	10c5c83a 	sub	r2,r2,r3
    fc9c:	003f7506 	br	fa74 <__alt_mem_nios_system_shared_memory+0xfffcfa74>
    fca0:	d9402e17 	ldw	r5,184(sp)
    fca4:	d9002e17 	ldw	r4,184(sp)
    fca8:	bc400043 	ldbu	r17,1(r23)
    fcac:	29400017 	ldw	r5,0(r5)
    fcb0:	20800104 	addi	r2,r4,4
    fcb4:	d8802e15 	stw	r2,184(sp)
    fcb8:	d9402a15 	stw	r5,168(sp)
    fcbc:	182f883a 	mov	r23,r3
    fcc0:	283df10e 	bge	r5,zero,f488 <__alt_mem_nios_system_shared_memory+0xfffcf488>
    fcc4:	8c403fcc 	andi	r17,r17,255
    fcc8:	017fffc4 	movi	r5,-1
    fccc:	8c40201c 	xori	r17,r17,128
    fcd0:	d9402a15 	stw	r5,168(sp)
    fcd4:	8c7fe004 	addi	r17,r17,-128
    fcd8:	0037d806 	br	dc3c <__alt_mem_nios_system_shared_memory+0xfffcdc3c>
    fcdc:	9080004c 	andi	r2,r18,1
    fce0:	0039883a 	mov	fp,zero
    fce4:	10000726 	beq	r2,zero,fd04 <___svfprintf_internal_r+0x221c>
    fce8:	d8c02817 	ldw	r3,160(sp)
    fcec:	dc001dc4 	addi	r16,sp,119
    fcf0:	00800c04 	movi	r2,48
    fcf4:	1c07c83a 	sub	r3,r3,r16
    fcf8:	d8801dc5 	stb	r2,119(sp)
    fcfc:	d8c02b15 	stw	r3,172(sp)
    fd00:	00393106 	br	e1c8 <__alt_mem_nios_system_shared_memory+0xfffce1c8>
    fd04:	d8002b15 	stw	zero,172(sp)
    fd08:	dc001e04 	addi	r16,sp,120
    fd0c:	00392e06 	br	e1c8 <__alt_mem_nios_system_shared_memory+0xfffce1c8>
    fd10:	0005883a 	mov	r2,zero
    fd14:	003e3306 	br	f5e4 <__alt_mem_nios_system_shared_memory+0xfffcf5e4>
    fd18:	dd802617 	ldw	r22,152(sp)
    fd1c:	003f0706 	br	f93c <__alt_mem_nios_system_shared_memory+0xfffcf93c>
    fd20:	d8c02b03 	ldbu	r3,172(sp)
    fd24:	d8c02785 	stb	r3,158(sp)
    fd28:	003a3506 	br	e600 <__alt_mem_nios_system_shared_memory+0xfffce600>
    fd2c:	d8c02b03 	ldbu	r3,172(sp)
    fd30:	d8c02785 	stb	r3,158(sp)
    fd34:	003a1706 	br	e594 <__alt_mem_nios_system_shared_memory+0xfffce594>
    fd38:	0005883a 	mov	r2,zero
    fd3c:	003f5d06 	br	fab4 <__alt_mem_nios_system_shared_memory+0xfffcfab4>
    fd40:	d8c02b03 	ldbu	r3,172(sp)
    fd44:	d8c02785 	stb	r3,158(sp)
    fd48:	0038f306 	br	e118 <__alt_mem_nios_system_shared_memory+0xfffce118>
    fd4c:	d8c02b03 	ldbu	r3,172(sp)
    fd50:	d8c02785 	stb	r3,158(sp)
    fd54:	0038be06 	br	e050 <__alt_mem_nios_system_shared_memory+0xfffce050>
    fd58:	d8802344 	addi	r2,sp,141
    fd5c:	003f0506 	br	f974 <__alt_mem_nios_system_shared_memory+0xfffcf974>
    fd60:	d8c02b03 	ldbu	r3,172(sp)
    fd64:	d8c02785 	stb	r3,158(sp)
    fd68:	00388b06 	br	df98 <__alt_mem_nios_system_shared_memory+0xfffcdf98>
    fd6c:	d8c02b03 	ldbu	r3,172(sp)
    fd70:	d8c02785 	stb	r3,158(sp)
    fd74:	003ad706 	br	e8d4 <__alt_mem_nios_system_shared_memory+0xfffce8d4>
    fd78:	d9403917 	ldw	r5,228(sp)
    fd7c:	00800304 	movi	r2,12
    fd80:	28800015 	stw	r2,0(r5)
    fd84:	00bfffc4 	movi	r2,-1
    fd88:	00384306 	br	de98 <__alt_mem_nios_system_shared_memory+0xfffcde98>
    fd8c:	d8c02b03 	ldbu	r3,172(sp)
    fd90:	d8c02785 	stb	r3,158(sp)
    fd94:	003ab606 	br	e870 <__alt_mem_nios_system_shared_memory+0xfffce870>
    fd98:	d8c02b03 	ldbu	r3,172(sp)
    fd9c:	d8c02785 	stb	r3,158(sp)
    fda0:	003a8906 	br	e7c8 <__alt_mem_nios_system_shared_memory+0xfffce7c8>

0000fda4 <___vfprintf_internal_r>:
    fda4:	deffb804 	addi	sp,sp,-288
    fda8:	dfc04715 	stw	ra,284(sp)
    fdac:	ddc04515 	stw	r23,276(sp)
    fdb0:	dd404315 	stw	r21,268(sp)
    fdb4:	d9002d15 	stw	r4,180(sp)
    fdb8:	282f883a 	mov	r23,r5
    fdbc:	302b883a 	mov	r21,r6
    fdc0:	d9c02e15 	stw	r7,184(sp)
    fdc4:	df004615 	stw	fp,280(sp)
    fdc8:	dd804415 	stw	r22,272(sp)
    fdcc:	dd004215 	stw	r20,264(sp)
    fdd0:	dcc04115 	stw	r19,260(sp)
    fdd4:	dc804015 	stw	r18,256(sp)
    fdd8:	dc403f15 	stw	r17,252(sp)
    fddc:	dc003e15 	stw	r16,248(sp)
    fde0:	0014f340 	call	14f34 <_localeconv_r>
    fde4:	10800017 	ldw	r2,0(r2)
    fde8:	1009883a 	mov	r4,r2
    fdec:	d8803415 	stw	r2,208(sp)
    fdf0:	000ba8c0 	call	ba8c <strlen>
    fdf4:	d8803715 	stw	r2,220(sp)
    fdf8:	d8802d17 	ldw	r2,180(sp)
    fdfc:	10000226 	beq	r2,zero,fe08 <___vfprintf_internal_r+0x64>
    fe00:	10800e17 	ldw	r2,56(r2)
    fe04:	1000fb26 	beq	r2,zero,101f4 <___vfprintf_internal_r+0x450>
    fe08:	b880030b 	ldhu	r2,12(r23)
    fe0c:	10c8000c 	andi	r3,r2,8192
    fe10:	1800061e 	bne	r3,zero,fe2c <___vfprintf_internal_r+0x88>
    fe14:	b9001917 	ldw	r4,100(r23)
    fe18:	00f7ffc4 	movi	r3,-8193
    fe1c:	10880014 	ori	r2,r2,8192
    fe20:	20c6703a 	and	r3,r4,r3
    fe24:	b880030d 	sth	r2,12(r23)
    fe28:	b8c01915 	stw	r3,100(r23)
    fe2c:	10c0020c 	andi	r3,r2,8
    fe30:	1800c326 	beq	r3,zero,10140 <___vfprintf_internal_r+0x39c>
    fe34:	b8c00417 	ldw	r3,16(r23)
    fe38:	1800c126 	beq	r3,zero,10140 <___vfprintf_internal_r+0x39c>
    fe3c:	1080068c 	andi	r2,r2,26
    fe40:	00c00284 	movi	r3,10
    fe44:	10c0c626 	beq	r2,r3,10160 <___vfprintf_internal_r+0x3bc>
    fe48:	d8c00404 	addi	r3,sp,16
    fe4c:	050000b4 	movhi	r20,2
    fe50:	d9001e04 	addi	r4,sp,120
    fe54:	a53a9fc4 	addi	r20,r20,-5505
    fe58:	d8c01e15 	stw	r3,120(sp)
    fe5c:	d8002015 	stw	zero,128(sp)
    fe60:	d8001f15 	stw	zero,124(sp)
    fe64:	d8003315 	stw	zero,204(sp)
    fe68:	d8003615 	stw	zero,216(sp)
    fe6c:	d8003815 	stw	zero,224(sp)
    fe70:	1811883a 	mov	r8,r3
    fe74:	d8003915 	stw	zero,228(sp)
    fe78:	d8003a15 	stw	zero,232(sp)
    fe7c:	d8002f15 	stw	zero,188(sp)
    fe80:	d9002815 	stw	r4,160(sp)
    fe84:	a8800007 	ldb	r2,0(r21)
    fe88:	10028b26 	beq	r2,zero,108b8 <___vfprintf_internal_r+0xb14>
    fe8c:	00c00944 	movi	r3,37
    fe90:	a823883a 	mov	r17,r21
    fe94:	10c0021e 	bne	r2,r3,fea0 <___vfprintf_internal_r+0xfc>
    fe98:	00001406 	br	feec <___vfprintf_internal_r+0x148>
    fe9c:	10c00326 	beq	r2,r3,feac <___vfprintf_internal_r+0x108>
    fea0:	8c400044 	addi	r17,r17,1
    fea4:	88800007 	ldb	r2,0(r17)
    fea8:	103ffc1e 	bne	r2,zero,fe9c <__alt_mem_nios_system_shared_memory+0xfffcfe9c>
    feac:	8d61c83a 	sub	r16,r17,r21
    feb0:	80000e26 	beq	r16,zero,feec <___vfprintf_internal_r+0x148>
    feb4:	d8c02017 	ldw	r3,128(sp)
    feb8:	d8801f17 	ldw	r2,124(sp)
    febc:	45400015 	stw	r21,0(r8)
    fec0:	1c07883a 	add	r3,r3,r16
    fec4:	10800044 	addi	r2,r2,1
    fec8:	d8c02015 	stw	r3,128(sp)
    fecc:	44000115 	stw	r16,4(r8)
    fed0:	d8801f15 	stw	r2,124(sp)
    fed4:	00c001c4 	movi	r3,7
    fed8:	1880a916 	blt	r3,r2,10180 <___vfprintf_internal_r+0x3dc>
    fedc:	42000204 	addi	r8,r8,8
    fee0:	d9402f17 	ldw	r5,188(sp)
    fee4:	2c0b883a 	add	r5,r5,r16
    fee8:	d9402f15 	stw	r5,188(sp)
    feec:	88800007 	ldb	r2,0(r17)
    fef0:	1000aa26 	beq	r2,zero,1019c <___vfprintf_internal_r+0x3f8>
    fef4:	8d400044 	addi	r21,r17,1
    fef8:	8c400047 	ldb	r17,1(r17)
    fefc:	0021883a 	mov	r16,zero
    ff00:	00bfffc4 	movi	r2,-1
    ff04:	0025883a 	mov	r18,zero
    ff08:	dc002905 	stb	r16,164(sp)
    ff0c:	d8002785 	stb	zero,158(sp)
    ff10:	d8002b05 	stb	zero,172(sp)
    ff14:	d8802a15 	stw	r2,168(sp)
    ff18:	d8003115 	stw	zero,196(sp)
    ff1c:	04c01604 	movi	r19,88
    ff20:	05800244 	movi	r22,9
    ff24:	9021883a 	mov	r16,r18
    ff28:	4039883a 	mov	fp,r8
    ff2c:	ad400044 	addi	r21,r21,1
    ff30:	88bff804 	addi	r2,r17,-32
    ff34:	98833236 	bltu	r19,r2,10c00 <___vfprintf_internal_r+0xe5c>
    ff38:	100490ba 	slli	r2,r2,2
    ff3c:	00c00074 	movhi	r3,1
    ff40:	18ffd404 	addi	r3,r3,-176
    ff44:	10c5883a 	add	r2,r2,r3
    ff48:	10800017 	ldw	r2,0(r2)
    ff4c:	1000683a 	jmp	r2
    ff50:	00010af8 	rdprs	zero,zero,1067
    ff54:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff58:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff5c:	00010b18 	cmpnei	zero,zero,1068
    ff60:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff64:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff68:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff6c:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff70:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff74:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff78:	00010200 	call	1020 <esp8266_init+0x34>
    ff7c:	00010a08 	cmpgei	zero,zero,1064
    ff80:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff84:	000100c4 	movi	zero,1027
    ff88:	00010224 	muli	zero,zero,1032
    ff8c:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ff90:	00010274 	movhi	zero,1033
    ff94:	00010280 	call	1028 <esp8266_init+0x3c>
    ff98:	00010280 	call	1028 <esp8266_init+0x3c>
    ff9c:	00010280 	call	1028 <esp8266_init+0x3c>
    ffa0:	00010280 	call	1028 <esp8266_init+0x3c>
    ffa4:	00010280 	call	1028 <esp8266_init+0x3c>
    ffa8:	00010280 	call	1028 <esp8266_init+0x3c>
    ffac:	00010280 	call	1028 <esp8266_init+0x3c>
    ffb0:	00010280 	call	1028 <esp8266_init+0x3c>
    ffb4:	00010280 	call	1028 <esp8266_init+0x3c>
    ffb8:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffbc:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffc0:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffc4:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffc8:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffcc:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffd0:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffd4:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffd8:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffdc:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffe0:	000102bc 	xorhi	zero,zero,1034
    ffe4:	00010384 	movi	zero,1038
    ffe8:	00010c00 	call	10c0 <esp8266_init+0xd4>
    ffec:	00010384 	movi	zero,1038
    fff0:	00010c00 	call	10c0 <esp8266_init+0xd4>
    fff4:	00010c00 	call	10c0 <esp8266_init+0xd4>
    fff8:	00010c00 	call	10c0 <esp8266_init+0xd4>
    fffc:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10000:	00010430 	cmpltui	zero,zero,1040
   10004:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10008:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1000c:	0001043c 	xorhi	zero,zero,1040
   10010:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10014:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10018:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1001c:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10020:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10024:	000108c0 	call	108c <esp8266_init+0xa0>
   10028:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1002c:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10030:	0001092c 	andhi	zero,zero,1060
   10034:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10038:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1003c:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10040:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10044:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10048:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1004c:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10050:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10054:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10058:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1005c:	00010ba4 	muli	zero,zero,1070
   10060:	00010b24 	muli	zero,zero,1068
   10064:	00010384 	movi	zero,1038
   10068:	00010384 	movi	zero,1038
   1006c:	00010384 	movi	zero,1038
   10070:	00010b44 	movi	zero,1069
   10074:	00010b24 	muli	zero,zero,1068
   10078:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1007c:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10080:	00010b50 	cmplti	zero,zero,1069
   10084:	00010c00 	call	10c0 <esp8266_init+0xd4>
   10088:	00010b64 	muli	zero,zero,1069
   1008c:	000109e8 	cmpgeui	zero,zero,1063
   10090:	000100d0 	cmplti	zero,zero,1027
   10094:	00010a20 	cmpeqi	zero,zero,1064
   10098:	00010c00 	call	10c0 <esp8266_init+0xd4>
   1009c:	00010a2c 	andhi	zero,zero,1064
   100a0:	00010c00 	call	10c0 <esp8266_init+0xd4>
   100a4:	00010a90 	cmplti	zero,zero,1066
   100a8:	00010c00 	call	10c0 <esp8266_init+0xd4>
   100ac:	00010c00 	call	10c0 <esp8266_init+0xd4>
   100b0:	00010ab0 	cmpltui	zero,zero,1066
   100b4:	d8c03117 	ldw	r3,196(sp)
   100b8:	d8802e15 	stw	r2,184(sp)
   100bc:	00c7c83a 	sub	r3,zero,r3
   100c0:	d8c03115 	stw	r3,196(sp)
   100c4:	84000114 	ori	r16,r16,4
   100c8:	ac400007 	ldb	r17,0(r21)
   100cc:	003f9706 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   100d0:	00800c04 	movi	r2,48
   100d4:	d8802705 	stb	r2,156(sp)
   100d8:	00801e04 	movi	r2,120
   100dc:	d8802745 	stb	r2,157(sp)
   100e0:	d9002a17 	ldw	r4,168(sp)
   100e4:	d8802e17 	ldw	r2,184(sp)
   100e8:	d8002785 	stb	zero,158(sp)
   100ec:	e011883a 	mov	r8,fp
   100f0:	10c00104 	addi	r3,r2,4
   100f4:	14c00017 	ldw	r19,0(r2)
   100f8:	002d883a 	mov	r22,zero
   100fc:	80800094 	ori	r2,r16,2
   10100:	2002ca16 	blt	r4,zero,10c2c <___vfprintf_internal_r+0xe88>
   10104:	00bfdfc4 	movi	r2,-129
   10108:	80a4703a 	and	r18,r16,r2
   1010c:	d8c02e15 	stw	r3,184(sp)
   10110:	94800094 	ori	r18,r18,2
   10114:	9802b41e 	bne	r19,zero,10be8 <___vfprintf_internal_r+0xe44>
   10118:	014000b4 	movhi	r5,2
   1011c:	297a9104 	addi	r5,r5,-5564
   10120:	d9403915 	stw	r5,228(sp)
   10124:	04401e04 	movi	r17,120
   10128:	d8802a17 	ldw	r2,168(sp)
   1012c:	0039883a 	mov	fp,zero
   10130:	1001fa26 	beq	r2,zero,1091c <___vfprintf_internal_r+0xb78>
   10134:	0027883a 	mov	r19,zero
   10138:	002d883a 	mov	r22,zero
   1013c:	00021906 	br	109a4 <___vfprintf_internal_r+0xc00>
   10140:	d9002d17 	ldw	r4,180(sp)
   10144:	b80b883a 	mov	r5,r23
   10148:	00121b80 	call	121b8 <__swsetup_r>
   1014c:	1005dc1e 	bne	r2,zero,118c0 <___vfprintf_internal_r+0x1b1c>
   10150:	b880030b 	ldhu	r2,12(r23)
   10154:	00c00284 	movi	r3,10
   10158:	1080068c 	andi	r2,r2,26
   1015c:	10ff3a1e 	bne	r2,r3,fe48 <__alt_mem_nios_system_shared_memory+0xfffcfe48>
   10160:	b880038f 	ldh	r2,14(r23)
   10164:	103f3816 	blt	r2,zero,fe48 <__alt_mem_nios_system_shared_memory+0xfffcfe48>
   10168:	d9c02e17 	ldw	r7,184(sp)
   1016c:	d9002d17 	ldw	r4,180(sp)
   10170:	a80d883a 	mov	r6,r21
   10174:	b80b883a 	mov	r5,r23
   10178:	001209c0 	call	1209c <__sbprintf>
   1017c:	00001106 	br	101c4 <___vfprintf_internal_r+0x420>
   10180:	d9002d17 	ldw	r4,180(sp)
   10184:	d9801e04 	addi	r6,sp,120
   10188:	b80b883a 	mov	r5,r23
   1018c:	00182940 	call	18294 <__sprint_r>
   10190:	1000081e 	bne	r2,zero,101b4 <___vfprintf_internal_r+0x410>
   10194:	da000404 	addi	r8,sp,16
   10198:	003f5106 	br	fee0 <__alt_mem_nios_system_shared_memory+0xfffcfee0>
   1019c:	d8802017 	ldw	r2,128(sp)
   101a0:	10000426 	beq	r2,zero,101b4 <___vfprintf_internal_r+0x410>
   101a4:	d9002d17 	ldw	r4,180(sp)
   101a8:	d9801e04 	addi	r6,sp,120
   101ac:	b80b883a 	mov	r5,r23
   101b0:	00182940 	call	18294 <__sprint_r>
   101b4:	b880030b 	ldhu	r2,12(r23)
   101b8:	1080100c 	andi	r2,r2,64
   101bc:	1005c01e 	bne	r2,zero,118c0 <___vfprintf_internal_r+0x1b1c>
   101c0:	d8802f17 	ldw	r2,188(sp)
   101c4:	dfc04717 	ldw	ra,284(sp)
   101c8:	df004617 	ldw	fp,280(sp)
   101cc:	ddc04517 	ldw	r23,276(sp)
   101d0:	dd804417 	ldw	r22,272(sp)
   101d4:	dd404317 	ldw	r21,268(sp)
   101d8:	dd004217 	ldw	r20,264(sp)
   101dc:	dcc04117 	ldw	r19,260(sp)
   101e0:	dc804017 	ldw	r18,256(sp)
   101e4:	dc403f17 	ldw	r17,252(sp)
   101e8:	dc003e17 	ldw	r16,248(sp)
   101ec:	dec04804 	addi	sp,sp,288
   101f0:	f800283a 	ret
   101f4:	d9002d17 	ldw	r4,180(sp)
   101f8:	00099c00 	call	99c0 <__sinit>
   101fc:	003f0206 	br	fe08 <__alt_mem_nios_system_shared_memory+0xfffcfe08>
   10200:	d9002e17 	ldw	r4,184(sp)
   10204:	d9402e17 	ldw	r5,184(sp)
   10208:	21000017 	ldw	r4,0(r4)
   1020c:	28800104 	addi	r2,r5,4
   10210:	d9003115 	stw	r4,196(sp)
   10214:	203fa716 	blt	r4,zero,100b4 <__alt_mem_nios_system_shared_memory+0xfffd00b4>
   10218:	d8802e15 	stw	r2,184(sp)
   1021c:	ac400007 	ldb	r17,0(r21)
   10220:	003f4206 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10224:	ac400007 	ldb	r17,0(r21)
   10228:	01000a84 	movi	r4,42
   1022c:	a8c00044 	addi	r3,r21,1
   10230:	89075826 	beq	r17,r4,11f94 <___vfprintf_internal_r+0x21f0>
   10234:	8cbff404 	addi	r18,r17,-48
   10238:	b486ae36 	bltu	r22,r18,11cf4 <___vfprintf_internal_r+0x1f50>
   1023c:	0009883a 	mov	r4,zero
   10240:	1823883a 	mov	r17,r3
   10244:	01400284 	movi	r5,10
   10248:	00051580 	call	5158 <__mulsi3>
   1024c:	88c00007 	ldb	r3,0(r17)
   10250:	1489883a 	add	r4,r2,r18
   10254:	8d400044 	addi	r21,r17,1
   10258:	1cbff404 	addi	r18,r3,-48
   1025c:	a823883a 	mov	r17,r21
   10260:	b4bff82e 	bgeu	r22,r18,10244 <__alt_mem_nios_system_shared_memory+0xfffd0244>
   10264:	1823883a 	mov	r17,r3
   10268:	2005f616 	blt	r4,zero,11a44 <___vfprintf_internal_r+0x1ca0>
   1026c:	d9002a15 	stw	r4,168(sp)
   10270:	003f2f06 	br	ff30 <__alt_mem_nios_system_shared_memory+0xfffcff30>
   10274:	84002014 	ori	r16,r16,128
   10278:	ac400007 	ldb	r17,0(r21)
   1027c:	003f2b06 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10280:	8cbff404 	addi	r18,r17,-48
   10284:	d8003115 	stw	zero,196(sp)
   10288:	0009883a 	mov	r4,zero
   1028c:	a823883a 	mov	r17,r21
   10290:	01400284 	movi	r5,10
   10294:	00051580 	call	5158 <__mulsi3>
   10298:	88c00007 	ldb	r3,0(r17)
   1029c:	9089883a 	add	r4,r18,r2
   102a0:	ad400044 	addi	r21,r21,1
   102a4:	1cbff404 	addi	r18,r3,-48
   102a8:	a823883a 	mov	r17,r21
   102ac:	b4bff82e 	bgeu	r22,r18,10290 <__alt_mem_nios_system_shared_memory+0xfffd0290>
   102b0:	1823883a 	mov	r17,r3
   102b4:	d9003115 	stw	r4,196(sp)
   102b8:	003f1d06 	br	ff30 <__alt_mem_nios_system_shared_memory+0xfffcff30>
   102bc:	8025883a 	mov	r18,r16
   102c0:	dc002903 	ldbu	r16,164(sp)
   102c4:	e011883a 	mov	r8,fp
   102c8:	84003fcc 	andi	r16,r16,255
   102cc:	8007531e 	bne	r16,zero,1201c <___vfprintf_internal_r+0x2278>
   102d0:	94800414 	ori	r18,r18,16
   102d4:	9080080c 	andi	r2,r18,32
   102d8:	1003a326 	beq	r2,zero,11168 <___vfprintf_internal_r+0x13c4>
   102dc:	d9002e17 	ldw	r4,184(sp)
   102e0:	20800117 	ldw	r2,4(r4)
   102e4:	24c00017 	ldw	r19,0(r4)
   102e8:	21000204 	addi	r4,r4,8
   102ec:	d9002e15 	stw	r4,184(sp)
   102f0:	102d883a 	mov	r22,r2
   102f4:	10047316 	blt	r2,zero,114c4 <___vfprintf_internal_r+0x1720>
   102f8:	d9002a17 	ldw	r4,168(sp)
   102fc:	df002783 	ldbu	fp,158(sp)
   10300:	2003e416 	blt	r4,zero,11294 <___vfprintf_internal_r+0x14f0>
   10304:	00ffdfc4 	movi	r3,-129
   10308:	9d84b03a 	or	r2,r19,r22
   1030c:	90e4703a 	and	r18,r18,r3
   10310:	10018026 	beq	r2,zero,10914 <___vfprintf_internal_r+0xb70>
   10314:	b003ab26 	beq	r22,zero,111c4 <___vfprintf_internal_r+0x1420>
   10318:	dc402915 	stw	r17,164(sp)
   1031c:	dc001e04 	addi	r16,sp,120
   10320:	b023883a 	mov	r17,r22
   10324:	402d883a 	mov	r22,r8
   10328:	9809883a 	mov	r4,r19
   1032c:	880b883a 	mov	r5,r17
   10330:	01800284 	movi	r6,10
   10334:	000f883a 	mov	r7,zero
   10338:	001a5240 	call	1a524 <__umoddi3>
   1033c:	10800c04 	addi	r2,r2,48
   10340:	843fffc4 	addi	r16,r16,-1
   10344:	9809883a 	mov	r4,r19
   10348:	880b883a 	mov	r5,r17
   1034c:	80800005 	stb	r2,0(r16)
   10350:	01800284 	movi	r6,10
   10354:	000f883a 	mov	r7,zero
   10358:	0019f280 	call	19f28 <__udivdi3>
   1035c:	1027883a 	mov	r19,r2
   10360:	10c4b03a 	or	r2,r2,r3
   10364:	1823883a 	mov	r17,r3
   10368:	103fef1e 	bne	r2,zero,10328 <__alt_mem_nios_system_shared_memory+0xfffd0328>
   1036c:	d8c02817 	ldw	r3,160(sp)
   10370:	dc402917 	ldw	r17,164(sp)
   10374:	b011883a 	mov	r8,r22
   10378:	1c07c83a 	sub	r3,r3,r16
   1037c:	d8c02b15 	stw	r3,172(sp)
   10380:	00005f06 	br	10500 <___vfprintf_internal_r+0x75c>
   10384:	8025883a 	mov	r18,r16
   10388:	dc002903 	ldbu	r16,164(sp)
   1038c:	e011883a 	mov	r8,fp
   10390:	84003fcc 	andi	r16,r16,255
   10394:	80071e1e 	bne	r16,zero,12010 <___vfprintf_internal_r+0x226c>
   10398:	9080020c 	andi	r2,r18,8
   1039c:	1004af26 	beq	r2,zero,1165c <___vfprintf_internal_r+0x18b8>
   103a0:	d9002e17 	ldw	r4,184(sp)
   103a4:	d9402e17 	ldw	r5,184(sp)
   103a8:	d8802e17 	ldw	r2,184(sp)
   103ac:	21000017 	ldw	r4,0(r4)
   103b0:	29400117 	ldw	r5,4(r5)
   103b4:	10800204 	addi	r2,r2,8
   103b8:	d9003615 	stw	r4,216(sp)
   103bc:	d9403815 	stw	r5,224(sp)
   103c0:	d8802e15 	stw	r2,184(sp)
   103c4:	d9003617 	ldw	r4,216(sp)
   103c8:	d9403817 	ldw	r5,224(sp)
   103cc:	da003d15 	stw	r8,244(sp)
   103d0:	04000044 	movi	r16,1
   103d4:	00169800 	call	16980 <__fpclassifyd>
   103d8:	da003d17 	ldw	r8,244(sp)
   103dc:	1404441e 	bne	r2,r16,114f0 <___vfprintf_internal_r+0x174c>
   103e0:	d9003617 	ldw	r4,216(sp)
   103e4:	d9403817 	ldw	r5,224(sp)
   103e8:	000d883a 	mov	r6,zero
   103ec:	000f883a 	mov	r7,zero
   103f0:	0007b8c0 	call	7b8c <__ledf2>
   103f4:	da003d17 	ldw	r8,244(sp)
   103f8:	1005e316 	blt	r2,zero,11b88 <___vfprintf_internal_r+0x1de4>
   103fc:	df002783 	ldbu	fp,158(sp)
   10400:	008011c4 	movi	r2,71
   10404:	1445580e 	bge	r2,r17,11968 <___vfprintf_internal_r+0x1bc4>
   10408:	040000b4 	movhi	r16,2
   1040c:	843a8904 	addi	r16,r16,-5596
   10410:	00c000c4 	movi	r3,3
   10414:	00bfdfc4 	movi	r2,-129
   10418:	d8c02915 	stw	r3,164(sp)
   1041c:	90a4703a 	and	r18,r18,r2
   10420:	d8c02b15 	stw	r3,172(sp)
   10424:	d8002a15 	stw	zero,168(sp)
   10428:	d8003215 	stw	zero,200(sp)
   1042c:	00003a06 	br	10518 <___vfprintf_internal_r+0x774>
   10430:	84000214 	ori	r16,r16,8
   10434:	ac400007 	ldb	r17,0(r21)
   10438:	003ebc06 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   1043c:	8025883a 	mov	r18,r16
   10440:	dc002903 	ldbu	r16,164(sp)
   10444:	e011883a 	mov	r8,fp
   10448:	84003fcc 	andi	r16,r16,255
   1044c:	8007001e 	bne	r16,zero,12050 <___vfprintf_internal_r+0x22ac>
   10450:	94800414 	ori	r18,r18,16
   10454:	9080080c 	andi	r2,r18,32
   10458:	1002fa26 	beq	r2,zero,11044 <___vfprintf_internal_r+0x12a0>
   1045c:	d9002e17 	ldw	r4,184(sp)
   10460:	d9402a17 	ldw	r5,168(sp)
   10464:	d8002785 	stb	zero,158(sp)
   10468:	20800204 	addi	r2,r4,8
   1046c:	24c00017 	ldw	r19,0(r4)
   10470:	25800117 	ldw	r22,4(r4)
   10474:	2804b116 	blt	r5,zero,1173c <___vfprintf_internal_r+0x1998>
   10478:	013fdfc4 	movi	r4,-129
   1047c:	9d86b03a 	or	r3,r19,r22
   10480:	d8802e15 	stw	r2,184(sp)
   10484:	9124703a 	and	r18,r18,r4
   10488:	1802fb1e 	bne	r3,zero,11078 <___vfprintf_internal_r+0x12d4>
   1048c:	d8c02a17 	ldw	r3,168(sp)
   10490:	0039883a 	mov	fp,zero
   10494:	1805e526 	beq	r3,zero,11c2c <___vfprintf_internal_r+0x1e88>
   10498:	0027883a 	mov	r19,zero
   1049c:	002d883a 	mov	r22,zero
   104a0:	dc001e04 	addi	r16,sp,120
   104a4:	9806d0fa 	srli	r3,r19,3
   104a8:	b008977a 	slli	r4,r22,29
   104ac:	b02cd0fa 	srli	r22,r22,3
   104b0:	9cc001cc 	andi	r19,r19,7
   104b4:	98800c04 	addi	r2,r19,48
   104b8:	843fffc4 	addi	r16,r16,-1
   104bc:	20e6b03a 	or	r19,r4,r3
   104c0:	80800005 	stb	r2,0(r16)
   104c4:	9d86b03a 	or	r3,r19,r22
   104c8:	183ff61e 	bne	r3,zero,104a4 <__alt_mem_nios_system_shared_memory+0xfffd04a4>
   104cc:	90c0004c 	andi	r3,r18,1
   104d0:	18014126 	beq	r3,zero,109d8 <___vfprintf_internal_r+0xc34>
   104d4:	10803fcc 	andi	r2,r2,255
   104d8:	1080201c 	xori	r2,r2,128
   104dc:	10bfe004 	addi	r2,r2,-128
   104e0:	00c00c04 	movi	r3,48
   104e4:	10c13c26 	beq	r2,r3,109d8 <___vfprintf_internal_r+0xc34>
   104e8:	80ffffc5 	stb	r3,-1(r16)
   104ec:	d8c02817 	ldw	r3,160(sp)
   104f0:	80bfffc4 	addi	r2,r16,-1
   104f4:	1021883a 	mov	r16,r2
   104f8:	1887c83a 	sub	r3,r3,r2
   104fc:	d8c02b15 	stw	r3,172(sp)
   10500:	d8802b17 	ldw	r2,172(sp)
   10504:	d9002a17 	ldw	r4,168(sp)
   10508:	1100010e 	bge	r2,r4,10510 <___vfprintf_internal_r+0x76c>
   1050c:	2005883a 	mov	r2,r4
   10510:	d8802915 	stw	r2,164(sp)
   10514:	d8003215 	stw	zero,200(sp)
   10518:	e7003fcc 	andi	fp,fp,255
   1051c:	e700201c 	xori	fp,fp,128
   10520:	e73fe004 	addi	fp,fp,-128
   10524:	e0000326 	beq	fp,zero,10534 <___vfprintf_internal_r+0x790>
   10528:	d8c02917 	ldw	r3,164(sp)
   1052c:	18c00044 	addi	r3,r3,1
   10530:	d8c02915 	stw	r3,164(sp)
   10534:	90c0008c 	andi	r3,r18,2
   10538:	d8c02c15 	stw	r3,176(sp)
   1053c:	18000326 	beq	r3,zero,1054c <___vfprintf_internal_r+0x7a8>
   10540:	d8c02917 	ldw	r3,164(sp)
   10544:	18c00084 	addi	r3,r3,2
   10548:	d8c02915 	stw	r3,164(sp)
   1054c:	90c0210c 	andi	r3,r18,132
   10550:	d8c03015 	stw	r3,192(sp)
   10554:	1801c51e 	bne	r3,zero,10c6c <___vfprintf_internal_r+0xec8>
   10558:	d9003117 	ldw	r4,196(sp)
   1055c:	d8c02917 	ldw	r3,164(sp)
   10560:	20e7c83a 	sub	r19,r4,r3
   10564:	04c1c10e 	bge	zero,r19,10c6c <___vfprintf_internal_r+0xec8>
   10568:	02400404 	movi	r9,16
   1056c:	d8c02017 	ldw	r3,128(sp)
   10570:	d8801f17 	ldw	r2,124(sp)
   10574:	4cc52f0e 	bge	r9,r19,11a34 <___vfprintf_internal_r+0x1c90>
   10578:	014000b4 	movhi	r5,2
   1057c:	297aa3c4 	addi	r5,r5,-5489
   10580:	dc403b15 	stw	r17,236(sp)
   10584:	d9403515 	stw	r5,212(sp)
   10588:	9823883a 	mov	r17,r19
   1058c:	482d883a 	mov	r22,r9
   10590:	9027883a 	mov	r19,r18
   10594:	070001c4 	movi	fp,7
   10598:	8025883a 	mov	r18,r16
   1059c:	dc002d17 	ldw	r16,180(sp)
   105a0:	00000306 	br	105b0 <___vfprintf_internal_r+0x80c>
   105a4:	8c7ffc04 	addi	r17,r17,-16
   105a8:	42000204 	addi	r8,r8,8
   105ac:	b440130e 	bge	r22,r17,105fc <___vfprintf_internal_r+0x858>
   105b0:	010000b4 	movhi	r4,2
   105b4:	18c00404 	addi	r3,r3,16
   105b8:	10800044 	addi	r2,r2,1
   105bc:	213aa3c4 	addi	r4,r4,-5489
   105c0:	41000015 	stw	r4,0(r8)
   105c4:	45800115 	stw	r22,4(r8)
   105c8:	d8c02015 	stw	r3,128(sp)
   105cc:	d8801f15 	stw	r2,124(sp)
   105d0:	e0bff40e 	bge	fp,r2,105a4 <__alt_mem_nios_system_shared_memory+0xfffd05a4>
   105d4:	d9801e04 	addi	r6,sp,120
   105d8:	b80b883a 	mov	r5,r23
   105dc:	8009883a 	mov	r4,r16
   105e0:	00182940 	call	18294 <__sprint_r>
   105e4:	103ef31e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   105e8:	8c7ffc04 	addi	r17,r17,-16
   105ec:	d8c02017 	ldw	r3,128(sp)
   105f0:	d8801f17 	ldw	r2,124(sp)
   105f4:	da000404 	addi	r8,sp,16
   105f8:	b47fed16 	blt	r22,r17,105b0 <__alt_mem_nios_system_shared_memory+0xfffd05b0>
   105fc:	9021883a 	mov	r16,r18
   10600:	9825883a 	mov	r18,r19
   10604:	8827883a 	mov	r19,r17
   10608:	dc403b17 	ldw	r17,236(sp)
   1060c:	d9403517 	ldw	r5,212(sp)
   10610:	98c7883a 	add	r3,r19,r3
   10614:	10800044 	addi	r2,r2,1
   10618:	41400015 	stw	r5,0(r8)
   1061c:	44c00115 	stw	r19,4(r8)
   10620:	d8c02015 	stw	r3,128(sp)
   10624:	d8801f15 	stw	r2,124(sp)
   10628:	010001c4 	movi	r4,7
   1062c:	2082c516 	blt	r4,r2,11144 <___vfprintf_internal_r+0x13a0>
   10630:	df002787 	ldb	fp,158(sp)
   10634:	42000204 	addi	r8,r8,8
   10638:	e0000c26 	beq	fp,zero,1066c <___vfprintf_internal_r+0x8c8>
   1063c:	d8801f17 	ldw	r2,124(sp)
   10640:	d9002784 	addi	r4,sp,158
   10644:	18c00044 	addi	r3,r3,1
   10648:	10800044 	addi	r2,r2,1
   1064c:	41000015 	stw	r4,0(r8)
   10650:	01000044 	movi	r4,1
   10654:	41000115 	stw	r4,4(r8)
   10658:	d8c02015 	stw	r3,128(sp)
   1065c:	d8801f15 	stw	r2,124(sp)
   10660:	010001c4 	movi	r4,7
   10664:	20825e16 	blt	r4,r2,10fe0 <___vfprintf_internal_r+0x123c>
   10668:	42000204 	addi	r8,r8,8
   1066c:	d8802c17 	ldw	r2,176(sp)
   10670:	10000c26 	beq	r2,zero,106a4 <___vfprintf_internal_r+0x900>
   10674:	d8801f17 	ldw	r2,124(sp)
   10678:	d9002704 	addi	r4,sp,156
   1067c:	18c00084 	addi	r3,r3,2
   10680:	10800044 	addi	r2,r2,1
   10684:	41000015 	stw	r4,0(r8)
   10688:	01000084 	movi	r4,2
   1068c:	41000115 	stw	r4,4(r8)
   10690:	d8c02015 	stw	r3,128(sp)
   10694:	d8801f15 	stw	r2,124(sp)
   10698:	010001c4 	movi	r4,7
   1069c:	20825816 	blt	r4,r2,11000 <___vfprintf_internal_r+0x125c>
   106a0:	42000204 	addi	r8,r8,8
   106a4:	d9003017 	ldw	r4,192(sp)
   106a8:	00802004 	movi	r2,128
   106ac:	2081bb26 	beq	r4,r2,10d9c <___vfprintf_internal_r+0xff8>
   106b0:	d9402a17 	ldw	r5,168(sp)
   106b4:	d8802b17 	ldw	r2,172(sp)
   106b8:	28adc83a 	sub	r22,r5,r2
   106bc:	0580310e 	bge	zero,r22,10784 <___vfprintf_internal_r+0x9e0>
   106c0:	07000404 	movi	fp,16
   106c4:	d8801f17 	ldw	r2,124(sp)
   106c8:	e584360e 	bge	fp,r22,117a4 <___vfprintf_internal_r+0x1a00>
   106cc:	014000b4 	movhi	r5,2
   106d0:	297a9fc4 	addi	r5,r5,-5505
   106d4:	dc402a15 	stw	r17,168(sp)
   106d8:	d9402c15 	stw	r5,176(sp)
   106dc:	b023883a 	mov	r17,r22
   106e0:	04c001c4 	movi	r19,7
   106e4:	a82d883a 	mov	r22,r21
   106e8:	902b883a 	mov	r21,r18
   106ec:	8025883a 	mov	r18,r16
   106f0:	dc002d17 	ldw	r16,180(sp)
   106f4:	00000306 	br	10704 <___vfprintf_internal_r+0x960>
   106f8:	8c7ffc04 	addi	r17,r17,-16
   106fc:	42000204 	addi	r8,r8,8
   10700:	e440110e 	bge	fp,r17,10748 <___vfprintf_internal_r+0x9a4>
   10704:	18c00404 	addi	r3,r3,16
   10708:	10800044 	addi	r2,r2,1
   1070c:	45000015 	stw	r20,0(r8)
   10710:	47000115 	stw	fp,4(r8)
   10714:	d8c02015 	stw	r3,128(sp)
   10718:	d8801f15 	stw	r2,124(sp)
   1071c:	98bff60e 	bge	r19,r2,106f8 <__alt_mem_nios_system_shared_memory+0xfffd06f8>
   10720:	d9801e04 	addi	r6,sp,120
   10724:	b80b883a 	mov	r5,r23
   10728:	8009883a 	mov	r4,r16
   1072c:	00182940 	call	18294 <__sprint_r>
   10730:	103ea01e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10734:	8c7ffc04 	addi	r17,r17,-16
   10738:	d8c02017 	ldw	r3,128(sp)
   1073c:	d8801f17 	ldw	r2,124(sp)
   10740:	da000404 	addi	r8,sp,16
   10744:	e47fef16 	blt	fp,r17,10704 <__alt_mem_nios_system_shared_memory+0xfffd0704>
   10748:	9021883a 	mov	r16,r18
   1074c:	a825883a 	mov	r18,r21
   10750:	b02b883a 	mov	r21,r22
   10754:	882d883a 	mov	r22,r17
   10758:	dc402a17 	ldw	r17,168(sp)
   1075c:	d9002c17 	ldw	r4,176(sp)
   10760:	1d87883a 	add	r3,r3,r22
   10764:	10800044 	addi	r2,r2,1
   10768:	41000015 	stw	r4,0(r8)
   1076c:	45800115 	stw	r22,4(r8)
   10770:	d8c02015 	stw	r3,128(sp)
   10774:	d8801f15 	stw	r2,124(sp)
   10778:	010001c4 	movi	r4,7
   1077c:	20821016 	blt	r4,r2,10fc0 <___vfprintf_internal_r+0x121c>
   10780:	42000204 	addi	r8,r8,8
   10784:	9080400c 	andi	r2,r18,256
   10788:	10013a1e 	bne	r2,zero,10c74 <___vfprintf_internal_r+0xed0>
   1078c:	d9402b17 	ldw	r5,172(sp)
   10790:	d8801f17 	ldw	r2,124(sp)
   10794:	44000015 	stw	r16,0(r8)
   10798:	1947883a 	add	r3,r3,r5
   1079c:	10800044 	addi	r2,r2,1
   107a0:	41400115 	stw	r5,4(r8)
   107a4:	d8c02015 	stw	r3,128(sp)
   107a8:	d8801f15 	stw	r2,124(sp)
   107ac:	010001c4 	movi	r4,7
   107b0:	2081f516 	blt	r4,r2,10f88 <___vfprintf_internal_r+0x11e4>
   107b4:	42000204 	addi	r8,r8,8
   107b8:	9480010c 	andi	r18,r18,4
   107bc:	90003226 	beq	r18,zero,10888 <___vfprintf_internal_r+0xae4>
   107c0:	d9403117 	ldw	r5,196(sp)
   107c4:	d8802917 	ldw	r2,164(sp)
   107c8:	28a1c83a 	sub	r16,r5,r2
   107cc:	04002e0e 	bge	zero,r16,10888 <___vfprintf_internal_r+0xae4>
   107d0:	04400404 	movi	r17,16
   107d4:	d8801f17 	ldw	r2,124(sp)
   107d8:	8c04c40e 	bge	r17,r16,11aec <___vfprintf_internal_r+0x1d48>
   107dc:	014000b4 	movhi	r5,2
   107e0:	297aa3c4 	addi	r5,r5,-5489
   107e4:	d9403515 	stw	r5,212(sp)
   107e8:	048001c4 	movi	r18,7
   107ec:	dcc02d17 	ldw	r19,180(sp)
   107f0:	00000306 	br	10800 <___vfprintf_internal_r+0xa5c>
   107f4:	843ffc04 	addi	r16,r16,-16
   107f8:	42000204 	addi	r8,r8,8
   107fc:	8c00130e 	bge	r17,r16,1084c <___vfprintf_internal_r+0xaa8>
   10800:	010000b4 	movhi	r4,2
   10804:	18c00404 	addi	r3,r3,16
   10808:	10800044 	addi	r2,r2,1
   1080c:	213aa3c4 	addi	r4,r4,-5489
   10810:	41000015 	stw	r4,0(r8)
   10814:	44400115 	stw	r17,4(r8)
   10818:	d8c02015 	stw	r3,128(sp)
   1081c:	d8801f15 	stw	r2,124(sp)
   10820:	90bff40e 	bge	r18,r2,107f4 <__alt_mem_nios_system_shared_memory+0xfffd07f4>
   10824:	d9801e04 	addi	r6,sp,120
   10828:	b80b883a 	mov	r5,r23
   1082c:	9809883a 	mov	r4,r19
   10830:	00182940 	call	18294 <__sprint_r>
   10834:	103e5f1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10838:	843ffc04 	addi	r16,r16,-16
   1083c:	d8c02017 	ldw	r3,128(sp)
   10840:	d8801f17 	ldw	r2,124(sp)
   10844:	da000404 	addi	r8,sp,16
   10848:	8c3fed16 	blt	r17,r16,10800 <__alt_mem_nios_system_shared_memory+0xfffd0800>
   1084c:	d9403517 	ldw	r5,212(sp)
   10850:	1c07883a 	add	r3,r3,r16
   10854:	10800044 	addi	r2,r2,1
   10858:	41400015 	stw	r5,0(r8)
   1085c:	44000115 	stw	r16,4(r8)
   10860:	d8c02015 	stw	r3,128(sp)
   10864:	d8801f15 	stw	r2,124(sp)
   10868:	010001c4 	movi	r4,7
   1086c:	2080060e 	bge	r4,r2,10888 <___vfprintf_internal_r+0xae4>
   10870:	d9002d17 	ldw	r4,180(sp)
   10874:	d9801e04 	addi	r6,sp,120
   10878:	b80b883a 	mov	r5,r23
   1087c:	00182940 	call	18294 <__sprint_r>
   10880:	103e4c1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10884:	d8c02017 	ldw	r3,128(sp)
   10888:	d8803117 	ldw	r2,196(sp)
   1088c:	d9002917 	ldw	r4,164(sp)
   10890:	1100010e 	bge	r2,r4,10898 <___vfprintf_internal_r+0xaf4>
   10894:	2005883a 	mov	r2,r4
   10898:	d9402f17 	ldw	r5,188(sp)
   1089c:	288b883a 	add	r5,r5,r2
   108a0:	d9402f15 	stw	r5,188(sp)
   108a4:	1801c01e 	bne	r3,zero,10fa8 <___vfprintf_internal_r+0x1204>
   108a8:	a8800007 	ldb	r2,0(r21)
   108ac:	d8001f15 	stw	zero,124(sp)
   108b0:	da000404 	addi	r8,sp,16
   108b4:	103d751e 	bne	r2,zero,fe8c <__alt_mem_nios_system_shared_memory+0xfffcfe8c>
   108b8:	a823883a 	mov	r17,r21
   108bc:	003d8b06 	br	feec <__alt_mem_nios_system_shared_memory+0xfffcfeec>
   108c0:	8025883a 	mov	r18,r16
   108c4:	dc002903 	ldbu	r16,164(sp)
   108c8:	e011883a 	mov	r8,fp
   108cc:	84003fcc 	andi	r16,r16,255
   108d0:	8005e51e 	bne	r16,zero,12068 <___vfprintf_internal_r+0x22c4>
   108d4:	94800414 	ori	r18,r18,16
   108d8:	9080080c 	andi	r2,r18,32
   108dc:	10022b26 	beq	r2,zero,1118c <___vfprintf_internal_r+0x13e8>
   108e0:	d9002e17 	ldw	r4,184(sp)
   108e4:	d9402a17 	ldw	r5,168(sp)
   108e8:	d8002785 	stb	zero,158(sp)
   108ec:	20c00204 	addi	r3,r4,8
   108f0:	24c00017 	ldw	r19,0(r4)
   108f4:	25800117 	ldw	r22,4(r4)
   108f8:	28042e16 	blt	r5,zero,119b4 <___vfprintf_internal_r+0x1c10>
   108fc:	013fdfc4 	movi	r4,-129
   10900:	9d84b03a 	or	r2,r19,r22
   10904:	d8c02e15 	stw	r3,184(sp)
   10908:	9124703a 	and	r18,r18,r4
   1090c:	0039883a 	mov	fp,zero
   10910:	103e801e 	bne	r2,zero,10314 <__alt_mem_nios_system_shared_memory+0xfffd0314>
   10914:	d9002a17 	ldw	r4,168(sp)
   10918:	2002e01e 	bne	r4,zero,1149c <___vfprintf_internal_r+0x16f8>
   1091c:	d8002a15 	stw	zero,168(sp)
   10920:	d8002b15 	stw	zero,172(sp)
   10924:	dc001e04 	addi	r16,sp,120
   10928:	003ef506 	br	10500 <__alt_mem_nios_system_shared_memory+0xfffd0500>
   1092c:	8025883a 	mov	r18,r16
   10930:	dc002903 	ldbu	r16,164(sp)
   10934:	e011883a 	mov	r8,fp
   10938:	84003fcc 	andi	r16,r16,255
   1093c:	8005ba1e 	bne	r16,zero,12028 <___vfprintf_internal_r+0x2284>
   10940:	010000b4 	movhi	r4,2
   10944:	213a8c04 	addi	r4,r4,-5584
   10948:	d9003915 	stw	r4,228(sp)
   1094c:	9080080c 	andi	r2,r18,32
   10950:	10006126 	beq	r2,zero,10ad8 <___vfprintf_internal_r+0xd34>
   10954:	d9402e17 	ldw	r5,184(sp)
   10958:	2cc00017 	ldw	r19,0(r5)
   1095c:	2d800117 	ldw	r22,4(r5)
   10960:	29400204 	addi	r5,r5,8
   10964:	d9402e15 	stw	r5,184(sp)
   10968:	9080004c 	andi	r2,r18,1
   1096c:	1001ac26 	beq	r2,zero,11020 <___vfprintf_internal_r+0x127c>
   10970:	9d84b03a 	or	r2,r19,r22
   10974:	10038526 	beq	r2,zero,1178c <___vfprintf_internal_r+0x19e8>
   10978:	d8c02a17 	ldw	r3,168(sp)
   1097c:	00800c04 	movi	r2,48
   10980:	d8802705 	stb	r2,156(sp)
   10984:	dc402745 	stb	r17,157(sp)
   10988:	d8002785 	stb	zero,158(sp)
   1098c:	90800094 	ori	r2,r18,2
   10990:	18047916 	blt	r3,zero,11b78 <___vfprintf_internal_r+0x1dd4>
   10994:	00bfdfc4 	movi	r2,-129
   10998:	90a4703a 	and	r18,r18,r2
   1099c:	94800094 	ori	r18,r18,2
   109a0:	0039883a 	mov	fp,zero
   109a4:	d9003917 	ldw	r4,228(sp)
   109a8:	dc001e04 	addi	r16,sp,120
   109ac:	988003cc 	andi	r2,r19,15
   109b0:	b006973a 	slli	r3,r22,28
   109b4:	2085883a 	add	r2,r4,r2
   109b8:	9826d13a 	srli	r19,r19,4
   109bc:	10800003 	ldbu	r2,0(r2)
   109c0:	b02cd13a 	srli	r22,r22,4
   109c4:	843fffc4 	addi	r16,r16,-1
   109c8:	1ce6b03a 	or	r19,r3,r19
   109cc:	80800005 	stb	r2,0(r16)
   109d0:	9d84b03a 	or	r2,r19,r22
   109d4:	103ff51e 	bne	r2,zero,109ac <__alt_mem_nios_system_shared_memory+0xfffd09ac>
   109d8:	d8c02817 	ldw	r3,160(sp)
   109dc:	1c07c83a 	sub	r3,r3,r16
   109e0:	d8c02b15 	stw	r3,172(sp)
   109e4:	003ec606 	br	10500 <__alt_mem_nios_system_shared_memory+0xfffd0500>
   109e8:	8025883a 	mov	r18,r16
   109ec:	dc002903 	ldbu	r16,164(sp)
   109f0:	e011883a 	mov	r8,fp
   109f4:	84003fcc 	andi	r16,r16,255
   109f8:	803e9626 	beq	r16,zero,10454 <__alt_mem_nios_system_shared_memory+0xfffd0454>
   109fc:	d8c02b03 	ldbu	r3,172(sp)
   10a00:	d8c02785 	stb	r3,158(sp)
   10a04:	003e9306 	br	10454 <__alt_mem_nios_system_shared_memory+0xfffd0454>
   10a08:	00c00044 	movi	r3,1
   10a0c:	d8c02905 	stb	r3,164(sp)
   10a10:	00c00ac4 	movi	r3,43
   10a14:	d8c02b05 	stb	r3,172(sp)
   10a18:	ac400007 	ldb	r17,0(r21)
   10a1c:	003d4306 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10a20:	84000814 	ori	r16,r16,32
   10a24:	ac400007 	ldb	r17,0(r21)
   10a28:	003d4006 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10a2c:	d8802e17 	ldw	r2,184(sp)
   10a30:	8025883a 	mov	r18,r16
   10a34:	d8002785 	stb	zero,158(sp)
   10a38:	14000017 	ldw	r16,0(r2)
   10a3c:	e011883a 	mov	r8,fp
   10a40:	14c00104 	addi	r19,r2,4
   10a44:	80042d26 	beq	r16,zero,11afc <___vfprintf_internal_r+0x1d58>
   10a48:	d8c02a17 	ldw	r3,168(sp)
   10a4c:	1803e416 	blt	r3,zero,119e0 <___vfprintf_internal_r+0x1c3c>
   10a50:	180d883a 	mov	r6,r3
   10a54:	000b883a 	mov	r5,zero
   10a58:	8009883a 	mov	r4,r16
   10a5c:	df003d15 	stw	fp,244(sp)
   10a60:	000afc80 	call	afc8 <memchr>
   10a64:	da003d17 	ldw	r8,244(sp)
   10a68:	10046826 	beq	r2,zero,11c0c <___vfprintf_internal_r+0x1e68>
   10a6c:	1405c83a 	sub	r2,r2,r16
   10a70:	d8802b15 	stw	r2,172(sp)
   10a74:	1003e016 	blt	r2,zero,119f8 <___vfprintf_internal_r+0x1c54>
   10a78:	df002783 	ldbu	fp,158(sp)
   10a7c:	d8802915 	stw	r2,164(sp)
   10a80:	dcc02e15 	stw	r19,184(sp)
   10a84:	d8002a15 	stw	zero,168(sp)
   10a88:	d8003215 	stw	zero,200(sp)
   10a8c:	003ea206 	br	10518 <__alt_mem_nios_system_shared_memory+0xfffd0518>
   10a90:	8025883a 	mov	r18,r16
   10a94:	dc002903 	ldbu	r16,164(sp)
   10a98:	e011883a 	mov	r8,fp
   10a9c:	84003fcc 	andi	r16,r16,255
   10aa0:	803f8d26 	beq	r16,zero,108d8 <__alt_mem_nios_system_shared_memory+0xfffd08d8>
   10aa4:	d8c02b03 	ldbu	r3,172(sp)
   10aa8:	d8c02785 	stb	r3,158(sp)
   10aac:	003f8a06 	br	108d8 <__alt_mem_nios_system_shared_memory+0xfffd08d8>
   10ab0:	8025883a 	mov	r18,r16
   10ab4:	dc002903 	ldbu	r16,164(sp)
   10ab8:	e011883a 	mov	r8,fp
   10abc:	84003fcc 	andi	r16,r16,255
   10ac0:	8005661e 	bne	r16,zero,1205c <___vfprintf_internal_r+0x22b8>
   10ac4:	010000b4 	movhi	r4,2
   10ac8:	213a9104 	addi	r4,r4,-5564
   10acc:	d9003915 	stw	r4,228(sp)
   10ad0:	9080080c 	andi	r2,r18,32
   10ad4:	103f9f1e 	bne	r2,zero,10954 <__alt_mem_nios_system_shared_memory+0xfffd0954>
   10ad8:	9080040c 	andi	r2,r18,16
   10adc:	1002eb26 	beq	r2,zero,1168c <___vfprintf_internal_r+0x18e8>
   10ae0:	d8802e17 	ldw	r2,184(sp)
   10ae4:	002d883a 	mov	r22,zero
   10ae8:	14c00017 	ldw	r19,0(r2)
   10aec:	10800104 	addi	r2,r2,4
   10af0:	d8802e15 	stw	r2,184(sp)
   10af4:	003f9c06 	br	10968 <__alt_mem_nios_system_shared_memory+0xfffd0968>
   10af8:	d8802b07 	ldb	r2,172(sp)
   10afc:	1002e11e 	bne	r2,zero,11684 <___vfprintf_internal_r+0x18e0>
   10b00:	00c00044 	movi	r3,1
   10b04:	d8c02905 	stb	r3,164(sp)
   10b08:	00c00804 	movi	r3,32
   10b0c:	d8c02b05 	stb	r3,172(sp)
   10b10:	ac400007 	ldb	r17,0(r21)
   10b14:	003d0506 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10b18:	84000054 	ori	r16,r16,1
   10b1c:	ac400007 	ldb	r17,0(r21)
   10b20:	003d0206 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10b24:	8025883a 	mov	r18,r16
   10b28:	dc002903 	ldbu	r16,164(sp)
   10b2c:	e011883a 	mov	r8,fp
   10b30:	84003fcc 	andi	r16,r16,255
   10b34:	803de726 	beq	r16,zero,102d4 <__alt_mem_nios_system_shared_memory+0xfffd02d4>
   10b38:	d8c02b03 	ldbu	r3,172(sp)
   10b3c:	d8c02785 	stb	r3,158(sp)
   10b40:	003de406 	br	102d4 <__alt_mem_nios_system_shared_memory+0xfffd02d4>
   10b44:	84001014 	ori	r16,r16,64
   10b48:	ac400007 	ldb	r17,0(r21)
   10b4c:	003cf706 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10b50:	ac400007 	ldb	r17,0(r21)
   10b54:	00801b04 	movi	r2,108
   10b58:	88838f26 	beq	r17,r2,11998 <___vfprintf_internal_r+0x1bf4>
   10b5c:	84000414 	ori	r16,r16,16
   10b60:	003cf206 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   10b64:	8025883a 	mov	r18,r16
   10b68:	dc002903 	ldbu	r16,164(sp)
   10b6c:	e011883a 	mov	r8,fp
   10b70:	84003fcc 	andi	r16,r16,255
   10b74:	80053f1e 	bne	r16,zero,12074 <___vfprintf_internal_r+0x22d0>
   10b78:	9080080c 	andi	r2,r18,32
   10b7c:	1002d226 	beq	r2,zero,116c8 <___vfprintf_internal_r+0x1924>
   10b80:	d9002e17 	ldw	r4,184(sp)
   10b84:	d9402f17 	ldw	r5,188(sp)
   10b88:	20800017 	ldw	r2,0(r4)
   10b8c:	2807d7fa 	srai	r3,r5,31
   10b90:	21000104 	addi	r4,r4,4
   10b94:	d9002e15 	stw	r4,184(sp)
   10b98:	11400015 	stw	r5,0(r2)
   10b9c:	10c00115 	stw	r3,4(r2)
   10ba0:	003cb806 	br	fe84 <__alt_mem_nios_system_shared_memory+0xfffcfe84>
   10ba4:	d8c02e17 	ldw	r3,184(sp)
   10ba8:	d9002e17 	ldw	r4,184(sp)
   10bac:	8025883a 	mov	r18,r16
   10bb0:	18800017 	ldw	r2,0(r3)
   10bb4:	21000104 	addi	r4,r4,4
   10bb8:	00c00044 	movi	r3,1
   10bbc:	e011883a 	mov	r8,fp
   10bc0:	d8c02915 	stw	r3,164(sp)
   10bc4:	d8002785 	stb	zero,158(sp)
   10bc8:	d8801405 	stb	r2,80(sp)
   10bcc:	d9002e15 	stw	r4,184(sp)
   10bd0:	d8c02b15 	stw	r3,172(sp)
   10bd4:	d8002a15 	stw	zero,168(sp)
   10bd8:	d8003215 	stw	zero,200(sp)
   10bdc:	dc001404 	addi	r16,sp,80
   10be0:	0039883a 	mov	fp,zero
   10be4:	003e5306 	br	10534 <__alt_mem_nios_system_shared_memory+0xfffd0534>
   10be8:	010000b4 	movhi	r4,2
   10bec:	213a9104 	addi	r4,r4,-5564
   10bf0:	0039883a 	mov	fp,zero
   10bf4:	d9003915 	stw	r4,228(sp)
   10bf8:	04401e04 	movi	r17,120
   10bfc:	003f6906 	br	109a4 <__alt_mem_nios_system_shared_memory+0xfffd09a4>
   10c00:	8025883a 	mov	r18,r16
   10c04:	dc002903 	ldbu	r16,164(sp)
   10c08:	e011883a 	mov	r8,fp
   10c0c:	84003fcc 	andi	r16,r16,255
   10c10:	8005081e 	bne	r16,zero,12034 <___vfprintf_internal_r+0x2290>
   10c14:	883d6126 	beq	r17,zero,1019c <__alt_mem_nios_system_shared_memory+0xfffd019c>
   10c18:	00c00044 	movi	r3,1
   10c1c:	d8c02915 	stw	r3,164(sp)
   10c20:	dc401405 	stb	r17,80(sp)
   10c24:	d8002785 	stb	zero,158(sp)
   10c28:	003fe906 	br	10bd0 <__alt_mem_nios_system_shared_memory+0xfffd0bd0>
   10c2c:	014000b4 	movhi	r5,2
   10c30:	297a9104 	addi	r5,r5,-5564
   10c34:	d9403915 	stw	r5,228(sp)
   10c38:	d8c02e15 	stw	r3,184(sp)
   10c3c:	1025883a 	mov	r18,r2
   10c40:	04401e04 	movi	r17,120
   10c44:	9d84b03a 	or	r2,r19,r22
   10c48:	1000fc1e 	bne	r2,zero,1103c <___vfprintf_internal_r+0x1298>
   10c4c:	0039883a 	mov	fp,zero
   10c50:	00800084 	movi	r2,2
   10c54:	10803fcc 	andi	r2,r2,255
   10c58:	00c00044 	movi	r3,1
   10c5c:	10c20f26 	beq	r2,r3,1149c <___vfprintf_internal_r+0x16f8>
   10c60:	00c00084 	movi	r3,2
   10c64:	10fd3326 	beq	r2,r3,10134 <__alt_mem_nios_system_shared_memory+0xfffd0134>
   10c68:	003e0b06 	br	10498 <__alt_mem_nios_system_shared_memory+0xfffd0498>
   10c6c:	d8c02017 	ldw	r3,128(sp)
   10c70:	003e7106 	br	10638 <__alt_mem_nios_system_shared_memory+0xfffd0638>
   10c74:	00801944 	movi	r2,101
   10c78:	14407e0e 	bge	r2,r17,10e74 <___vfprintf_internal_r+0x10d0>
   10c7c:	d9003617 	ldw	r4,216(sp)
   10c80:	d9403817 	ldw	r5,224(sp)
   10c84:	000d883a 	mov	r6,zero
   10c88:	000f883a 	mov	r7,zero
   10c8c:	d8c03c15 	stw	r3,240(sp)
   10c90:	da003d15 	stw	r8,244(sp)
   10c94:	0007a280 	call	7a28 <__eqdf2>
   10c98:	d8c03c17 	ldw	r3,240(sp)
   10c9c:	da003d17 	ldw	r8,244(sp)
   10ca0:	1000f71e 	bne	r2,zero,11080 <___vfprintf_internal_r+0x12dc>
   10ca4:	d8801f17 	ldw	r2,124(sp)
   10ca8:	010000b4 	movhi	r4,2
   10cac:	21397504 	addi	r4,r4,-6700
   10cb0:	18c00044 	addi	r3,r3,1
   10cb4:	10800044 	addi	r2,r2,1
   10cb8:	41000015 	stw	r4,0(r8)
   10cbc:	01000044 	movi	r4,1
   10cc0:	41000115 	stw	r4,4(r8)
   10cc4:	d8c02015 	stw	r3,128(sp)
   10cc8:	d8801f15 	stw	r2,124(sp)
   10ccc:	010001c4 	movi	r4,7
   10cd0:	2082b816 	blt	r4,r2,117b4 <___vfprintf_internal_r+0x1a10>
   10cd4:	42000204 	addi	r8,r8,8
   10cd8:	d8802617 	ldw	r2,152(sp)
   10cdc:	d9403317 	ldw	r5,204(sp)
   10ce0:	11400216 	blt	r2,r5,10cec <___vfprintf_internal_r+0xf48>
   10ce4:	9080004c 	andi	r2,r18,1
   10ce8:	103eb326 	beq	r2,zero,107b8 <__alt_mem_nios_system_shared_memory+0xfffd07b8>
   10cec:	d8803717 	ldw	r2,220(sp)
   10cf0:	d9003417 	ldw	r4,208(sp)
   10cf4:	d9403717 	ldw	r5,220(sp)
   10cf8:	1887883a 	add	r3,r3,r2
   10cfc:	d8801f17 	ldw	r2,124(sp)
   10d00:	41000015 	stw	r4,0(r8)
   10d04:	41400115 	stw	r5,4(r8)
   10d08:	10800044 	addi	r2,r2,1
   10d0c:	d8c02015 	stw	r3,128(sp)
   10d10:	d8801f15 	stw	r2,124(sp)
   10d14:	010001c4 	movi	r4,7
   10d18:	20832916 	blt	r4,r2,119c0 <___vfprintf_internal_r+0x1c1c>
   10d1c:	42000204 	addi	r8,r8,8
   10d20:	d8803317 	ldw	r2,204(sp)
   10d24:	143fffc4 	addi	r16,r2,-1
   10d28:	043ea30e 	bge	zero,r16,107b8 <__alt_mem_nios_system_shared_memory+0xfffd07b8>
   10d2c:	04400404 	movi	r17,16
   10d30:	d8801f17 	ldw	r2,124(sp)
   10d34:	8c00880e 	bge	r17,r16,10f58 <___vfprintf_internal_r+0x11b4>
   10d38:	014000b4 	movhi	r5,2
   10d3c:	297a9fc4 	addi	r5,r5,-5505
   10d40:	d9402c15 	stw	r5,176(sp)
   10d44:	058001c4 	movi	r22,7
   10d48:	dcc02d17 	ldw	r19,180(sp)
   10d4c:	00000306 	br	10d5c <___vfprintf_internal_r+0xfb8>
   10d50:	42000204 	addi	r8,r8,8
   10d54:	843ffc04 	addi	r16,r16,-16
   10d58:	8c00820e 	bge	r17,r16,10f64 <___vfprintf_internal_r+0x11c0>
   10d5c:	18c00404 	addi	r3,r3,16
   10d60:	10800044 	addi	r2,r2,1
   10d64:	45000015 	stw	r20,0(r8)
   10d68:	44400115 	stw	r17,4(r8)
   10d6c:	d8c02015 	stw	r3,128(sp)
   10d70:	d8801f15 	stw	r2,124(sp)
   10d74:	b0bff60e 	bge	r22,r2,10d50 <__alt_mem_nios_system_shared_memory+0xfffd0d50>
   10d78:	d9801e04 	addi	r6,sp,120
   10d7c:	b80b883a 	mov	r5,r23
   10d80:	9809883a 	mov	r4,r19
   10d84:	00182940 	call	18294 <__sprint_r>
   10d88:	103d0a1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10d8c:	d8c02017 	ldw	r3,128(sp)
   10d90:	d8801f17 	ldw	r2,124(sp)
   10d94:	da000404 	addi	r8,sp,16
   10d98:	003fee06 	br	10d54 <__alt_mem_nios_system_shared_memory+0xfffd0d54>
   10d9c:	d9403117 	ldw	r5,196(sp)
   10da0:	d8802917 	ldw	r2,164(sp)
   10da4:	28adc83a 	sub	r22,r5,r2
   10da8:	05be410e 	bge	zero,r22,106b0 <__alt_mem_nios_system_shared_memory+0xfffd06b0>
   10dac:	07000404 	movi	fp,16
   10db0:	d8801f17 	ldw	r2,124(sp)
   10db4:	e5838f0e 	bge	fp,r22,11bf4 <___vfprintf_internal_r+0x1e50>
   10db8:	014000b4 	movhi	r5,2
   10dbc:	297a9fc4 	addi	r5,r5,-5505
   10dc0:	dc403015 	stw	r17,192(sp)
   10dc4:	d9402c15 	stw	r5,176(sp)
   10dc8:	b023883a 	mov	r17,r22
   10dcc:	04c001c4 	movi	r19,7
   10dd0:	a82d883a 	mov	r22,r21
   10dd4:	902b883a 	mov	r21,r18
   10dd8:	8025883a 	mov	r18,r16
   10ddc:	dc002d17 	ldw	r16,180(sp)
   10de0:	00000306 	br	10df0 <___vfprintf_internal_r+0x104c>
   10de4:	8c7ffc04 	addi	r17,r17,-16
   10de8:	42000204 	addi	r8,r8,8
   10dec:	e440110e 	bge	fp,r17,10e34 <___vfprintf_internal_r+0x1090>
   10df0:	18c00404 	addi	r3,r3,16
   10df4:	10800044 	addi	r2,r2,1
   10df8:	45000015 	stw	r20,0(r8)
   10dfc:	47000115 	stw	fp,4(r8)
   10e00:	d8c02015 	stw	r3,128(sp)
   10e04:	d8801f15 	stw	r2,124(sp)
   10e08:	98bff60e 	bge	r19,r2,10de4 <__alt_mem_nios_system_shared_memory+0xfffd0de4>
   10e0c:	d9801e04 	addi	r6,sp,120
   10e10:	b80b883a 	mov	r5,r23
   10e14:	8009883a 	mov	r4,r16
   10e18:	00182940 	call	18294 <__sprint_r>
   10e1c:	103ce51e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10e20:	8c7ffc04 	addi	r17,r17,-16
   10e24:	d8c02017 	ldw	r3,128(sp)
   10e28:	d8801f17 	ldw	r2,124(sp)
   10e2c:	da000404 	addi	r8,sp,16
   10e30:	e47fef16 	blt	fp,r17,10df0 <__alt_mem_nios_system_shared_memory+0xfffd0df0>
   10e34:	9021883a 	mov	r16,r18
   10e38:	a825883a 	mov	r18,r21
   10e3c:	b02b883a 	mov	r21,r22
   10e40:	882d883a 	mov	r22,r17
   10e44:	dc403017 	ldw	r17,192(sp)
   10e48:	d9002c17 	ldw	r4,176(sp)
   10e4c:	1d87883a 	add	r3,r3,r22
   10e50:	10800044 	addi	r2,r2,1
   10e54:	41000015 	stw	r4,0(r8)
   10e58:	45800115 	stw	r22,4(r8)
   10e5c:	d8c02015 	stw	r3,128(sp)
   10e60:	d8801f15 	stw	r2,124(sp)
   10e64:	010001c4 	movi	r4,7
   10e68:	20818e16 	blt	r4,r2,114a4 <___vfprintf_internal_r+0x1700>
   10e6c:	42000204 	addi	r8,r8,8
   10e70:	003e0f06 	br	106b0 <__alt_mem_nios_system_shared_memory+0xfffd06b0>
   10e74:	d9403317 	ldw	r5,204(sp)
   10e78:	00800044 	movi	r2,1
   10e7c:	18c00044 	addi	r3,r3,1
   10e80:	1141530e 	bge	r2,r5,113d0 <___vfprintf_internal_r+0x162c>
   10e84:	dc401f17 	ldw	r17,124(sp)
   10e88:	00800044 	movi	r2,1
   10e8c:	40800115 	stw	r2,4(r8)
   10e90:	8c400044 	addi	r17,r17,1
   10e94:	44000015 	stw	r16,0(r8)
   10e98:	d8c02015 	stw	r3,128(sp)
   10e9c:	dc401f15 	stw	r17,124(sp)
   10ea0:	008001c4 	movi	r2,7
   10ea4:	14416b16 	blt	r2,r17,11454 <___vfprintf_internal_r+0x16b0>
   10ea8:	42000204 	addi	r8,r8,8
   10eac:	d8803717 	ldw	r2,220(sp)
   10eb0:	d9003417 	ldw	r4,208(sp)
   10eb4:	8c400044 	addi	r17,r17,1
   10eb8:	10c7883a 	add	r3,r2,r3
   10ebc:	40800115 	stw	r2,4(r8)
   10ec0:	41000015 	stw	r4,0(r8)
   10ec4:	d8c02015 	stw	r3,128(sp)
   10ec8:	dc401f15 	stw	r17,124(sp)
   10ecc:	008001c4 	movi	r2,7
   10ed0:	14416916 	blt	r2,r17,11478 <___vfprintf_internal_r+0x16d4>
   10ed4:	45800204 	addi	r22,r8,8
   10ed8:	d9003617 	ldw	r4,216(sp)
   10edc:	d9403817 	ldw	r5,224(sp)
   10ee0:	000d883a 	mov	r6,zero
   10ee4:	000f883a 	mov	r7,zero
   10ee8:	d8c03c15 	stw	r3,240(sp)
   10eec:	0007a280 	call	7a28 <__eqdf2>
   10ef0:	d8c03c17 	ldw	r3,240(sp)
   10ef4:	1000bc26 	beq	r2,zero,111e8 <___vfprintf_internal_r+0x1444>
   10ef8:	d9403317 	ldw	r5,204(sp)
   10efc:	84000044 	addi	r16,r16,1
   10f00:	8c400044 	addi	r17,r17,1
   10f04:	28bfffc4 	addi	r2,r5,-1
   10f08:	1887883a 	add	r3,r3,r2
   10f0c:	b0800115 	stw	r2,4(r22)
   10f10:	b4000015 	stw	r16,0(r22)
   10f14:	d8c02015 	stw	r3,128(sp)
   10f18:	dc401f15 	stw	r17,124(sp)
   10f1c:	008001c4 	movi	r2,7
   10f20:	14414316 	blt	r2,r17,11430 <___vfprintf_internal_r+0x168c>
   10f24:	b5800204 	addi	r22,r22,8
   10f28:	d9003a17 	ldw	r4,232(sp)
   10f2c:	df0022c4 	addi	fp,sp,139
   10f30:	8c400044 	addi	r17,r17,1
   10f34:	20c7883a 	add	r3,r4,r3
   10f38:	b7000015 	stw	fp,0(r22)
   10f3c:	b1000115 	stw	r4,4(r22)
   10f40:	d8c02015 	stw	r3,128(sp)
   10f44:	dc401f15 	stw	r17,124(sp)
   10f48:	008001c4 	movi	r2,7
   10f4c:	14400e16 	blt	r2,r17,10f88 <___vfprintf_internal_r+0x11e4>
   10f50:	b2000204 	addi	r8,r22,8
   10f54:	003e1806 	br	107b8 <__alt_mem_nios_system_shared_memory+0xfffd07b8>
   10f58:	010000b4 	movhi	r4,2
   10f5c:	213a9fc4 	addi	r4,r4,-5505
   10f60:	d9002c15 	stw	r4,176(sp)
   10f64:	d9002c17 	ldw	r4,176(sp)
   10f68:	1c07883a 	add	r3,r3,r16
   10f6c:	44000115 	stw	r16,4(r8)
   10f70:	41000015 	stw	r4,0(r8)
   10f74:	10800044 	addi	r2,r2,1
   10f78:	d8c02015 	stw	r3,128(sp)
   10f7c:	d8801f15 	stw	r2,124(sp)
   10f80:	010001c4 	movi	r4,7
   10f84:	20be0b0e 	bge	r4,r2,107b4 <__alt_mem_nios_system_shared_memory+0xfffd07b4>
   10f88:	d9002d17 	ldw	r4,180(sp)
   10f8c:	d9801e04 	addi	r6,sp,120
   10f90:	b80b883a 	mov	r5,r23
   10f94:	00182940 	call	18294 <__sprint_r>
   10f98:	103c861e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10f9c:	d8c02017 	ldw	r3,128(sp)
   10fa0:	da000404 	addi	r8,sp,16
   10fa4:	003e0406 	br	107b8 <__alt_mem_nios_system_shared_memory+0xfffd07b8>
   10fa8:	d9002d17 	ldw	r4,180(sp)
   10fac:	d9801e04 	addi	r6,sp,120
   10fb0:	b80b883a 	mov	r5,r23
   10fb4:	00182940 	call	18294 <__sprint_r>
   10fb8:	103e3b26 	beq	r2,zero,108a8 <__alt_mem_nios_system_shared_memory+0xfffd08a8>
   10fbc:	003c7d06 	br	101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10fc0:	d9002d17 	ldw	r4,180(sp)
   10fc4:	d9801e04 	addi	r6,sp,120
   10fc8:	b80b883a 	mov	r5,r23
   10fcc:	00182940 	call	18294 <__sprint_r>
   10fd0:	103c781e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10fd4:	d8c02017 	ldw	r3,128(sp)
   10fd8:	da000404 	addi	r8,sp,16
   10fdc:	003de906 	br	10784 <__alt_mem_nios_system_shared_memory+0xfffd0784>
   10fe0:	d9002d17 	ldw	r4,180(sp)
   10fe4:	d9801e04 	addi	r6,sp,120
   10fe8:	b80b883a 	mov	r5,r23
   10fec:	00182940 	call	18294 <__sprint_r>
   10ff0:	103c701e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   10ff4:	d8c02017 	ldw	r3,128(sp)
   10ff8:	da000404 	addi	r8,sp,16
   10ffc:	003d9b06 	br	1066c <__alt_mem_nios_system_shared_memory+0xfffd066c>
   11000:	d9002d17 	ldw	r4,180(sp)
   11004:	d9801e04 	addi	r6,sp,120
   11008:	b80b883a 	mov	r5,r23
   1100c:	00182940 	call	18294 <__sprint_r>
   11010:	103c681e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11014:	d8c02017 	ldw	r3,128(sp)
   11018:	da000404 	addi	r8,sp,16
   1101c:	003da106 	br	106a4 <__alt_mem_nios_system_shared_memory+0xfffd06a4>
   11020:	d9402a17 	ldw	r5,168(sp)
   11024:	d8002785 	stb	zero,158(sp)
   11028:	283f0616 	blt	r5,zero,10c44 <__alt_mem_nios_system_shared_memory+0xfffd0c44>
   1102c:	00ffdfc4 	movi	r3,-129
   11030:	9d84b03a 	or	r2,r19,r22
   11034:	90e4703a 	and	r18,r18,r3
   11038:	103c3b26 	beq	r2,zero,10128 <__alt_mem_nios_system_shared_memory+0xfffd0128>
   1103c:	0039883a 	mov	fp,zero
   11040:	003e5806 	br	109a4 <__alt_mem_nios_system_shared_memory+0xfffd09a4>
   11044:	9080040c 	andi	r2,r18,16
   11048:	1001b326 	beq	r2,zero,11718 <___vfprintf_internal_r+0x1974>
   1104c:	d8c02e17 	ldw	r3,184(sp)
   11050:	d9002a17 	ldw	r4,168(sp)
   11054:	d8002785 	stb	zero,158(sp)
   11058:	18800104 	addi	r2,r3,4
   1105c:	1cc00017 	ldw	r19,0(r3)
   11060:	002d883a 	mov	r22,zero
   11064:	2001b516 	blt	r4,zero,1173c <___vfprintf_internal_r+0x1998>
   11068:	00ffdfc4 	movi	r3,-129
   1106c:	d8802e15 	stw	r2,184(sp)
   11070:	90e4703a 	and	r18,r18,r3
   11074:	983d0526 	beq	r19,zero,1048c <__alt_mem_nios_system_shared_memory+0xfffd048c>
   11078:	0039883a 	mov	fp,zero
   1107c:	003d0806 	br	104a0 <__alt_mem_nios_system_shared_memory+0xfffd04a0>
   11080:	dc402617 	ldw	r17,152(sp)
   11084:	0441d30e 	bge	zero,r17,117d4 <___vfprintf_internal_r+0x1a30>
   11088:	dc403217 	ldw	r17,200(sp)
   1108c:	d8803317 	ldw	r2,204(sp)
   11090:	1440010e 	bge	r2,r17,11098 <___vfprintf_internal_r+0x12f4>
   11094:	1023883a 	mov	r17,r2
   11098:	04400a0e 	bge	zero,r17,110c4 <___vfprintf_internal_r+0x1320>
   1109c:	d8801f17 	ldw	r2,124(sp)
   110a0:	1c47883a 	add	r3,r3,r17
   110a4:	44000015 	stw	r16,0(r8)
   110a8:	10800044 	addi	r2,r2,1
   110ac:	44400115 	stw	r17,4(r8)
   110b0:	d8c02015 	stw	r3,128(sp)
   110b4:	d8801f15 	stw	r2,124(sp)
   110b8:	010001c4 	movi	r4,7
   110bc:	20826516 	blt	r4,r2,11a54 <___vfprintf_internal_r+0x1cb0>
   110c0:	42000204 	addi	r8,r8,8
   110c4:	88026116 	blt	r17,zero,11a4c <___vfprintf_internal_r+0x1ca8>
   110c8:	d9003217 	ldw	r4,200(sp)
   110cc:	2463c83a 	sub	r17,r4,r17
   110d0:	04407b0e 	bge	zero,r17,112c0 <___vfprintf_internal_r+0x151c>
   110d4:	05800404 	movi	r22,16
   110d8:	d8801f17 	ldw	r2,124(sp)
   110dc:	b4419d0e 	bge	r22,r17,11754 <___vfprintf_internal_r+0x19b0>
   110e0:	010000b4 	movhi	r4,2
   110e4:	213a9fc4 	addi	r4,r4,-5505
   110e8:	d9002c15 	stw	r4,176(sp)
   110ec:	070001c4 	movi	fp,7
   110f0:	dcc02d17 	ldw	r19,180(sp)
   110f4:	00000306 	br	11104 <___vfprintf_internal_r+0x1360>
   110f8:	42000204 	addi	r8,r8,8
   110fc:	8c7ffc04 	addi	r17,r17,-16
   11100:	b441970e 	bge	r22,r17,11760 <___vfprintf_internal_r+0x19bc>
   11104:	18c00404 	addi	r3,r3,16
   11108:	10800044 	addi	r2,r2,1
   1110c:	45000015 	stw	r20,0(r8)
   11110:	45800115 	stw	r22,4(r8)
   11114:	d8c02015 	stw	r3,128(sp)
   11118:	d8801f15 	stw	r2,124(sp)
   1111c:	e0bff60e 	bge	fp,r2,110f8 <__alt_mem_nios_system_shared_memory+0xfffd10f8>
   11120:	d9801e04 	addi	r6,sp,120
   11124:	b80b883a 	mov	r5,r23
   11128:	9809883a 	mov	r4,r19
   1112c:	00182940 	call	18294 <__sprint_r>
   11130:	103c201e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11134:	d8c02017 	ldw	r3,128(sp)
   11138:	d8801f17 	ldw	r2,124(sp)
   1113c:	da000404 	addi	r8,sp,16
   11140:	003fee06 	br	110fc <__alt_mem_nios_system_shared_memory+0xfffd10fc>
   11144:	d9002d17 	ldw	r4,180(sp)
   11148:	d9801e04 	addi	r6,sp,120
   1114c:	b80b883a 	mov	r5,r23
   11150:	00182940 	call	18294 <__sprint_r>
   11154:	103c171e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11158:	d8c02017 	ldw	r3,128(sp)
   1115c:	df002787 	ldb	fp,158(sp)
   11160:	da000404 	addi	r8,sp,16
   11164:	003d3406 	br	10638 <__alt_mem_nios_system_shared_memory+0xfffd0638>
   11168:	9080040c 	andi	r2,r18,16
   1116c:	10016126 	beq	r2,zero,116f4 <___vfprintf_internal_r+0x1950>
   11170:	d9402e17 	ldw	r5,184(sp)
   11174:	2cc00017 	ldw	r19,0(r5)
   11178:	29400104 	addi	r5,r5,4
   1117c:	d9402e15 	stw	r5,184(sp)
   11180:	982dd7fa 	srai	r22,r19,31
   11184:	b005883a 	mov	r2,r22
   11188:	003c5a06 	br	102f4 <__alt_mem_nios_system_shared_memory+0xfffd02f4>
   1118c:	9080040c 	andi	r2,r18,16
   11190:	10003526 	beq	r2,zero,11268 <___vfprintf_internal_r+0x14c4>
   11194:	d8c02e17 	ldw	r3,184(sp)
   11198:	d9002a17 	ldw	r4,168(sp)
   1119c:	d8002785 	stb	zero,158(sp)
   111a0:	18800104 	addi	r2,r3,4
   111a4:	1cc00017 	ldw	r19,0(r3)
   111a8:	002d883a 	mov	r22,zero
   111ac:	20003716 	blt	r4,zero,1128c <___vfprintf_internal_r+0x14e8>
   111b0:	00ffdfc4 	movi	r3,-129
   111b4:	d8802e15 	stw	r2,184(sp)
   111b8:	90e4703a 	and	r18,r18,r3
   111bc:	0039883a 	mov	fp,zero
   111c0:	983dd426 	beq	r19,zero,10914 <__alt_mem_nios_system_shared_memory+0xfffd0914>
   111c4:	00800244 	movi	r2,9
   111c8:	14fc5336 	bltu	r2,r19,10318 <__alt_mem_nios_system_shared_memory+0xfffd0318>
   111cc:	d8c02817 	ldw	r3,160(sp)
   111d0:	dc001dc4 	addi	r16,sp,119
   111d4:	9cc00c04 	addi	r19,r19,48
   111d8:	1c07c83a 	sub	r3,r3,r16
   111dc:	dcc01dc5 	stb	r19,119(sp)
   111e0:	d8c02b15 	stw	r3,172(sp)
   111e4:	003cc606 	br	10500 <__alt_mem_nios_system_shared_memory+0xfffd0500>
   111e8:	d8803317 	ldw	r2,204(sp)
   111ec:	143fffc4 	addi	r16,r2,-1
   111f0:	043f4d0e 	bge	zero,r16,10f28 <__alt_mem_nios_system_shared_memory+0xfffd0f28>
   111f4:	07000404 	movi	fp,16
   111f8:	e400810e 	bge	fp,r16,11400 <___vfprintf_internal_r+0x165c>
   111fc:	014000b4 	movhi	r5,2
   11200:	297a9fc4 	addi	r5,r5,-5505
   11204:	d9402c15 	stw	r5,176(sp)
   11208:	01c001c4 	movi	r7,7
   1120c:	dcc02d17 	ldw	r19,180(sp)
   11210:	00000306 	br	11220 <___vfprintf_internal_r+0x147c>
   11214:	b5800204 	addi	r22,r22,8
   11218:	843ffc04 	addi	r16,r16,-16
   1121c:	e4007b0e 	bge	fp,r16,1140c <___vfprintf_internal_r+0x1668>
   11220:	18c00404 	addi	r3,r3,16
   11224:	8c400044 	addi	r17,r17,1
   11228:	b5000015 	stw	r20,0(r22)
   1122c:	b7000115 	stw	fp,4(r22)
   11230:	d8c02015 	stw	r3,128(sp)
   11234:	dc401f15 	stw	r17,124(sp)
   11238:	3c7ff60e 	bge	r7,r17,11214 <__alt_mem_nios_system_shared_memory+0xfffd1214>
   1123c:	d9801e04 	addi	r6,sp,120
   11240:	b80b883a 	mov	r5,r23
   11244:	9809883a 	mov	r4,r19
   11248:	d9c03c15 	stw	r7,240(sp)
   1124c:	00182940 	call	18294 <__sprint_r>
   11250:	d9c03c17 	ldw	r7,240(sp)
   11254:	103bd71e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11258:	d8c02017 	ldw	r3,128(sp)
   1125c:	dc401f17 	ldw	r17,124(sp)
   11260:	dd800404 	addi	r22,sp,16
   11264:	003fec06 	br	11218 <__alt_mem_nios_system_shared_memory+0xfffd1218>
   11268:	9080100c 	andi	r2,r18,64
   1126c:	d8002785 	stb	zero,158(sp)
   11270:	10010e26 	beq	r2,zero,116ac <___vfprintf_internal_r+0x1908>
   11274:	d9402e17 	ldw	r5,184(sp)
   11278:	d8c02a17 	ldw	r3,168(sp)
   1127c:	002d883a 	mov	r22,zero
   11280:	28800104 	addi	r2,r5,4
   11284:	2cc0000b 	ldhu	r19,0(r5)
   11288:	183fc90e 	bge	r3,zero,111b0 <__alt_mem_nios_system_shared_memory+0xfffd11b0>
   1128c:	d8802e15 	stw	r2,184(sp)
   11290:	0039883a 	mov	fp,zero
   11294:	9d84b03a 	or	r2,r19,r22
   11298:	103c1e1e 	bne	r2,zero,10314 <__alt_mem_nios_system_shared_memory+0xfffd0314>
   1129c:	00800044 	movi	r2,1
   112a0:	003e6c06 	br	10c54 <__alt_mem_nios_system_shared_memory+0xfffd0c54>
   112a4:	d9002d17 	ldw	r4,180(sp)
   112a8:	d9801e04 	addi	r6,sp,120
   112ac:	b80b883a 	mov	r5,r23
   112b0:	00182940 	call	18294 <__sprint_r>
   112b4:	103bbf1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   112b8:	d8c02017 	ldw	r3,128(sp)
   112bc:	da000404 	addi	r8,sp,16
   112c0:	d9003217 	ldw	r4,200(sp)
   112c4:	d8802617 	ldw	r2,152(sp)
   112c8:	d9403317 	ldw	r5,204(sp)
   112cc:	8123883a 	add	r17,r16,r4
   112d0:	11400216 	blt	r2,r5,112dc <___vfprintf_internal_r+0x1538>
   112d4:	9100004c 	andi	r4,r18,1
   112d8:	20000d26 	beq	r4,zero,11310 <___vfprintf_internal_r+0x156c>
   112dc:	d9003717 	ldw	r4,220(sp)
   112e0:	d9403417 	ldw	r5,208(sp)
   112e4:	1907883a 	add	r3,r3,r4
   112e8:	d9001f17 	ldw	r4,124(sp)
   112ec:	41400015 	stw	r5,0(r8)
   112f0:	d9403717 	ldw	r5,220(sp)
   112f4:	21000044 	addi	r4,r4,1
   112f8:	d8c02015 	stw	r3,128(sp)
   112fc:	41400115 	stw	r5,4(r8)
   11300:	d9001f15 	stw	r4,124(sp)
   11304:	014001c4 	movi	r5,7
   11308:	2901e816 	blt	r5,r4,11aac <___vfprintf_internal_r+0x1d08>
   1130c:	42000204 	addi	r8,r8,8
   11310:	d9003317 	ldw	r4,204(sp)
   11314:	8121883a 	add	r16,r16,r4
   11318:	2085c83a 	sub	r2,r4,r2
   1131c:	8461c83a 	sub	r16,r16,r17
   11320:	1400010e 	bge	r2,r16,11328 <___vfprintf_internal_r+0x1584>
   11324:	1021883a 	mov	r16,r2
   11328:	04000a0e 	bge	zero,r16,11354 <___vfprintf_internal_r+0x15b0>
   1132c:	d9001f17 	ldw	r4,124(sp)
   11330:	1c07883a 	add	r3,r3,r16
   11334:	44400015 	stw	r17,0(r8)
   11338:	21000044 	addi	r4,r4,1
   1133c:	44000115 	stw	r16,4(r8)
   11340:	d8c02015 	stw	r3,128(sp)
   11344:	d9001f15 	stw	r4,124(sp)
   11348:	014001c4 	movi	r5,7
   1134c:	2901fb16 	blt	r5,r4,11b3c <___vfprintf_internal_r+0x1d98>
   11350:	42000204 	addi	r8,r8,8
   11354:	8001f716 	blt	r16,zero,11b34 <___vfprintf_internal_r+0x1d90>
   11358:	1421c83a 	sub	r16,r2,r16
   1135c:	043d160e 	bge	zero,r16,107b8 <__alt_mem_nios_system_shared_memory+0xfffd07b8>
   11360:	04400404 	movi	r17,16
   11364:	d8801f17 	ldw	r2,124(sp)
   11368:	8c3efb0e 	bge	r17,r16,10f58 <__alt_mem_nios_system_shared_memory+0xfffd0f58>
   1136c:	014000b4 	movhi	r5,2
   11370:	297a9fc4 	addi	r5,r5,-5505
   11374:	d9402c15 	stw	r5,176(sp)
   11378:	058001c4 	movi	r22,7
   1137c:	dcc02d17 	ldw	r19,180(sp)
   11380:	00000306 	br	11390 <___vfprintf_internal_r+0x15ec>
   11384:	42000204 	addi	r8,r8,8
   11388:	843ffc04 	addi	r16,r16,-16
   1138c:	8c3ef50e 	bge	r17,r16,10f64 <__alt_mem_nios_system_shared_memory+0xfffd0f64>
   11390:	18c00404 	addi	r3,r3,16
   11394:	10800044 	addi	r2,r2,1
   11398:	45000015 	stw	r20,0(r8)
   1139c:	44400115 	stw	r17,4(r8)
   113a0:	d8c02015 	stw	r3,128(sp)
   113a4:	d8801f15 	stw	r2,124(sp)
   113a8:	b0bff60e 	bge	r22,r2,11384 <__alt_mem_nios_system_shared_memory+0xfffd1384>
   113ac:	d9801e04 	addi	r6,sp,120
   113b0:	b80b883a 	mov	r5,r23
   113b4:	9809883a 	mov	r4,r19
   113b8:	00182940 	call	18294 <__sprint_r>
   113bc:	103b7d1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   113c0:	d8c02017 	ldw	r3,128(sp)
   113c4:	d8801f17 	ldw	r2,124(sp)
   113c8:	da000404 	addi	r8,sp,16
   113cc:	003fee06 	br	11388 <__alt_mem_nios_system_shared_memory+0xfffd1388>
   113d0:	9088703a 	and	r4,r18,r2
   113d4:	203eab1e 	bne	r4,zero,10e84 <__alt_mem_nios_system_shared_memory+0xfffd0e84>
   113d8:	dc401f17 	ldw	r17,124(sp)
   113dc:	40800115 	stw	r2,4(r8)
   113e0:	44000015 	stw	r16,0(r8)
   113e4:	8c400044 	addi	r17,r17,1
   113e8:	d8c02015 	stw	r3,128(sp)
   113ec:	dc401f15 	stw	r17,124(sp)
   113f0:	008001c4 	movi	r2,7
   113f4:	14400e16 	blt	r2,r17,11430 <___vfprintf_internal_r+0x168c>
   113f8:	45800204 	addi	r22,r8,8
   113fc:	003eca06 	br	10f28 <__alt_mem_nios_system_shared_memory+0xfffd0f28>
   11400:	010000b4 	movhi	r4,2
   11404:	213a9fc4 	addi	r4,r4,-5505
   11408:	d9002c15 	stw	r4,176(sp)
   1140c:	d8802c17 	ldw	r2,176(sp)
   11410:	1c07883a 	add	r3,r3,r16
   11414:	8c400044 	addi	r17,r17,1
   11418:	b0800015 	stw	r2,0(r22)
   1141c:	b4000115 	stw	r16,4(r22)
   11420:	d8c02015 	stw	r3,128(sp)
   11424:	dc401f15 	stw	r17,124(sp)
   11428:	008001c4 	movi	r2,7
   1142c:	147ebd0e 	bge	r2,r17,10f24 <__alt_mem_nios_system_shared_memory+0xfffd0f24>
   11430:	d9002d17 	ldw	r4,180(sp)
   11434:	d9801e04 	addi	r6,sp,120
   11438:	b80b883a 	mov	r5,r23
   1143c:	00182940 	call	18294 <__sprint_r>
   11440:	103b5c1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11444:	d8c02017 	ldw	r3,128(sp)
   11448:	dc401f17 	ldw	r17,124(sp)
   1144c:	dd800404 	addi	r22,sp,16
   11450:	003eb506 	br	10f28 <__alt_mem_nios_system_shared_memory+0xfffd0f28>
   11454:	d9002d17 	ldw	r4,180(sp)
   11458:	d9801e04 	addi	r6,sp,120
   1145c:	b80b883a 	mov	r5,r23
   11460:	00182940 	call	18294 <__sprint_r>
   11464:	103b531e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11468:	d8c02017 	ldw	r3,128(sp)
   1146c:	dc401f17 	ldw	r17,124(sp)
   11470:	da000404 	addi	r8,sp,16
   11474:	003e8d06 	br	10eac <__alt_mem_nios_system_shared_memory+0xfffd0eac>
   11478:	d9002d17 	ldw	r4,180(sp)
   1147c:	d9801e04 	addi	r6,sp,120
   11480:	b80b883a 	mov	r5,r23
   11484:	00182940 	call	18294 <__sprint_r>
   11488:	103b4a1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   1148c:	d8c02017 	ldw	r3,128(sp)
   11490:	dc401f17 	ldw	r17,124(sp)
   11494:	dd800404 	addi	r22,sp,16
   11498:	003e8f06 	br	10ed8 <__alt_mem_nios_system_shared_memory+0xfffd0ed8>
   1149c:	0027883a 	mov	r19,zero
   114a0:	003f4a06 	br	111cc <__alt_mem_nios_system_shared_memory+0xfffd11cc>
   114a4:	d9002d17 	ldw	r4,180(sp)
   114a8:	d9801e04 	addi	r6,sp,120
   114ac:	b80b883a 	mov	r5,r23
   114b0:	00182940 	call	18294 <__sprint_r>
   114b4:	103b3f1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   114b8:	d8c02017 	ldw	r3,128(sp)
   114bc:	da000404 	addi	r8,sp,16
   114c0:	003c7b06 	br	106b0 <__alt_mem_nios_system_shared_memory+0xfffd06b0>
   114c4:	d9402a17 	ldw	r5,168(sp)
   114c8:	04e7c83a 	sub	r19,zero,r19
   114cc:	07000b44 	movi	fp,45
   114d0:	9804c03a 	cmpne	r2,r19,zero
   114d4:	05adc83a 	sub	r22,zero,r22
   114d8:	df002785 	stb	fp,158(sp)
   114dc:	b0adc83a 	sub	r22,r22,r2
   114e0:	28017b16 	blt	r5,zero,11ad0 <___vfprintf_internal_r+0x1d2c>
   114e4:	00bfdfc4 	movi	r2,-129
   114e8:	90a4703a 	and	r18,r18,r2
   114ec:	003b8906 	br	10314 <__alt_mem_nios_system_shared_memory+0xfffd0314>
   114f0:	d9003617 	ldw	r4,216(sp)
   114f4:	d9403817 	ldw	r5,224(sp)
   114f8:	da003d15 	stw	r8,244(sp)
   114fc:	00169800 	call	16980 <__fpclassifyd>
   11500:	da003d17 	ldw	r8,244(sp)
   11504:	1000f026 	beq	r2,zero,118c8 <___vfprintf_internal_r+0x1b24>
   11508:	d9002a17 	ldw	r4,168(sp)
   1150c:	05bff7c4 	movi	r22,-33
   11510:	00bfffc4 	movi	r2,-1
   11514:	8dac703a 	and	r22,r17,r22
   11518:	20820026 	beq	r4,r2,11d1c <___vfprintf_internal_r+0x1f78>
   1151c:	008011c4 	movi	r2,71
   11520:	b081f726 	beq	r22,r2,11d00 <___vfprintf_internal_r+0x1f5c>
   11524:	d9003817 	ldw	r4,224(sp)
   11528:	90c04014 	ori	r3,r18,256
   1152c:	d8c02c15 	stw	r3,176(sp)
   11530:	20021516 	blt	r4,zero,11d88 <___vfprintf_internal_r+0x1fe4>
   11534:	dcc03817 	ldw	r19,224(sp)
   11538:	d8002905 	stb	zero,164(sp)
   1153c:	00801984 	movi	r2,102
   11540:	8881f926 	beq	r17,r2,11d28 <___vfprintf_internal_r+0x1f84>
   11544:	00801184 	movi	r2,70
   11548:	88821c26 	beq	r17,r2,11dbc <___vfprintf_internal_r+0x2018>
   1154c:	00801144 	movi	r2,69
   11550:	b081ef26 	beq	r22,r2,11d10 <___vfprintf_internal_r+0x1f6c>
   11554:	d8c02a17 	ldw	r3,168(sp)
   11558:	d8802104 	addi	r2,sp,132
   1155c:	d8800315 	stw	r2,12(sp)
   11560:	d9403617 	ldw	r5,216(sp)
   11564:	d8802504 	addi	r2,sp,148
   11568:	d9002d17 	ldw	r4,180(sp)
   1156c:	d8800215 	stw	r2,8(sp)
   11570:	d8802604 	addi	r2,sp,152
   11574:	d8c00015 	stw	r3,0(sp)
   11578:	d8800115 	stw	r2,4(sp)
   1157c:	01c00084 	movi	r7,2
   11580:	980d883a 	mov	r6,r19
   11584:	d8c03c15 	stw	r3,240(sp)
   11588:	da003d15 	stw	r8,244(sp)
   1158c:	00125880 	call	12588 <_dtoa_r>
   11590:	1021883a 	mov	r16,r2
   11594:	008019c4 	movi	r2,103
   11598:	d8c03c17 	ldw	r3,240(sp)
   1159c:	da003d17 	ldw	r8,244(sp)
   115a0:	88817126 	beq	r17,r2,11b68 <___vfprintf_internal_r+0x1dc4>
   115a4:	008011c4 	movi	r2,71
   115a8:	88829126 	beq	r17,r2,11ff0 <___vfprintf_internal_r+0x224c>
   115ac:	80f9883a 	add	fp,r16,r3
   115b0:	d9003617 	ldw	r4,216(sp)
   115b4:	000d883a 	mov	r6,zero
   115b8:	000f883a 	mov	r7,zero
   115bc:	980b883a 	mov	r5,r19
   115c0:	da003d15 	stw	r8,244(sp)
   115c4:	0007a280 	call	7a28 <__eqdf2>
   115c8:	da003d17 	ldw	r8,244(sp)
   115cc:	10018d26 	beq	r2,zero,11c04 <___vfprintf_internal_r+0x1e60>
   115d0:	d8802117 	ldw	r2,132(sp)
   115d4:	1700062e 	bgeu	r2,fp,115f0 <___vfprintf_internal_r+0x184c>
   115d8:	01000c04 	movi	r4,48
   115dc:	10c00044 	addi	r3,r2,1
   115e0:	d8c02115 	stw	r3,132(sp)
   115e4:	11000005 	stb	r4,0(r2)
   115e8:	d8802117 	ldw	r2,132(sp)
   115ec:	173ffb36 	bltu	r2,fp,115dc <__alt_mem_nios_system_shared_memory+0xfffd15dc>
   115f0:	1405c83a 	sub	r2,r2,r16
   115f4:	d8803315 	stw	r2,204(sp)
   115f8:	008011c4 	movi	r2,71
   115fc:	b0817626 	beq	r22,r2,11bd8 <___vfprintf_internal_r+0x1e34>
   11600:	00801944 	movi	r2,101
   11604:	1442800e 	bge	r2,r17,12008 <___vfprintf_internal_r+0x2264>
   11608:	d8c02617 	ldw	r3,152(sp)
   1160c:	00801984 	movi	r2,102
   11610:	d8c03215 	stw	r3,200(sp)
   11614:	8881fe26 	beq	r17,r2,11e10 <___vfprintf_internal_r+0x206c>
   11618:	d8c03217 	ldw	r3,200(sp)
   1161c:	d9003317 	ldw	r4,204(sp)
   11620:	1901dd16 	blt	r3,r4,11d98 <___vfprintf_internal_r+0x1ff4>
   11624:	9480004c 	andi	r18,r18,1
   11628:	90022b1e 	bne	r18,zero,11ed8 <___vfprintf_internal_r+0x2134>
   1162c:	1805883a 	mov	r2,r3
   11630:	18028316 	blt	r3,zero,12040 <___vfprintf_internal_r+0x229c>
   11634:	d8c03217 	ldw	r3,200(sp)
   11638:	044019c4 	movi	r17,103
   1163c:	d8c02b15 	stw	r3,172(sp)
   11640:	df002907 	ldb	fp,164(sp)
   11644:	e001531e 	bne	fp,zero,11b94 <___vfprintf_internal_r+0x1df0>
   11648:	df002783 	ldbu	fp,158(sp)
   1164c:	d8802915 	stw	r2,164(sp)
   11650:	dc802c17 	ldw	r18,176(sp)
   11654:	d8002a15 	stw	zero,168(sp)
   11658:	003baf06 	br	10518 <__alt_mem_nios_system_shared_memory+0xfffd0518>
   1165c:	d8c02e17 	ldw	r3,184(sp)
   11660:	d9002e17 	ldw	r4,184(sp)
   11664:	d9402e17 	ldw	r5,184(sp)
   11668:	18c00017 	ldw	r3,0(r3)
   1166c:	21000117 	ldw	r4,4(r4)
   11670:	29400204 	addi	r5,r5,8
   11674:	d8c03615 	stw	r3,216(sp)
   11678:	d9003815 	stw	r4,224(sp)
   1167c:	d9402e15 	stw	r5,184(sp)
   11680:	003b5006 	br	103c4 <__alt_mem_nios_system_shared_memory+0xfffd03c4>
   11684:	ac400007 	ldb	r17,0(r21)
   11688:	003a2806 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   1168c:	9080100c 	andi	r2,r18,64
   11690:	1000a826 	beq	r2,zero,11934 <___vfprintf_internal_r+0x1b90>
   11694:	d8c02e17 	ldw	r3,184(sp)
   11698:	002d883a 	mov	r22,zero
   1169c:	1cc0000b 	ldhu	r19,0(r3)
   116a0:	18c00104 	addi	r3,r3,4
   116a4:	d8c02e15 	stw	r3,184(sp)
   116a8:	003caf06 	br	10968 <__alt_mem_nios_system_shared_memory+0xfffd0968>
   116ac:	d9002e17 	ldw	r4,184(sp)
   116b0:	d9402a17 	ldw	r5,168(sp)
   116b4:	002d883a 	mov	r22,zero
   116b8:	20800104 	addi	r2,r4,4
   116bc:	24c00017 	ldw	r19,0(r4)
   116c0:	283ebb0e 	bge	r5,zero,111b0 <__alt_mem_nios_system_shared_memory+0xfffd11b0>
   116c4:	003ef106 	br	1128c <__alt_mem_nios_system_shared_memory+0xfffd128c>
   116c8:	9080040c 	andi	r2,r18,16
   116cc:	1000921e 	bne	r2,zero,11918 <___vfprintf_internal_r+0x1b74>
   116d0:	9480100c 	andi	r18,r18,64
   116d4:	90013926 	beq	r18,zero,11bbc <___vfprintf_internal_r+0x1e18>
   116d8:	d9402e17 	ldw	r5,184(sp)
   116dc:	d8c02f17 	ldw	r3,188(sp)
   116e0:	28800017 	ldw	r2,0(r5)
   116e4:	29400104 	addi	r5,r5,4
   116e8:	d9402e15 	stw	r5,184(sp)
   116ec:	10c0000d 	sth	r3,0(r2)
   116f0:	0039e406 	br	fe84 <__alt_mem_nios_system_shared_memory+0xfffcfe84>
   116f4:	9080100c 	andi	r2,r18,64
   116f8:	10008026 	beq	r2,zero,118fc <___vfprintf_internal_r+0x1b58>
   116fc:	d8802e17 	ldw	r2,184(sp)
   11700:	14c0000f 	ldh	r19,0(r2)
   11704:	10800104 	addi	r2,r2,4
   11708:	d8802e15 	stw	r2,184(sp)
   1170c:	982dd7fa 	srai	r22,r19,31
   11710:	b005883a 	mov	r2,r22
   11714:	003af706 	br	102f4 <__alt_mem_nios_system_shared_memory+0xfffd02f4>
   11718:	9080100c 	andi	r2,r18,64
   1171c:	d8002785 	stb	zero,158(sp)
   11720:	10008a1e 	bne	r2,zero,1194c <___vfprintf_internal_r+0x1ba8>
   11724:	d9002e17 	ldw	r4,184(sp)
   11728:	d9402a17 	ldw	r5,168(sp)
   1172c:	002d883a 	mov	r22,zero
   11730:	20800104 	addi	r2,r4,4
   11734:	24c00017 	ldw	r19,0(r4)
   11738:	283e4b0e 	bge	r5,zero,11068 <__alt_mem_nios_system_shared_memory+0xfffd1068>
   1173c:	9d86b03a 	or	r3,r19,r22
   11740:	d8802e15 	stw	r2,184(sp)
   11744:	183e4c1e 	bne	r3,zero,11078 <__alt_mem_nios_system_shared_memory+0xfffd1078>
   11748:	0039883a 	mov	fp,zero
   1174c:	0005883a 	mov	r2,zero
   11750:	003d4006 	br	10c54 <__alt_mem_nios_system_shared_memory+0xfffd0c54>
   11754:	014000b4 	movhi	r5,2
   11758:	297a9fc4 	addi	r5,r5,-5505
   1175c:	d9402c15 	stw	r5,176(sp)
   11760:	d9402c17 	ldw	r5,176(sp)
   11764:	1c47883a 	add	r3,r3,r17
   11768:	10800044 	addi	r2,r2,1
   1176c:	41400015 	stw	r5,0(r8)
   11770:	44400115 	stw	r17,4(r8)
   11774:	d8c02015 	stw	r3,128(sp)
   11778:	d8801f15 	stw	r2,124(sp)
   1177c:	010001c4 	movi	r4,7
   11780:	20bec816 	blt	r4,r2,112a4 <__alt_mem_nios_system_shared_memory+0xfffd12a4>
   11784:	42000204 	addi	r8,r8,8
   11788:	003ecd06 	br	112c0 <__alt_mem_nios_system_shared_memory+0xfffd12c0>
   1178c:	d9002a17 	ldw	r4,168(sp)
   11790:	d8002785 	stb	zero,158(sp)
   11794:	203d2d16 	blt	r4,zero,10c4c <__alt_mem_nios_system_shared_memory+0xfffd0c4c>
   11798:	00bfdfc4 	movi	r2,-129
   1179c:	90a4703a 	and	r18,r18,r2
   117a0:	003a6106 	br	10128 <__alt_mem_nios_system_shared_memory+0xfffd0128>
   117a4:	010000b4 	movhi	r4,2
   117a8:	213a9fc4 	addi	r4,r4,-5505
   117ac:	d9002c15 	stw	r4,176(sp)
   117b0:	003bea06 	br	1075c <__alt_mem_nios_system_shared_memory+0xfffd075c>
   117b4:	d9002d17 	ldw	r4,180(sp)
   117b8:	d9801e04 	addi	r6,sp,120
   117bc:	b80b883a 	mov	r5,r23
   117c0:	00182940 	call	18294 <__sprint_r>
   117c4:	103a7b1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   117c8:	d8c02017 	ldw	r3,128(sp)
   117cc:	da000404 	addi	r8,sp,16
   117d0:	003d4106 	br	10cd8 <__alt_mem_nios_system_shared_memory+0xfffd0cd8>
   117d4:	d8801f17 	ldw	r2,124(sp)
   117d8:	014000b4 	movhi	r5,2
   117dc:	01000044 	movi	r4,1
   117e0:	18c00044 	addi	r3,r3,1
   117e4:	10800044 	addi	r2,r2,1
   117e8:	29797504 	addi	r5,r5,-6700
   117ec:	41000115 	stw	r4,4(r8)
   117f0:	41400015 	stw	r5,0(r8)
   117f4:	d8c02015 	stw	r3,128(sp)
   117f8:	d8801f15 	stw	r2,124(sp)
   117fc:	010001c4 	movi	r4,7
   11800:	20805c16 	blt	r4,r2,11974 <___vfprintf_internal_r+0x1bd0>
   11804:	42000204 	addi	r8,r8,8
   11808:	8800041e 	bne	r17,zero,1181c <___vfprintf_internal_r+0x1a78>
   1180c:	d8803317 	ldw	r2,204(sp)
   11810:	1000021e 	bne	r2,zero,1181c <___vfprintf_internal_r+0x1a78>
   11814:	9080004c 	andi	r2,r18,1
   11818:	103be726 	beq	r2,zero,107b8 <__alt_mem_nios_system_shared_memory+0xfffd07b8>
   1181c:	d9003717 	ldw	r4,220(sp)
   11820:	d8801f17 	ldw	r2,124(sp)
   11824:	d9403417 	ldw	r5,208(sp)
   11828:	20c7883a 	add	r3,r4,r3
   1182c:	10800044 	addi	r2,r2,1
   11830:	41000115 	stw	r4,4(r8)
   11834:	41400015 	stw	r5,0(r8)
   11838:	d8c02015 	stw	r3,128(sp)
   1183c:	d8801f15 	stw	r2,124(sp)
   11840:	010001c4 	movi	r4,7
   11844:	20812116 	blt	r4,r2,11ccc <___vfprintf_internal_r+0x1f28>
   11848:	42000204 	addi	r8,r8,8
   1184c:	0463c83a 	sub	r17,zero,r17
   11850:	0440730e 	bge	zero,r17,11a20 <___vfprintf_internal_r+0x1c7c>
   11854:	05800404 	movi	r22,16
   11858:	b440860e 	bge	r22,r17,11a74 <___vfprintf_internal_r+0x1cd0>
   1185c:	014000b4 	movhi	r5,2
   11860:	297a9fc4 	addi	r5,r5,-5505
   11864:	d9402c15 	stw	r5,176(sp)
   11868:	070001c4 	movi	fp,7
   1186c:	dcc02d17 	ldw	r19,180(sp)
   11870:	00000306 	br	11880 <___vfprintf_internal_r+0x1adc>
   11874:	42000204 	addi	r8,r8,8
   11878:	8c7ffc04 	addi	r17,r17,-16
   1187c:	b440800e 	bge	r22,r17,11a80 <___vfprintf_internal_r+0x1cdc>
   11880:	18c00404 	addi	r3,r3,16
   11884:	10800044 	addi	r2,r2,1
   11888:	45000015 	stw	r20,0(r8)
   1188c:	45800115 	stw	r22,4(r8)
   11890:	d8c02015 	stw	r3,128(sp)
   11894:	d8801f15 	stw	r2,124(sp)
   11898:	e0bff60e 	bge	fp,r2,11874 <__alt_mem_nios_system_shared_memory+0xfffd1874>
   1189c:	d9801e04 	addi	r6,sp,120
   118a0:	b80b883a 	mov	r5,r23
   118a4:	9809883a 	mov	r4,r19
   118a8:	00182940 	call	18294 <__sprint_r>
   118ac:	103a411e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   118b0:	d8c02017 	ldw	r3,128(sp)
   118b4:	d8801f17 	ldw	r2,124(sp)
   118b8:	da000404 	addi	r8,sp,16
   118bc:	003fee06 	br	11878 <__alt_mem_nios_system_shared_memory+0xfffd1878>
   118c0:	00bfffc4 	movi	r2,-1
   118c4:	003a3f06 	br	101c4 <__alt_mem_nios_system_shared_memory+0xfffd01c4>
   118c8:	008011c4 	movi	r2,71
   118cc:	1440b816 	blt	r2,r17,11bb0 <___vfprintf_internal_r+0x1e0c>
   118d0:	040000b4 	movhi	r16,2
   118d4:	843a8a04 	addi	r16,r16,-5592
   118d8:	00c000c4 	movi	r3,3
   118dc:	00bfdfc4 	movi	r2,-129
   118e0:	d8c02915 	stw	r3,164(sp)
   118e4:	90a4703a 	and	r18,r18,r2
   118e8:	df002783 	ldbu	fp,158(sp)
   118ec:	d8c02b15 	stw	r3,172(sp)
   118f0:	d8002a15 	stw	zero,168(sp)
   118f4:	d8003215 	stw	zero,200(sp)
   118f8:	003b0706 	br	10518 <__alt_mem_nios_system_shared_memory+0xfffd0518>
   118fc:	d8c02e17 	ldw	r3,184(sp)
   11900:	1cc00017 	ldw	r19,0(r3)
   11904:	18c00104 	addi	r3,r3,4
   11908:	d8c02e15 	stw	r3,184(sp)
   1190c:	982dd7fa 	srai	r22,r19,31
   11910:	b005883a 	mov	r2,r22
   11914:	003a7706 	br	102f4 <__alt_mem_nios_system_shared_memory+0xfffd02f4>
   11918:	d8c02e17 	ldw	r3,184(sp)
   1191c:	d9002f17 	ldw	r4,188(sp)
   11920:	18800017 	ldw	r2,0(r3)
   11924:	18c00104 	addi	r3,r3,4
   11928:	d8c02e15 	stw	r3,184(sp)
   1192c:	11000015 	stw	r4,0(r2)
   11930:	00395406 	br	fe84 <__alt_mem_nios_system_shared_memory+0xfffcfe84>
   11934:	d9002e17 	ldw	r4,184(sp)
   11938:	002d883a 	mov	r22,zero
   1193c:	24c00017 	ldw	r19,0(r4)
   11940:	21000104 	addi	r4,r4,4
   11944:	d9002e15 	stw	r4,184(sp)
   11948:	003c0706 	br	10968 <__alt_mem_nios_system_shared_memory+0xfffd0968>
   1194c:	d9402e17 	ldw	r5,184(sp)
   11950:	d8c02a17 	ldw	r3,168(sp)
   11954:	002d883a 	mov	r22,zero
   11958:	28800104 	addi	r2,r5,4
   1195c:	2cc0000b 	ldhu	r19,0(r5)
   11960:	183dc10e 	bge	r3,zero,11068 <__alt_mem_nios_system_shared_memory+0xfffd1068>
   11964:	003f7506 	br	1173c <__alt_mem_nios_system_shared_memory+0xfffd173c>
   11968:	040000b4 	movhi	r16,2
   1196c:	843a8804 	addi	r16,r16,-5600
   11970:	003aa706 	br	10410 <__alt_mem_nios_system_shared_memory+0xfffd0410>
   11974:	d9002d17 	ldw	r4,180(sp)
   11978:	d9801e04 	addi	r6,sp,120
   1197c:	b80b883a 	mov	r5,r23
   11980:	00182940 	call	18294 <__sprint_r>
   11984:	103a0b1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11988:	dc402617 	ldw	r17,152(sp)
   1198c:	d8c02017 	ldw	r3,128(sp)
   11990:	da000404 	addi	r8,sp,16
   11994:	003f9c06 	br	11808 <__alt_mem_nios_system_shared_memory+0xfffd1808>
   11998:	ac400043 	ldbu	r17,1(r21)
   1199c:	84000814 	ori	r16,r16,32
   119a0:	ad400044 	addi	r21,r21,1
   119a4:	8c403fcc 	andi	r17,r17,255
   119a8:	8c40201c 	xori	r17,r17,128
   119ac:	8c7fe004 	addi	r17,r17,-128
   119b0:	00395e06 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   119b4:	d8c02e15 	stw	r3,184(sp)
   119b8:	0039883a 	mov	fp,zero
   119bc:	003e3506 	br	11294 <__alt_mem_nios_system_shared_memory+0xfffd1294>
   119c0:	d9002d17 	ldw	r4,180(sp)
   119c4:	d9801e04 	addi	r6,sp,120
   119c8:	b80b883a 	mov	r5,r23
   119cc:	00182940 	call	18294 <__sprint_r>
   119d0:	1039f81e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   119d4:	d8c02017 	ldw	r3,128(sp)
   119d8:	da000404 	addi	r8,sp,16
   119dc:	003cd006 	br	10d20 <__alt_mem_nios_system_shared_memory+0xfffd0d20>
   119e0:	8009883a 	mov	r4,r16
   119e4:	df003d15 	stw	fp,244(sp)
   119e8:	000ba8c0 	call	ba8c <strlen>
   119ec:	d8802b15 	stw	r2,172(sp)
   119f0:	da003d17 	ldw	r8,244(sp)
   119f4:	103c200e 	bge	r2,zero,10a78 <__alt_mem_nios_system_shared_memory+0xfffd0a78>
   119f8:	0005883a 	mov	r2,zero
   119fc:	003c1e06 	br	10a78 <__alt_mem_nios_system_shared_memory+0xfffd0a78>
   11a00:	d9002d17 	ldw	r4,180(sp)
   11a04:	d9801e04 	addi	r6,sp,120
   11a08:	b80b883a 	mov	r5,r23
   11a0c:	00182940 	call	18294 <__sprint_r>
   11a10:	1039e81e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11a14:	d8c02017 	ldw	r3,128(sp)
   11a18:	d8801f17 	ldw	r2,124(sp)
   11a1c:	da000404 	addi	r8,sp,16
   11a20:	d9403317 	ldw	r5,204(sp)
   11a24:	10800044 	addi	r2,r2,1
   11a28:	44000015 	stw	r16,0(r8)
   11a2c:	28c7883a 	add	r3,r5,r3
   11a30:	003b5b06 	br	107a0 <__alt_mem_nios_system_shared_memory+0xfffd07a0>
   11a34:	010000b4 	movhi	r4,2
   11a38:	213aa3c4 	addi	r4,r4,-5489
   11a3c:	d9003515 	stw	r4,212(sp)
   11a40:	003af206 	br	1060c <__alt_mem_nios_system_shared_memory+0xfffd060c>
   11a44:	013fffc4 	movi	r4,-1
   11a48:	003a0806 	br	1026c <__alt_mem_nios_system_shared_memory+0xfffd026c>
   11a4c:	0023883a 	mov	r17,zero
   11a50:	003d9d06 	br	110c8 <__alt_mem_nios_system_shared_memory+0xfffd10c8>
   11a54:	d9002d17 	ldw	r4,180(sp)
   11a58:	d9801e04 	addi	r6,sp,120
   11a5c:	b80b883a 	mov	r5,r23
   11a60:	00182940 	call	18294 <__sprint_r>
   11a64:	1039d31e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11a68:	d8c02017 	ldw	r3,128(sp)
   11a6c:	da000404 	addi	r8,sp,16
   11a70:	003d9406 	br	110c4 <__alt_mem_nios_system_shared_memory+0xfffd10c4>
   11a74:	010000b4 	movhi	r4,2
   11a78:	213a9fc4 	addi	r4,r4,-5505
   11a7c:	d9002c15 	stw	r4,176(sp)
   11a80:	d9002c17 	ldw	r4,176(sp)
   11a84:	1c47883a 	add	r3,r3,r17
   11a88:	10800044 	addi	r2,r2,1
   11a8c:	41000015 	stw	r4,0(r8)
   11a90:	44400115 	stw	r17,4(r8)
   11a94:	d8c02015 	stw	r3,128(sp)
   11a98:	d8801f15 	stw	r2,124(sp)
   11a9c:	010001c4 	movi	r4,7
   11aa0:	20bfd716 	blt	r4,r2,11a00 <__alt_mem_nios_system_shared_memory+0xfffd1a00>
   11aa4:	42000204 	addi	r8,r8,8
   11aa8:	003fdd06 	br	11a20 <__alt_mem_nios_system_shared_memory+0xfffd1a20>
   11aac:	d9002d17 	ldw	r4,180(sp)
   11ab0:	d9801e04 	addi	r6,sp,120
   11ab4:	b80b883a 	mov	r5,r23
   11ab8:	00182940 	call	18294 <__sprint_r>
   11abc:	1039bd1e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11ac0:	d8802617 	ldw	r2,152(sp)
   11ac4:	d8c02017 	ldw	r3,128(sp)
   11ac8:	da000404 	addi	r8,sp,16
   11acc:	003e1006 	br	11310 <__alt_mem_nios_system_shared_memory+0xfffd1310>
   11ad0:	00800044 	movi	r2,1
   11ad4:	10803fcc 	andi	r2,r2,255
   11ad8:	00c00044 	movi	r3,1
   11adc:	10fa0d26 	beq	r2,r3,10314 <__alt_mem_nios_system_shared_memory+0xfffd0314>
   11ae0:	00c00084 	movi	r3,2
   11ae4:	10fbaf26 	beq	r2,r3,109a4 <__alt_mem_nios_system_shared_memory+0xfffd09a4>
   11ae8:	003a6d06 	br	104a0 <__alt_mem_nios_system_shared_memory+0xfffd04a0>
   11aec:	010000b4 	movhi	r4,2
   11af0:	213aa3c4 	addi	r4,r4,-5489
   11af4:	d9003515 	stw	r4,212(sp)
   11af8:	003b5406 	br	1084c <__alt_mem_nios_system_shared_memory+0xfffd084c>
   11afc:	d8802a17 	ldw	r2,168(sp)
   11b00:	00c00184 	movi	r3,6
   11b04:	1880012e 	bgeu	r3,r2,11b0c <___vfprintf_internal_r+0x1d68>
   11b08:	1805883a 	mov	r2,r3
   11b0c:	d8802b15 	stw	r2,172(sp)
   11b10:	1000ef16 	blt	r2,zero,11ed0 <___vfprintf_internal_r+0x212c>
   11b14:	040000b4 	movhi	r16,2
   11b18:	d8802915 	stw	r2,164(sp)
   11b1c:	dcc02e15 	stw	r19,184(sp)
   11b20:	d8002a15 	stw	zero,168(sp)
   11b24:	d8003215 	stw	zero,200(sp)
   11b28:	843a9604 	addi	r16,r16,-5544
   11b2c:	0039883a 	mov	fp,zero
   11b30:	003a8006 	br	10534 <__alt_mem_nios_system_shared_memory+0xfffd0534>
   11b34:	0021883a 	mov	r16,zero
   11b38:	003e0706 	br	11358 <__alt_mem_nios_system_shared_memory+0xfffd1358>
   11b3c:	d9002d17 	ldw	r4,180(sp)
   11b40:	d9801e04 	addi	r6,sp,120
   11b44:	b80b883a 	mov	r5,r23
   11b48:	00182940 	call	18294 <__sprint_r>
   11b4c:	1039991e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11b50:	d8802617 	ldw	r2,152(sp)
   11b54:	d9403317 	ldw	r5,204(sp)
   11b58:	d8c02017 	ldw	r3,128(sp)
   11b5c:	da000404 	addi	r8,sp,16
   11b60:	2885c83a 	sub	r2,r5,r2
   11b64:	003dfb06 	br	11354 <__alt_mem_nios_system_shared_memory+0xfffd1354>
   11b68:	9080004c 	andi	r2,r18,1
   11b6c:	103e8f1e 	bne	r2,zero,115ac <__alt_mem_nios_system_shared_memory+0xfffd15ac>
   11b70:	d8802117 	ldw	r2,132(sp)
   11b74:	003e9e06 	br	115f0 <__alt_mem_nios_system_shared_memory+0xfffd15f0>
   11b78:	1025883a 	mov	r18,r2
   11b7c:	0039883a 	mov	fp,zero
   11b80:	00800084 	movi	r2,2
   11b84:	003fd306 	br	11ad4 <__alt_mem_nios_system_shared_memory+0xfffd1ad4>
   11b88:	07000b44 	movi	fp,45
   11b8c:	df002785 	stb	fp,158(sp)
   11b90:	003a1b06 	br	10400 <__alt_mem_nios_system_shared_memory+0xfffd0400>
   11b94:	00c00b44 	movi	r3,45
   11b98:	d8c02785 	stb	r3,158(sp)
   11b9c:	d8802915 	stw	r2,164(sp)
   11ba0:	dc802c17 	ldw	r18,176(sp)
   11ba4:	d8002a15 	stw	zero,168(sp)
   11ba8:	07000b44 	movi	fp,45
   11bac:	003a5e06 	br	10528 <__alt_mem_nios_system_shared_memory+0xfffd0528>
   11bb0:	040000b4 	movhi	r16,2
   11bb4:	843a8b04 	addi	r16,r16,-5588
   11bb8:	003f4706 	br	118d8 <__alt_mem_nios_system_shared_memory+0xfffd18d8>
   11bbc:	d9002e17 	ldw	r4,184(sp)
   11bc0:	d9402f17 	ldw	r5,188(sp)
   11bc4:	20800017 	ldw	r2,0(r4)
   11bc8:	21000104 	addi	r4,r4,4
   11bcc:	d9002e15 	stw	r4,184(sp)
   11bd0:	11400015 	stw	r5,0(r2)
   11bd4:	0038ab06 	br	fe84 <__alt_mem_nios_system_shared_memory+0xfffcfe84>
   11bd8:	dd802617 	ldw	r22,152(sp)
   11bdc:	00bfff44 	movi	r2,-3
   11be0:	b0801c16 	blt	r22,r2,11c54 <___vfprintf_internal_r+0x1eb0>
   11be4:	d9402a17 	ldw	r5,168(sp)
   11be8:	2d801a16 	blt	r5,r22,11c54 <___vfprintf_internal_r+0x1eb0>
   11bec:	dd803215 	stw	r22,200(sp)
   11bf0:	003e8906 	br	11618 <__alt_mem_nios_system_shared_memory+0xfffd1618>
   11bf4:	010000b4 	movhi	r4,2
   11bf8:	213a9fc4 	addi	r4,r4,-5505
   11bfc:	d9002c15 	stw	r4,176(sp)
   11c00:	003c9106 	br	10e48 <__alt_mem_nios_system_shared_memory+0xfffd0e48>
   11c04:	e005883a 	mov	r2,fp
   11c08:	003e7906 	br	115f0 <__alt_mem_nios_system_shared_memory+0xfffd15f0>
   11c0c:	d9002a17 	ldw	r4,168(sp)
   11c10:	df002783 	ldbu	fp,158(sp)
   11c14:	dcc02e15 	stw	r19,184(sp)
   11c18:	d9002915 	stw	r4,164(sp)
   11c1c:	d9002b15 	stw	r4,172(sp)
   11c20:	d8002a15 	stw	zero,168(sp)
   11c24:	d8003215 	stw	zero,200(sp)
   11c28:	003a3b06 	br	10518 <__alt_mem_nios_system_shared_memory+0xfffd0518>
   11c2c:	9080004c 	andi	r2,r18,1
   11c30:	0039883a 	mov	fp,zero
   11c34:	10000426 	beq	r2,zero,11c48 <___vfprintf_internal_r+0x1ea4>
   11c38:	00800c04 	movi	r2,48
   11c3c:	dc001dc4 	addi	r16,sp,119
   11c40:	d8801dc5 	stb	r2,119(sp)
   11c44:	003b6406 	br	109d8 <__alt_mem_nios_system_shared_memory+0xfffd09d8>
   11c48:	d8002b15 	stw	zero,172(sp)
   11c4c:	dc001e04 	addi	r16,sp,120
   11c50:	003a2b06 	br	10500 <__alt_mem_nios_system_shared_memory+0xfffd0500>
   11c54:	8c7fff84 	addi	r17,r17,-2
   11c58:	b5bfffc4 	addi	r22,r22,-1
   11c5c:	dd802615 	stw	r22,152(sp)
   11c60:	dc4022c5 	stb	r17,139(sp)
   11c64:	b000bf16 	blt	r22,zero,11f64 <___vfprintf_internal_r+0x21c0>
   11c68:	00800ac4 	movi	r2,43
   11c6c:	d8802305 	stb	r2,140(sp)
   11c70:	00800244 	movi	r2,9
   11c74:	15807016 	blt	r2,r22,11e38 <___vfprintf_internal_r+0x2094>
   11c78:	00800c04 	movi	r2,48
   11c7c:	b5800c04 	addi	r22,r22,48
   11c80:	d8802345 	stb	r2,141(sp)
   11c84:	dd802385 	stb	r22,142(sp)
   11c88:	d88023c4 	addi	r2,sp,143
   11c8c:	df0022c4 	addi	fp,sp,139
   11c90:	d8c03317 	ldw	r3,204(sp)
   11c94:	1739c83a 	sub	fp,r2,fp
   11c98:	d9003317 	ldw	r4,204(sp)
   11c9c:	e0c7883a 	add	r3,fp,r3
   11ca0:	df003a15 	stw	fp,232(sp)
   11ca4:	d8c02b15 	stw	r3,172(sp)
   11ca8:	00800044 	movi	r2,1
   11cac:	1100b30e 	bge	r2,r4,11f7c <___vfprintf_internal_r+0x21d8>
   11cb0:	d8c02b17 	ldw	r3,172(sp)
   11cb4:	18c00044 	addi	r3,r3,1
   11cb8:	d8c02b15 	stw	r3,172(sp)
   11cbc:	1805883a 	mov	r2,r3
   11cc0:	1800ac16 	blt	r3,zero,11f74 <___vfprintf_internal_r+0x21d0>
   11cc4:	d8003215 	stw	zero,200(sp)
   11cc8:	003e5d06 	br	11640 <__alt_mem_nios_system_shared_memory+0xfffd1640>
   11ccc:	d9002d17 	ldw	r4,180(sp)
   11cd0:	d9801e04 	addi	r6,sp,120
   11cd4:	b80b883a 	mov	r5,r23
   11cd8:	00182940 	call	18294 <__sprint_r>
   11cdc:	1039351e 	bne	r2,zero,101b4 <__alt_mem_nios_system_shared_memory+0xfffd01b4>
   11ce0:	dc402617 	ldw	r17,152(sp)
   11ce4:	d8c02017 	ldw	r3,128(sp)
   11ce8:	d8801f17 	ldw	r2,124(sp)
   11cec:	da000404 	addi	r8,sp,16
   11cf0:	003ed606 	br	1184c <__alt_mem_nios_system_shared_memory+0xfffd184c>
   11cf4:	182b883a 	mov	r21,r3
   11cf8:	d8002a15 	stw	zero,168(sp)
   11cfc:	00388c06 	br	ff30 <__alt_mem_nios_system_shared_memory+0xfffcff30>
   11d00:	d8802a17 	ldw	r2,168(sp)
   11d04:	103e071e 	bne	r2,zero,11524 <__alt_mem_nios_system_shared_memory+0xfffd1524>
   11d08:	dc002a15 	stw	r16,168(sp)
   11d0c:	003e0506 	br	11524 <__alt_mem_nios_system_shared_memory+0xfffd1524>
   11d10:	d9002a17 	ldw	r4,168(sp)
   11d14:	20c00044 	addi	r3,r4,1
   11d18:	003e0f06 	br	11558 <__alt_mem_nios_system_shared_memory+0xfffd1558>
   11d1c:	01400184 	movi	r5,6
   11d20:	d9402a15 	stw	r5,168(sp)
   11d24:	003dff06 	br	11524 <__alt_mem_nios_system_shared_memory+0xfffd1524>
   11d28:	d8802104 	addi	r2,sp,132
   11d2c:	d8800315 	stw	r2,12(sp)
   11d30:	d8802504 	addi	r2,sp,148
   11d34:	d8800215 	stw	r2,8(sp)
   11d38:	d8802604 	addi	r2,sp,152
   11d3c:	d8800115 	stw	r2,4(sp)
   11d40:	d8802a17 	ldw	r2,168(sp)
   11d44:	d9403617 	ldw	r5,216(sp)
   11d48:	d9002d17 	ldw	r4,180(sp)
   11d4c:	d8800015 	stw	r2,0(sp)
   11d50:	01c000c4 	movi	r7,3
   11d54:	980d883a 	mov	r6,r19
   11d58:	da003d15 	stw	r8,244(sp)
   11d5c:	00125880 	call	12588 <_dtoa_r>
   11d60:	d8c02a17 	ldw	r3,168(sp)
   11d64:	da003d17 	ldw	r8,244(sp)
   11d68:	1021883a 	mov	r16,r2
   11d6c:	10f9883a 	add	fp,r2,r3
   11d70:	81000007 	ldb	r4,0(r16)
   11d74:	00800c04 	movi	r2,48
   11d78:	20805e26 	beq	r4,r2,11ef4 <___vfprintf_internal_r+0x2150>
   11d7c:	d8c02617 	ldw	r3,152(sp)
   11d80:	e0f9883a 	add	fp,fp,r3
   11d84:	003e0a06 	br	115b0 <__alt_mem_nios_system_shared_memory+0xfffd15b0>
   11d88:	00c00b44 	movi	r3,45
   11d8c:	24e0003c 	xorhi	r19,r4,32768
   11d90:	d8c02905 	stb	r3,164(sp)
   11d94:	003de906 	br	1153c <__alt_mem_nios_system_shared_memory+0xfffd153c>
   11d98:	d8c03217 	ldw	r3,200(sp)
   11d9c:	00c07a0e 	bge	zero,r3,11f88 <___vfprintf_internal_r+0x21e4>
   11da0:	00800044 	movi	r2,1
   11da4:	d9003317 	ldw	r4,204(sp)
   11da8:	1105883a 	add	r2,r2,r4
   11dac:	d8802b15 	stw	r2,172(sp)
   11db0:	10004e16 	blt	r2,zero,11eec <___vfprintf_internal_r+0x2148>
   11db4:	044019c4 	movi	r17,103
   11db8:	003e2106 	br	11640 <__alt_mem_nios_system_shared_memory+0xfffd1640>
   11dbc:	d9002a17 	ldw	r4,168(sp)
   11dc0:	d8802104 	addi	r2,sp,132
   11dc4:	d8800315 	stw	r2,12(sp)
   11dc8:	d9000015 	stw	r4,0(sp)
   11dcc:	d8802504 	addi	r2,sp,148
   11dd0:	d9403617 	ldw	r5,216(sp)
   11dd4:	d9002d17 	ldw	r4,180(sp)
   11dd8:	d8800215 	stw	r2,8(sp)
   11ddc:	d8802604 	addi	r2,sp,152
   11de0:	d8800115 	stw	r2,4(sp)
   11de4:	01c000c4 	movi	r7,3
   11de8:	980d883a 	mov	r6,r19
   11dec:	da003d15 	stw	r8,244(sp)
   11df0:	00125880 	call	12588 <_dtoa_r>
   11df4:	d8c02a17 	ldw	r3,168(sp)
   11df8:	da003d17 	ldw	r8,244(sp)
   11dfc:	1021883a 	mov	r16,r2
   11e00:	00801184 	movi	r2,70
   11e04:	80f9883a 	add	fp,r16,r3
   11e08:	88bfd926 	beq	r17,r2,11d70 <__alt_mem_nios_system_shared_memory+0xfffd1d70>
   11e0c:	003de806 	br	115b0 <__alt_mem_nios_system_shared_memory+0xfffd15b0>
   11e10:	d9002a17 	ldw	r4,168(sp)
   11e14:	00c04d0e 	bge	zero,r3,11f4c <___vfprintf_internal_r+0x21a8>
   11e18:	2000441e 	bne	r4,zero,11f2c <___vfprintf_internal_r+0x2188>
   11e1c:	9480004c 	andi	r18,r18,1
   11e20:	9000421e 	bne	r18,zero,11f2c <___vfprintf_internal_r+0x2188>
   11e24:	1805883a 	mov	r2,r3
   11e28:	18006f16 	blt	r3,zero,11fe8 <___vfprintf_internal_r+0x2244>
   11e2c:	d8c03217 	ldw	r3,200(sp)
   11e30:	d8c02b15 	stw	r3,172(sp)
   11e34:	003e0206 	br	11640 <__alt_mem_nios_system_shared_memory+0xfffd1640>
   11e38:	df0022c4 	addi	fp,sp,139
   11e3c:	dc002a15 	stw	r16,168(sp)
   11e40:	4027883a 	mov	r19,r8
   11e44:	e021883a 	mov	r16,fp
   11e48:	b009883a 	mov	r4,r22
   11e4c:	01400284 	movi	r5,10
   11e50:	00050280 	call	5028 <__modsi3>
   11e54:	10800c04 	addi	r2,r2,48
   11e58:	843fffc4 	addi	r16,r16,-1
   11e5c:	b009883a 	mov	r4,r22
   11e60:	01400284 	movi	r5,10
   11e64:	80800005 	stb	r2,0(r16)
   11e68:	0004fa40 	call	4fa4 <__divsi3>
   11e6c:	102d883a 	mov	r22,r2
   11e70:	00800244 	movi	r2,9
   11e74:	15bff416 	blt	r2,r22,11e48 <__alt_mem_nios_system_shared_memory+0xfffd1e48>
   11e78:	9811883a 	mov	r8,r19
   11e7c:	b0800c04 	addi	r2,r22,48
   11e80:	8027883a 	mov	r19,r16
   11e84:	997fffc4 	addi	r5,r19,-1
   11e88:	98bfffc5 	stb	r2,-1(r19)
   11e8c:	dc002a17 	ldw	r16,168(sp)
   11e90:	2f006d2e 	bgeu	r5,fp,12048 <___vfprintf_internal_r+0x22a4>
   11e94:	d9c02384 	addi	r7,sp,142
   11e98:	3ccfc83a 	sub	r7,r7,r19
   11e9c:	d9002344 	addi	r4,sp,141
   11ea0:	e1cf883a 	add	r7,fp,r7
   11ea4:	00000106 	br	11eac <___vfprintf_internal_r+0x2108>
   11ea8:	28800003 	ldbu	r2,0(r5)
   11eac:	20800005 	stb	r2,0(r4)
   11eb0:	21000044 	addi	r4,r4,1
   11eb4:	29400044 	addi	r5,r5,1
   11eb8:	393ffb1e 	bne	r7,r4,11ea8 <__alt_mem_nios_system_shared_memory+0xfffd1ea8>
   11ebc:	d8802304 	addi	r2,sp,140
   11ec0:	14c5c83a 	sub	r2,r2,r19
   11ec4:	d8c02344 	addi	r3,sp,141
   11ec8:	1885883a 	add	r2,r3,r2
   11ecc:	003f7006 	br	11c90 <__alt_mem_nios_system_shared_memory+0xfffd1c90>
   11ed0:	0005883a 	mov	r2,zero
   11ed4:	003f0f06 	br	11b14 <__alt_mem_nios_system_shared_memory+0xfffd1b14>
   11ed8:	d8c03217 	ldw	r3,200(sp)
   11edc:	18c00044 	addi	r3,r3,1
   11ee0:	d8c02b15 	stw	r3,172(sp)
   11ee4:	1805883a 	mov	r2,r3
   11ee8:	183fb20e 	bge	r3,zero,11db4 <__alt_mem_nios_system_shared_memory+0xfffd1db4>
   11eec:	0005883a 	mov	r2,zero
   11ef0:	003fb006 	br	11db4 <__alt_mem_nios_system_shared_memory+0xfffd1db4>
   11ef4:	d9003617 	ldw	r4,216(sp)
   11ef8:	000d883a 	mov	r6,zero
   11efc:	000f883a 	mov	r7,zero
   11f00:	980b883a 	mov	r5,r19
   11f04:	d8c03c15 	stw	r3,240(sp)
   11f08:	da003d15 	stw	r8,244(sp)
   11f0c:	0007a280 	call	7a28 <__eqdf2>
   11f10:	d8c03c17 	ldw	r3,240(sp)
   11f14:	da003d17 	ldw	r8,244(sp)
   11f18:	103f9826 	beq	r2,zero,11d7c <__alt_mem_nios_system_shared_memory+0xfffd1d7c>
   11f1c:	00800044 	movi	r2,1
   11f20:	10c7c83a 	sub	r3,r2,r3
   11f24:	d8c02615 	stw	r3,152(sp)
   11f28:	003f9506 	br	11d80 <__alt_mem_nios_system_shared_memory+0xfffd1d80>
   11f2c:	d9002a17 	ldw	r4,168(sp)
   11f30:	d8c03217 	ldw	r3,200(sp)
   11f34:	20800044 	addi	r2,r4,1
   11f38:	1885883a 	add	r2,r3,r2
   11f3c:	d8802b15 	stw	r2,172(sp)
   11f40:	103dbf0e 	bge	r2,zero,11640 <__alt_mem_nios_system_shared_memory+0xfffd1640>
   11f44:	0005883a 	mov	r2,zero
   11f48:	003dbd06 	br	11640 <__alt_mem_nios_system_shared_memory+0xfffd1640>
   11f4c:	2000201e 	bne	r4,zero,11fd0 <___vfprintf_internal_r+0x222c>
   11f50:	9480004c 	andi	r18,r18,1
   11f54:	90001e1e 	bne	r18,zero,11fd0 <___vfprintf_internal_r+0x222c>
   11f58:	00800044 	movi	r2,1
   11f5c:	d8802b15 	stw	r2,172(sp)
   11f60:	003db706 	br	11640 <__alt_mem_nios_system_shared_memory+0xfffd1640>
   11f64:	00800b44 	movi	r2,45
   11f68:	05adc83a 	sub	r22,zero,r22
   11f6c:	d8802305 	stb	r2,140(sp)
   11f70:	003f3f06 	br	11c70 <__alt_mem_nios_system_shared_memory+0xfffd1c70>
   11f74:	0005883a 	mov	r2,zero
   11f78:	003f5206 	br	11cc4 <__alt_mem_nios_system_shared_memory+0xfffd1cc4>
   11f7c:	90a4703a 	and	r18,r18,r2
   11f80:	903f4e26 	beq	r18,zero,11cbc <__alt_mem_nios_system_shared_memory+0xfffd1cbc>
   11f84:	003f4a06 	br	11cb0 <__alt_mem_nios_system_shared_memory+0xfffd1cb0>
   11f88:	00800084 	movi	r2,2
   11f8c:	10c5c83a 	sub	r2,r2,r3
   11f90:	003f8406 	br	11da4 <__alt_mem_nios_system_shared_memory+0xfffd1da4>
   11f94:	d9402e17 	ldw	r5,184(sp)
   11f98:	d9002e17 	ldw	r4,184(sp)
   11f9c:	ac400043 	ldbu	r17,1(r21)
   11fa0:	29400017 	ldw	r5,0(r5)
   11fa4:	20800104 	addi	r2,r4,4
   11fa8:	d8802e15 	stw	r2,184(sp)
   11fac:	d9402a15 	stw	r5,168(sp)
   11fb0:	182b883a 	mov	r21,r3
   11fb4:	283e7b0e 	bge	r5,zero,119a4 <__alt_mem_nios_system_shared_memory+0xfffd19a4>
   11fb8:	8c403fcc 	andi	r17,r17,255
   11fbc:	017fffc4 	movi	r5,-1
   11fc0:	8c40201c 	xori	r17,r17,128
   11fc4:	d9402a15 	stw	r5,168(sp)
   11fc8:	8c7fe004 	addi	r17,r17,-128
   11fcc:	0037d706 	br	ff2c <__alt_mem_nios_system_shared_memory+0xfffcff2c>
   11fd0:	d8c02a17 	ldw	r3,168(sp)
   11fd4:	18c00084 	addi	r3,r3,2
   11fd8:	d8c02b15 	stw	r3,172(sp)
   11fdc:	1805883a 	mov	r2,r3
   11fe0:	183d970e 	bge	r3,zero,11640 <__alt_mem_nios_system_shared_memory+0xfffd1640>
   11fe4:	003fd706 	br	11f44 <__alt_mem_nios_system_shared_memory+0xfffd1f44>
   11fe8:	0005883a 	mov	r2,zero
   11fec:	003f8f06 	br	11e2c <__alt_mem_nios_system_shared_memory+0xfffd1e2c>
   11ff0:	9080004c 	andi	r2,r18,1
   11ff4:	103f821e 	bne	r2,zero,11e00 <__alt_mem_nios_system_shared_memory+0xfffd1e00>
   11ff8:	d8802117 	ldw	r2,132(sp)
   11ffc:	1405c83a 	sub	r2,r2,r16
   12000:	d8803315 	stw	r2,204(sp)
   12004:	b47ef426 	beq	r22,r17,11bd8 <__alt_mem_nios_system_shared_memory+0xfffd1bd8>
   12008:	dd802617 	ldw	r22,152(sp)
   1200c:	003f1206 	br	11c58 <__alt_mem_nios_system_shared_memory+0xfffd1c58>
   12010:	d8c02b03 	ldbu	r3,172(sp)
   12014:	d8c02785 	stb	r3,158(sp)
   12018:	0038df06 	br	10398 <__alt_mem_nios_system_shared_memory+0xfffd0398>
   1201c:	d8c02b03 	ldbu	r3,172(sp)
   12020:	d8c02785 	stb	r3,158(sp)
   12024:	0038aa06 	br	102d0 <__alt_mem_nios_system_shared_memory+0xfffd02d0>
   12028:	d8c02b03 	ldbu	r3,172(sp)
   1202c:	d8c02785 	stb	r3,158(sp)
   12030:	003a4306 	br	10940 <__alt_mem_nios_system_shared_memory+0xfffd0940>
   12034:	d8c02b03 	ldbu	r3,172(sp)
   12038:	d8c02785 	stb	r3,158(sp)
   1203c:	003af506 	br	10c14 <__alt_mem_nios_system_shared_memory+0xfffd0c14>
   12040:	0005883a 	mov	r2,zero
   12044:	003d7b06 	br	11634 <__alt_mem_nios_system_shared_memory+0xfffd1634>
   12048:	d8802344 	addi	r2,sp,141
   1204c:	003f1006 	br	11c90 <__alt_mem_nios_system_shared_memory+0xfffd1c90>
   12050:	d8c02b03 	ldbu	r3,172(sp)
   12054:	d8c02785 	stb	r3,158(sp)
   12058:	0038fd06 	br	10450 <__alt_mem_nios_system_shared_memory+0xfffd0450>
   1205c:	d8c02b03 	ldbu	r3,172(sp)
   12060:	d8c02785 	stb	r3,158(sp)
   12064:	003a9706 	br	10ac4 <__alt_mem_nios_system_shared_memory+0xfffd0ac4>
   12068:	d8c02b03 	ldbu	r3,172(sp)
   1206c:	d8c02785 	stb	r3,158(sp)
   12070:	003a1806 	br	108d4 <__alt_mem_nios_system_shared_memory+0xfffd08d4>
   12074:	d8c02b03 	ldbu	r3,172(sp)
   12078:	d8c02785 	stb	r3,158(sp)
   1207c:	003abe06 	br	10b78 <__alt_mem_nios_system_shared_memory+0xfffd0b78>

00012080 <__vfprintf_internal>:
   12080:	008000b4 	movhi	r2,2
   12084:	10824204 	addi	r2,r2,2312
   12088:	300f883a 	mov	r7,r6
   1208c:	280d883a 	mov	r6,r5
   12090:	200b883a 	mov	r5,r4
   12094:	11000017 	ldw	r4,0(r2)
   12098:	000fda41 	jmpi	fda4 <___vfprintf_internal_r>

0001209c <__sbprintf>:
   1209c:	2880030b 	ldhu	r2,12(r5)
   120a0:	2ac01917 	ldw	r11,100(r5)
   120a4:	2a80038b 	ldhu	r10,14(r5)
   120a8:	2a400717 	ldw	r9,28(r5)
   120ac:	2a000917 	ldw	r8,36(r5)
   120b0:	defee204 	addi	sp,sp,-1144
   120b4:	00c10004 	movi	r3,1024
   120b8:	dc011a15 	stw	r16,1128(sp)
   120bc:	10bfff4c 	andi	r2,r2,65533
   120c0:	2821883a 	mov	r16,r5
   120c4:	d8cb883a 	add	r5,sp,r3
   120c8:	dc811c15 	stw	r18,1136(sp)
   120cc:	dc411b15 	stw	r17,1132(sp)
   120d0:	dfc11d15 	stw	ra,1140(sp)
   120d4:	2025883a 	mov	r18,r4
   120d8:	d881030d 	sth	r2,1036(sp)
   120dc:	dac11915 	stw	r11,1124(sp)
   120e0:	da81038d 	sth	r10,1038(sp)
   120e4:	da410715 	stw	r9,1052(sp)
   120e8:	da010915 	stw	r8,1060(sp)
   120ec:	dec10015 	stw	sp,1024(sp)
   120f0:	dec10415 	stw	sp,1040(sp)
   120f4:	d8c10215 	stw	r3,1032(sp)
   120f8:	d8c10515 	stw	r3,1044(sp)
   120fc:	d8010615 	stw	zero,1048(sp)
   12100:	000fda40 	call	fda4 <___vfprintf_internal_r>
   12104:	1023883a 	mov	r17,r2
   12108:	10000416 	blt	r2,zero,1211c <__sbprintf+0x80>
   1210c:	d9410004 	addi	r5,sp,1024
   12110:	9009883a 	mov	r4,r18
   12114:	000940c0 	call	940c <_fflush_r>
   12118:	10000d1e 	bne	r2,zero,12150 <__sbprintf+0xb4>
   1211c:	d881030b 	ldhu	r2,1036(sp)
   12120:	1080100c 	andi	r2,r2,64
   12124:	10000326 	beq	r2,zero,12134 <__sbprintf+0x98>
   12128:	8080030b 	ldhu	r2,12(r16)
   1212c:	10801014 	ori	r2,r2,64
   12130:	8080030d 	sth	r2,12(r16)
   12134:	8805883a 	mov	r2,r17
   12138:	dfc11d17 	ldw	ra,1140(sp)
   1213c:	dc811c17 	ldw	r18,1136(sp)
   12140:	dc411b17 	ldw	r17,1132(sp)
   12144:	dc011a17 	ldw	r16,1128(sp)
   12148:	dec11e04 	addi	sp,sp,1144
   1214c:	f800283a 	ret
   12150:	047fffc4 	movi	r17,-1
   12154:	003ff106 	br	1211c <__alt_mem_nios_system_shared_memory+0xfffd211c>

00012158 <_write_r>:
   12158:	defffd04 	addi	sp,sp,-12
   1215c:	2805883a 	mov	r2,r5
   12160:	dc000015 	stw	r16,0(sp)
   12164:	040000b4 	movhi	r16,2
   12168:	dc400115 	stw	r17,4(sp)
   1216c:	300b883a 	mov	r5,r6
   12170:	84094804 	addi	r16,r16,9504
   12174:	2023883a 	mov	r17,r4
   12178:	380d883a 	mov	r6,r7
   1217c:	1009883a 	mov	r4,r2
   12180:	dfc00215 	stw	ra,8(sp)
   12184:	80000015 	stw	zero,0(r16)
   12188:	001ba600 	call	1ba60 <write>
   1218c:	00ffffc4 	movi	r3,-1
   12190:	10c00526 	beq	r2,r3,121a8 <_write_r+0x50>
   12194:	dfc00217 	ldw	ra,8(sp)
   12198:	dc400117 	ldw	r17,4(sp)
   1219c:	dc000017 	ldw	r16,0(sp)
   121a0:	dec00304 	addi	sp,sp,12
   121a4:	f800283a 	ret
   121a8:	80c00017 	ldw	r3,0(r16)
   121ac:	183ff926 	beq	r3,zero,12194 <__alt_mem_nios_system_shared_memory+0xfffd2194>
   121b0:	88c00015 	stw	r3,0(r17)
   121b4:	003ff706 	br	12194 <__alt_mem_nios_system_shared_memory+0xfffd2194>

000121b8 <__swsetup_r>:
   121b8:	008000b4 	movhi	r2,2
   121bc:	defffd04 	addi	sp,sp,-12
   121c0:	10824204 	addi	r2,r2,2312
   121c4:	dc400115 	stw	r17,4(sp)
   121c8:	2023883a 	mov	r17,r4
   121cc:	11000017 	ldw	r4,0(r2)
   121d0:	dc000015 	stw	r16,0(sp)
   121d4:	dfc00215 	stw	ra,8(sp)
   121d8:	2821883a 	mov	r16,r5
   121dc:	20000226 	beq	r4,zero,121e8 <__swsetup_r+0x30>
   121e0:	20800e17 	ldw	r2,56(r4)
   121e4:	10003126 	beq	r2,zero,122ac <__swsetup_r+0xf4>
   121e8:	8080030b 	ldhu	r2,12(r16)
   121ec:	10c0020c 	andi	r3,r2,8
   121f0:	1009883a 	mov	r4,r2
   121f4:	18000f26 	beq	r3,zero,12234 <__swsetup_r+0x7c>
   121f8:	80c00417 	ldw	r3,16(r16)
   121fc:	18001526 	beq	r3,zero,12254 <__swsetup_r+0x9c>
   12200:	1100004c 	andi	r4,r2,1
   12204:	20001c1e 	bne	r4,zero,12278 <__swsetup_r+0xc0>
   12208:	1080008c 	andi	r2,r2,2
   1220c:	1000291e 	bne	r2,zero,122b4 <__swsetup_r+0xfc>
   12210:	80800517 	ldw	r2,20(r16)
   12214:	80800215 	stw	r2,8(r16)
   12218:	18001c26 	beq	r3,zero,1228c <__swsetup_r+0xd4>
   1221c:	0005883a 	mov	r2,zero
   12220:	dfc00217 	ldw	ra,8(sp)
   12224:	dc400117 	ldw	r17,4(sp)
   12228:	dc000017 	ldw	r16,0(sp)
   1222c:	dec00304 	addi	sp,sp,12
   12230:	f800283a 	ret
   12234:	2080040c 	andi	r2,r4,16
   12238:	10002e26 	beq	r2,zero,122f4 <__swsetup_r+0x13c>
   1223c:	2080010c 	andi	r2,r4,4
   12240:	10001e1e 	bne	r2,zero,122bc <__swsetup_r+0x104>
   12244:	80c00417 	ldw	r3,16(r16)
   12248:	20800214 	ori	r2,r4,8
   1224c:	8080030d 	sth	r2,12(r16)
   12250:	183feb1e 	bne	r3,zero,12200 <__alt_mem_nios_system_shared_memory+0xfffd2200>
   12254:	1100a00c 	andi	r4,r2,640
   12258:	01408004 	movi	r5,512
   1225c:	217fe826 	beq	r4,r5,12200 <__alt_mem_nios_system_shared_memory+0xfffd2200>
   12260:	800b883a 	mov	r5,r16
   12264:	8809883a 	mov	r4,r17
   12268:	000a6000 	call	a600 <__smakebuf_r>
   1226c:	8080030b 	ldhu	r2,12(r16)
   12270:	80c00417 	ldw	r3,16(r16)
   12274:	003fe206 	br	12200 <__alt_mem_nios_system_shared_memory+0xfffd2200>
   12278:	80800517 	ldw	r2,20(r16)
   1227c:	80000215 	stw	zero,8(r16)
   12280:	0085c83a 	sub	r2,zero,r2
   12284:	80800615 	stw	r2,24(r16)
   12288:	183fe41e 	bne	r3,zero,1221c <__alt_mem_nios_system_shared_memory+0xfffd221c>
   1228c:	80c0030b 	ldhu	r3,12(r16)
   12290:	0005883a 	mov	r2,zero
   12294:	1900200c 	andi	r4,r3,128
   12298:	203fe126 	beq	r4,zero,12220 <__alt_mem_nios_system_shared_memory+0xfffd2220>
   1229c:	18c01014 	ori	r3,r3,64
   122a0:	80c0030d 	sth	r3,12(r16)
   122a4:	00bfffc4 	movi	r2,-1
   122a8:	003fdd06 	br	12220 <__alt_mem_nios_system_shared_memory+0xfffd2220>
   122ac:	00099c00 	call	99c0 <__sinit>
   122b0:	003fcd06 	br	121e8 <__alt_mem_nios_system_shared_memory+0xfffd21e8>
   122b4:	0005883a 	mov	r2,zero
   122b8:	003fd606 	br	12214 <__alt_mem_nios_system_shared_memory+0xfffd2214>
   122bc:	81400c17 	ldw	r5,48(r16)
   122c0:	28000626 	beq	r5,zero,122dc <__swsetup_r+0x124>
   122c4:	80801004 	addi	r2,r16,64
   122c8:	28800326 	beq	r5,r2,122d8 <__swsetup_r+0x120>
   122cc:	8809883a 	mov	r4,r17
   122d0:	0009c8c0 	call	9c8c <_free_r>
   122d4:	8100030b 	ldhu	r4,12(r16)
   122d8:	80000c15 	stw	zero,48(r16)
   122dc:	80c00417 	ldw	r3,16(r16)
   122e0:	00bff6c4 	movi	r2,-37
   122e4:	1108703a 	and	r4,r2,r4
   122e8:	80000115 	stw	zero,4(r16)
   122ec:	80c00015 	stw	r3,0(r16)
   122f0:	003fd506 	br	12248 <__alt_mem_nios_system_shared_memory+0xfffd2248>
   122f4:	00800244 	movi	r2,9
   122f8:	88800015 	stw	r2,0(r17)
   122fc:	20801014 	ori	r2,r4,64
   12300:	8080030d 	sth	r2,12(r16)
   12304:	00bfffc4 	movi	r2,-1
   12308:	003fc506 	br	12220 <__alt_mem_nios_system_shared_memory+0xfffd2220>

0001230c <_close_r>:
   1230c:	defffd04 	addi	sp,sp,-12
   12310:	dc000015 	stw	r16,0(sp)
   12314:	040000b4 	movhi	r16,2
   12318:	dc400115 	stw	r17,4(sp)
   1231c:	84094804 	addi	r16,r16,9504
   12320:	2023883a 	mov	r17,r4
   12324:	2809883a 	mov	r4,r5
   12328:	dfc00215 	stw	ra,8(sp)
   1232c:	80000015 	stw	zero,0(r16)
   12330:	001ac4c0 	call	1ac4c <close>
   12334:	00ffffc4 	movi	r3,-1
   12338:	10c00526 	beq	r2,r3,12350 <_close_r+0x44>
   1233c:	dfc00217 	ldw	ra,8(sp)
   12340:	dc400117 	ldw	r17,4(sp)
   12344:	dc000017 	ldw	r16,0(sp)
   12348:	dec00304 	addi	sp,sp,12
   1234c:	f800283a 	ret
   12350:	80c00017 	ldw	r3,0(r16)
   12354:	183ff926 	beq	r3,zero,1233c <__alt_mem_nios_system_shared_memory+0xfffd233c>
   12358:	88c00015 	stw	r3,0(r17)
   1235c:	003ff706 	br	1233c <__alt_mem_nios_system_shared_memory+0xfffd233c>

00012360 <quorem>:
   12360:	defff204 	addi	sp,sp,-56
   12364:	ddc00b15 	stw	r23,44(sp)
   12368:	20800417 	ldw	r2,16(r4)
   1236c:	2dc00417 	ldw	r23,16(r5)
   12370:	dfc00d15 	stw	ra,52(sp)
   12374:	df000c15 	stw	fp,48(sp)
   12378:	dd800a15 	stw	r22,40(sp)
   1237c:	dd400915 	stw	r21,36(sp)
   12380:	dd000815 	stw	r20,32(sp)
   12384:	dcc00715 	stw	r19,28(sp)
   12388:	dc800615 	stw	r18,24(sp)
   1238c:	dc400515 	stw	r17,20(sp)
   12390:	dc000415 	stw	r16,16(sp)
   12394:	15c07a16 	blt	r2,r23,12580 <quorem+0x220>
   12398:	bdffffc4 	addi	r23,r23,-1
   1239c:	bde9883a 	add	r20,r23,r23
   123a0:	28c00504 	addi	r3,r5,20
   123a4:	a529883a 	add	r20,r20,r20
   123a8:	1d39883a 	add	fp,r3,r20
   123ac:	24c00504 	addi	r19,r4,20
   123b0:	d9400215 	stw	r5,8(sp)
   123b4:	9d29883a 	add	r20,r19,r20
   123b8:	e1400017 	ldw	r5,0(fp)
   123bc:	d9000015 	stw	r4,0(sp)
   123c0:	a1000017 	ldw	r4,0(r20)
   123c4:	29400044 	addi	r5,r5,1
   123c8:	d8c00115 	stw	r3,4(sp)
   123cc:	dd000315 	stw	r20,12(sp)
   123d0:	000509c0 	call	509c <__udivsi3>
   123d4:	1025883a 	mov	r18,r2
   123d8:	10003026 	beq	r2,zero,1249c <quorem+0x13c>
   123dc:	dc400117 	ldw	r17,4(sp)
   123e0:	9829883a 	mov	r20,r19
   123e4:	002d883a 	mov	r22,zero
   123e8:	0021883a 	mov	r16,zero
   123ec:	8d400017 	ldw	r21,0(r17)
   123f0:	900b883a 	mov	r5,r18
   123f4:	8c400104 	addi	r17,r17,4
   123f8:	a93fffcc 	andi	r4,r21,65535
   123fc:	00051580 	call	5158 <__mulsi3>
   12400:	a808d43a 	srli	r4,r21,16
   12404:	900b883a 	mov	r5,r18
   12408:	15ad883a 	add	r22,r2,r22
   1240c:	00051580 	call	5158 <__mulsi3>
   12410:	a1000017 	ldw	r4,0(r20)
   12414:	b00cd43a 	srli	r6,r22,16
   12418:	b0ffffcc 	andi	r3,r22,65535
   1241c:	217fffcc 	andi	r5,r4,65535
   12420:	2c21883a 	add	r16,r5,r16
   12424:	80c7c83a 	sub	r3,r16,r3
   12428:	2008d43a 	srli	r4,r4,16
   1242c:	1185883a 	add	r2,r2,r6
   12430:	1821d43a 	srai	r16,r3,16
   12434:	117fffcc 	andi	r5,r2,65535
   12438:	2149c83a 	sub	r4,r4,r5
   1243c:	2421883a 	add	r16,r4,r16
   12440:	8008943a 	slli	r4,r16,16
   12444:	18ffffcc 	andi	r3,r3,65535
   12448:	102cd43a 	srli	r22,r2,16
   1244c:	20c8b03a 	or	r4,r4,r3
   12450:	a1000015 	stw	r4,0(r20)
   12454:	8021d43a 	srai	r16,r16,16
   12458:	a5000104 	addi	r20,r20,4
   1245c:	e47fe32e 	bgeu	fp,r17,123ec <__alt_mem_nios_system_shared_memory+0xfffd23ec>
   12460:	d8c00317 	ldw	r3,12(sp)
   12464:	18800017 	ldw	r2,0(r3)
   12468:	10000c1e 	bne	r2,zero,1249c <quorem+0x13c>
   1246c:	18bfff04 	addi	r2,r3,-4
   12470:	9880082e 	bgeu	r19,r2,12494 <quorem+0x134>
   12474:	18ffff17 	ldw	r3,-4(r3)
   12478:	18000326 	beq	r3,zero,12488 <quorem+0x128>
   1247c:	00000506 	br	12494 <quorem+0x134>
   12480:	10c00017 	ldw	r3,0(r2)
   12484:	1800031e 	bne	r3,zero,12494 <quorem+0x134>
   12488:	10bfff04 	addi	r2,r2,-4
   1248c:	bdffffc4 	addi	r23,r23,-1
   12490:	98bffb36 	bltu	r19,r2,12480 <__alt_mem_nios_system_shared_memory+0xfffd2480>
   12494:	d8c00017 	ldw	r3,0(sp)
   12498:	1dc00415 	stw	r23,16(r3)
   1249c:	d9400217 	ldw	r5,8(sp)
   124a0:	d9000017 	ldw	r4,0(sp)
   124a4:	0015b200 	call	15b20 <__mcmp>
   124a8:	10002816 	blt	r2,zero,1254c <quorem+0x1ec>
   124ac:	dc400117 	ldw	r17,4(sp)
   124b0:	94800044 	addi	r18,r18,1
   124b4:	980d883a 	mov	r6,r19
   124b8:	0007883a 	mov	r3,zero
   124bc:	31000017 	ldw	r4,0(r6)
   124c0:	89400017 	ldw	r5,0(r17)
   124c4:	31800104 	addi	r6,r6,4
   124c8:	20bfffcc 	andi	r2,r4,65535
   124cc:	10c7883a 	add	r3,r2,r3
   124d0:	28bfffcc 	andi	r2,r5,65535
   124d4:	1885c83a 	sub	r2,r3,r2
   124d8:	280ad43a 	srli	r5,r5,16
   124dc:	2008d43a 	srli	r4,r4,16
   124e0:	1007d43a 	srai	r3,r2,16
   124e4:	10bfffcc 	andi	r2,r2,65535
   124e8:	2149c83a 	sub	r4,r4,r5
   124ec:	20c9883a 	add	r4,r4,r3
   124f0:	200a943a 	slli	r5,r4,16
   124f4:	8c400104 	addi	r17,r17,4
   124f8:	2007d43a 	srai	r3,r4,16
   124fc:	2884b03a 	or	r2,r5,r2
   12500:	30bfff15 	stw	r2,-4(r6)
   12504:	e47fed2e 	bgeu	fp,r17,124bc <__alt_mem_nios_system_shared_memory+0xfffd24bc>
   12508:	bdc5883a 	add	r2,r23,r23
   1250c:	1085883a 	add	r2,r2,r2
   12510:	9887883a 	add	r3,r19,r2
   12514:	18800017 	ldw	r2,0(r3)
   12518:	10000c1e 	bne	r2,zero,1254c <quorem+0x1ec>
   1251c:	18bfff04 	addi	r2,r3,-4
   12520:	9880082e 	bgeu	r19,r2,12544 <quorem+0x1e4>
   12524:	18ffff17 	ldw	r3,-4(r3)
   12528:	18000326 	beq	r3,zero,12538 <quorem+0x1d8>
   1252c:	00000506 	br	12544 <quorem+0x1e4>
   12530:	10c00017 	ldw	r3,0(r2)
   12534:	1800031e 	bne	r3,zero,12544 <quorem+0x1e4>
   12538:	10bfff04 	addi	r2,r2,-4
   1253c:	bdffffc4 	addi	r23,r23,-1
   12540:	98bffb36 	bltu	r19,r2,12530 <__alt_mem_nios_system_shared_memory+0xfffd2530>
   12544:	d8c00017 	ldw	r3,0(sp)
   12548:	1dc00415 	stw	r23,16(r3)
   1254c:	9005883a 	mov	r2,r18
   12550:	dfc00d17 	ldw	ra,52(sp)
   12554:	df000c17 	ldw	fp,48(sp)
   12558:	ddc00b17 	ldw	r23,44(sp)
   1255c:	dd800a17 	ldw	r22,40(sp)
   12560:	dd400917 	ldw	r21,36(sp)
   12564:	dd000817 	ldw	r20,32(sp)
   12568:	dcc00717 	ldw	r19,28(sp)
   1256c:	dc800617 	ldw	r18,24(sp)
   12570:	dc400517 	ldw	r17,20(sp)
   12574:	dc000417 	ldw	r16,16(sp)
   12578:	dec00e04 	addi	sp,sp,56
   1257c:	f800283a 	ret
   12580:	0005883a 	mov	r2,zero
   12584:	003ff206 	br	12550 <__alt_mem_nios_system_shared_memory+0xfffd2550>

00012588 <_dtoa_r>:
   12588:	20801017 	ldw	r2,64(r4)
   1258c:	deffde04 	addi	sp,sp,-136
   12590:	df002015 	stw	fp,128(sp)
   12594:	dcc01b15 	stw	r19,108(sp)
   12598:	dc801a15 	stw	r18,104(sp)
   1259c:	dc401915 	stw	r17,100(sp)
   125a0:	dc001815 	stw	r16,96(sp)
   125a4:	dfc02115 	stw	ra,132(sp)
   125a8:	ddc01f15 	stw	r23,124(sp)
   125ac:	dd801e15 	stw	r22,120(sp)
   125b0:	dd401d15 	stw	r21,116(sp)
   125b4:	dd001c15 	stw	r20,112(sp)
   125b8:	d9c00315 	stw	r7,12(sp)
   125bc:	2039883a 	mov	fp,r4
   125c0:	3023883a 	mov	r17,r6
   125c4:	2825883a 	mov	r18,r5
   125c8:	dc002417 	ldw	r16,144(sp)
   125cc:	3027883a 	mov	r19,r6
   125d0:	10000826 	beq	r2,zero,125f4 <_dtoa_r+0x6c>
   125d4:	21801117 	ldw	r6,68(r4)
   125d8:	00c00044 	movi	r3,1
   125dc:	100b883a 	mov	r5,r2
   125e0:	1986983a 	sll	r3,r3,r6
   125e4:	11800115 	stw	r6,4(r2)
   125e8:	10c00215 	stw	r3,8(r2)
   125ec:	00152440 	call	15244 <_Bfree>
   125f0:	e0001015 	stw	zero,64(fp)
   125f4:	88002e16 	blt	r17,zero,126b0 <_dtoa_r+0x128>
   125f8:	80000015 	stw	zero,0(r16)
   125fc:	889ffc2c 	andhi	r2,r17,32752
   12600:	00dffc34 	movhi	r3,32752
   12604:	10c01c26 	beq	r2,r3,12678 <_dtoa_r+0xf0>
   12608:	000d883a 	mov	r6,zero
   1260c:	000f883a 	mov	r7,zero
   12610:	9009883a 	mov	r4,r18
   12614:	980b883a 	mov	r5,r19
   12618:	0007a280 	call	7a28 <__eqdf2>
   1261c:	10002b1e 	bne	r2,zero,126cc <_dtoa_r+0x144>
   12620:	d9c02317 	ldw	r7,140(sp)
   12624:	00800044 	movi	r2,1
   12628:	38800015 	stw	r2,0(r7)
   1262c:	d8802517 	ldw	r2,148(sp)
   12630:	10019e26 	beq	r2,zero,12cac <_dtoa_r+0x724>
   12634:	d8c02517 	ldw	r3,148(sp)
   12638:	008000b4 	movhi	r2,2
   1263c:	10b97544 	addi	r2,r2,-6699
   12640:	18800015 	stw	r2,0(r3)
   12644:	10bfffc4 	addi	r2,r2,-1
   12648:	dfc02117 	ldw	ra,132(sp)
   1264c:	df002017 	ldw	fp,128(sp)
   12650:	ddc01f17 	ldw	r23,124(sp)
   12654:	dd801e17 	ldw	r22,120(sp)
   12658:	dd401d17 	ldw	r21,116(sp)
   1265c:	dd001c17 	ldw	r20,112(sp)
   12660:	dcc01b17 	ldw	r19,108(sp)
   12664:	dc801a17 	ldw	r18,104(sp)
   12668:	dc401917 	ldw	r17,100(sp)
   1266c:	dc001817 	ldw	r16,96(sp)
   12670:	dec02204 	addi	sp,sp,136
   12674:	f800283a 	ret
   12678:	d8c02317 	ldw	r3,140(sp)
   1267c:	0089c3c4 	movi	r2,9999
   12680:	18800015 	stw	r2,0(r3)
   12684:	90017726 	beq	r18,zero,12c64 <_dtoa_r+0x6dc>
   12688:	008000b4 	movhi	r2,2
   1268c:	10baab04 	addi	r2,r2,-5460
   12690:	d9002517 	ldw	r4,148(sp)
   12694:	203fec26 	beq	r4,zero,12648 <__alt_mem_nios_system_shared_memory+0xfffd2648>
   12698:	10c000c7 	ldb	r3,3(r2)
   1269c:	1801781e 	bne	r3,zero,12c80 <_dtoa_r+0x6f8>
   126a0:	10c000c4 	addi	r3,r2,3
   126a4:	d9802517 	ldw	r6,148(sp)
   126a8:	30c00015 	stw	r3,0(r6)
   126ac:	003fe606 	br	12648 <__alt_mem_nios_system_shared_memory+0xfffd2648>
   126b0:	04e00034 	movhi	r19,32768
   126b4:	9cffffc4 	addi	r19,r19,-1
   126b8:	00800044 	movi	r2,1
   126bc:	8ce6703a 	and	r19,r17,r19
   126c0:	80800015 	stw	r2,0(r16)
   126c4:	9823883a 	mov	r17,r19
   126c8:	003fcc06 	br	125fc <__alt_mem_nios_system_shared_memory+0xfffd25fc>
   126cc:	d8800204 	addi	r2,sp,8
   126d0:	d8800015 	stw	r2,0(sp)
   126d4:	d9c00104 	addi	r7,sp,4
   126d8:	900b883a 	mov	r5,r18
   126dc:	980d883a 	mov	r6,r19
   126e0:	e009883a 	mov	r4,fp
   126e4:	8820d53a 	srli	r16,r17,20
   126e8:	0015eec0 	call	15eec <__d2b>
   126ec:	d8800915 	stw	r2,36(sp)
   126f0:	8001651e 	bne	r16,zero,12c88 <_dtoa_r+0x700>
   126f4:	dd800217 	ldw	r22,8(sp)
   126f8:	dc000117 	ldw	r16,4(sp)
   126fc:	00800804 	movi	r2,32
   12700:	b421883a 	add	r16,r22,r16
   12704:	80c10c84 	addi	r3,r16,1074
   12708:	10c2d10e 	bge	r2,r3,13250 <_dtoa_r+0xcc8>
   1270c:	00801004 	movi	r2,64
   12710:	81010484 	addi	r4,r16,1042
   12714:	10c7c83a 	sub	r3,r2,r3
   12718:	9108d83a 	srl	r4,r18,r4
   1271c:	88e2983a 	sll	r17,r17,r3
   12720:	2448b03a 	or	r4,r4,r17
   12724:	001ab680 	call	1ab68 <__floatunsidf>
   12728:	017f8434 	movhi	r5,65040
   1272c:	01800044 	movi	r6,1
   12730:	1009883a 	mov	r4,r2
   12734:	194b883a 	add	r5,r3,r5
   12738:	843fffc4 	addi	r16,r16,-1
   1273c:	d9801115 	stw	r6,68(sp)
   12740:	000d883a 	mov	r6,zero
   12744:	01cffe34 	movhi	r7,16376
   12748:	00084ec0 	call	84ec <__subdf3>
   1274c:	0198dbf4 	movhi	r6,25455
   12750:	01cff4f4 	movhi	r7,16339
   12754:	3190d844 	addi	r6,r6,17249
   12758:	39e1e9c4 	addi	r7,r7,-30809
   1275c:	1009883a 	mov	r4,r2
   12760:	180b883a 	mov	r5,r3
   12764:	0007c800 	call	7c80 <__muldf3>
   12768:	01a2d874 	movhi	r6,35681
   1276c:	01cff1f4 	movhi	r7,16327
   12770:	31b22cc4 	addi	r6,r6,-14157
   12774:	39e28a04 	addi	r7,r7,-30168
   12778:	180b883a 	mov	r5,r3
   1277c:	1009883a 	mov	r4,r2
   12780:	00067ac0 	call	67ac <__adddf3>
   12784:	8009883a 	mov	r4,r16
   12788:	1029883a 	mov	r20,r2
   1278c:	1823883a 	mov	r17,r3
   12790:	0008de80 	call	8de8 <__floatsidf>
   12794:	019427f4 	movhi	r6,20639
   12798:	01cff4f4 	movhi	r7,16339
   1279c:	319e7ec4 	addi	r6,r6,31227
   127a0:	39d104c4 	addi	r7,r7,17427
   127a4:	1009883a 	mov	r4,r2
   127a8:	180b883a 	mov	r5,r3
   127ac:	0007c800 	call	7c80 <__muldf3>
   127b0:	100d883a 	mov	r6,r2
   127b4:	180f883a 	mov	r7,r3
   127b8:	a009883a 	mov	r4,r20
   127bc:	880b883a 	mov	r5,r17
   127c0:	00067ac0 	call	67ac <__adddf3>
   127c4:	1009883a 	mov	r4,r2
   127c8:	180b883a 	mov	r5,r3
   127cc:	1029883a 	mov	r20,r2
   127d0:	1823883a 	mov	r17,r3
   127d4:	001aae80 	call	1aae8 <__fixdfsi>
   127d8:	000d883a 	mov	r6,zero
   127dc:	000f883a 	mov	r7,zero
   127e0:	a009883a 	mov	r4,r20
   127e4:	880b883a 	mov	r5,r17
   127e8:	d8800515 	stw	r2,20(sp)
   127ec:	0007b8c0 	call	7b8c <__ledf2>
   127f0:	10028716 	blt	r2,zero,13210 <_dtoa_r+0xc88>
   127f4:	d8c00517 	ldw	r3,20(sp)
   127f8:	00800584 	movi	r2,22
   127fc:	10c27536 	bltu	r2,r3,131d4 <_dtoa_r+0xc4c>
   12800:	180490fa 	slli	r2,r3,3
   12804:	00c000b4 	movhi	r3,2
   12808:	18fb0604 	addi	r3,r3,-5096
   1280c:	1885883a 	add	r2,r3,r2
   12810:	11000017 	ldw	r4,0(r2)
   12814:	11400117 	ldw	r5,4(r2)
   12818:	900d883a 	mov	r6,r18
   1281c:	980f883a 	mov	r7,r19
   12820:	0007ab00 	call	7ab0 <__gedf2>
   12824:	00828d0e 	bge	zero,r2,1325c <_dtoa_r+0xcd4>
   12828:	d9000517 	ldw	r4,20(sp)
   1282c:	d8000e15 	stw	zero,56(sp)
   12830:	213fffc4 	addi	r4,r4,-1
   12834:	d9000515 	stw	r4,20(sp)
   12838:	b42dc83a 	sub	r22,r22,r16
   1283c:	b5bfffc4 	addi	r22,r22,-1
   12840:	b0026f16 	blt	r22,zero,13200 <_dtoa_r+0xc78>
   12844:	d8000815 	stw	zero,32(sp)
   12848:	d9c00517 	ldw	r7,20(sp)
   1284c:	38026416 	blt	r7,zero,131e0 <_dtoa_r+0xc58>
   12850:	b1ed883a 	add	r22,r22,r7
   12854:	d9c00d15 	stw	r7,52(sp)
   12858:	d8000a15 	stw	zero,40(sp)
   1285c:	d9800317 	ldw	r6,12(sp)
   12860:	00800244 	movi	r2,9
   12864:	11811436 	bltu	r2,r6,12cb8 <_dtoa_r+0x730>
   12868:	00800144 	movi	r2,5
   1286c:	1184e10e 	bge	r2,r6,13bf4 <_dtoa_r+0x166c>
   12870:	31bfff04 	addi	r6,r6,-4
   12874:	d9800315 	stw	r6,12(sp)
   12878:	0023883a 	mov	r17,zero
   1287c:	d9800317 	ldw	r6,12(sp)
   12880:	008000c4 	movi	r2,3
   12884:	30836726 	beq	r6,r2,13624 <_dtoa_r+0x109c>
   12888:	1183410e 	bge	r2,r6,13590 <_dtoa_r+0x1008>
   1288c:	d9c00317 	ldw	r7,12(sp)
   12890:	00800104 	movi	r2,4
   12894:	38827c26 	beq	r7,r2,13288 <_dtoa_r+0xd00>
   12898:	00800144 	movi	r2,5
   1289c:	3884c41e 	bne	r7,r2,13bb0 <_dtoa_r+0x1628>
   128a0:	00800044 	movi	r2,1
   128a4:	d8800b15 	stw	r2,44(sp)
   128a8:	d8c00517 	ldw	r3,20(sp)
   128ac:	d9002217 	ldw	r4,136(sp)
   128b0:	1907883a 	add	r3,r3,r4
   128b4:	19800044 	addi	r6,r3,1
   128b8:	d8c00c15 	stw	r3,48(sp)
   128bc:	d9800615 	stw	r6,24(sp)
   128c0:	0183a40e 	bge	zero,r6,13754 <_dtoa_r+0x11cc>
   128c4:	d9800617 	ldw	r6,24(sp)
   128c8:	3021883a 	mov	r16,r6
   128cc:	e0001115 	stw	zero,68(fp)
   128d0:	008005c4 	movi	r2,23
   128d4:	1184c92e 	bgeu	r2,r6,13bfc <_dtoa_r+0x1674>
   128d8:	00c00044 	movi	r3,1
   128dc:	00800104 	movi	r2,4
   128e0:	1085883a 	add	r2,r2,r2
   128e4:	11000504 	addi	r4,r2,20
   128e8:	180b883a 	mov	r5,r3
   128ec:	18c00044 	addi	r3,r3,1
   128f0:	313ffb2e 	bgeu	r6,r4,128e0 <__alt_mem_nios_system_shared_memory+0xfffd28e0>
   128f4:	e1401115 	stw	r5,68(fp)
   128f8:	e009883a 	mov	r4,fp
   128fc:	001519c0 	call	1519c <_Balloc>
   12900:	d8800715 	stw	r2,28(sp)
   12904:	e0801015 	stw	r2,64(fp)
   12908:	00800384 	movi	r2,14
   1290c:	1400f736 	bltu	r2,r16,12cec <_dtoa_r+0x764>
   12910:	8800f626 	beq	r17,zero,12cec <_dtoa_r+0x764>
   12914:	d9c00517 	ldw	r7,20(sp)
   12918:	01c39a0e 	bge	zero,r7,13784 <_dtoa_r+0x11fc>
   1291c:	388003cc 	andi	r2,r7,15
   12920:	100490fa 	slli	r2,r2,3
   12924:	382bd13a 	srai	r21,r7,4
   12928:	00c000b4 	movhi	r3,2
   1292c:	18fb0604 	addi	r3,r3,-5096
   12930:	1885883a 	add	r2,r3,r2
   12934:	a8c0040c 	andi	r3,r21,16
   12938:	12400017 	ldw	r9,0(r2)
   1293c:	12000117 	ldw	r8,4(r2)
   12940:	18037926 	beq	r3,zero,13728 <_dtoa_r+0x11a0>
   12944:	008000b4 	movhi	r2,2
   12948:	10bafc04 	addi	r2,r2,-5136
   1294c:	11800817 	ldw	r6,32(r2)
   12950:	11c00917 	ldw	r7,36(r2)
   12954:	9009883a 	mov	r4,r18
   12958:	980b883a 	mov	r5,r19
   1295c:	da001715 	stw	r8,92(sp)
   12960:	da401615 	stw	r9,88(sp)
   12964:	00070580 	call	7058 <__divdf3>
   12968:	da001717 	ldw	r8,92(sp)
   1296c:	da401617 	ldw	r9,88(sp)
   12970:	ad4003cc 	andi	r21,r21,15
   12974:	040000c4 	movi	r16,3
   12978:	1023883a 	mov	r17,r2
   1297c:	1829883a 	mov	r20,r3
   12980:	a8001126 	beq	r21,zero,129c8 <_dtoa_r+0x440>
   12984:	05c000b4 	movhi	r23,2
   12988:	bdfafc04 	addi	r23,r23,-5136
   1298c:	4805883a 	mov	r2,r9
   12990:	4007883a 	mov	r3,r8
   12994:	a980004c 	andi	r6,r21,1
   12998:	1009883a 	mov	r4,r2
   1299c:	a82bd07a 	srai	r21,r21,1
   129a0:	180b883a 	mov	r5,r3
   129a4:	30000426 	beq	r6,zero,129b8 <_dtoa_r+0x430>
   129a8:	b9800017 	ldw	r6,0(r23)
   129ac:	b9c00117 	ldw	r7,4(r23)
   129b0:	84000044 	addi	r16,r16,1
   129b4:	0007c800 	call	7c80 <__muldf3>
   129b8:	bdc00204 	addi	r23,r23,8
   129bc:	a83ff51e 	bne	r21,zero,12994 <__alt_mem_nios_system_shared_memory+0xfffd2994>
   129c0:	1013883a 	mov	r9,r2
   129c4:	1811883a 	mov	r8,r3
   129c8:	480d883a 	mov	r6,r9
   129cc:	400f883a 	mov	r7,r8
   129d0:	8809883a 	mov	r4,r17
   129d4:	a00b883a 	mov	r5,r20
   129d8:	00070580 	call	7058 <__divdf3>
   129dc:	d8800f15 	stw	r2,60(sp)
   129e0:	d8c01015 	stw	r3,64(sp)
   129e4:	d8c00e17 	ldw	r3,56(sp)
   129e8:	18000626 	beq	r3,zero,12a04 <_dtoa_r+0x47c>
   129ec:	d9000f17 	ldw	r4,60(sp)
   129f0:	d9401017 	ldw	r5,64(sp)
   129f4:	000d883a 	mov	r6,zero
   129f8:	01cffc34 	movhi	r7,16368
   129fc:	0007b8c0 	call	7b8c <__ledf2>
   12a00:	10040b16 	blt	r2,zero,13a30 <_dtoa_r+0x14a8>
   12a04:	8009883a 	mov	r4,r16
   12a08:	0008de80 	call	8de8 <__floatsidf>
   12a0c:	d9800f17 	ldw	r6,60(sp)
   12a10:	d9c01017 	ldw	r7,64(sp)
   12a14:	1009883a 	mov	r4,r2
   12a18:	180b883a 	mov	r5,r3
   12a1c:	0007c800 	call	7c80 <__muldf3>
   12a20:	000d883a 	mov	r6,zero
   12a24:	01d00734 	movhi	r7,16412
   12a28:	1009883a 	mov	r4,r2
   12a2c:	180b883a 	mov	r5,r3
   12a30:	00067ac0 	call	67ac <__adddf3>
   12a34:	1021883a 	mov	r16,r2
   12a38:	d8800617 	ldw	r2,24(sp)
   12a3c:	047f3034 	movhi	r17,64704
   12a40:	1c63883a 	add	r17,r3,r17
   12a44:	10031826 	beq	r2,zero,136a8 <_dtoa_r+0x1120>
   12a48:	d8c00517 	ldw	r3,20(sp)
   12a4c:	db000617 	ldw	r12,24(sp)
   12a50:	d8c01315 	stw	r3,76(sp)
   12a54:	d9000b17 	ldw	r4,44(sp)
   12a58:	20038f26 	beq	r4,zero,13898 <_dtoa_r+0x1310>
   12a5c:	60bfffc4 	addi	r2,r12,-1
   12a60:	100490fa 	slli	r2,r2,3
   12a64:	00c000b4 	movhi	r3,2
   12a68:	18fb0604 	addi	r3,r3,-5096
   12a6c:	1885883a 	add	r2,r3,r2
   12a70:	11800017 	ldw	r6,0(r2)
   12a74:	11c00117 	ldw	r7,4(r2)
   12a78:	d8800717 	ldw	r2,28(sp)
   12a7c:	0009883a 	mov	r4,zero
   12a80:	014ff834 	movhi	r5,16352
   12a84:	db001615 	stw	r12,88(sp)
   12a88:	15c00044 	addi	r23,r2,1
   12a8c:	00070580 	call	7058 <__divdf3>
   12a90:	800d883a 	mov	r6,r16
   12a94:	880f883a 	mov	r7,r17
   12a98:	1009883a 	mov	r4,r2
   12a9c:	180b883a 	mov	r5,r3
   12aa0:	00084ec0 	call	84ec <__subdf3>
   12aa4:	d9401017 	ldw	r5,64(sp)
   12aa8:	d9000f17 	ldw	r4,60(sp)
   12aac:	102b883a 	mov	r21,r2
   12ab0:	d8c01215 	stw	r3,72(sp)
   12ab4:	001aae80 	call	1aae8 <__fixdfsi>
   12ab8:	1009883a 	mov	r4,r2
   12abc:	1029883a 	mov	r20,r2
   12ac0:	0008de80 	call	8de8 <__floatsidf>
   12ac4:	d9000f17 	ldw	r4,60(sp)
   12ac8:	d9401017 	ldw	r5,64(sp)
   12acc:	100d883a 	mov	r6,r2
   12ad0:	180f883a 	mov	r7,r3
   12ad4:	00084ec0 	call	84ec <__subdf3>
   12ad8:	1823883a 	mov	r17,r3
   12adc:	d8c00717 	ldw	r3,28(sp)
   12ae0:	d9401217 	ldw	r5,72(sp)
   12ae4:	a2000c04 	addi	r8,r20,48
   12ae8:	1021883a 	mov	r16,r2
   12aec:	1a000005 	stb	r8,0(r3)
   12af0:	800d883a 	mov	r6,r16
   12af4:	880f883a 	mov	r7,r17
   12af8:	a809883a 	mov	r4,r21
   12afc:	4029883a 	mov	r20,r8
   12b00:	0007ab00 	call	7ab0 <__gedf2>
   12b04:	00841d16 	blt	zero,r2,13b7c <_dtoa_r+0x15f4>
   12b08:	800d883a 	mov	r6,r16
   12b0c:	880f883a 	mov	r7,r17
   12b10:	0009883a 	mov	r4,zero
   12b14:	014ffc34 	movhi	r5,16368
   12b18:	00084ec0 	call	84ec <__subdf3>
   12b1c:	d9401217 	ldw	r5,72(sp)
   12b20:	100d883a 	mov	r6,r2
   12b24:	180f883a 	mov	r7,r3
   12b28:	a809883a 	mov	r4,r21
   12b2c:	0007ab00 	call	7ab0 <__gedf2>
   12b30:	db001617 	ldw	r12,88(sp)
   12b34:	00840e16 	blt	zero,r2,13b70 <_dtoa_r+0x15e8>
   12b38:	00800044 	movi	r2,1
   12b3c:	13006b0e 	bge	r2,r12,12cec <_dtoa_r+0x764>
   12b40:	d9000717 	ldw	r4,28(sp)
   12b44:	dd800f15 	stw	r22,60(sp)
   12b48:	dcc01015 	stw	r19,64(sp)
   12b4c:	2319883a 	add	r12,r4,r12
   12b50:	dcc01217 	ldw	r19,72(sp)
   12b54:	602d883a 	mov	r22,r12
   12b58:	dc801215 	stw	r18,72(sp)
   12b5c:	b825883a 	mov	r18,r23
   12b60:	00000906 	br	12b88 <_dtoa_r+0x600>
   12b64:	00084ec0 	call	84ec <__subdf3>
   12b68:	a80d883a 	mov	r6,r21
   12b6c:	980f883a 	mov	r7,r19
   12b70:	1009883a 	mov	r4,r2
   12b74:	180b883a 	mov	r5,r3
   12b78:	0007b8c0 	call	7b8c <__ledf2>
   12b7c:	1003e816 	blt	r2,zero,13b20 <_dtoa_r+0x1598>
   12b80:	b825883a 	mov	r18,r23
   12b84:	bd83e926 	beq	r23,r22,13b2c <_dtoa_r+0x15a4>
   12b88:	a809883a 	mov	r4,r21
   12b8c:	980b883a 	mov	r5,r19
   12b90:	000d883a 	mov	r6,zero
   12b94:	01d00934 	movhi	r7,16420
   12b98:	0007c800 	call	7c80 <__muldf3>
   12b9c:	000d883a 	mov	r6,zero
   12ba0:	01d00934 	movhi	r7,16420
   12ba4:	8009883a 	mov	r4,r16
   12ba8:	880b883a 	mov	r5,r17
   12bac:	102b883a 	mov	r21,r2
   12bb0:	1827883a 	mov	r19,r3
   12bb4:	0007c800 	call	7c80 <__muldf3>
   12bb8:	180b883a 	mov	r5,r3
   12bbc:	1009883a 	mov	r4,r2
   12bc0:	1821883a 	mov	r16,r3
   12bc4:	1023883a 	mov	r17,r2
   12bc8:	001aae80 	call	1aae8 <__fixdfsi>
   12bcc:	1009883a 	mov	r4,r2
   12bd0:	1029883a 	mov	r20,r2
   12bd4:	0008de80 	call	8de8 <__floatsidf>
   12bd8:	8809883a 	mov	r4,r17
   12bdc:	800b883a 	mov	r5,r16
   12be0:	100d883a 	mov	r6,r2
   12be4:	180f883a 	mov	r7,r3
   12be8:	00084ec0 	call	84ec <__subdf3>
   12bec:	a5000c04 	addi	r20,r20,48
   12bf0:	a80d883a 	mov	r6,r21
   12bf4:	980f883a 	mov	r7,r19
   12bf8:	1009883a 	mov	r4,r2
   12bfc:	180b883a 	mov	r5,r3
   12c00:	95000005 	stb	r20,0(r18)
   12c04:	1021883a 	mov	r16,r2
   12c08:	1823883a 	mov	r17,r3
   12c0c:	0007b8c0 	call	7b8c <__ledf2>
   12c10:	bdc00044 	addi	r23,r23,1
   12c14:	800d883a 	mov	r6,r16
   12c18:	880f883a 	mov	r7,r17
   12c1c:	0009883a 	mov	r4,zero
   12c20:	014ffc34 	movhi	r5,16368
   12c24:	103fcf0e 	bge	r2,zero,12b64 <__alt_mem_nios_system_shared_memory+0xfffd2b64>
   12c28:	d8c01317 	ldw	r3,76(sp)
   12c2c:	d8c00515 	stw	r3,20(sp)
   12c30:	d9400917 	ldw	r5,36(sp)
   12c34:	e009883a 	mov	r4,fp
   12c38:	00152440 	call	15244 <_Bfree>
   12c3c:	d9000517 	ldw	r4,20(sp)
   12c40:	d9802317 	ldw	r6,140(sp)
   12c44:	d9c02517 	ldw	r7,148(sp)
   12c48:	b8000005 	stb	zero,0(r23)
   12c4c:	20800044 	addi	r2,r4,1
   12c50:	30800015 	stw	r2,0(r6)
   12c54:	3802aa26 	beq	r7,zero,13700 <_dtoa_r+0x1178>
   12c58:	3dc00015 	stw	r23,0(r7)
   12c5c:	d8800717 	ldw	r2,28(sp)
   12c60:	003e7906 	br	12648 <__alt_mem_nios_system_shared_memory+0xfffd2648>
   12c64:	00800434 	movhi	r2,16
   12c68:	10bfffc4 	addi	r2,r2,-1
   12c6c:	88a2703a 	and	r17,r17,r2
   12c70:	883e851e 	bne	r17,zero,12688 <__alt_mem_nios_system_shared_memory+0xfffd2688>
   12c74:	008000b4 	movhi	r2,2
   12c78:	10baa804 	addi	r2,r2,-5472
   12c7c:	003e8406 	br	12690 <__alt_mem_nios_system_shared_memory+0xfffd2690>
   12c80:	10c00204 	addi	r3,r2,8
   12c84:	003e8706 	br	126a4 <__alt_mem_nios_system_shared_memory+0xfffd26a4>
   12c88:	01400434 	movhi	r5,16
   12c8c:	297fffc4 	addi	r5,r5,-1
   12c90:	994a703a 	and	r5,r19,r5
   12c94:	9009883a 	mov	r4,r18
   12c98:	843f0044 	addi	r16,r16,-1023
   12c9c:	294ffc34 	orhi	r5,r5,16368
   12ca0:	dd800217 	ldw	r22,8(sp)
   12ca4:	d8001115 	stw	zero,68(sp)
   12ca8:	003ea506 	br	12740 <__alt_mem_nios_system_shared_memory+0xfffd2740>
   12cac:	008000b4 	movhi	r2,2
   12cb0:	10b97504 	addi	r2,r2,-6700
   12cb4:	003e6406 	br	12648 <__alt_mem_nios_system_shared_memory+0xfffd2648>
   12cb8:	e0001115 	stw	zero,68(fp)
   12cbc:	000b883a 	mov	r5,zero
   12cc0:	e009883a 	mov	r4,fp
   12cc4:	001519c0 	call	1519c <_Balloc>
   12cc8:	01bfffc4 	movi	r6,-1
   12ccc:	01c00044 	movi	r7,1
   12cd0:	d8800715 	stw	r2,28(sp)
   12cd4:	d9800c15 	stw	r6,48(sp)
   12cd8:	e0801015 	stw	r2,64(fp)
   12cdc:	d8000315 	stw	zero,12(sp)
   12ce0:	d9c00b15 	stw	r7,44(sp)
   12ce4:	d9800615 	stw	r6,24(sp)
   12ce8:	d8002215 	stw	zero,136(sp)
   12cec:	d8800117 	ldw	r2,4(sp)
   12cf0:	10008916 	blt	r2,zero,12f18 <_dtoa_r+0x990>
   12cf4:	d9000517 	ldw	r4,20(sp)
   12cf8:	00c00384 	movi	r3,14
   12cfc:	19008616 	blt	r3,r4,12f18 <_dtoa_r+0x990>
   12d00:	200490fa 	slli	r2,r4,3
   12d04:	00c000b4 	movhi	r3,2
   12d08:	d9802217 	ldw	r6,136(sp)
   12d0c:	18fb0604 	addi	r3,r3,-5096
   12d10:	1885883a 	add	r2,r3,r2
   12d14:	14000017 	ldw	r16,0(r2)
   12d18:	14400117 	ldw	r17,4(r2)
   12d1c:	30016316 	blt	r6,zero,132ac <_dtoa_r+0xd24>
   12d20:	800d883a 	mov	r6,r16
   12d24:	880f883a 	mov	r7,r17
   12d28:	9009883a 	mov	r4,r18
   12d2c:	980b883a 	mov	r5,r19
   12d30:	00070580 	call	7058 <__divdf3>
   12d34:	180b883a 	mov	r5,r3
   12d38:	1009883a 	mov	r4,r2
   12d3c:	001aae80 	call	1aae8 <__fixdfsi>
   12d40:	1009883a 	mov	r4,r2
   12d44:	102b883a 	mov	r21,r2
   12d48:	0008de80 	call	8de8 <__floatsidf>
   12d4c:	800d883a 	mov	r6,r16
   12d50:	880f883a 	mov	r7,r17
   12d54:	1009883a 	mov	r4,r2
   12d58:	180b883a 	mov	r5,r3
   12d5c:	0007c800 	call	7c80 <__muldf3>
   12d60:	100d883a 	mov	r6,r2
   12d64:	180f883a 	mov	r7,r3
   12d68:	9009883a 	mov	r4,r18
   12d6c:	980b883a 	mov	r5,r19
   12d70:	00084ec0 	call	84ec <__subdf3>
   12d74:	d9c00717 	ldw	r7,28(sp)
   12d78:	1009883a 	mov	r4,r2
   12d7c:	a8800c04 	addi	r2,r21,48
   12d80:	38800005 	stb	r2,0(r7)
   12d84:	3dc00044 	addi	r23,r7,1
   12d88:	d9c00617 	ldw	r7,24(sp)
   12d8c:	01800044 	movi	r6,1
   12d90:	180b883a 	mov	r5,r3
   12d94:	2005883a 	mov	r2,r4
   12d98:	39803826 	beq	r7,r6,12e7c <_dtoa_r+0x8f4>
   12d9c:	000d883a 	mov	r6,zero
   12da0:	01d00934 	movhi	r7,16420
   12da4:	0007c800 	call	7c80 <__muldf3>
   12da8:	000d883a 	mov	r6,zero
   12dac:	000f883a 	mov	r7,zero
   12db0:	1009883a 	mov	r4,r2
   12db4:	180b883a 	mov	r5,r3
   12db8:	1025883a 	mov	r18,r2
   12dbc:	1827883a 	mov	r19,r3
   12dc0:	0007a280 	call	7a28 <__eqdf2>
   12dc4:	103f9a26 	beq	r2,zero,12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   12dc8:	d9c00617 	ldw	r7,24(sp)
   12dcc:	d8c00717 	ldw	r3,28(sp)
   12dd0:	b829883a 	mov	r20,r23
   12dd4:	38bfffc4 	addi	r2,r7,-1
   12dd8:	18ad883a 	add	r22,r3,r2
   12ddc:	00000a06 	br	12e08 <_dtoa_r+0x880>
   12de0:	0007c800 	call	7c80 <__muldf3>
   12de4:	000d883a 	mov	r6,zero
   12de8:	000f883a 	mov	r7,zero
   12dec:	1009883a 	mov	r4,r2
   12df0:	180b883a 	mov	r5,r3
   12df4:	1025883a 	mov	r18,r2
   12df8:	1827883a 	mov	r19,r3
   12dfc:	b829883a 	mov	r20,r23
   12e00:	0007a280 	call	7a28 <__eqdf2>
   12e04:	103f8a26 	beq	r2,zero,12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   12e08:	800d883a 	mov	r6,r16
   12e0c:	880f883a 	mov	r7,r17
   12e10:	9009883a 	mov	r4,r18
   12e14:	980b883a 	mov	r5,r19
   12e18:	00070580 	call	7058 <__divdf3>
   12e1c:	180b883a 	mov	r5,r3
   12e20:	1009883a 	mov	r4,r2
   12e24:	001aae80 	call	1aae8 <__fixdfsi>
   12e28:	1009883a 	mov	r4,r2
   12e2c:	102b883a 	mov	r21,r2
   12e30:	0008de80 	call	8de8 <__floatsidf>
   12e34:	800d883a 	mov	r6,r16
   12e38:	880f883a 	mov	r7,r17
   12e3c:	1009883a 	mov	r4,r2
   12e40:	180b883a 	mov	r5,r3
   12e44:	0007c800 	call	7c80 <__muldf3>
   12e48:	100d883a 	mov	r6,r2
   12e4c:	180f883a 	mov	r7,r3
   12e50:	9009883a 	mov	r4,r18
   12e54:	980b883a 	mov	r5,r19
   12e58:	00084ec0 	call	84ec <__subdf3>
   12e5c:	aa000c04 	addi	r8,r21,48
   12e60:	a2000005 	stb	r8,0(r20)
   12e64:	000d883a 	mov	r6,zero
   12e68:	01d00934 	movhi	r7,16420
   12e6c:	1009883a 	mov	r4,r2
   12e70:	180b883a 	mov	r5,r3
   12e74:	a5c00044 	addi	r23,r20,1
   12e78:	b53fd91e 	bne	r22,r20,12de0 <__alt_mem_nios_system_shared_memory+0xfffd2de0>
   12e7c:	100d883a 	mov	r6,r2
   12e80:	180f883a 	mov	r7,r3
   12e84:	1009883a 	mov	r4,r2
   12e88:	180b883a 	mov	r5,r3
   12e8c:	00067ac0 	call	67ac <__adddf3>
   12e90:	100d883a 	mov	r6,r2
   12e94:	180f883a 	mov	r7,r3
   12e98:	8009883a 	mov	r4,r16
   12e9c:	880b883a 	mov	r5,r17
   12ea0:	1027883a 	mov	r19,r2
   12ea4:	1825883a 	mov	r18,r3
   12ea8:	0007b8c0 	call	7b8c <__ledf2>
   12eac:	10000816 	blt	r2,zero,12ed0 <_dtoa_r+0x948>
   12eb0:	980d883a 	mov	r6,r19
   12eb4:	900f883a 	mov	r7,r18
   12eb8:	8009883a 	mov	r4,r16
   12ebc:	880b883a 	mov	r5,r17
   12ec0:	0007a280 	call	7a28 <__eqdf2>
   12ec4:	103f5a1e 	bne	r2,zero,12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   12ec8:	ad40004c 	andi	r21,r21,1
   12ecc:	a83f5826 	beq	r21,zero,12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   12ed0:	bd3fffc3 	ldbu	r20,-1(r23)
   12ed4:	b8bfffc4 	addi	r2,r23,-1
   12ed8:	1007883a 	mov	r3,r2
   12edc:	01400e44 	movi	r5,57
   12ee0:	d9800717 	ldw	r6,28(sp)
   12ee4:	00000506 	br	12efc <_dtoa_r+0x974>
   12ee8:	18ffffc4 	addi	r3,r3,-1
   12eec:	11824726 	beq	r2,r6,1380c <_dtoa_r+0x1284>
   12ef0:	1d000003 	ldbu	r20,0(r3)
   12ef4:	102f883a 	mov	r23,r2
   12ef8:	10bfffc4 	addi	r2,r2,-1
   12efc:	a1003fcc 	andi	r4,r20,255
   12f00:	2100201c 	xori	r4,r4,128
   12f04:	213fe004 	addi	r4,r4,-128
   12f08:	217ff726 	beq	r4,r5,12ee8 <__alt_mem_nios_system_shared_memory+0xfffd2ee8>
   12f0c:	a2000044 	addi	r8,r20,1
   12f10:	12000005 	stb	r8,0(r2)
   12f14:	003f4606 	br	12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   12f18:	d9000b17 	ldw	r4,44(sp)
   12f1c:	2000c826 	beq	r4,zero,13240 <_dtoa_r+0xcb8>
   12f20:	d9800317 	ldw	r6,12(sp)
   12f24:	00c00044 	movi	r3,1
   12f28:	1980f90e 	bge	r3,r6,13310 <_dtoa_r+0xd88>
   12f2c:	d8800617 	ldw	r2,24(sp)
   12f30:	d8c00a17 	ldw	r3,40(sp)
   12f34:	157fffc4 	addi	r21,r2,-1
   12f38:	1d41f316 	blt	r3,r21,13708 <_dtoa_r+0x1180>
   12f3c:	1d6bc83a 	sub	r21,r3,r21
   12f40:	d9c00617 	ldw	r7,24(sp)
   12f44:	3802aa16 	blt	r7,zero,139f0 <_dtoa_r+0x1468>
   12f48:	dd000817 	ldw	r20,32(sp)
   12f4c:	d8800617 	ldw	r2,24(sp)
   12f50:	d8c00817 	ldw	r3,32(sp)
   12f54:	01400044 	movi	r5,1
   12f58:	e009883a 	mov	r4,fp
   12f5c:	1887883a 	add	r3,r3,r2
   12f60:	d8c00815 	stw	r3,32(sp)
   12f64:	b0ad883a 	add	r22,r22,r2
   12f68:	00155d00 	call	155d0 <__i2b>
   12f6c:	1023883a 	mov	r17,r2
   12f70:	a0000826 	beq	r20,zero,12f94 <_dtoa_r+0xa0c>
   12f74:	0580070e 	bge	zero,r22,12f94 <_dtoa_r+0xa0c>
   12f78:	a005883a 	mov	r2,r20
   12f7c:	b500b916 	blt	r22,r20,13264 <_dtoa_r+0xcdc>
   12f80:	d9000817 	ldw	r4,32(sp)
   12f84:	a0a9c83a 	sub	r20,r20,r2
   12f88:	b0adc83a 	sub	r22,r22,r2
   12f8c:	2089c83a 	sub	r4,r4,r2
   12f90:	d9000815 	stw	r4,32(sp)
   12f94:	d9800a17 	ldw	r6,40(sp)
   12f98:	0181810e 	bge	zero,r6,135a0 <_dtoa_r+0x1018>
   12f9c:	d9c00b17 	ldw	r7,44(sp)
   12fa0:	3800b326 	beq	r7,zero,13270 <_dtoa_r+0xce8>
   12fa4:	a800b226 	beq	r21,zero,13270 <_dtoa_r+0xce8>
   12fa8:	880b883a 	mov	r5,r17
   12fac:	a80d883a 	mov	r6,r21
   12fb0:	e009883a 	mov	r4,fp
   12fb4:	00158980 	call	15898 <__pow5mult>
   12fb8:	d9800917 	ldw	r6,36(sp)
   12fbc:	100b883a 	mov	r5,r2
   12fc0:	e009883a 	mov	r4,fp
   12fc4:	1023883a 	mov	r17,r2
   12fc8:	001560c0 	call	1560c <__multiply>
   12fcc:	1021883a 	mov	r16,r2
   12fd0:	d8800a17 	ldw	r2,40(sp)
   12fd4:	d9400917 	ldw	r5,36(sp)
   12fd8:	e009883a 	mov	r4,fp
   12fdc:	1545c83a 	sub	r2,r2,r21
   12fe0:	d8800a15 	stw	r2,40(sp)
   12fe4:	00152440 	call	15244 <_Bfree>
   12fe8:	d8c00a17 	ldw	r3,40(sp)
   12fec:	18009f1e 	bne	r3,zero,1326c <_dtoa_r+0xce4>
   12ff0:	05c00044 	movi	r23,1
   12ff4:	e009883a 	mov	r4,fp
   12ff8:	b80b883a 	mov	r5,r23
   12ffc:	00155d00 	call	155d0 <__i2b>
   13000:	d9000d17 	ldw	r4,52(sp)
   13004:	102b883a 	mov	r21,r2
   13008:	2000ce26 	beq	r4,zero,13344 <_dtoa_r+0xdbc>
   1300c:	200d883a 	mov	r6,r4
   13010:	100b883a 	mov	r5,r2
   13014:	e009883a 	mov	r4,fp
   13018:	00158980 	call	15898 <__pow5mult>
   1301c:	d9800317 	ldw	r6,12(sp)
   13020:	102b883a 	mov	r21,r2
   13024:	b981810e 	bge	r23,r6,1362c <_dtoa_r+0x10a4>
   13028:	0027883a 	mov	r19,zero
   1302c:	a8800417 	ldw	r2,16(r21)
   13030:	05c00804 	movi	r23,32
   13034:	10800104 	addi	r2,r2,4
   13038:	1085883a 	add	r2,r2,r2
   1303c:	1085883a 	add	r2,r2,r2
   13040:	a885883a 	add	r2,r21,r2
   13044:	11000017 	ldw	r4,0(r2)
   13048:	00154b80 	call	154b8 <__hi0bits>
   1304c:	b885c83a 	sub	r2,r23,r2
   13050:	1585883a 	add	r2,r2,r22
   13054:	108007cc 	andi	r2,r2,31
   13058:	1000b326 	beq	r2,zero,13328 <_dtoa_r+0xda0>
   1305c:	00c00804 	movi	r3,32
   13060:	1887c83a 	sub	r3,r3,r2
   13064:	01000104 	movi	r4,4
   13068:	20c2cd0e 	bge	r4,r3,13ba0 <_dtoa_r+0x1618>
   1306c:	00c00704 	movi	r3,28
   13070:	1885c83a 	sub	r2,r3,r2
   13074:	d8c00817 	ldw	r3,32(sp)
   13078:	a0a9883a 	add	r20,r20,r2
   1307c:	b0ad883a 	add	r22,r22,r2
   13080:	1887883a 	add	r3,r3,r2
   13084:	d8c00815 	stw	r3,32(sp)
   13088:	d9800817 	ldw	r6,32(sp)
   1308c:	0180040e 	bge	zero,r6,130a0 <_dtoa_r+0xb18>
   13090:	800b883a 	mov	r5,r16
   13094:	e009883a 	mov	r4,fp
   13098:	00159d80 	call	159d8 <__lshift>
   1309c:	1021883a 	mov	r16,r2
   130a0:	0580050e 	bge	zero,r22,130b8 <_dtoa_r+0xb30>
   130a4:	a80b883a 	mov	r5,r21
   130a8:	b00d883a 	mov	r6,r22
   130ac:	e009883a 	mov	r4,fp
   130b0:	00159d80 	call	159d8 <__lshift>
   130b4:	102b883a 	mov	r21,r2
   130b8:	d9c00e17 	ldw	r7,56(sp)
   130bc:	3801211e 	bne	r7,zero,13544 <_dtoa_r+0xfbc>
   130c0:	d9800617 	ldw	r6,24(sp)
   130c4:	0181380e 	bge	zero,r6,135a8 <_dtoa_r+0x1020>
   130c8:	d8c00b17 	ldw	r3,44(sp)
   130cc:	1800ab1e 	bne	r3,zero,1337c <_dtoa_r+0xdf4>
   130d0:	dc800717 	ldw	r18,28(sp)
   130d4:	dcc00617 	ldw	r19,24(sp)
   130d8:	9029883a 	mov	r20,r18
   130dc:	00000206 	br	130e8 <_dtoa_r+0xb60>
   130e0:	001526c0 	call	1526c <__multadd>
   130e4:	1021883a 	mov	r16,r2
   130e8:	a80b883a 	mov	r5,r21
   130ec:	8009883a 	mov	r4,r16
   130f0:	00123600 	call	12360 <quorem>
   130f4:	10800c04 	addi	r2,r2,48
   130f8:	90800005 	stb	r2,0(r18)
   130fc:	94800044 	addi	r18,r18,1
   13100:	9507c83a 	sub	r3,r18,r20
   13104:	000f883a 	mov	r7,zero
   13108:	01800284 	movi	r6,10
   1310c:	800b883a 	mov	r5,r16
   13110:	e009883a 	mov	r4,fp
   13114:	1cfff216 	blt	r3,r19,130e0 <__alt_mem_nios_system_shared_memory+0xfffd30e0>
   13118:	1011883a 	mov	r8,r2
   1311c:	d8800617 	ldw	r2,24(sp)
   13120:	0082370e 	bge	zero,r2,13a00 <_dtoa_r+0x1478>
   13124:	d9000717 	ldw	r4,28(sp)
   13128:	0025883a 	mov	r18,zero
   1312c:	20af883a 	add	r23,r4,r2
   13130:	01800044 	movi	r6,1
   13134:	800b883a 	mov	r5,r16
   13138:	e009883a 	mov	r4,fp
   1313c:	da001715 	stw	r8,92(sp)
   13140:	00159d80 	call	159d8 <__lshift>
   13144:	a80b883a 	mov	r5,r21
   13148:	1009883a 	mov	r4,r2
   1314c:	d8800915 	stw	r2,36(sp)
   13150:	0015b200 	call	15b20 <__mcmp>
   13154:	da001717 	ldw	r8,92(sp)
   13158:	0081800e 	bge	zero,r2,1375c <_dtoa_r+0x11d4>
   1315c:	b93fffc3 	ldbu	r4,-1(r23)
   13160:	b8bfffc4 	addi	r2,r23,-1
   13164:	1007883a 	mov	r3,r2
   13168:	01800e44 	movi	r6,57
   1316c:	d9c00717 	ldw	r7,28(sp)
   13170:	00000506 	br	13188 <_dtoa_r+0xc00>
   13174:	18ffffc4 	addi	r3,r3,-1
   13178:	11c12326 	beq	r2,r7,13608 <_dtoa_r+0x1080>
   1317c:	19000003 	ldbu	r4,0(r3)
   13180:	102f883a 	mov	r23,r2
   13184:	10bfffc4 	addi	r2,r2,-1
   13188:	21403fcc 	andi	r5,r4,255
   1318c:	2940201c 	xori	r5,r5,128
   13190:	297fe004 	addi	r5,r5,-128
   13194:	29bff726 	beq	r5,r6,13174 <__alt_mem_nios_system_shared_memory+0xfffd3174>
   13198:	21000044 	addi	r4,r4,1
   1319c:	11000005 	stb	r4,0(r2)
   131a0:	a80b883a 	mov	r5,r21
   131a4:	e009883a 	mov	r4,fp
   131a8:	00152440 	call	15244 <_Bfree>
   131ac:	883ea026 	beq	r17,zero,12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   131b0:	90000426 	beq	r18,zero,131c4 <_dtoa_r+0xc3c>
   131b4:	94400326 	beq	r18,r17,131c4 <_dtoa_r+0xc3c>
   131b8:	900b883a 	mov	r5,r18
   131bc:	e009883a 	mov	r4,fp
   131c0:	00152440 	call	15244 <_Bfree>
   131c4:	880b883a 	mov	r5,r17
   131c8:	e009883a 	mov	r4,fp
   131cc:	00152440 	call	15244 <_Bfree>
   131d0:	003e9706 	br	12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   131d4:	01800044 	movi	r6,1
   131d8:	d9800e15 	stw	r6,56(sp)
   131dc:	003d9606 	br	12838 <__alt_mem_nios_system_shared_memory+0xfffd2838>
   131e0:	d8800817 	ldw	r2,32(sp)
   131e4:	d8c00517 	ldw	r3,20(sp)
   131e8:	d8000d15 	stw	zero,52(sp)
   131ec:	10c5c83a 	sub	r2,r2,r3
   131f0:	00c9c83a 	sub	r4,zero,r3
   131f4:	d8800815 	stw	r2,32(sp)
   131f8:	d9000a15 	stw	r4,40(sp)
   131fc:	003d9706 	br	1285c <__alt_mem_nios_system_shared_memory+0xfffd285c>
   13200:	05adc83a 	sub	r22,zero,r22
   13204:	dd800815 	stw	r22,32(sp)
   13208:	002d883a 	mov	r22,zero
   1320c:	003d8e06 	br	12848 <__alt_mem_nios_system_shared_memory+0xfffd2848>
   13210:	d9000517 	ldw	r4,20(sp)
   13214:	0008de80 	call	8de8 <__floatsidf>
   13218:	100d883a 	mov	r6,r2
   1321c:	180f883a 	mov	r7,r3
   13220:	a009883a 	mov	r4,r20
   13224:	880b883a 	mov	r5,r17
   13228:	0007a280 	call	7a28 <__eqdf2>
   1322c:	103d7126 	beq	r2,zero,127f4 <__alt_mem_nios_system_shared_memory+0xfffd27f4>
   13230:	d9c00517 	ldw	r7,20(sp)
   13234:	39ffffc4 	addi	r7,r7,-1
   13238:	d9c00515 	stw	r7,20(sp)
   1323c:	003d6d06 	br	127f4 <__alt_mem_nios_system_shared_memory+0xfffd27f4>
   13240:	dd400a17 	ldw	r21,40(sp)
   13244:	dd000817 	ldw	r20,32(sp)
   13248:	0023883a 	mov	r17,zero
   1324c:	003f4806 	br	12f70 <__alt_mem_nios_system_shared_memory+0xfffd2f70>
   13250:	10e3c83a 	sub	r17,r2,r3
   13254:	9448983a 	sll	r4,r18,r17
   13258:	003d3206 	br	12724 <__alt_mem_nios_system_shared_memory+0xfffd2724>
   1325c:	d8000e15 	stw	zero,56(sp)
   13260:	003d7506 	br	12838 <__alt_mem_nios_system_shared_memory+0xfffd2838>
   13264:	b005883a 	mov	r2,r22
   13268:	003f4506 	br	12f80 <__alt_mem_nios_system_shared_memory+0xfffd2f80>
   1326c:	dc000915 	stw	r16,36(sp)
   13270:	d9800a17 	ldw	r6,40(sp)
   13274:	d9400917 	ldw	r5,36(sp)
   13278:	e009883a 	mov	r4,fp
   1327c:	00158980 	call	15898 <__pow5mult>
   13280:	1021883a 	mov	r16,r2
   13284:	003f5a06 	br	12ff0 <__alt_mem_nios_system_shared_memory+0xfffd2ff0>
   13288:	01c00044 	movi	r7,1
   1328c:	d9c00b15 	stw	r7,44(sp)
   13290:	d8802217 	ldw	r2,136(sp)
   13294:	0081280e 	bge	zero,r2,13738 <_dtoa_r+0x11b0>
   13298:	100d883a 	mov	r6,r2
   1329c:	1021883a 	mov	r16,r2
   132a0:	d8800c15 	stw	r2,48(sp)
   132a4:	d8800615 	stw	r2,24(sp)
   132a8:	003d8806 	br	128cc <__alt_mem_nios_system_shared_memory+0xfffd28cc>
   132ac:	d8800617 	ldw	r2,24(sp)
   132b0:	00be9b16 	blt	zero,r2,12d20 <__alt_mem_nios_system_shared_memory+0xfffd2d20>
   132b4:	10010f1e 	bne	r2,zero,136f4 <_dtoa_r+0x116c>
   132b8:	880b883a 	mov	r5,r17
   132bc:	000d883a 	mov	r6,zero
   132c0:	01d00534 	movhi	r7,16404
   132c4:	8009883a 	mov	r4,r16
   132c8:	0007c800 	call	7c80 <__muldf3>
   132cc:	900d883a 	mov	r6,r18
   132d0:	980f883a 	mov	r7,r19
   132d4:	1009883a 	mov	r4,r2
   132d8:	180b883a 	mov	r5,r3
   132dc:	0007ab00 	call	7ab0 <__gedf2>
   132e0:	002b883a 	mov	r21,zero
   132e4:	0023883a 	mov	r17,zero
   132e8:	1000bf16 	blt	r2,zero,135e8 <_dtoa_r+0x1060>
   132ec:	d9802217 	ldw	r6,136(sp)
   132f0:	ddc00717 	ldw	r23,28(sp)
   132f4:	018c303a 	nor	r6,zero,r6
   132f8:	d9800515 	stw	r6,20(sp)
   132fc:	a80b883a 	mov	r5,r21
   13300:	e009883a 	mov	r4,fp
   13304:	00152440 	call	15244 <_Bfree>
   13308:	883e4926 	beq	r17,zero,12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   1330c:	003fad06 	br	131c4 <__alt_mem_nios_system_shared_memory+0xfffd31c4>
   13310:	d9c01117 	ldw	r7,68(sp)
   13314:	3801bc26 	beq	r7,zero,13a08 <_dtoa_r+0x1480>
   13318:	10810cc4 	addi	r2,r2,1075
   1331c:	dd400a17 	ldw	r21,40(sp)
   13320:	dd000817 	ldw	r20,32(sp)
   13324:	003f0a06 	br	12f50 <__alt_mem_nios_system_shared_memory+0xfffd2f50>
   13328:	00800704 	movi	r2,28
   1332c:	d9000817 	ldw	r4,32(sp)
   13330:	a0a9883a 	add	r20,r20,r2
   13334:	b0ad883a 	add	r22,r22,r2
   13338:	2089883a 	add	r4,r4,r2
   1333c:	d9000815 	stw	r4,32(sp)
   13340:	003f5106 	br	13088 <__alt_mem_nios_system_shared_memory+0xfffd3088>
   13344:	d8c00317 	ldw	r3,12(sp)
   13348:	b8c1fc0e 	bge	r23,r3,13b3c <_dtoa_r+0x15b4>
   1334c:	0027883a 	mov	r19,zero
   13350:	b805883a 	mov	r2,r23
   13354:	003f3e06 	br	13050 <__alt_mem_nios_system_shared_memory+0xfffd3050>
   13358:	880b883a 	mov	r5,r17
   1335c:	e009883a 	mov	r4,fp
   13360:	000f883a 	mov	r7,zero
   13364:	01800284 	movi	r6,10
   13368:	001526c0 	call	1526c <__multadd>
   1336c:	d9000c17 	ldw	r4,48(sp)
   13370:	1023883a 	mov	r17,r2
   13374:	0102040e 	bge	zero,r4,13b88 <_dtoa_r+0x1600>
   13378:	d9000615 	stw	r4,24(sp)
   1337c:	0500050e 	bge	zero,r20,13394 <_dtoa_r+0xe0c>
   13380:	880b883a 	mov	r5,r17
   13384:	a00d883a 	mov	r6,r20
   13388:	e009883a 	mov	r4,fp
   1338c:	00159d80 	call	159d8 <__lshift>
   13390:	1023883a 	mov	r17,r2
   13394:	9801241e 	bne	r19,zero,13828 <_dtoa_r+0x12a0>
   13398:	8829883a 	mov	r20,r17
   1339c:	d9000617 	ldw	r4,24(sp)
   133a0:	dcc00717 	ldw	r19,28(sp)
   133a4:	9480004c 	andi	r18,r18,1
   133a8:	20bfffc4 	addi	r2,r4,-1
   133ac:	9885883a 	add	r2,r19,r2
   133b0:	d8800415 	stw	r2,16(sp)
   133b4:	dc800615 	stw	r18,24(sp)
   133b8:	a80b883a 	mov	r5,r21
   133bc:	8009883a 	mov	r4,r16
   133c0:	00123600 	call	12360 <quorem>
   133c4:	880b883a 	mov	r5,r17
   133c8:	8009883a 	mov	r4,r16
   133cc:	102f883a 	mov	r23,r2
   133d0:	0015b200 	call	15b20 <__mcmp>
   133d4:	a80b883a 	mov	r5,r21
   133d8:	a00d883a 	mov	r6,r20
   133dc:	e009883a 	mov	r4,fp
   133e0:	102d883a 	mov	r22,r2
   133e4:	0015b800 	call	15b80 <__mdiff>
   133e8:	1007883a 	mov	r3,r2
   133ec:	10800317 	ldw	r2,12(r2)
   133f0:	bc800c04 	addi	r18,r23,48
   133f4:	180b883a 	mov	r5,r3
   133f8:	10004e1e 	bne	r2,zero,13534 <_dtoa_r+0xfac>
   133fc:	8009883a 	mov	r4,r16
   13400:	d8c01615 	stw	r3,88(sp)
   13404:	0015b200 	call	15b20 <__mcmp>
   13408:	d8c01617 	ldw	r3,88(sp)
   1340c:	e009883a 	mov	r4,fp
   13410:	d8801615 	stw	r2,88(sp)
   13414:	180b883a 	mov	r5,r3
   13418:	00152440 	call	15244 <_Bfree>
   1341c:	d8801617 	ldw	r2,88(sp)
   13420:	1000041e 	bne	r2,zero,13434 <_dtoa_r+0xeac>
   13424:	d9800317 	ldw	r6,12(sp)
   13428:	3000021e 	bne	r6,zero,13434 <_dtoa_r+0xeac>
   1342c:	d8c00617 	ldw	r3,24(sp)
   13430:	18003726 	beq	r3,zero,13510 <_dtoa_r+0xf88>
   13434:	b0002016 	blt	r22,zero,134b8 <_dtoa_r+0xf30>
   13438:	b000041e 	bne	r22,zero,1344c <_dtoa_r+0xec4>
   1343c:	d9000317 	ldw	r4,12(sp)
   13440:	2000021e 	bne	r4,zero,1344c <_dtoa_r+0xec4>
   13444:	d8c00617 	ldw	r3,24(sp)
   13448:	18001b26 	beq	r3,zero,134b8 <_dtoa_r+0xf30>
   1344c:	00810716 	blt	zero,r2,1386c <_dtoa_r+0x12e4>
   13450:	d8c00417 	ldw	r3,16(sp)
   13454:	9d800044 	addi	r22,r19,1
   13458:	9c800005 	stb	r18,0(r19)
   1345c:	b02f883a 	mov	r23,r22
   13460:	98c10626 	beq	r19,r3,1387c <_dtoa_r+0x12f4>
   13464:	800b883a 	mov	r5,r16
   13468:	000f883a 	mov	r7,zero
   1346c:	01800284 	movi	r6,10
   13470:	e009883a 	mov	r4,fp
   13474:	001526c0 	call	1526c <__multadd>
   13478:	1021883a 	mov	r16,r2
   1347c:	000f883a 	mov	r7,zero
   13480:	01800284 	movi	r6,10
   13484:	880b883a 	mov	r5,r17
   13488:	e009883a 	mov	r4,fp
   1348c:	8d002526 	beq	r17,r20,13524 <_dtoa_r+0xf9c>
   13490:	001526c0 	call	1526c <__multadd>
   13494:	a00b883a 	mov	r5,r20
   13498:	000f883a 	mov	r7,zero
   1349c:	01800284 	movi	r6,10
   134a0:	e009883a 	mov	r4,fp
   134a4:	1023883a 	mov	r17,r2
   134a8:	001526c0 	call	1526c <__multadd>
   134ac:	1029883a 	mov	r20,r2
   134b0:	b027883a 	mov	r19,r22
   134b4:	003fc006 	br	133b8 <__alt_mem_nios_system_shared_memory+0xfffd33b8>
   134b8:	9011883a 	mov	r8,r18
   134bc:	00800e0e 	bge	zero,r2,134f8 <_dtoa_r+0xf70>
   134c0:	800b883a 	mov	r5,r16
   134c4:	01800044 	movi	r6,1
   134c8:	e009883a 	mov	r4,fp
   134cc:	da001715 	stw	r8,92(sp)
   134d0:	00159d80 	call	159d8 <__lshift>
   134d4:	a80b883a 	mov	r5,r21
   134d8:	1009883a 	mov	r4,r2
   134dc:	1021883a 	mov	r16,r2
   134e0:	0015b200 	call	15b20 <__mcmp>
   134e4:	da001717 	ldw	r8,92(sp)
   134e8:	0081960e 	bge	zero,r2,13b44 <_dtoa_r+0x15bc>
   134ec:	00800e44 	movi	r2,57
   134f0:	40817026 	beq	r8,r2,13ab4 <_dtoa_r+0x152c>
   134f4:	ba000c44 	addi	r8,r23,49
   134f8:	8825883a 	mov	r18,r17
   134fc:	9dc00044 	addi	r23,r19,1
   13500:	9a000005 	stb	r8,0(r19)
   13504:	a023883a 	mov	r17,r20
   13508:	dc000915 	stw	r16,36(sp)
   1350c:	003f2406 	br	131a0 <__alt_mem_nios_system_shared_memory+0xfffd31a0>
   13510:	00800e44 	movi	r2,57
   13514:	9011883a 	mov	r8,r18
   13518:	90816626 	beq	r18,r2,13ab4 <_dtoa_r+0x152c>
   1351c:	05bff516 	blt	zero,r22,134f4 <__alt_mem_nios_system_shared_memory+0xfffd34f4>
   13520:	003ff506 	br	134f8 <__alt_mem_nios_system_shared_memory+0xfffd34f8>
   13524:	001526c0 	call	1526c <__multadd>
   13528:	1023883a 	mov	r17,r2
   1352c:	1029883a 	mov	r20,r2
   13530:	003fdf06 	br	134b0 <__alt_mem_nios_system_shared_memory+0xfffd34b0>
   13534:	e009883a 	mov	r4,fp
   13538:	00152440 	call	15244 <_Bfree>
   1353c:	00800044 	movi	r2,1
   13540:	003fbc06 	br	13434 <__alt_mem_nios_system_shared_memory+0xfffd3434>
   13544:	a80b883a 	mov	r5,r21
   13548:	8009883a 	mov	r4,r16
   1354c:	0015b200 	call	15b20 <__mcmp>
   13550:	103edb0e 	bge	r2,zero,130c0 <__alt_mem_nios_system_shared_memory+0xfffd30c0>
   13554:	800b883a 	mov	r5,r16
   13558:	000f883a 	mov	r7,zero
   1355c:	01800284 	movi	r6,10
   13560:	e009883a 	mov	r4,fp
   13564:	001526c0 	call	1526c <__multadd>
   13568:	1021883a 	mov	r16,r2
   1356c:	d8800517 	ldw	r2,20(sp)
   13570:	d8c00b17 	ldw	r3,44(sp)
   13574:	10bfffc4 	addi	r2,r2,-1
   13578:	d8800515 	stw	r2,20(sp)
   1357c:	183f761e 	bne	r3,zero,13358 <__alt_mem_nios_system_shared_memory+0xfffd3358>
   13580:	d9000c17 	ldw	r4,48(sp)
   13584:	0101730e 	bge	zero,r4,13b54 <_dtoa_r+0x15cc>
   13588:	d9000615 	stw	r4,24(sp)
   1358c:	003ed006 	br	130d0 <__alt_mem_nios_system_shared_memory+0xfffd30d0>
   13590:	00800084 	movi	r2,2
   13594:	3081861e 	bne	r6,r2,13bb0 <_dtoa_r+0x1628>
   13598:	d8000b15 	stw	zero,44(sp)
   1359c:	003f3c06 	br	13290 <__alt_mem_nios_system_shared_memory+0xfffd3290>
   135a0:	dc000917 	ldw	r16,36(sp)
   135a4:	003e9206 	br	12ff0 <__alt_mem_nios_system_shared_memory+0xfffd2ff0>
   135a8:	d9c00317 	ldw	r7,12(sp)
   135ac:	00800084 	movi	r2,2
   135b0:	11fec50e 	bge	r2,r7,130c8 <__alt_mem_nios_system_shared_memory+0xfffd30c8>
   135b4:	d9000617 	ldw	r4,24(sp)
   135b8:	20013c1e 	bne	r4,zero,13aac <_dtoa_r+0x1524>
   135bc:	a80b883a 	mov	r5,r21
   135c0:	000f883a 	mov	r7,zero
   135c4:	01800144 	movi	r6,5
   135c8:	e009883a 	mov	r4,fp
   135cc:	001526c0 	call	1526c <__multadd>
   135d0:	100b883a 	mov	r5,r2
   135d4:	8009883a 	mov	r4,r16
   135d8:	102b883a 	mov	r21,r2
   135dc:	0015b200 	call	15b20 <__mcmp>
   135e0:	dc000915 	stw	r16,36(sp)
   135e4:	00bf410e 	bge	zero,r2,132ec <__alt_mem_nios_system_shared_memory+0xfffd32ec>
   135e8:	d9c00717 	ldw	r7,28(sp)
   135ec:	00800c44 	movi	r2,49
   135f0:	38800005 	stb	r2,0(r7)
   135f4:	d8800517 	ldw	r2,20(sp)
   135f8:	3dc00044 	addi	r23,r7,1
   135fc:	10800044 	addi	r2,r2,1
   13600:	d8800515 	stw	r2,20(sp)
   13604:	003f3d06 	br	132fc <__alt_mem_nios_system_shared_memory+0xfffd32fc>
   13608:	d9800517 	ldw	r6,20(sp)
   1360c:	d9c00717 	ldw	r7,28(sp)
   13610:	00800c44 	movi	r2,49
   13614:	31800044 	addi	r6,r6,1
   13618:	d9800515 	stw	r6,20(sp)
   1361c:	38800005 	stb	r2,0(r7)
   13620:	003edf06 	br	131a0 <__alt_mem_nios_system_shared_memory+0xfffd31a0>
   13624:	d8000b15 	stw	zero,44(sp)
   13628:	003c9f06 	br	128a8 <__alt_mem_nios_system_shared_memory+0xfffd28a8>
   1362c:	903e7e1e 	bne	r18,zero,13028 <__alt_mem_nios_system_shared_memory+0xfffd3028>
   13630:	00800434 	movhi	r2,16
   13634:	10bfffc4 	addi	r2,r2,-1
   13638:	9884703a 	and	r2,r19,r2
   1363c:	1000ea1e 	bne	r2,zero,139e8 <_dtoa_r+0x1460>
   13640:	9cdffc2c 	andhi	r19,r19,32752
   13644:	9800e826 	beq	r19,zero,139e8 <_dtoa_r+0x1460>
   13648:	d9c00817 	ldw	r7,32(sp)
   1364c:	b5800044 	addi	r22,r22,1
   13650:	04c00044 	movi	r19,1
   13654:	39c00044 	addi	r7,r7,1
   13658:	d9c00815 	stw	r7,32(sp)
   1365c:	d8800d17 	ldw	r2,52(sp)
   13660:	103e721e 	bne	r2,zero,1302c <__alt_mem_nios_system_shared_memory+0xfffd302c>
   13664:	00800044 	movi	r2,1
   13668:	003e7906 	br	13050 <__alt_mem_nios_system_shared_memory+0xfffd3050>
   1366c:	8009883a 	mov	r4,r16
   13670:	0008de80 	call	8de8 <__floatsidf>
   13674:	d9800f17 	ldw	r6,60(sp)
   13678:	d9c01017 	ldw	r7,64(sp)
   1367c:	1009883a 	mov	r4,r2
   13680:	180b883a 	mov	r5,r3
   13684:	0007c800 	call	7c80 <__muldf3>
   13688:	000d883a 	mov	r6,zero
   1368c:	01d00734 	movhi	r7,16412
   13690:	1009883a 	mov	r4,r2
   13694:	180b883a 	mov	r5,r3
   13698:	00067ac0 	call	67ac <__adddf3>
   1369c:	047f3034 	movhi	r17,64704
   136a0:	1021883a 	mov	r16,r2
   136a4:	1c63883a 	add	r17,r3,r17
   136a8:	d9000f17 	ldw	r4,60(sp)
   136ac:	d9401017 	ldw	r5,64(sp)
   136b0:	000d883a 	mov	r6,zero
   136b4:	01d00534 	movhi	r7,16404
   136b8:	00084ec0 	call	84ec <__subdf3>
   136bc:	800d883a 	mov	r6,r16
   136c0:	880f883a 	mov	r7,r17
   136c4:	1009883a 	mov	r4,r2
   136c8:	180b883a 	mov	r5,r3
   136cc:	102b883a 	mov	r21,r2
   136d0:	1829883a 	mov	r20,r3
   136d4:	0007ab00 	call	7ab0 <__gedf2>
   136d8:	00806c16 	blt	zero,r2,1388c <_dtoa_r+0x1304>
   136dc:	89e0003c 	xorhi	r7,r17,32768
   136e0:	800d883a 	mov	r6,r16
   136e4:	a809883a 	mov	r4,r21
   136e8:	a00b883a 	mov	r5,r20
   136ec:	0007b8c0 	call	7b8c <__ledf2>
   136f0:	103d7e0e 	bge	r2,zero,12cec <__alt_mem_nios_system_shared_memory+0xfffd2cec>
   136f4:	002b883a 	mov	r21,zero
   136f8:	0023883a 	mov	r17,zero
   136fc:	003efb06 	br	132ec <__alt_mem_nios_system_shared_memory+0xfffd32ec>
   13700:	d8800717 	ldw	r2,28(sp)
   13704:	003bd006 	br	12648 <__alt_mem_nios_system_shared_memory+0xfffd2648>
   13708:	d9000a17 	ldw	r4,40(sp)
   1370c:	d9800d17 	ldw	r6,52(sp)
   13710:	dd400a15 	stw	r21,40(sp)
   13714:	a905c83a 	sub	r2,r21,r4
   13718:	308d883a 	add	r6,r6,r2
   1371c:	d9800d15 	stw	r6,52(sp)
   13720:	002b883a 	mov	r21,zero
   13724:	003e0606 	br	12f40 <__alt_mem_nios_system_shared_memory+0xfffd2f40>
   13728:	9023883a 	mov	r17,r18
   1372c:	9829883a 	mov	r20,r19
   13730:	04000084 	movi	r16,2
   13734:	003c9206 	br	12980 <__alt_mem_nios_system_shared_memory+0xfffd2980>
   13738:	04000044 	movi	r16,1
   1373c:	dc000c15 	stw	r16,48(sp)
   13740:	dc000615 	stw	r16,24(sp)
   13744:	dc002215 	stw	r16,136(sp)
   13748:	e0001115 	stw	zero,68(fp)
   1374c:	000b883a 	mov	r5,zero
   13750:	003c6906 	br	128f8 <__alt_mem_nios_system_shared_memory+0xfffd28f8>
   13754:	3021883a 	mov	r16,r6
   13758:	003ffb06 	br	13748 <__alt_mem_nios_system_shared_memory+0xfffd3748>
   1375c:	1000021e 	bne	r2,zero,13768 <_dtoa_r+0x11e0>
   13760:	4200004c 	andi	r8,r8,1
   13764:	403e7d1e 	bne	r8,zero,1315c <__alt_mem_nios_system_shared_memory+0xfffd315c>
   13768:	01000c04 	movi	r4,48
   1376c:	00000106 	br	13774 <_dtoa_r+0x11ec>
   13770:	102f883a 	mov	r23,r2
   13774:	b8bfffc4 	addi	r2,r23,-1
   13778:	10c00007 	ldb	r3,0(r2)
   1377c:	193ffc26 	beq	r3,r4,13770 <__alt_mem_nios_system_shared_memory+0xfffd3770>
   13780:	003e8706 	br	131a0 <__alt_mem_nios_system_shared_memory+0xfffd31a0>
   13784:	d8800517 	ldw	r2,20(sp)
   13788:	00a3c83a 	sub	r17,zero,r2
   1378c:	8800a426 	beq	r17,zero,13a20 <_dtoa_r+0x1498>
   13790:	888003cc 	andi	r2,r17,15
   13794:	100490fa 	slli	r2,r2,3
   13798:	00c000b4 	movhi	r3,2
   1379c:	18fb0604 	addi	r3,r3,-5096
   137a0:	1885883a 	add	r2,r3,r2
   137a4:	11800017 	ldw	r6,0(r2)
   137a8:	11c00117 	ldw	r7,4(r2)
   137ac:	9009883a 	mov	r4,r18
   137b0:	980b883a 	mov	r5,r19
   137b4:	8823d13a 	srai	r17,r17,4
   137b8:	0007c800 	call	7c80 <__muldf3>
   137bc:	d8800f15 	stw	r2,60(sp)
   137c0:	d8c01015 	stw	r3,64(sp)
   137c4:	8800e826 	beq	r17,zero,13b68 <_dtoa_r+0x15e0>
   137c8:	050000b4 	movhi	r20,2
   137cc:	a53afc04 	addi	r20,r20,-5136
   137d0:	04000084 	movi	r16,2
   137d4:	8980004c 	andi	r6,r17,1
   137d8:	1009883a 	mov	r4,r2
   137dc:	8823d07a 	srai	r17,r17,1
   137e0:	180b883a 	mov	r5,r3
   137e4:	30000426 	beq	r6,zero,137f8 <_dtoa_r+0x1270>
   137e8:	a1800017 	ldw	r6,0(r20)
   137ec:	a1c00117 	ldw	r7,4(r20)
   137f0:	84000044 	addi	r16,r16,1
   137f4:	0007c800 	call	7c80 <__muldf3>
   137f8:	a5000204 	addi	r20,r20,8
   137fc:	883ff51e 	bne	r17,zero,137d4 <__alt_mem_nios_system_shared_memory+0xfffd37d4>
   13800:	d8800f15 	stw	r2,60(sp)
   13804:	d8c01015 	stw	r3,64(sp)
   13808:	003c7606 	br	129e4 <__alt_mem_nios_system_shared_memory+0xfffd29e4>
   1380c:	00c00c04 	movi	r3,48
   13810:	10c00005 	stb	r3,0(r2)
   13814:	d8c00517 	ldw	r3,20(sp)
   13818:	bd3fffc3 	ldbu	r20,-1(r23)
   1381c:	18c00044 	addi	r3,r3,1
   13820:	d8c00515 	stw	r3,20(sp)
   13824:	003db906 	br	12f0c <__alt_mem_nios_system_shared_memory+0xfffd2f0c>
   13828:	89400117 	ldw	r5,4(r17)
   1382c:	e009883a 	mov	r4,fp
   13830:	001519c0 	call	1519c <_Balloc>
   13834:	89800417 	ldw	r6,16(r17)
   13838:	89400304 	addi	r5,r17,12
   1383c:	11000304 	addi	r4,r2,12
   13840:	31800084 	addi	r6,r6,2
   13844:	318d883a 	add	r6,r6,r6
   13848:	318d883a 	add	r6,r6,r6
   1384c:	1027883a 	mov	r19,r2
   13850:	000b0ac0 	call	b0ac <memcpy>
   13854:	01800044 	movi	r6,1
   13858:	980b883a 	mov	r5,r19
   1385c:	e009883a 	mov	r4,fp
   13860:	00159d80 	call	159d8 <__lshift>
   13864:	1029883a 	mov	r20,r2
   13868:	003ecc06 	br	1339c <__alt_mem_nios_system_shared_memory+0xfffd339c>
   1386c:	00800e44 	movi	r2,57
   13870:	90809026 	beq	r18,r2,13ab4 <_dtoa_r+0x152c>
   13874:	92000044 	addi	r8,r18,1
   13878:	003f1f06 	br	134f8 <__alt_mem_nios_system_shared_memory+0xfffd34f8>
   1387c:	9011883a 	mov	r8,r18
   13880:	8825883a 	mov	r18,r17
   13884:	a023883a 	mov	r17,r20
   13888:	003e2906 	br	13130 <__alt_mem_nios_system_shared_memory+0xfffd3130>
   1388c:	002b883a 	mov	r21,zero
   13890:	0023883a 	mov	r17,zero
   13894:	003f5406 	br	135e8 <__alt_mem_nios_system_shared_memory+0xfffd35e8>
   13898:	61bfffc4 	addi	r6,r12,-1
   1389c:	300490fa 	slli	r2,r6,3
   138a0:	00c000b4 	movhi	r3,2
   138a4:	18fb0604 	addi	r3,r3,-5096
   138a8:	1885883a 	add	r2,r3,r2
   138ac:	11000017 	ldw	r4,0(r2)
   138b0:	11400117 	ldw	r5,4(r2)
   138b4:	d8800717 	ldw	r2,28(sp)
   138b8:	880f883a 	mov	r7,r17
   138bc:	d9801215 	stw	r6,72(sp)
   138c0:	800d883a 	mov	r6,r16
   138c4:	db001615 	stw	r12,88(sp)
   138c8:	15c00044 	addi	r23,r2,1
   138cc:	0007c800 	call	7c80 <__muldf3>
   138d0:	d9401017 	ldw	r5,64(sp)
   138d4:	d9000f17 	ldw	r4,60(sp)
   138d8:	d8c01515 	stw	r3,84(sp)
   138dc:	d8801415 	stw	r2,80(sp)
   138e0:	001aae80 	call	1aae8 <__fixdfsi>
   138e4:	1009883a 	mov	r4,r2
   138e8:	1021883a 	mov	r16,r2
   138ec:	0008de80 	call	8de8 <__floatsidf>
   138f0:	d9000f17 	ldw	r4,60(sp)
   138f4:	d9401017 	ldw	r5,64(sp)
   138f8:	100d883a 	mov	r6,r2
   138fc:	180f883a 	mov	r7,r3
   13900:	00084ec0 	call	84ec <__subdf3>
   13904:	1829883a 	mov	r20,r3
   13908:	d8c00717 	ldw	r3,28(sp)
   1390c:	84000c04 	addi	r16,r16,48
   13910:	1023883a 	mov	r17,r2
   13914:	1c000005 	stb	r16,0(r3)
   13918:	db001617 	ldw	r12,88(sp)
   1391c:	00800044 	movi	r2,1
   13920:	60802226 	beq	r12,r2,139ac <_dtoa_r+0x1424>
   13924:	d9c00717 	ldw	r7,28(sp)
   13928:	8805883a 	mov	r2,r17
   1392c:	b82b883a 	mov	r21,r23
   13930:	3b19883a 	add	r12,r7,r12
   13934:	6023883a 	mov	r17,r12
   13938:	a007883a 	mov	r3,r20
   1393c:	dc800f15 	stw	r18,60(sp)
   13940:	000d883a 	mov	r6,zero
   13944:	01d00934 	movhi	r7,16420
   13948:	1009883a 	mov	r4,r2
   1394c:	180b883a 	mov	r5,r3
   13950:	0007c800 	call	7c80 <__muldf3>
   13954:	180b883a 	mov	r5,r3
   13958:	1009883a 	mov	r4,r2
   1395c:	1829883a 	mov	r20,r3
   13960:	1025883a 	mov	r18,r2
   13964:	001aae80 	call	1aae8 <__fixdfsi>
   13968:	1009883a 	mov	r4,r2
   1396c:	1021883a 	mov	r16,r2
   13970:	0008de80 	call	8de8 <__floatsidf>
   13974:	100d883a 	mov	r6,r2
   13978:	180f883a 	mov	r7,r3
   1397c:	9009883a 	mov	r4,r18
   13980:	a00b883a 	mov	r5,r20
   13984:	84000c04 	addi	r16,r16,48
   13988:	00084ec0 	call	84ec <__subdf3>
   1398c:	ad400044 	addi	r21,r21,1
   13990:	ac3fffc5 	stb	r16,-1(r21)
   13994:	ac7fea1e 	bne	r21,r17,13940 <__alt_mem_nios_system_shared_memory+0xfffd3940>
   13998:	1023883a 	mov	r17,r2
   1399c:	d8801217 	ldw	r2,72(sp)
   139a0:	dc800f17 	ldw	r18,60(sp)
   139a4:	1829883a 	mov	r20,r3
   139a8:	b8af883a 	add	r23,r23,r2
   139ac:	d9001417 	ldw	r4,80(sp)
   139b0:	d9401517 	ldw	r5,84(sp)
   139b4:	000d883a 	mov	r6,zero
   139b8:	01cff834 	movhi	r7,16352
   139bc:	00067ac0 	call	67ac <__adddf3>
   139c0:	880d883a 	mov	r6,r17
   139c4:	a00f883a 	mov	r7,r20
   139c8:	1009883a 	mov	r4,r2
   139cc:	180b883a 	mov	r5,r3
   139d0:	0007b8c0 	call	7b8c <__ledf2>
   139d4:	10003e0e 	bge	r2,zero,13ad0 <_dtoa_r+0x1548>
   139d8:	d9001317 	ldw	r4,76(sp)
   139dc:	bd3fffc3 	ldbu	r20,-1(r23)
   139e0:	d9000515 	stw	r4,20(sp)
   139e4:	003d3b06 	br	12ed4 <__alt_mem_nios_system_shared_memory+0xfffd2ed4>
   139e8:	0027883a 	mov	r19,zero
   139ec:	003f1b06 	br	1365c <__alt_mem_nios_system_shared_memory+0xfffd365c>
   139f0:	d8800817 	ldw	r2,32(sp)
   139f4:	11e9c83a 	sub	r20,r2,r7
   139f8:	0005883a 	mov	r2,zero
   139fc:	003d5406 	br	12f50 <__alt_mem_nios_system_shared_memory+0xfffd2f50>
   13a00:	00800044 	movi	r2,1
   13a04:	003dc706 	br	13124 <__alt_mem_nios_system_shared_memory+0xfffd3124>
   13a08:	d8c00217 	ldw	r3,8(sp)
   13a0c:	00800d84 	movi	r2,54
   13a10:	dd400a17 	ldw	r21,40(sp)
   13a14:	10c5c83a 	sub	r2,r2,r3
   13a18:	dd000817 	ldw	r20,32(sp)
   13a1c:	003d4c06 	br	12f50 <__alt_mem_nios_system_shared_memory+0xfffd2f50>
   13a20:	dc800f15 	stw	r18,60(sp)
   13a24:	dcc01015 	stw	r19,64(sp)
   13a28:	04000084 	movi	r16,2
   13a2c:	003bed06 	br	129e4 <__alt_mem_nios_system_shared_memory+0xfffd29e4>
   13a30:	d9000617 	ldw	r4,24(sp)
   13a34:	203f0d26 	beq	r4,zero,1366c <__alt_mem_nios_system_shared_memory+0xfffd366c>
   13a38:	d9800c17 	ldw	r6,48(sp)
   13a3c:	01bcab0e 	bge	zero,r6,12cec <__alt_mem_nios_system_shared_memory+0xfffd2cec>
   13a40:	d9401017 	ldw	r5,64(sp)
   13a44:	d9000f17 	ldw	r4,60(sp)
   13a48:	000d883a 	mov	r6,zero
   13a4c:	01d00934 	movhi	r7,16420
   13a50:	0007c800 	call	7c80 <__muldf3>
   13a54:	81000044 	addi	r4,r16,1
   13a58:	d8800f15 	stw	r2,60(sp)
   13a5c:	d8c01015 	stw	r3,64(sp)
   13a60:	0008de80 	call	8de8 <__floatsidf>
   13a64:	d9800f17 	ldw	r6,60(sp)
   13a68:	d9c01017 	ldw	r7,64(sp)
   13a6c:	1009883a 	mov	r4,r2
   13a70:	180b883a 	mov	r5,r3
   13a74:	0007c800 	call	7c80 <__muldf3>
   13a78:	01d00734 	movhi	r7,16412
   13a7c:	000d883a 	mov	r6,zero
   13a80:	1009883a 	mov	r4,r2
   13a84:	180b883a 	mov	r5,r3
   13a88:	00067ac0 	call	67ac <__adddf3>
   13a8c:	d9c00517 	ldw	r7,20(sp)
   13a90:	047f3034 	movhi	r17,64704
   13a94:	1021883a 	mov	r16,r2
   13a98:	39ffffc4 	addi	r7,r7,-1
   13a9c:	d9c01315 	stw	r7,76(sp)
   13aa0:	1c63883a 	add	r17,r3,r17
   13aa4:	db000c17 	ldw	r12,48(sp)
   13aa8:	003bea06 	br	12a54 <__alt_mem_nios_system_shared_memory+0xfffd2a54>
   13aac:	dc000915 	stw	r16,36(sp)
   13ab0:	003e0e06 	br	132ec <__alt_mem_nios_system_shared_memory+0xfffd32ec>
   13ab4:	01000e44 	movi	r4,57
   13ab8:	8825883a 	mov	r18,r17
   13abc:	9dc00044 	addi	r23,r19,1
   13ac0:	99000005 	stb	r4,0(r19)
   13ac4:	a023883a 	mov	r17,r20
   13ac8:	dc000915 	stw	r16,36(sp)
   13acc:	003da406 	br	13160 <__alt_mem_nios_system_shared_memory+0xfffd3160>
   13ad0:	d9801417 	ldw	r6,80(sp)
   13ad4:	d9c01517 	ldw	r7,84(sp)
   13ad8:	0009883a 	mov	r4,zero
   13adc:	014ff834 	movhi	r5,16352
   13ae0:	00084ec0 	call	84ec <__subdf3>
   13ae4:	880d883a 	mov	r6,r17
   13ae8:	a00f883a 	mov	r7,r20
   13aec:	1009883a 	mov	r4,r2
   13af0:	180b883a 	mov	r5,r3
   13af4:	0007ab00 	call	7ab0 <__gedf2>
   13af8:	00bc7c0e 	bge	zero,r2,12cec <__alt_mem_nios_system_shared_memory+0xfffd2cec>
   13afc:	01000c04 	movi	r4,48
   13b00:	00000106 	br	13b08 <_dtoa_r+0x1580>
   13b04:	102f883a 	mov	r23,r2
   13b08:	b8bfffc4 	addi	r2,r23,-1
   13b0c:	10c00007 	ldb	r3,0(r2)
   13b10:	193ffc26 	beq	r3,r4,13b04 <__alt_mem_nios_system_shared_memory+0xfffd3b04>
   13b14:	d9801317 	ldw	r6,76(sp)
   13b18:	d9800515 	stw	r6,20(sp)
   13b1c:	003c4406 	br	12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   13b20:	d9801317 	ldw	r6,76(sp)
   13b24:	d9800515 	stw	r6,20(sp)
   13b28:	003cea06 	br	12ed4 <__alt_mem_nios_system_shared_memory+0xfffd2ed4>
   13b2c:	dd800f17 	ldw	r22,60(sp)
   13b30:	dcc01017 	ldw	r19,64(sp)
   13b34:	dc801217 	ldw	r18,72(sp)
   13b38:	003c6c06 	br	12cec <__alt_mem_nios_system_shared_memory+0xfffd2cec>
   13b3c:	903e031e 	bne	r18,zero,1334c <__alt_mem_nios_system_shared_memory+0xfffd334c>
   13b40:	003ebb06 	br	13630 <__alt_mem_nios_system_shared_memory+0xfffd3630>
   13b44:	103e6c1e 	bne	r2,zero,134f8 <__alt_mem_nios_system_shared_memory+0xfffd34f8>
   13b48:	4080004c 	andi	r2,r8,1
   13b4c:	103e6a26 	beq	r2,zero,134f8 <__alt_mem_nios_system_shared_memory+0xfffd34f8>
   13b50:	003e6606 	br	134ec <__alt_mem_nios_system_shared_memory+0xfffd34ec>
   13b54:	d8c00317 	ldw	r3,12(sp)
   13b58:	00800084 	movi	r2,2
   13b5c:	10c02916 	blt	r2,r3,13c04 <_dtoa_r+0x167c>
   13b60:	d9000c17 	ldw	r4,48(sp)
   13b64:	003e8806 	br	13588 <__alt_mem_nios_system_shared_memory+0xfffd3588>
   13b68:	04000084 	movi	r16,2
   13b6c:	003b9d06 	br	129e4 <__alt_mem_nios_system_shared_memory+0xfffd29e4>
   13b70:	d9001317 	ldw	r4,76(sp)
   13b74:	d9000515 	stw	r4,20(sp)
   13b78:	003cd606 	br	12ed4 <__alt_mem_nios_system_shared_memory+0xfffd2ed4>
   13b7c:	d8801317 	ldw	r2,76(sp)
   13b80:	d8800515 	stw	r2,20(sp)
   13b84:	003c2a06 	br	12c30 <__alt_mem_nios_system_shared_memory+0xfffd2c30>
   13b88:	d9800317 	ldw	r6,12(sp)
   13b8c:	00800084 	movi	r2,2
   13b90:	11801516 	blt	r2,r6,13be8 <_dtoa_r+0x1660>
   13b94:	d9c00c17 	ldw	r7,48(sp)
   13b98:	d9c00615 	stw	r7,24(sp)
   13b9c:	003df706 	br	1337c <__alt_mem_nios_system_shared_memory+0xfffd337c>
   13ba0:	193d3926 	beq	r3,r4,13088 <__alt_mem_nios_system_shared_memory+0xfffd3088>
   13ba4:	00c00f04 	movi	r3,60
   13ba8:	1885c83a 	sub	r2,r3,r2
   13bac:	003ddf06 	br	1332c <__alt_mem_nios_system_shared_memory+0xfffd332c>
   13bb0:	e009883a 	mov	r4,fp
   13bb4:	e0001115 	stw	zero,68(fp)
   13bb8:	000b883a 	mov	r5,zero
   13bbc:	001519c0 	call	1519c <_Balloc>
   13bc0:	d8800715 	stw	r2,28(sp)
   13bc4:	d8c00717 	ldw	r3,28(sp)
   13bc8:	00bfffc4 	movi	r2,-1
   13bcc:	01000044 	movi	r4,1
   13bd0:	d8800c15 	stw	r2,48(sp)
   13bd4:	e0c01015 	stw	r3,64(fp)
   13bd8:	d9000b15 	stw	r4,44(sp)
   13bdc:	d8800615 	stw	r2,24(sp)
   13be0:	d8002215 	stw	zero,136(sp)
   13be4:	003c4106 	br	12cec <__alt_mem_nios_system_shared_memory+0xfffd2cec>
   13be8:	d8c00c17 	ldw	r3,48(sp)
   13bec:	d8c00615 	stw	r3,24(sp)
   13bf0:	003e7006 	br	135b4 <__alt_mem_nios_system_shared_memory+0xfffd35b4>
   13bf4:	04400044 	movi	r17,1
   13bf8:	003b2006 	br	1287c <__alt_mem_nios_system_shared_memory+0xfffd287c>
   13bfc:	000b883a 	mov	r5,zero
   13c00:	003b3d06 	br	128f8 <__alt_mem_nios_system_shared_memory+0xfffd28f8>
   13c04:	d8800c17 	ldw	r2,48(sp)
   13c08:	d8800615 	stw	r2,24(sp)
   13c0c:	003e6906 	br	135b4 <__alt_mem_nios_system_shared_memory+0xfffd35b4>

00013c10 <_fclose_r>:
   13c10:	28003926 	beq	r5,zero,13cf8 <_fclose_r+0xe8>
   13c14:	defffc04 	addi	sp,sp,-16
   13c18:	dc400115 	stw	r17,4(sp)
   13c1c:	dc000015 	stw	r16,0(sp)
   13c20:	dfc00315 	stw	ra,12(sp)
   13c24:	dc800215 	stw	r18,8(sp)
   13c28:	2023883a 	mov	r17,r4
   13c2c:	2821883a 	mov	r16,r5
   13c30:	20000226 	beq	r4,zero,13c3c <_fclose_r+0x2c>
   13c34:	20800e17 	ldw	r2,56(r4)
   13c38:	10002726 	beq	r2,zero,13cd8 <_fclose_r+0xc8>
   13c3c:	8080030f 	ldh	r2,12(r16)
   13c40:	1000071e 	bne	r2,zero,13c60 <_fclose_r+0x50>
   13c44:	0005883a 	mov	r2,zero
   13c48:	dfc00317 	ldw	ra,12(sp)
   13c4c:	dc800217 	ldw	r18,8(sp)
   13c50:	dc400117 	ldw	r17,4(sp)
   13c54:	dc000017 	ldw	r16,0(sp)
   13c58:	dec00404 	addi	sp,sp,16
   13c5c:	f800283a 	ret
   13c60:	800b883a 	mov	r5,r16
   13c64:	8809883a 	mov	r4,r17
   13c68:	00091f00 	call	91f0 <__sflush_r>
   13c6c:	1025883a 	mov	r18,r2
   13c70:	80800b17 	ldw	r2,44(r16)
   13c74:	10000426 	beq	r2,zero,13c88 <_fclose_r+0x78>
   13c78:	81400717 	ldw	r5,28(r16)
   13c7c:	8809883a 	mov	r4,r17
   13c80:	103ee83a 	callr	r2
   13c84:	10001616 	blt	r2,zero,13ce0 <_fclose_r+0xd0>
   13c88:	8080030b 	ldhu	r2,12(r16)
   13c8c:	1080200c 	andi	r2,r2,128
   13c90:	1000151e 	bne	r2,zero,13ce8 <_fclose_r+0xd8>
   13c94:	81400c17 	ldw	r5,48(r16)
   13c98:	28000526 	beq	r5,zero,13cb0 <_fclose_r+0xa0>
   13c9c:	80801004 	addi	r2,r16,64
   13ca0:	28800226 	beq	r5,r2,13cac <_fclose_r+0x9c>
   13ca4:	8809883a 	mov	r4,r17
   13ca8:	0009c8c0 	call	9c8c <_free_r>
   13cac:	80000c15 	stw	zero,48(r16)
   13cb0:	81401117 	ldw	r5,68(r16)
   13cb4:	28000326 	beq	r5,zero,13cc4 <_fclose_r+0xb4>
   13cb8:	8809883a 	mov	r4,r17
   13cbc:	0009c8c0 	call	9c8c <_free_r>
   13cc0:	80001115 	stw	zero,68(r16)
   13cc4:	00099d00 	call	99d0 <__sfp_lock_acquire>
   13cc8:	8000030d 	sth	zero,12(r16)
   13ccc:	00099d40 	call	99d4 <__sfp_lock_release>
   13cd0:	9005883a 	mov	r2,r18
   13cd4:	003fdc06 	br	13c48 <__alt_mem_nios_system_shared_memory+0xfffd3c48>
   13cd8:	00099c00 	call	99c0 <__sinit>
   13cdc:	003fd706 	br	13c3c <__alt_mem_nios_system_shared_memory+0xfffd3c3c>
   13ce0:	04bfffc4 	movi	r18,-1
   13ce4:	003fe806 	br	13c88 <__alt_mem_nios_system_shared_memory+0xfffd3c88>
   13ce8:	81400417 	ldw	r5,16(r16)
   13cec:	8809883a 	mov	r4,r17
   13cf0:	0009c8c0 	call	9c8c <_free_r>
   13cf4:	003fe706 	br	13c94 <__alt_mem_nios_system_shared_memory+0xfffd3c94>
   13cf8:	0005883a 	mov	r2,zero
   13cfc:	f800283a 	ret

00013d00 <fclose>:
   13d00:	008000b4 	movhi	r2,2
   13d04:	10824204 	addi	r2,r2,2312
   13d08:	200b883a 	mov	r5,r4
   13d0c:	11000017 	ldw	r4,0(r2)
   13d10:	0013c101 	jmpi	13c10 <_fclose_r>

00013d14 <__sflags>:
   13d14:	28800007 	ldb	r2,0(r5)
   13d18:	00c01c84 	movi	r3,114
   13d1c:	10c02426 	beq	r2,r3,13db0 <__sflags+0x9c>
   13d20:	00c01dc4 	movi	r3,119
   13d24:	10c01e26 	beq	r2,r3,13da0 <__sflags+0x8c>
   13d28:	00c01844 	movi	r3,97
   13d2c:	10c00426 	beq	r2,r3,13d40 <__sflags+0x2c>
   13d30:	00800584 	movi	r2,22
   13d34:	20800015 	stw	r2,0(r4)
   13d38:	0005883a 	mov	r2,zero
   13d3c:	f800283a 	ret
   13d40:	02c08204 	movi	r11,520
   13d44:	01000044 	movi	r4,1
   13d48:	00804204 	movi	r2,264
   13d4c:	01c00ac4 	movi	r7,43
   13d50:	02bff8c4 	movi	r10,-29
   13d54:	027fff04 	movi	r9,-4
   13d58:	02001e04 	movi	r8,120
   13d5c:	29400044 	addi	r5,r5,1
   13d60:	28c00007 	ldb	r3,0(r5)
   13d64:	18000626 	beq	r3,zero,13d80 <__sflags+0x6c>
   13d68:	19c00826 	beq	r3,r7,13d8c <__sflags+0x78>
   13d6c:	1a3ffb1e 	bne	r3,r8,13d5c <__alt_mem_nios_system_shared_memory+0xfffd3d5c>
   13d70:	29400044 	addi	r5,r5,1
   13d74:	28c00007 	ldb	r3,0(r5)
   13d78:	21020014 	ori	r4,r4,2048
   13d7c:	183ffa1e 	bne	r3,zero,13d68 <__alt_mem_nios_system_shared_memory+0xfffd3d68>
   13d80:	22c8b03a 	or	r4,r4,r11
   13d84:	31000015 	stw	r4,0(r6)
   13d88:	f800283a 	ret
   13d8c:	1284703a 	and	r2,r2,r10
   13d90:	2248703a 	and	r4,r4,r9
   13d94:	10800414 	ori	r2,r2,16
   13d98:	21000094 	ori	r4,r4,2
   13d9c:	003fef06 	br	13d5c <__alt_mem_nios_system_shared_memory+0xfffd3d5c>
   13da0:	02c18004 	movi	r11,1536
   13da4:	01000044 	movi	r4,1
   13da8:	00800204 	movi	r2,8
   13dac:	003fe706 	br	13d4c <__alt_mem_nios_system_shared_memory+0xfffd3d4c>
   13db0:	0017883a 	mov	r11,zero
   13db4:	0009883a 	mov	r4,zero
   13db8:	00800104 	movi	r2,4
   13dbc:	003fe306 	br	13d4c <__alt_mem_nios_system_shared_memory+0xfffd3d4c>

00013dc0 <__sfvwrite_r>:
   13dc0:	30800217 	ldw	r2,8(r6)
   13dc4:	10006726 	beq	r2,zero,13f64 <__sfvwrite_r+0x1a4>
   13dc8:	28c0030b 	ldhu	r3,12(r5)
   13dcc:	defff404 	addi	sp,sp,-48
   13dd0:	dd400715 	stw	r21,28(sp)
   13dd4:	dd000615 	stw	r20,24(sp)
   13dd8:	dc000215 	stw	r16,8(sp)
   13ddc:	dfc00b15 	stw	ra,44(sp)
   13de0:	df000a15 	stw	fp,40(sp)
   13de4:	ddc00915 	stw	r23,36(sp)
   13de8:	dd800815 	stw	r22,32(sp)
   13dec:	dcc00515 	stw	r19,20(sp)
   13df0:	dc800415 	stw	r18,16(sp)
   13df4:	dc400315 	stw	r17,12(sp)
   13df8:	1880020c 	andi	r2,r3,8
   13dfc:	2821883a 	mov	r16,r5
   13e00:	202b883a 	mov	r21,r4
   13e04:	3029883a 	mov	r20,r6
   13e08:	10002726 	beq	r2,zero,13ea8 <__sfvwrite_r+0xe8>
   13e0c:	28800417 	ldw	r2,16(r5)
   13e10:	10002526 	beq	r2,zero,13ea8 <__sfvwrite_r+0xe8>
   13e14:	1880008c 	andi	r2,r3,2
   13e18:	a4400017 	ldw	r17,0(r20)
   13e1c:	10002a26 	beq	r2,zero,13ec8 <__sfvwrite_r+0x108>
   13e20:	05a00034 	movhi	r22,32768
   13e24:	0027883a 	mov	r19,zero
   13e28:	0025883a 	mov	r18,zero
   13e2c:	b5bf0004 	addi	r22,r22,-1024
   13e30:	980d883a 	mov	r6,r19
   13e34:	a809883a 	mov	r4,r21
   13e38:	90004626 	beq	r18,zero,13f54 <__sfvwrite_r+0x194>
   13e3c:	900f883a 	mov	r7,r18
   13e40:	b480022e 	bgeu	r22,r18,13e4c <__sfvwrite_r+0x8c>
   13e44:	01e00034 	movhi	r7,32768
   13e48:	39ff0004 	addi	r7,r7,-1024
   13e4c:	80800917 	ldw	r2,36(r16)
   13e50:	81400717 	ldw	r5,28(r16)
   13e54:	103ee83a 	callr	r2
   13e58:	00805a0e 	bge	zero,r2,13fc4 <__sfvwrite_r+0x204>
   13e5c:	a0c00217 	ldw	r3,8(r20)
   13e60:	98a7883a 	add	r19,r19,r2
   13e64:	90a5c83a 	sub	r18,r18,r2
   13e68:	1885c83a 	sub	r2,r3,r2
   13e6c:	a0800215 	stw	r2,8(r20)
   13e70:	103fef1e 	bne	r2,zero,13e30 <__alt_mem_nios_system_shared_memory+0xfffd3e30>
   13e74:	0005883a 	mov	r2,zero
   13e78:	dfc00b17 	ldw	ra,44(sp)
   13e7c:	df000a17 	ldw	fp,40(sp)
   13e80:	ddc00917 	ldw	r23,36(sp)
   13e84:	dd800817 	ldw	r22,32(sp)
   13e88:	dd400717 	ldw	r21,28(sp)
   13e8c:	dd000617 	ldw	r20,24(sp)
   13e90:	dcc00517 	ldw	r19,20(sp)
   13e94:	dc800417 	ldw	r18,16(sp)
   13e98:	dc400317 	ldw	r17,12(sp)
   13e9c:	dc000217 	ldw	r16,8(sp)
   13ea0:	dec00c04 	addi	sp,sp,48
   13ea4:	f800283a 	ret
   13ea8:	800b883a 	mov	r5,r16
   13eac:	a809883a 	mov	r4,r21
   13eb0:	00121b80 	call	121b8 <__swsetup_r>
   13eb4:	1000ee1e 	bne	r2,zero,14270 <__sfvwrite_r+0x4b0>
   13eb8:	80c0030b 	ldhu	r3,12(r16)
   13ebc:	a4400017 	ldw	r17,0(r20)
   13ec0:	1880008c 	andi	r2,r3,2
   13ec4:	103fd61e 	bne	r2,zero,13e20 <__alt_mem_nios_system_shared_memory+0xfffd3e20>
   13ec8:	1880004c 	andi	r2,r3,1
   13ecc:	1000421e 	bne	r2,zero,13fd8 <__sfvwrite_r+0x218>
   13ed0:	0039883a 	mov	fp,zero
   13ed4:	0025883a 	mov	r18,zero
   13ed8:	90001a26 	beq	r18,zero,13f44 <__sfvwrite_r+0x184>
   13edc:	1880800c 	andi	r2,r3,512
   13ee0:	84c00217 	ldw	r19,8(r16)
   13ee4:	10002126 	beq	r2,zero,13f6c <__sfvwrite_r+0x1ac>
   13ee8:	982f883a 	mov	r23,r19
   13eec:	94c09636 	bltu	r18,r19,14148 <__sfvwrite_r+0x388>
   13ef0:	1881200c 	andi	r2,r3,1152
   13ef4:	1000a11e 	bne	r2,zero,1417c <__sfvwrite_r+0x3bc>
   13ef8:	81000017 	ldw	r4,0(r16)
   13efc:	b80d883a 	mov	r6,r23
   13f00:	e00b883a 	mov	r5,fp
   13f04:	00150400 	call	15040 <memmove>
   13f08:	80c00217 	ldw	r3,8(r16)
   13f0c:	81000017 	ldw	r4,0(r16)
   13f10:	9005883a 	mov	r2,r18
   13f14:	1ce7c83a 	sub	r19,r3,r19
   13f18:	25cf883a 	add	r7,r4,r23
   13f1c:	84c00215 	stw	r19,8(r16)
   13f20:	81c00015 	stw	r7,0(r16)
   13f24:	a0c00217 	ldw	r3,8(r20)
   13f28:	e0b9883a 	add	fp,fp,r2
   13f2c:	90a5c83a 	sub	r18,r18,r2
   13f30:	18a7c83a 	sub	r19,r3,r2
   13f34:	a4c00215 	stw	r19,8(r20)
   13f38:	983fce26 	beq	r19,zero,13e74 <__alt_mem_nios_system_shared_memory+0xfffd3e74>
   13f3c:	80c0030b 	ldhu	r3,12(r16)
   13f40:	903fe61e 	bne	r18,zero,13edc <__alt_mem_nios_system_shared_memory+0xfffd3edc>
   13f44:	8f000017 	ldw	fp,0(r17)
   13f48:	8c800117 	ldw	r18,4(r17)
   13f4c:	8c400204 	addi	r17,r17,8
   13f50:	003fe106 	br	13ed8 <__alt_mem_nios_system_shared_memory+0xfffd3ed8>
   13f54:	8cc00017 	ldw	r19,0(r17)
   13f58:	8c800117 	ldw	r18,4(r17)
   13f5c:	8c400204 	addi	r17,r17,8
   13f60:	003fb306 	br	13e30 <__alt_mem_nios_system_shared_memory+0xfffd3e30>
   13f64:	0005883a 	mov	r2,zero
   13f68:	f800283a 	ret
   13f6c:	81000017 	ldw	r4,0(r16)
   13f70:	80800417 	ldw	r2,16(r16)
   13f74:	11005a36 	bltu	r2,r4,140e0 <__sfvwrite_r+0x320>
   13f78:	85c00517 	ldw	r23,20(r16)
   13f7c:	95c05836 	bltu	r18,r23,140e0 <__sfvwrite_r+0x320>
   13f80:	00a00034 	movhi	r2,32768
   13f84:	10bfffc4 	addi	r2,r2,-1
   13f88:	9009883a 	mov	r4,r18
   13f8c:	1480012e 	bgeu	r2,r18,13f94 <__sfvwrite_r+0x1d4>
   13f90:	1009883a 	mov	r4,r2
   13f94:	b80b883a 	mov	r5,r23
   13f98:	0004fa40 	call	4fa4 <__divsi3>
   13f9c:	b80b883a 	mov	r5,r23
   13fa0:	1009883a 	mov	r4,r2
   13fa4:	00051580 	call	5158 <__mulsi3>
   13fa8:	81400717 	ldw	r5,28(r16)
   13fac:	80c00917 	ldw	r3,36(r16)
   13fb0:	100f883a 	mov	r7,r2
   13fb4:	e00d883a 	mov	r6,fp
   13fb8:	a809883a 	mov	r4,r21
   13fbc:	183ee83a 	callr	r3
   13fc0:	00bfd816 	blt	zero,r2,13f24 <__alt_mem_nios_system_shared_memory+0xfffd3f24>
   13fc4:	8080030b 	ldhu	r2,12(r16)
   13fc8:	10801014 	ori	r2,r2,64
   13fcc:	8080030d 	sth	r2,12(r16)
   13fd0:	00bfffc4 	movi	r2,-1
   13fd4:	003fa806 	br	13e78 <__alt_mem_nios_system_shared_memory+0xfffd3e78>
   13fd8:	0027883a 	mov	r19,zero
   13fdc:	0011883a 	mov	r8,zero
   13fe0:	0039883a 	mov	fp,zero
   13fe4:	0025883a 	mov	r18,zero
   13fe8:	90001f26 	beq	r18,zero,14068 <__sfvwrite_r+0x2a8>
   13fec:	40005a26 	beq	r8,zero,14158 <__sfvwrite_r+0x398>
   13ff0:	982d883a 	mov	r22,r19
   13ff4:	94c0012e 	bgeu	r18,r19,13ffc <__sfvwrite_r+0x23c>
   13ff8:	902d883a 	mov	r22,r18
   13ffc:	81000017 	ldw	r4,0(r16)
   14000:	80800417 	ldw	r2,16(r16)
   14004:	b02f883a 	mov	r23,r22
   14008:	81c00517 	ldw	r7,20(r16)
   1400c:	1100032e 	bgeu	r2,r4,1401c <__sfvwrite_r+0x25c>
   14010:	80c00217 	ldw	r3,8(r16)
   14014:	38c7883a 	add	r3,r7,r3
   14018:	1d801816 	blt	r3,r22,1407c <__sfvwrite_r+0x2bc>
   1401c:	b1c03e16 	blt	r22,r7,14118 <__sfvwrite_r+0x358>
   14020:	80800917 	ldw	r2,36(r16)
   14024:	81400717 	ldw	r5,28(r16)
   14028:	e00d883a 	mov	r6,fp
   1402c:	da000115 	stw	r8,4(sp)
   14030:	a809883a 	mov	r4,r21
   14034:	103ee83a 	callr	r2
   14038:	102f883a 	mov	r23,r2
   1403c:	da000117 	ldw	r8,4(sp)
   14040:	00bfe00e 	bge	zero,r2,13fc4 <__alt_mem_nios_system_shared_memory+0xfffd3fc4>
   14044:	9de7c83a 	sub	r19,r19,r23
   14048:	98001f26 	beq	r19,zero,140c8 <__sfvwrite_r+0x308>
   1404c:	a0800217 	ldw	r2,8(r20)
   14050:	e5f9883a 	add	fp,fp,r23
   14054:	95e5c83a 	sub	r18,r18,r23
   14058:	15efc83a 	sub	r23,r2,r23
   1405c:	a5c00215 	stw	r23,8(r20)
   14060:	b83f8426 	beq	r23,zero,13e74 <__alt_mem_nios_system_shared_memory+0xfffd3e74>
   14064:	903fe11e 	bne	r18,zero,13fec <__alt_mem_nios_system_shared_memory+0xfffd3fec>
   14068:	8f000017 	ldw	fp,0(r17)
   1406c:	8c800117 	ldw	r18,4(r17)
   14070:	0011883a 	mov	r8,zero
   14074:	8c400204 	addi	r17,r17,8
   14078:	003fdb06 	br	13fe8 <__alt_mem_nios_system_shared_memory+0xfffd3fe8>
   1407c:	180d883a 	mov	r6,r3
   14080:	e00b883a 	mov	r5,fp
   14084:	da000115 	stw	r8,4(sp)
   14088:	d8c00015 	stw	r3,0(sp)
   1408c:	00150400 	call	15040 <memmove>
   14090:	d8c00017 	ldw	r3,0(sp)
   14094:	80800017 	ldw	r2,0(r16)
   14098:	800b883a 	mov	r5,r16
   1409c:	a809883a 	mov	r4,r21
   140a0:	10c5883a 	add	r2,r2,r3
   140a4:	80800015 	stw	r2,0(r16)
   140a8:	d8c00015 	stw	r3,0(sp)
   140ac:	000940c0 	call	940c <_fflush_r>
   140b0:	d8c00017 	ldw	r3,0(sp)
   140b4:	da000117 	ldw	r8,4(sp)
   140b8:	103fc21e 	bne	r2,zero,13fc4 <__alt_mem_nios_system_shared_memory+0xfffd3fc4>
   140bc:	182f883a 	mov	r23,r3
   140c0:	9de7c83a 	sub	r19,r19,r23
   140c4:	983fe11e 	bne	r19,zero,1404c <__alt_mem_nios_system_shared_memory+0xfffd404c>
   140c8:	800b883a 	mov	r5,r16
   140cc:	a809883a 	mov	r4,r21
   140d0:	000940c0 	call	940c <_fflush_r>
   140d4:	103fbb1e 	bne	r2,zero,13fc4 <__alt_mem_nios_system_shared_memory+0xfffd3fc4>
   140d8:	0011883a 	mov	r8,zero
   140dc:	003fdb06 	br	1404c <__alt_mem_nios_system_shared_memory+0xfffd404c>
   140e0:	94c0012e 	bgeu	r18,r19,140e8 <__sfvwrite_r+0x328>
   140e4:	9027883a 	mov	r19,r18
   140e8:	980d883a 	mov	r6,r19
   140ec:	e00b883a 	mov	r5,fp
   140f0:	00150400 	call	15040 <memmove>
   140f4:	80800217 	ldw	r2,8(r16)
   140f8:	80c00017 	ldw	r3,0(r16)
   140fc:	14c5c83a 	sub	r2,r2,r19
   14100:	1cc7883a 	add	r3,r3,r19
   14104:	80800215 	stw	r2,8(r16)
   14108:	80c00015 	stw	r3,0(r16)
   1410c:	10004326 	beq	r2,zero,1421c <__sfvwrite_r+0x45c>
   14110:	9805883a 	mov	r2,r19
   14114:	003f8306 	br	13f24 <__alt_mem_nios_system_shared_memory+0xfffd3f24>
   14118:	b00d883a 	mov	r6,r22
   1411c:	e00b883a 	mov	r5,fp
   14120:	da000115 	stw	r8,4(sp)
   14124:	00150400 	call	15040 <memmove>
   14128:	80800217 	ldw	r2,8(r16)
   1412c:	80c00017 	ldw	r3,0(r16)
   14130:	da000117 	ldw	r8,4(sp)
   14134:	1585c83a 	sub	r2,r2,r22
   14138:	1dad883a 	add	r22,r3,r22
   1413c:	80800215 	stw	r2,8(r16)
   14140:	85800015 	stw	r22,0(r16)
   14144:	003fbf06 	br	14044 <__alt_mem_nios_system_shared_memory+0xfffd4044>
   14148:	81000017 	ldw	r4,0(r16)
   1414c:	9027883a 	mov	r19,r18
   14150:	902f883a 	mov	r23,r18
   14154:	003f6906 	br	13efc <__alt_mem_nios_system_shared_memory+0xfffd3efc>
   14158:	900d883a 	mov	r6,r18
   1415c:	01400284 	movi	r5,10
   14160:	e009883a 	mov	r4,fp
   14164:	000afc80 	call	afc8 <memchr>
   14168:	10003e26 	beq	r2,zero,14264 <__sfvwrite_r+0x4a4>
   1416c:	10800044 	addi	r2,r2,1
   14170:	1727c83a 	sub	r19,r2,fp
   14174:	02000044 	movi	r8,1
   14178:	003f9d06 	br	13ff0 <__alt_mem_nios_system_shared_memory+0xfffd3ff0>
   1417c:	80800517 	ldw	r2,20(r16)
   14180:	81400417 	ldw	r5,16(r16)
   14184:	81c00017 	ldw	r7,0(r16)
   14188:	10a7883a 	add	r19,r2,r2
   1418c:	9885883a 	add	r2,r19,r2
   14190:	1026d7fa 	srli	r19,r2,31
   14194:	396dc83a 	sub	r22,r7,r5
   14198:	b1000044 	addi	r4,r22,1
   1419c:	9885883a 	add	r2,r19,r2
   141a0:	1027d07a 	srai	r19,r2,1
   141a4:	2485883a 	add	r2,r4,r18
   141a8:	980d883a 	mov	r6,r19
   141ac:	9880022e 	bgeu	r19,r2,141b8 <__sfvwrite_r+0x3f8>
   141b0:	1027883a 	mov	r19,r2
   141b4:	100d883a 	mov	r6,r2
   141b8:	18c1000c 	andi	r3,r3,1024
   141bc:	18001c26 	beq	r3,zero,14230 <__sfvwrite_r+0x470>
   141c0:	300b883a 	mov	r5,r6
   141c4:	a809883a 	mov	r4,r21
   141c8:	000a7bc0 	call	a7bc <_malloc_r>
   141cc:	102f883a 	mov	r23,r2
   141d0:	10002926 	beq	r2,zero,14278 <__sfvwrite_r+0x4b8>
   141d4:	81400417 	ldw	r5,16(r16)
   141d8:	b00d883a 	mov	r6,r22
   141dc:	1009883a 	mov	r4,r2
   141e0:	000b0ac0 	call	b0ac <memcpy>
   141e4:	8080030b 	ldhu	r2,12(r16)
   141e8:	00fedfc4 	movi	r3,-1153
   141ec:	10c4703a 	and	r2,r2,r3
   141f0:	10802014 	ori	r2,r2,128
   141f4:	8080030d 	sth	r2,12(r16)
   141f8:	bd89883a 	add	r4,r23,r22
   141fc:	9d8fc83a 	sub	r7,r19,r22
   14200:	85c00415 	stw	r23,16(r16)
   14204:	84c00515 	stw	r19,20(r16)
   14208:	81000015 	stw	r4,0(r16)
   1420c:	9027883a 	mov	r19,r18
   14210:	81c00215 	stw	r7,8(r16)
   14214:	902f883a 	mov	r23,r18
   14218:	003f3806 	br	13efc <__alt_mem_nios_system_shared_memory+0xfffd3efc>
   1421c:	800b883a 	mov	r5,r16
   14220:	a809883a 	mov	r4,r21
   14224:	000940c0 	call	940c <_fflush_r>
   14228:	103fb926 	beq	r2,zero,14110 <__alt_mem_nios_system_shared_memory+0xfffd4110>
   1422c:	003f6506 	br	13fc4 <__alt_mem_nios_system_shared_memory+0xfffd3fc4>
   14230:	a809883a 	mov	r4,r21
   14234:	001641c0 	call	1641c <_realloc_r>
   14238:	102f883a 	mov	r23,r2
   1423c:	103fee1e 	bne	r2,zero,141f8 <__alt_mem_nios_system_shared_memory+0xfffd41f8>
   14240:	81400417 	ldw	r5,16(r16)
   14244:	a809883a 	mov	r4,r21
   14248:	0009c8c0 	call	9c8c <_free_r>
   1424c:	8080030b 	ldhu	r2,12(r16)
   14250:	00ffdfc4 	movi	r3,-129
   14254:	1884703a 	and	r2,r3,r2
   14258:	00c00304 	movi	r3,12
   1425c:	a8c00015 	stw	r3,0(r21)
   14260:	003f5906 	br	13fc8 <__alt_mem_nios_system_shared_memory+0xfffd3fc8>
   14264:	94c00044 	addi	r19,r18,1
   14268:	02000044 	movi	r8,1
   1426c:	003f6006 	br	13ff0 <__alt_mem_nios_system_shared_memory+0xfffd3ff0>
   14270:	00bfffc4 	movi	r2,-1
   14274:	003f0006 	br	13e78 <__alt_mem_nios_system_shared_memory+0xfffd3e78>
   14278:	00800304 	movi	r2,12
   1427c:	a8800015 	stw	r2,0(r21)
   14280:	8080030b 	ldhu	r2,12(r16)
   14284:	003f5006 	br	13fc8 <__alt_mem_nios_system_shared_memory+0xfffd3fc8>

00014288 <rshift>:
   14288:	2807d17a 	srai	r3,r5,5
   1428c:	20800417 	ldw	r2,16(r4)
   14290:	22000504 	addi	r8,r4,20
   14294:	1880250e 	bge	r3,r2,1432c <rshift+0xa4>
   14298:	1085883a 	add	r2,r2,r2
   1429c:	18c7883a 	add	r3,r3,r3
   142a0:	1085883a 	add	r2,r2,r2
   142a4:	18c7883a 	add	r3,r3,r3
   142a8:	294007cc 	andi	r5,r5,31
   142ac:	4085883a 	add	r2,r8,r2
   142b0:	40c7883a 	add	r3,r8,r3
   142b4:	28002026 	beq	r5,zero,14338 <rshift+0xb0>
   142b8:	19800017 	ldw	r6,0(r3)
   142bc:	02c00804 	movi	r11,32
   142c0:	19c00104 	addi	r7,r3,4
   142c4:	5957c83a 	sub	r11,r11,r5
   142c8:	314cd83a 	srl	r6,r6,r5
   142cc:	38802c2e 	bgeu	r7,r2,14380 <rshift+0xf8>
   142d0:	4015883a 	mov	r10,r8
   142d4:	3a400017 	ldw	r9,0(r7)
   142d8:	52800104 	addi	r10,r10,4
   142dc:	39c00104 	addi	r7,r7,4
   142e0:	4ad2983a 	sll	r9,r9,r11
   142e4:	498cb03a 	or	r6,r9,r6
   142e8:	51bfff15 	stw	r6,-4(r10)
   142ec:	39bfff17 	ldw	r6,-4(r7)
   142f0:	314cd83a 	srl	r6,r6,r5
   142f4:	38bff736 	bltu	r7,r2,142d4 <__alt_mem_nios_system_shared_memory+0xfffd42d4>
   142f8:	10c7c83a 	sub	r3,r2,r3
   142fc:	18fffec4 	addi	r3,r3,-5
   14300:	1806d0ba 	srli	r3,r3,2
   14304:	18c00044 	addi	r3,r3,1
   14308:	18c7883a 	add	r3,r3,r3
   1430c:	18c7883a 	add	r3,r3,r3
   14310:	40c7883a 	add	r3,r8,r3
   14314:	19800015 	stw	r6,0(r3)
   14318:	30000126 	beq	r6,zero,14320 <rshift+0x98>
   1431c:	18c00104 	addi	r3,r3,4
   14320:	1a05c83a 	sub	r2,r3,r8
   14324:	1005d0ba 	srai	r2,r2,2
   14328:	00001206 	br	14374 <rshift+0xec>
   1432c:	20000415 	stw	zero,16(r4)
   14330:	20000515 	stw	zero,20(r4)
   14334:	f800283a 	ret
   14338:	18bffc2e 	bgeu	r3,r2,1432c <__alt_mem_nios_system_shared_memory+0xfffd432c>
   1433c:	180d883a 	mov	r6,r3
   14340:	400b883a 	mov	r5,r8
   14344:	31c00017 	ldw	r7,0(r6)
   14348:	29400104 	addi	r5,r5,4
   1434c:	31800104 	addi	r6,r6,4
   14350:	29ffff15 	stw	r7,-4(r5)
   14354:	30bffb36 	bltu	r6,r2,14344 <__alt_mem_nios_system_shared_memory+0xfffd4344>
   14358:	00c6303a 	nor	r3,zero,r3
   1435c:	1885883a 	add	r2,r3,r2
   14360:	1004d0ba 	srli	r2,r2,2
   14364:	10800044 	addi	r2,r2,1
   14368:	1085883a 	add	r2,r2,r2
   1436c:	1085883a 	add	r2,r2,r2
   14370:	1005d0ba 	srai	r2,r2,2
   14374:	20800415 	stw	r2,16(r4)
   14378:	103fed26 	beq	r2,zero,14330 <__alt_mem_nios_system_shared_memory+0xfffd4330>
   1437c:	f800283a 	ret
   14380:	4007883a 	mov	r3,r8
   14384:	003fe306 	br	14314 <__alt_mem_nios_system_shared_memory+0xfffd4314>

00014388 <__gethex>:
   14388:	deffea04 	addi	sp,sp,-88
   1438c:	d9c00415 	stw	r7,16(sp)
   14390:	dfc01515 	stw	ra,84(sp)
   14394:	dd001015 	stw	r20,64(sp)
   14398:	dcc00f15 	stw	r19,60(sp)
   1439c:	2829883a 	mov	r20,r5
   143a0:	dc800e15 	stw	r18,56(sp)
   143a4:	d9000215 	stw	r4,8(sp)
   143a8:	d9800115 	stw	r6,4(sp)
   143ac:	df001415 	stw	fp,80(sp)
   143b0:	ddc01315 	stw	r23,76(sp)
   143b4:	dd801215 	stw	r22,72(sp)
   143b8:	dd401115 	stw	r21,68(sp)
   143bc:	dc400d15 	stw	r17,52(sp)
   143c0:	dc000c15 	stw	r16,48(sp)
   143c4:	0014f340 	call	14f34 <_localeconv_r>
   143c8:	14800017 	ldw	r18,0(r2)
   143cc:	9009883a 	mov	r4,r18
   143d0:	000ba8c0 	call	ba8c <strlen>
   143d4:	a1c00017 	ldw	r7,0(r20)
   143d8:	1027883a 	mov	r19,r2
   143dc:	9085883a 	add	r2,r18,r2
   143e0:	10bfffc3 	ldbu	r2,-1(r2)
   143e4:	38c00083 	ldbu	r3,2(r7)
   143e8:	d8800305 	stb	r2,12(sp)
   143ec:	00800c04 	movi	r2,48
   143f0:	18815a1e 	bne	r3,r2,1495c <__gethex+0x5d4>
   143f4:	013fff84 	movi	r4,-2
   143f8:	388000c4 	addi	r2,r7,3
   143fc:	21c9c83a 	sub	r4,r4,r7
   14400:	180b883a 	mov	r5,r3
   14404:	20b9883a 	add	fp,r4,r2
   14408:	102f883a 	mov	r23,r2
   1440c:	10800044 	addi	r2,r2,1
   14410:	10ffffc3 	ldbu	r3,-1(r2)
   14414:	197ffb26 	beq	r3,r5,14404 <__alt_mem_nios_system_shared_memory+0xfffd4404>
   14418:	058000b4 	movhi	r22,2
   1441c:	b5baac04 	addi	r22,r22,-5456
   14420:	b0c7883a 	add	r3,r22,r3
   14424:	18800003 	ldbu	r2,0(r3)
   14428:	10008726 	beq	r2,zero,14648 <__gethex+0x2c0>
   1442c:	b8800003 	ldbu	r2,0(r23)
   14430:	d8000015 	stw	zero,0(sp)
   14434:	0021883a 	mov	r16,zero
   14438:	b085883a 	add	r2,r22,r2
   1443c:	10800003 	ldbu	r2,0(r2)
   14440:	b823883a 	mov	r17,r23
   14444:	10000526 	beq	r2,zero,1445c <__gethex+0xd4>
   14448:	8c400044 	addi	r17,r17,1
   1444c:	88800003 	ldbu	r2,0(r17)
   14450:	b085883a 	add	r2,r22,r2
   14454:	10800003 	ldbu	r2,0(r2)
   14458:	103ffb1e 	bne	r2,zero,14448 <__alt_mem_nios_system_shared_memory+0xfffd4448>
   1445c:	980d883a 	mov	r6,r19
   14460:	900b883a 	mov	r5,r18
   14464:	8809883a 	mov	r4,r17
   14468:	0016b580 	call	16b58 <strncmp>
   1446c:	1000031e 	bne	r2,zero,1447c <__gethex+0xf4>
   14470:	80015c26 	beq	r16,zero,149e4 <__gethex+0x65c>
   14474:	88800003 	ldbu	r2,0(r17)
   14478:	00000206 	br	14484 <__gethex+0xfc>
   1447c:	88800003 	ldbu	r2,0(r17)
   14480:	80012926 	beq	r16,zero,14928 <__gethex+0x5a0>
   14484:	8c21c83a 	sub	r16,r17,r16
   14488:	8421883a 	add	r16,r16,r16
   1448c:	8421883a 	add	r16,r16,r16
   14490:	0421c83a 	sub	r16,zero,r16
   14494:	10803fcc 	andi	r2,r2,255
   14498:	01001404 	movi	r4,80
   1449c:	11008826 	beq	r2,r4,146c0 <__gethex+0x338>
   144a0:	01001c04 	movi	r4,112
   144a4:	11008626 	beq	r2,r4,146c0 <__gethex+0x338>
   144a8:	882b883a 	mov	r21,r17
   144ac:	d8c00017 	ldw	r3,0(sp)
   144b0:	a4400015 	stw	r17,0(r20)
   144b4:	1800711e 	bne	r3,zero,1467c <__gethex+0x2f4>
   144b8:	adc5c83a 	sub	r2,r21,r23
   144bc:	10bfffc4 	addi	r2,r2,-1
   144c0:	00c001c4 	movi	r3,7
   144c4:	000b883a 	mov	r5,zero
   144c8:	1880030e 	bge	r3,r2,144d8 <__gethex+0x150>
   144cc:	1005d07a 	srai	r2,r2,1
   144d0:	29400044 	addi	r5,r5,1
   144d4:	18bffd16 	blt	r3,r2,144cc <__alt_mem_nios_system_shared_memory+0xfffd44cc>
   144d8:	d9000217 	ldw	r4,8(sp)
   144dc:	001519c0 	call	1519c <_Balloc>
   144e0:	10c00504 	addi	r3,r2,20
   144e4:	d8c00015 	stw	r3,0(sp)
   144e8:	1029883a 	mov	r20,r2
   144ec:	bd417c2e 	bgeu	r23,r21,14ae0 <__gethex+0x758>
   144f0:	dc400303 	ldbu	r17,12(sp)
   144f4:	03000044 	movi	r12,1
   144f8:	1813883a 	mov	r9,r3
   144fc:	0039883a 	mov	fp,zero
   14500:	0007883a 	mov	r3,zero
   14504:	64d9c83a 	sub	r12,r12,r19
   14508:	02800804 	movi	r10,32
   1450c:	a8bfffc3 	ldbu	r2,-1(r21)
   14510:	ab7fffc4 	addi	r13,r21,-1
   14514:	88803026 	beq	r17,r2,145d8 <__gethex+0x250>
   14518:	e2804526 	beq	fp,r10,14630 <__gethex+0x2a8>
   1451c:	e00b883a 	mov	r5,fp
   14520:	e7000104 	addi	fp,fp,4
   14524:	a93fffc3 	ldbu	r4,-1(r21)
   14528:	682b883a 	mov	r21,r13
   1452c:	b109883a 	add	r4,r22,r4
   14530:	20800003 	ldbu	r2,0(r4)
   14534:	108003cc 	andi	r2,r2,15
   14538:	1144983a 	sll	r2,r2,r5
   1453c:	1886b03a 	or	r3,r3,r2
   14540:	bd7ff236 	bltu	r23,r21,1450c <__alt_mem_nios_system_shared_memory+0xfffd450c>
   14544:	d9000017 	ldw	r4,0(sp)
   14548:	48800104 	addi	r2,r9,4
   1454c:	48c00015 	stw	r3,0(r9)
   14550:	1105c83a 	sub	r2,r2,r4
   14554:	1005d0ba 	srai	r2,r2,2
   14558:	1809883a 	mov	r4,r3
   1455c:	a0800415 	stw	r2,16(r20)
   14560:	1022917a 	slli	r17,r2,5
   14564:	00154b80 	call	154b8 <__hi0bits>
   14568:	d8c00117 	ldw	r3,4(sp)
   1456c:	8885c83a 	sub	r2,r17,r2
   14570:	1c800017 	ldw	r18,0(r3)
   14574:	9080d016 	blt	r18,r2,148b8 <__gethex+0x530>
   14578:	1480ed16 	blt	r2,r18,14930 <__gethex+0x5a8>
   1457c:	0027883a 	mov	r19,zero
   14580:	d8c00117 	ldw	r3,4(sp)
   14584:	18800217 	ldw	r2,8(r3)
   14588:	14009416 	blt	r2,r16,147dc <__gethex+0x454>
   1458c:	d8c00117 	ldw	r3,4(sp)
   14590:	18800117 	ldw	r2,4(r3)
   14594:	8080b30e 	bge	r16,r2,14864 <__gethex+0x4dc>
   14598:	1421c83a 	sub	r16,r2,r16
   1459c:	8480f616 	blt	r16,r18,14978 <__gethex+0x5f0>
   145a0:	18c00317 	ldw	r3,12(r3)
   145a4:	01000084 	movi	r4,2
   145a8:	19015226 	beq	r3,r4,14af4 <__gethex+0x76c>
   145ac:	010000c4 	movi	r4,3
   145b0:	19013726 	beq	r3,r4,14a90 <__gethex+0x708>
   145b4:	01000044 	movi	r4,1
   145b8:	19015126 	beq	r3,r4,14b00 <__gethex+0x778>
   145bc:	d9000217 	ldw	r4,8(sp)
   145c0:	a00b883a 	mov	r5,r20
   145c4:	00152440 	call	15244 <_Bfree>
   145c8:	d8801617 	ldw	r2,88(sp)
   145cc:	10000015 	stw	zero,0(r2)
   145d0:	00801404 	movi	r2,80
   145d4:	00002b06 	br	14684 <__gethex+0x2fc>
   145d8:	6b1d883a 	add	r14,r13,r12
   145dc:	75ffce36 	bltu	r14,r23,14518 <__alt_mem_nios_system_shared_memory+0xfffd4518>
   145e0:	7009883a 	mov	r4,r14
   145e4:	980d883a 	mov	r6,r19
   145e8:	900b883a 	mov	r5,r18
   145ec:	d8c00715 	stw	r3,28(sp)
   145f0:	da400615 	stw	r9,24(sp)
   145f4:	da800b15 	stw	r10,44(sp)
   145f8:	db000a15 	stw	r12,40(sp)
   145fc:	db400815 	stw	r13,32(sp)
   14600:	db800915 	stw	r14,36(sp)
   14604:	0016b580 	call	16b58 <strncmp>
   14608:	d8c00717 	ldw	r3,28(sp)
   1460c:	da400617 	ldw	r9,24(sp)
   14610:	da800b17 	ldw	r10,44(sp)
   14614:	db000a17 	ldw	r12,40(sp)
   14618:	db400817 	ldw	r13,32(sp)
   1461c:	db800917 	ldw	r14,36(sp)
   14620:	103fbd1e 	bne	r2,zero,14518 <__alt_mem_nios_system_shared_memory+0xfffd4518>
   14624:	702b883a 	mov	r21,r14
   14628:	bd7fb836 	bltu	r23,r21,1450c <__alt_mem_nios_system_shared_memory+0xfffd450c>
   1462c:	003fc506 	br	14544 <__alt_mem_nios_system_shared_memory+0xfffd4544>
   14630:	07000104 	movi	fp,4
   14634:	48c00015 	stw	r3,0(r9)
   14638:	000b883a 	mov	r5,zero
   1463c:	4f13883a 	add	r9,r9,fp
   14640:	0007883a 	mov	r3,zero
   14644:	003fb706 	br	14524 <__alt_mem_nios_system_shared_memory+0xfffd4524>
   14648:	980d883a 	mov	r6,r19
   1464c:	900b883a 	mov	r5,r18
   14650:	b809883a 	mov	r4,r23
   14654:	0016b580 	call	16b58 <strncmp>
   14658:	10006c26 	beq	r2,zero,1480c <__gethex+0x484>
   1465c:	b8800003 	ldbu	r2,0(r23)
   14660:	b823883a 	mov	r17,r23
   14664:	10803fcc 	andi	r2,r2,255
   14668:	01001404 	movi	r4,80
   1466c:	11001126 	beq	r2,r4,146b4 <__gethex+0x32c>
   14670:	01001c04 	movi	r4,112
   14674:	11000f26 	beq	r2,r4,146b4 <__gethex+0x32c>
   14678:	a4400015 	stw	r17,0(r20)
   1467c:	e0008c1e 	bne	fp,zero,148b0 <__gethex+0x528>
   14680:	00800184 	movi	r2,6
   14684:	dfc01517 	ldw	ra,84(sp)
   14688:	df001417 	ldw	fp,80(sp)
   1468c:	ddc01317 	ldw	r23,76(sp)
   14690:	dd801217 	ldw	r22,72(sp)
   14694:	dd401117 	ldw	r21,68(sp)
   14698:	dd001017 	ldw	r20,64(sp)
   1469c:	dcc00f17 	ldw	r19,60(sp)
   146a0:	dc800e17 	ldw	r18,56(sp)
   146a4:	dc400d17 	ldw	r17,52(sp)
   146a8:	dc000c17 	ldw	r16,48(sp)
   146ac:	dec01604 	addi	sp,sp,88
   146b0:	f800283a 	ret
   146b4:	00c00044 	movi	r3,1
   146b8:	0021883a 	mov	r16,zero
   146bc:	d8c00015 	stw	r3,0(sp)
   146c0:	88800043 	ldbu	r2,1(r17)
   146c4:	01400ac4 	movi	r5,43
   146c8:	11003fcc 	andi	r4,r2,255
   146cc:	21407626 	beq	r4,r5,148a8 <__gethex+0x520>
   146d0:	01400b44 	movi	r5,45
   146d4:	21404826 	beq	r4,r5,147f8 <__gethex+0x470>
   146d8:	8ac00044 	addi	r11,r17,1
   146dc:	d8000515 	stw	zero,20(sp)
   146e0:	10803fcc 	andi	r2,r2,255
   146e4:	b085883a 	add	r2,r22,r2
   146e8:	11000003 	ldbu	r4,0(r2)
   146ec:	05400604 	movi	r21,24
   146f0:	20bfffc4 	addi	r2,r4,-1
   146f4:	10803fcc 	andi	r2,r2,255
   146f8:	a8bf6b36 	bltu	r21,r2,144a8 <__alt_mem_nios_system_shared_memory+0xfffd44a8>
   146fc:	58800043 	ldbu	r2,1(r11)
   14700:	014000b4 	movhi	r5,2
   14704:	297aac04 	addi	r5,r5,-5456
   14708:	2885883a 	add	r2,r5,r2
   1470c:	12800003 	ldbu	r10,0(r2)
   14710:	21003fcc 	andi	r4,r4,255
   14714:	213ffc04 	addi	r4,r4,-16
   14718:	50bfffc4 	addi	r2,r10,-1
   1471c:	10803fcc 	andi	r2,r2,255
   14720:	5ac00044 	addi	r11,r11,1
   14724:	51803fcc 	andi	r6,r10,255
   14728:	a8801036 	bltu	r21,r2,1476c <__gethex+0x3e4>
   1472c:	5ac00044 	addi	r11,r11,1
   14730:	01400284 	movi	r5,10
   14734:	d9800715 	stw	r6,28(sp)
   14738:	dac00615 	stw	r11,24(sp)
   1473c:	00051580 	call	5158 <__mulsi3>
   14740:	dac00617 	ldw	r11,24(sp)
   14744:	d9800717 	ldw	r6,28(sp)
   14748:	5a800003 	ldbu	r10,0(r11)
   1474c:	1185883a 	add	r2,r2,r6
   14750:	113ffc04 	addi	r4,r2,-16
   14754:	b295883a 	add	r10,r22,r10
   14758:	51400003 	ldbu	r5,0(r10)
   1475c:	2abfffc4 	addi	r10,r5,-1
   14760:	52803fcc 	andi	r10,r10,255
   14764:	29803fcc 	andi	r6,r5,255
   14768:	aabff02e 	bgeu	r21,r10,1472c <__alt_mem_nios_system_shared_memory+0xfffd472c>
   1476c:	d8c00517 	ldw	r3,20(sp)
   14770:	18000126 	beq	r3,zero,14778 <__gethex+0x3f0>
   14774:	0109c83a 	sub	r4,zero,r4
   14778:	882b883a 	mov	r21,r17
   1477c:	8121883a 	add	r16,r16,r4
   14780:	5823883a 	mov	r17,r11
   14784:	003f4906 	br	144ac <__alt_mem_nios_system_shared_memory+0xfffd44ac>
   14788:	a0800217 	ldw	r2,8(r20)
   1478c:	a880f20e 	bge	r21,r2,14b58 <__gethex+0x7d0>
   14790:	a807883a 	mov	r3,r21
   14794:	18800144 	addi	r2,r3,5
   14798:	1085883a 	add	r2,r2,r2
   1479c:	18c00044 	addi	r3,r3,1
   147a0:	1085883a 	add	r2,r2,r2
   147a4:	a085883a 	add	r2,r20,r2
   147a8:	a0c00415 	stw	r3,16(r20)
   147ac:	01000044 	movi	r4,1
   147b0:	11000015 	stw	r4,0(r2)
   147b4:	00800084 	movi	r2,2
   147b8:	8880da26 	beq	r17,r2,14b24 <__gethex+0x79c>
   147bc:	a8c0ae0e 	bge	r21,r3,14a78 <__gethex+0x6f0>
   147c0:	01400044 	movi	r5,1
   147c4:	a009883a 	mov	r4,r20
   147c8:	00142880 	call	14288 <rshift>
   147cc:	d8c00117 	ldw	r3,4(sp)
   147d0:	84000044 	addi	r16,r16,1
   147d4:	18800217 	ldw	r2,8(r3)
   147d8:	1400a90e 	bge	r2,r16,14a80 <__gethex+0x6f8>
   147dc:	d9000217 	ldw	r4,8(sp)
   147e0:	a00b883a 	mov	r5,r20
   147e4:	00152440 	call	15244 <_Bfree>
   147e8:	d9001617 	ldw	r4,88(sp)
   147ec:	008028c4 	movi	r2,163
   147f0:	20000015 	stw	zero,0(r4)
   147f4:	003fa306 	br	14684 <__alt_mem_nios_system_shared_memory+0xfffd4684>
   147f8:	00c00044 	movi	r3,1
   147fc:	d8c00515 	stw	r3,20(sp)
   14800:	88800083 	ldbu	r2,2(r17)
   14804:	8ac00084 	addi	r11,r17,2
   14808:	003fb506 	br	146e0 <__alt_mem_nios_system_shared_memory+0xfffd46e0>
   1480c:	bce3883a 	add	r17,r23,r19
   14810:	89000003 	ldbu	r4,0(r17)
   14814:	21403fcc 	andi	r5,r4,255
   14818:	b145883a 	add	r2,r22,r5
   1481c:	10800003 	ldbu	r2,0(r2)
   14820:	11803fcc 	andi	r6,r2,255
   14824:	30005026 	beq	r6,zero,14968 <__gethex+0x5e0>
   14828:	01000c04 	movi	r4,48
   1482c:	882f883a 	mov	r23,r17
   14830:	2900061e 	bne	r5,r4,1484c <__gethex+0x4c4>
   14834:	2809883a 	mov	r4,r5
   14838:	bdc00044 	addi	r23,r23,1
   1483c:	b8800003 	ldbu	r2,0(r23)
   14840:	113ffd26 	beq	r2,r4,14838 <__alt_mem_nios_system_shared_memory+0xfffd4838>
   14844:	b085883a 	add	r2,r22,r2
   14848:	10800003 	ldbu	r2,0(r2)
   1484c:	10803fcc 	andi	r2,r2,255
   14850:	1007003a 	cmpeq	r3,r2,zero
   14854:	d8c00015 	stw	r3,0(sp)
   14858:	8821883a 	mov	r16,r17
   1485c:	07000044 	movi	fp,1
   14860:	003ef706 	br	14440 <__alt_mem_nios_system_shared_memory+0xfffd4440>
   14864:	04400044 	movi	r17,1
   14868:	98000926 	beq	r19,zero,14890 <__gethex+0x508>
   1486c:	d8c00117 	ldw	r3,4(sp)
   14870:	18800317 	ldw	r2,12(r3)
   14874:	00c00084 	movi	r3,2
   14878:	10c06826 	beq	r2,r3,14a1c <__gethex+0x694>
   1487c:	00c000c4 	movi	r3,3
   14880:	10c06a26 	beq	r2,r3,14a2c <__gethex+0x6a4>
   14884:	00c00044 	movi	r3,1
   14888:	10c08d26 	beq	r2,r3,14ac0 <__gethex+0x738>
   1488c:	8c400414 	ori	r17,r17,16
   14890:	d9001617 	ldw	r4,88(sp)
   14894:	d8c00417 	ldw	r3,16(sp)
   14898:	8805883a 	mov	r2,r17
   1489c:	25000015 	stw	r20,0(r4)
   148a0:	1c000015 	stw	r16,0(r3)
   148a4:	003f7706 	br	14684 <__alt_mem_nios_system_shared_memory+0xfffd4684>
   148a8:	d8000515 	stw	zero,20(sp)
   148ac:	003fd406 	br	14800 <__alt_mem_nios_system_shared_memory+0xfffd4800>
   148b0:	0005883a 	mov	r2,zero
   148b4:	003f7306 	br	14684 <__alt_mem_nios_system_shared_memory+0xfffd4684>
   148b8:	14a3c83a 	sub	r17,r2,r18
   148bc:	880b883a 	mov	r5,r17
   148c0:	a009883a 	mov	r4,r20
   148c4:	00161c80 	call	161c8 <__any_on>
   148c8:	10002926 	beq	r2,zero,14970 <__gethex+0x5e8>
   148cc:	897fffc4 	addi	r5,r17,-1
   148d0:	2807d17a 	srai	r3,r5,5
   148d4:	d8800017 	ldw	r2,0(sp)
   148d8:	290007cc 	andi	r4,r5,31
   148dc:	18c7883a 	add	r3,r3,r3
   148e0:	18c7883a 	add	r3,r3,r3
   148e4:	04c00044 	movi	r19,1
   148e8:	10c7883a 	add	r3,r2,r3
   148ec:	9908983a 	sll	r4,r19,r4
   148f0:	18c00017 	ldw	r3,0(r3)
   148f4:	20c6703a 	and	r3,r4,r3
   148f8:	18000626 	beq	r3,zero,14914 <__gethex+0x58c>
   148fc:	99407b0e 	bge	r19,r5,14aec <__gethex+0x764>
   14900:	897fff84 	addi	r5,r17,-2
   14904:	a009883a 	mov	r4,r20
   14908:	00161c80 	call	161c8 <__any_on>
   1490c:	10007726 	beq	r2,zero,14aec <__gethex+0x764>
   14910:	04c000c4 	movi	r19,3
   14914:	880b883a 	mov	r5,r17
   14918:	a009883a 	mov	r4,r20
   1491c:	00142880 	call	14288 <rshift>
   14920:	8461883a 	add	r16,r16,r17
   14924:	003f1606 	br	14580 <__alt_mem_nios_system_shared_memory+0xfffd4580>
   14928:	0021883a 	mov	r16,zero
   1492c:	003ed906 	br	14494 <__alt_mem_nios_system_shared_memory+0xfffd4494>
   14930:	d9000217 	ldw	r4,8(sp)
   14934:	90a3c83a 	sub	r17,r18,r2
   14938:	a00b883a 	mov	r5,r20
   1493c:	880d883a 	mov	r6,r17
   14940:	00159d80 	call	159d8 <__lshift>
   14944:	10c00504 	addi	r3,r2,20
   14948:	1029883a 	mov	r20,r2
   1494c:	8461c83a 	sub	r16,r16,r17
   14950:	d8c00015 	stw	r3,0(sp)
   14954:	0027883a 	mov	r19,zero
   14958:	003f0906 	br	14580 <__alt_mem_nios_system_shared_memory+0xfffd4580>
   1495c:	3dc00084 	addi	r23,r7,2
   14960:	0039883a 	mov	fp,zero
   14964:	003eac06 	br	14418 <__alt_mem_nios_system_shared_memory+0xfffd4418>
   14968:	2005883a 	mov	r2,r4
   1496c:	003f3d06 	br	14664 <__alt_mem_nios_system_shared_memory+0xfffd4664>
   14970:	0027883a 	mov	r19,zero
   14974:	003fe706 	br	14914 <__alt_mem_nios_system_shared_memory+0xfffd4914>
   14978:	847fffc4 	addi	r17,r16,-1
   1497c:	9800421e 	bne	r19,zero,14a88 <__gethex+0x700>
   14980:	88000426 	beq	r17,zero,14994 <__gethex+0x60c>
   14984:	880b883a 	mov	r5,r17
   14988:	a009883a 	mov	r4,r20
   1498c:	00161c80 	call	161c8 <__any_on>
   14990:	1027883a 	mov	r19,r2
   14994:	8805d17a 	srai	r2,r17,5
   14998:	d8c00017 	ldw	r3,0(sp)
   1499c:	8c4007cc 	andi	r17,r17,31
   149a0:	1085883a 	add	r2,r2,r2
   149a4:	1085883a 	add	r2,r2,r2
   149a8:	1885883a 	add	r2,r3,r2
   149ac:	00c00044 	movi	r3,1
   149b0:	1c62983a 	sll	r17,r3,r17
   149b4:	10800017 	ldw	r2,0(r2)
   149b8:	8884703a 	and	r2,r17,r2
   149bc:	10000126 	beq	r2,zero,149c4 <__gethex+0x63c>
   149c0:	9cc00094 	ori	r19,r19,2
   149c4:	800b883a 	mov	r5,r16
   149c8:	a009883a 	mov	r4,r20
   149cc:	00142880 	call	14288 <rshift>
   149d0:	d8c00117 	ldw	r3,4(sp)
   149d4:	9425c83a 	sub	r18,r18,r16
   149d8:	04400084 	movi	r17,2
   149dc:	1c000117 	ldw	r16,4(r3)
   149e0:	003fa106 	br	14868 <__alt_mem_nios_system_shared_memory+0xfffd4868>
   149e4:	8ce1883a 	add	r16,r17,r19
   149e8:	80800003 	ldbu	r2,0(r16)
   149ec:	8023883a 	mov	r17,r16
   149f0:	10c03fcc 	andi	r3,r2,255
   149f4:	b0c7883a 	add	r3,r22,r3
   149f8:	18c00003 	ldbu	r3,0(r3)
   149fc:	183ea026 	beq	r3,zero,14480 <__alt_mem_nios_system_shared_memory+0xfffd4480>
   14a00:	8c400044 	addi	r17,r17,1
   14a04:	88800003 	ldbu	r2,0(r17)
   14a08:	11003fcc 	andi	r4,r2,255
   14a0c:	b109883a 	add	r4,r22,r4
   14a10:	21000003 	ldbu	r4,0(r4)
   14a14:	203ffa1e 	bne	r4,zero,14a00 <__alt_mem_nios_system_shared_memory+0xfffd4a00>
   14a18:	003e9906 	br	14480 <__alt_mem_nios_system_shared_memory+0xfffd4480>
   14a1c:	d9001717 	ldw	r4,92(sp)
   14a20:	00800044 	movi	r2,1
   14a24:	1109c83a 	sub	r4,r2,r4
   14a28:	d9001715 	stw	r4,92(sp)
   14a2c:	d8801717 	ldw	r2,92(sp)
   14a30:	103f9626 	beq	r2,zero,1488c <__alt_mem_nios_system_shared_memory+0xfffd488c>
   14a34:	a5400417 	ldw	r21,16(r20)
   14a38:	d9800017 	ldw	r6,0(sp)
   14a3c:	013fffc4 	movi	r4,-1
   14a40:	ad67883a 	add	r19,r21,r21
   14a44:	9ce7883a 	add	r19,r19,r19
   14a48:	3005883a 	mov	r2,r6
   14a4c:	34cb883a 	add	r5,r6,r19
   14a50:	00000306 	br	14a60 <__gethex+0x6d8>
   14a54:	10000015 	stw	zero,0(r2)
   14a58:	10800104 	addi	r2,r2,4
   14a5c:	117f4a2e 	bgeu	r2,r5,14788 <__alt_mem_nios_system_shared_memory+0xfffd4788>
   14a60:	10c00017 	ldw	r3,0(r2)
   14a64:	193ffb26 	beq	r3,r4,14a54 <__alt_mem_nios_system_shared_memory+0xfffd4a54>
   14a68:	18c00044 	addi	r3,r3,1
   14a6c:	10c00015 	stw	r3,0(r2)
   14a70:	00800084 	movi	r2,2
   14a74:	88802b26 	beq	r17,r2,14b24 <__gethex+0x79c>
   14a78:	948007cc 	andi	r18,r18,31
   14a7c:	90002f1e 	bne	r18,zero,14b3c <__gethex+0x7b4>
   14a80:	04400844 	movi	r17,33
   14a84:	003f8206 	br	14890 <__alt_mem_nios_system_shared_memory+0xfffd4890>
   14a88:	04c00044 	movi	r19,1
   14a8c:	003fc106 	br	14994 <__alt_mem_nios_system_shared_memory+0xfffd4994>
   14a90:	d8c01717 	ldw	r3,92(sp)
   14a94:	183ec926 	beq	r3,zero,145bc <__alt_mem_nios_system_shared_memory+0xfffd45bc>
   14a98:	d8c00417 	ldw	r3,16(sp)
   14a9c:	d9001617 	ldw	r4,88(sp)
   14aa0:	18800015 	stw	r2,0(r3)
   14aa4:	d8c00017 	ldw	r3,0(sp)
   14aa8:	00800044 	movi	r2,1
   14aac:	a0800415 	stw	r2,16(r20)
   14ab0:	18800015 	stw	r2,0(r3)
   14ab4:	25000015 	stw	r20,0(r4)
   14ab8:	00801884 	movi	r2,98
   14abc:	003ef106 	br	14684 <__alt_mem_nios_system_shared_memory+0xfffd4684>
   14ac0:	9880008c 	andi	r2,r19,2
   14ac4:	103f7126 	beq	r2,zero,1488c <__alt_mem_nios_system_shared_memory+0xfffd488c>
   14ac8:	d8c00017 	ldw	r3,0(sp)
   14acc:	18800017 	ldw	r2,0(r3)
   14ad0:	9884b03a 	or	r2,r19,r2
   14ad4:	1080004c 	andi	r2,r2,1
   14ad8:	103fd61e 	bne	r2,zero,14a34 <__alt_mem_nios_system_shared_memory+0xfffd4a34>
   14adc:	003f6b06 	br	1488c <__alt_mem_nios_system_shared_memory+0xfffd488c>
   14ae0:	da400017 	ldw	r9,0(sp)
   14ae4:	0007883a 	mov	r3,zero
   14ae8:	003e9606 	br	14544 <__alt_mem_nios_system_shared_memory+0xfffd4544>
   14aec:	04c00084 	movi	r19,2
   14af0:	003f8806 	br	14914 <__alt_mem_nios_system_shared_memory+0xfffd4914>
   14af4:	d9001717 	ldw	r4,92(sp)
   14af8:	203fe726 	beq	r4,zero,14a98 <__alt_mem_nios_system_shared_memory+0xfffd4a98>
   14afc:	003eaf06 	br	145bc <__alt_mem_nios_system_shared_memory+0xfffd45bc>
   14b00:	943eae1e 	bne	r18,r16,145bc <__alt_mem_nios_system_shared_memory+0xfffd45bc>
   14b04:	1cbfe40e 	bge	r3,r18,14a98 <__alt_mem_nios_system_shared_memory+0xfffd4a98>
   14b08:	917fffc4 	addi	r5,r18,-1
   14b0c:	a009883a 	mov	r4,r20
   14b10:	00161c80 	call	161c8 <__any_on>
   14b14:	103ea926 	beq	r2,zero,145bc <__alt_mem_nios_system_shared_memory+0xfffd45bc>
   14b18:	d8c00117 	ldw	r3,4(sp)
   14b1c:	18800117 	ldw	r2,4(r3)
   14b20:	003fdd06 	br	14a98 <__alt_mem_nios_system_shared_memory+0xfffd4a98>
   14b24:	d8c00117 	ldw	r3,4(sp)
   14b28:	18800017 	ldw	r2,0(r3)
   14b2c:	10bfffc4 	addi	r2,r2,-1
   14b30:	90801c26 	beq	r18,r2,14ba4 <__gethex+0x81c>
   14b34:	04400884 	movi	r17,34
   14b38:	003f5506 	br	14890 <__alt_mem_nios_system_shared_memory+0xfffd4890>
   14b3c:	34c5883a 	add	r2,r6,r19
   14b40:	113fff17 	ldw	r4,-4(r2)
   14b44:	00154b80 	call	154b8 <__hi0bits>
   14b48:	00c00804 	movi	r3,32
   14b4c:	1ca5c83a 	sub	r18,r3,r18
   14b50:	14bfcb0e 	bge	r2,r18,14a80 <__alt_mem_nios_system_shared_memory+0xfffd4a80>
   14b54:	003f1a06 	br	147c0 <__alt_mem_nios_system_shared_memory+0xfffd47c0>
   14b58:	a1400117 	ldw	r5,4(r20)
   14b5c:	d9000217 	ldw	r4,8(sp)
   14b60:	29400044 	addi	r5,r5,1
   14b64:	001519c0 	call	1519c <_Balloc>
   14b68:	a1800417 	ldw	r6,16(r20)
   14b6c:	a1400304 	addi	r5,r20,12
   14b70:	11000304 	addi	r4,r2,12
   14b74:	31800084 	addi	r6,r6,2
   14b78:	318d883a 	add	r6,r6,r6
   14b7c:	318d883a 	add	r6,r6,r6
   14b80:	102d883a 	mov	r22,r2
   14b84:	000b0ac0 	call	b0ac <memcpy>
   14b88:	d9000217 	ldw	r4,8(sp)
   14b8c:	a00b883a 	mov	r5,r20
   14b90:	b029883a 	mov	r20,r22
   14b94:	00152440 	call	15244 <_Bfree>
   14b98:	b0c00417 	ldw	r3,16(r22)
   14b9c:	b1800504 	addi	r6,r22,20
   14ba0:	003efc06 	br	14794 <__alt_mem_nios_system_shared_memory+0xfffd4794>
   14ba4:	9005d17a 	srai	r2,r18,5
   14ba8:	944007cc 	andi	r17,r18,31
   14bac:	1085883a 	add	r2,r2,r2
   14bb0:	1085883a 	add	r2,r2,r2
   14bb4:	3087883a 	add	r3,r6,r2
   14bb8:	00800044 	movi	r2,1
   14bbc:	1462983a 	sll	r17,r2,r17
   14bc0:	18800017 	ldw	r2,0(r3)
   14bc4:	8884703a 	and	r2,r17,r2
   14bc8:	1022c03a 	cmpne	r17,r2,zero
   14bcc:	00800884 	movi	r2,34
   14bd0:	1463c83a 	sub	r17,r2,r17
   14bd4:	003f2e06 	br	14890 <__alt_mem_nios_system_shared_memory+0xfffd4890>

00014bd8 <__hexnan>:
   14bd8:	defff904 	addi	sp,sp,-28
   14bdc:	dc800215 	stw	r18,8(sp)
   14be0:	2c800017 	ldw	r18,0(r5)
   14be4:	dfc00615 	stw	ra,24(sp)
   14be8:	dd400515 	stw	r21,20(sp)
   14bec:	901fd17a 	srai	r15,r18,5
   14bf0:	dd000415 	stw	r20,16(sp)
   14bf4:	dcc00315 	stw	r19,12(sp)
   14bf8:	7bdf883a 	add	r15,r15,r15
   14bfc:	7bdf883a 	add	r15,r15,r15
   14c00:	dc400115 	stw	r17,4(sp)
   14c04:	dc000015 	stw	r16,0(sp)
   14c08:	948007cc 	andi	r18,r18,31
   14c0c:	33df883a 	add	r15,r6,r15
   14c10:	90000126 	beq	r18,zero,14c18 <__hexnan+0x40>
   14c14:	7bc00104 	addi	r15,r15,4
   14c18:	22000017 	ldw	r8,0(r4)
   14c1c:	7affff04 	addi	r11,r15,-4
   14c20:	038000b4 	movhi	r14,2
   14c24:	783fff15 	stw	zero,-4(r15)
   14c28:	581b883a 	mov	r13,r11
   14c2c:	580b883a 	mov	r5,r11
   14c30:	000f883a 	mov	r7,zero
   14c34:	003f883a 	mov	ra,zero
   14c38:	0019883a 	mov	r12,zero
   14c3c:	73baac04 	addi	r14,r14,-5456
   14c40:	04400204 	movi	r17,8
   14c44:	04000804 	movi	r16,32
   14c48:	04c001c4 	movi	r19,7
   14c4c:	42000044 	addi	r8,r8,1
   14c50:	40c00003 	ldbu	r3,0(r8)
   14c54:	18001d26 	beq	r3,zero,14ccc <__hexnan+0xf4>
   14c58:	70c5883a 	add	r2,r14,r3
   14c5c:	10800003 	ldbu	r2,0(r2)
   14c60:	12403fcc 	andi	r9,r2,255
   14c64:	4800301e 	bne	r9,zero,14d28 <__hexnan+0x150>
   14c68:	80c04236 	bltu	r16,r3,14d74 <__hexnan+0x19c>
   14c6c:	fb3ff70e 	bge	ra,r12,14c4c <__alt_mem_nios_system_shared_memory+0xfffd4c4c>
   14c70:	2b40112e 	bgeu	r5,r13,14cb8 <__hexnan+0xe0>
   14c74:	99c01016 	blt	r19,r7,14cb8 <__hexnan+0xe0>
   14c78:	89e9c83a 	sub	r20,r17,r7
   14c7c:	a529883a 	add	r20,r20,r20
   14c80:	2a800017 	ldw	r10,0(r5)
   14c84:	a529883a 	add	r20,r20,r20
   14c88:	852bc83a 	sub	r21,r16,r20
   14c8c:	28c00104 	addi	r3,r5,4
   14c90:	2805883a 	mov	r2,r5
   14c94:	19c00017 	ldw	r7,0(r3)
   14c98:	10800104 	addi	r2,r2,4
   14c9c:	18c00104 	addi	r3,r3,4
   14ca0:	3d52983a 	sll	r9,r7,r21
   14ca4:	4a92b03a 	or	r9,r9,r10
   14ca8:	3d14d83a 	srl	r10,r7,r20
   14cac:	127fff15 	stw	r9,-4(r2)
   14cb0:	1abfff15 	stw	r10,-4(r3)
   14cb4:	137ff736 	bltu	r2,r13,14c94 <__alt_mem_nios_system_shared_memory+0xfffd4c94>
   14cb8:	31402836 	bltu	r6,r5,14d5c <__hexnan+0x184>
   14cbc:	42000044 	addi	r8,r8,1
   14cc0:	40c00003 	ldbu	r3,0(r8)
   14cc4:	01c00204 	movi	r7,8
   14cc8:	183fe31e 	bne	r3,zero,14c58 <__alt_mem_nios_system_shared_memory+0xfffd4c58>
   14ccc:	60002b26 	beq	r12,zero,14d7c <__hexnan+0x1a4>
   14cd0:	2b40022e 	bgeu	r5,r13,14cdc <__hexnan+0x104>
   14cd4:	008001c4 	movi	r2,7
   14cd8:	11c0430e 	bge	r2,r7,14de8 <__hexnan+0x210>
   14cdc:	3140312e 	bgeu	r6,r5,14da4 <__hexnan+0x1cc>
   14ce0:	3007883a 	mov	r3,r6
   14ce4:	29000017 	ldw	r4,0(r5)
   14ce8:	18800104 	addi	r2,r3,4
   14cec:	29400104 	addi	r5,r5,4
   14cf0:	19000015 	stw	r4,0(r3)
   14cf4:	1007883a 	mov	r3,r2
   14cf8:	597ffa2e 	bgeu	r11,r5,14ce4 <__alt_mem_nios_system_shared_memory+0xfffd4ce4>
   14cfc:	10000015 	stw	zero,0(r2)
   14d00:	10800104 	addi	r2,r2,4
   14d04:	58bffd2e 	bgeu	r11,r2,14cfc <__alt_mem_nios_system_shared_memory+0xfffd4cfc>
   14d08:	78bfff17 	ldw	r2,-4(r15)
   14d0c:	1000041e 	bne	r2,zero,14d20 <__hexnan+0x148>
   14d10:	32c02d26 	beq	r6,r11,14dc8 <__hexnan+0x1f0>
   14d14:	5affff04 	addi	r11,r11,-4
   14d18:	58800017 	ldw	r2,0(r11)
   14d1c:	103ffc26 	beq	r2,zero,14d10 <__alt_mem_nios_system_shared_memory+0xfffd4d10>
   14d20:	00800144 	movi	r2,5
   14d24:	00001606 	br	14d80 <__hexnan+0x1a8>
   14d28:	39c00044 	addi	r7,r7,1
   14d2c:	63000044 	addi	r12,r12,1
   14d30:	89c0040e 	bge	r17,r7,14d44 <__hexnan+0x16c>
   14d34:	317fc52e 	bgeu	r6,r5,14c4c <__alt_mem_nios_system_shared_memory+0xfffd4c4c>
   14d38:	283fff15 	stw	zero,-4(r5)
   14d3c:	01c00044 	movi	r7,1
   14d40:	297fff04 	addi	r5,r5,-4
   14d44:	28c00017 	ldw	r3,0(r5)
   14d48:	108003cc 	andi	r2,r2,15
   14d4c:	1806913a 	slli	r3,r3,4
   14d50:	1884b03a 	or	r2,r3,r2
   14d54:	28800015 	stw	r2,0(r5)
   14d58:	003fbc06 	br	14c4c <__alt_mem_nios_system_shared_memory+0xfffd4c4c>
   14d5c:	2b7fff04 	addi	r13,r5,-4
   14d60:	283fff15 	stw	zero,-4(r5)
   14d64:	603f883a 	mov	ra,r12
   14d68:	680b883a 	mov	r5,r13
   14d6c:	000f883a 	mov	r7,zero
   14d70:	003fb606 	br	14c4c <__alt_mem_nios_system_shared_memory+0xfffd4c4c>
   14d74:	00800a44 	movi	r2,41
   14d78:	18801726 	beq	r3,r2,14dd8 <__hexnan+0x200>
   14d7c:	00800104 	movi	r2,4
   14d80:	dfc00617 	ldw	ra,24(sp)
   14d84:	dd400517 	ldw	r21,20(sp)
   14d88:	dd000417 	ldw	r20,16(sp)
   14d8c:	dcc00317 	ldw	r19,12(sp)
   14d90:	dc800217 	ldw	r18,8(sp)
   14d94:	dc400117 	ldw	r17,4(sp)
   14d98:	dc000017 	ldw	r16,0(sp)
   14d9c:	dec00704 	addi	sp,sp,28
   14da0:	f800283a 	ret
   14da4:	903fd826 	beq	r18,zero,14d08 <__alt_mem_nios_system_shared_memory+0xfffd4d08>
   14da8:	00c00804 	movi	r3,32
   14dac:	1ca5c83a 	sub	r18,r3,r18
   14db0:	00ffffc4 	movi	r3,-1
   14db4:	78bfff17 	ldw	r2,-4(r15)
   14db8:	1c86d83a 	srl	r3,r3,r18
   14dbc:	1884703a 	and	r2,r3,r2
   14dc0:	78bfff15 	stw	r2,-4(r15)
   14dc4:	003fd106 	br	14d0c <__alt_mem_nios_system_shared_memory+0xfffd4d0c>
   14dc8:	00800044 	movi	r2,1
   14dcc:	58800015 	stw	r2,0(r11)
   14dd0:	00800144 	movi	r2,5
   14dd4:	003fea06 	br	14d80 <__alt_mem_nios_system_shared_memory+0xfffd4d80>
   14dd8:	42000044 	addi	r8,r8,1
   14ddc:	22000015 	stw	r8,0(r4)
   14de0:	603fbb1e 	bne	r12,zero,14cd0 <__alt_mem_nios_system_shared_memory+0xfffd4cd0>
   14de4:	003fe506 	br	14d7c <__alt_mem_nios_system_shared_memory+0xfffd4d7c>
   14de8:	02400204 	movi	r9,8
   14dec:	49d3c83a 	sub	r9,r9,r7
   14df0:	4a53883a 	add	r9,r9,r9
   14df4:	2a000017 	ldw	r8,0(r5)
   14df8:	4a53883a 	add	r9,r9,r9
   14dfc:	02800804 	movi	r10,32
   14e00:	5255c83a 	sub	r10,r10,r9
   14e04:	28c00104 	addi	r3,r5,4
   14e08:	2805883a 	mov	r2,r5
   14e0c:	19c00017 	ldw	r7,0(r3)
   14e10:	10800104 	addi	r2,r2,4
   14e14:	18c00104 	addi	r3,r3,4
   14e18:	3a88983a 	sll	r4,r7,r10
   14e1c:	2208b03a 	or	r4,r4,r8
   14e20:	3a50d83a 	srl	r8,r7,r9
   14e24:	113fff15 	stw	r4,-4(r2)
   14e28:	1a3fff15 	stw	r8,-4(r3)
   14e2c:	137ff736 	bltu	r2,r13,14e0c <__alt_mem_nios_system_shared_memory+0xfffd4e0c>
   14e30:	003faa06 	br	14cdc <__alt_mem_nios_system_shared_memory+0xfffd4cdc>

00014e34 <_isatty_r>:
   14e34:	defffd04 	addi	sp,sp,-12
   14e38:	dc000015 	stw	r16,0(sp)
   14e3c:	040000b4 	movhi	r16,2
   14e40:	dc400115 	stw	r17,4(sp)
   14e44:	84094804 	addi	r16,r16,9504
   14e48:	2023883a 	mov	r17,r4
   14e4c:	2809883a 	mov	r4,r5
   14e50:	dfc00215 	stw	ra,8(sp)
   14e54:	80000015 	stw	zero,0(r16)
   14e58:	001afe40 	call	1afe4 <isatty>
   14e5c:	00ffffc4 	movi	r3,-1
   14e60:	10c00526 	beq	r2,r3,14e78 <_isatty_r+0x44>
   14e64:	dfc00217 	ldw	ra,8(sp)
   14e68:	dc400117 	ldw	r17,4(sp)
   14e6c:	dc000017 	ldw	r16,0(sp)
   14e70:	dec00304 	addi	sp,sp,12
   14e74:	f800283a 	ret
   14e78:	80c00017 	ldw	r3,0(r16)
   14e7c:	183ff926 	beq	r3,zero,14e64 <__alt_mem_nios_system_shared_memory+0xfffd4e64>
   14e80:	88c00015 	stw	r3,0(r17)
   14e84:	003ff706 	br	14e64 <__alt_mem_nios_system_shared_memory+0xfffd4e64>

00014e88 <_setlocale_r>:
   14e88:	30001b26 	beq	r6,zero,14ef8 <_setlocale_r+0x70>
   14e8c:	014000b4 	movhi	r5,2
   14e90:	defffe04 	addi	sp,sp,-8
   14e94:	297aec04 	addi	r5,r5,-5200
   14e98:	3009883a 	mov	r4,r6
   14e9c:	dc000015 	stw	r16,0(sp)
   14ea0:	dfc00115 	stw	ra,4(sp)
   14ea4:	3021883a 	mov	r16,r6
   14ea8:	000b9200 	call	b920 <strcmp>
   14eac:	1000061e 	bne	r2,zero,14ec8 <_setlocale_r+0x40>
   14eb0:	008000b4 	movhi	r2,2
   14eb4:	10ba6f04 	addi	r2,r2,-5700
   14eb8:	dfc00117 	ldw	ra,4(sp)
   14ebc:	dc000017 	ldw	r16,0(sp)
   14ec0:	dec00204 	addi	sp,sp,8
   14ec4:	f800283a 	ret
   14ec8:	014000b4 	movhi	r5,2
   14ecc:	297a6f04 	addi	r5,r5,-5700
   14ed0:	8009883a 	mov	r4,r16
   14ed4:	000b9200 	call	b920 <strcmp>
   14ed8:	103ff526 	beq	r2,zero,14eb0 <__alt_mem_nios_system_shared_memory+0xfffd4eb0>
   14edc:	014000b4 	movhi	r5,2
   14ee0:	29795804 	addi	r5,r5,-6816
   14ee4:	8009883a 	mov	r4,r16
   14ee8:	000b9200 	call	b920 <strcmp>
   14eec:	103ff026 	beq	r2,zero,14eb0 <__alt_mem_nios_system_shared_memory+0xfffd4eb0>
   14ef0:	0005883a 	mov	r2,zero
   14ef4:	003ff006 	br	14eb8 <__alt_mem_nios_system_shared_memory+0xfffd4eb8>
   14ef8:	008000b4 	movhi	r2,2
   14efc:	10ba6f04 	addi	r2,r2,-5700
   14f00:	f800283a 	ret

00014f04 <__locale_charset>:
   14f04:	008000b4 	movhi	r2,2
   14f08:	10bd7304 	addi	r2,r2,-2612
   14f0c:	f800283a 	ret

00014f10 <__locale_mb_cur_max>:
   14f10:	008000b4 	movhi	r2,2
   14f14:	10824504 	addi	r2,r2,2324
   14f18:	10800017 	ldw	r2,0(r2)
   14f1c:	f800283a 	ret

00014f20 <__locale_msgcharset>:
   14f20:	008000b4 	movhi	r2,2
   14f24:	10bd6b04 	addi	r2,r2,-2644
   14f28:	f800283a 	ret

00014f2c <__locale_cjk_lang>:
   14f2c:	0005883a 	mov	r2,zero
   14f30:	f800283a 	ret

00014f34 <_localeconv_r>:
   14f34:	008000b4 	movhi	r2,2
   14f38:	10bd7b04 	addi	r2,r2,-2580
   14f3c:	f800283a 	ret

00014f40 <setlocale>:
   14f40:	008000b4 	movhi	r2,2
   14f44:	10824204 	addi	r2,r2,2312
   14f48:	280d883a 	mov	r6,r5
   14f4c:	200b883a 	mov	r5,r4
   14f50:	11000017 	ldw	r4,0(r2)
   14f54:	0014e881 	jmpi	14e88 <_setlocale_r>

00014f58 <localeconv>:
   14f58:	008000b4 	movhi	r2,2
   14f5c:	10bd7b04 	addi	r2,r2,-2580
   14f60:	f800283a 	ret

00014f64 <_lseek_r>:
   14f64:	defffd04 	addi	sp,sp,-12
   14f68:	2805883a 	mov	r2,r5
   14f6c:	dc000015 	stw	r16,0(sp)
   14f70:	040000b4 	movhi	r16,2
   14f74:	dc400115 	stw	r17,4(sp)
   14f78:	300b883a 	mov	r5,r6
   14f7c:	84094804 	addi	r16,r16,9504
   14f80:	2023883a 	mov	r17,r4
   14f84:	380d883a 	mov	r6,r7
   14f88:	1009883a 	mov	r4,r2
   14f8c:	dfc00215 	stw	ra,8(sp)
   14f90:	80000015 	stw	zero,0(r16)
   14f94:	001b1b80 	call	1b1b8 <lseek>
   14f98:	00ffffc4 	movi	r3,-1
   14f9c:	10c00526 	beq	r2,r3,14fb4 <_lseek_r+0x50>
   14fa0:	dfc00217 	ldw	ra,8(sp)
   14fa4:	dc400117 	ldw	r17,4(sp)
   14fa8:	dc000017 	ldw	r16,0(sp)
   14fac:	dec00304 	addi	sp,sp,12
   14fb0:	f800283a 	ret
   14fb4:	80c00017 	ldw	r3,0(r16)
   14fb8:	183ff926 	beq	r3,zero,14fa0 <__alt_mem_nios_system_shared_memory+0xfffd4fa0>
   14fbc:	88c00015 	stw	r3,0(r17)
   14fc0:	003ff706 	br	14fa0 <__alt_mem_nios_system_shared_memory+0xfffd4fa0>

00014fc4 <memcmp>:
   14fc4:	01c000c4 	movi	r7,3
   14fc8:	3980192e 	bgeu	r7,r6,15030 <memcmp+0x6c>
   14fcc:	2144b03a 	or	r2,r4,r5
   14fd0:	11c4703a 	and	r2,r2,r7
   14fd4:	10000f26 	beq	r2,zero,15014 <memcmp+0x50>
   14fd8:	20800003 	ldbu	r2,0(r4)
   14fdc:	28c00003 	ldbu	r3,0(r5)
   14fe0:	10c0151e 	bne	r2,r3,15038 <memcmp+0x74>
   14fe4:	31bfff84 	addi	r6,r6,-2
   14fe8:	01ffffc4 	movi	r7,-1
   14fec:	00000406 	br	15000 <memcmp+0x3c>
   14ff0:	20800003 	ldbu	r2,0(r4)
   14ff4:	28c00003 	ldbu	r3,0(r5)
   14ff8:	31bfffc4 	addi	r6,r6,-1
   14ffc:	10c00e1e 	bne	r2,r3,15038 <memcmp+0x74>
   15000:	21000044 	addi	r4,r4,1
   15004:	29400044 	addi	r5,r5,1
   15008:	31fff91e 	bne	r6,r7,14ff0 <__alt_mem_nios_system_shared_memory+0xfffd4ff0>
   1500c:	0005883a 	mov	r2,zero
   15010:	f800283a 	ret
   15014:	20c00017 	ldw	r3,0(r4)
   15018:	28800017 	ldw	r2,0(r5)
   1501c:	18bfee1e 	bne	r3,r2,14fd8 <__alt_mem_nios_system_shared_memory+0xfffd4fd8>
   15020:	31bfff04 	addi	r6,r6,-4
   15024:	21000104 	addi	r4,r4,4
   15028:	29400104 	addi	r5,r5,4
   1502c:	39bff936 	bltu	r7,r6,15014 <__alt_mem_nios_system_shared_memory+0xfffd5014>
   15030:	303fe91e 	bne	r6,zero,14fd8 <__alt_mem_nios_system_shared_memory+0xfffd4fd8>
   15034:	003ff506 	br	1500c <__alt_mem_nios_system_shared_memory+0xfffd500c>
   15038:	10c5c83a 	sub	r2,r2,r3
   1503c:	f800283a 	ret

00015040 <memmove>:
   15040:	2005883a 	mov	r2,r4
   15044:	29000b2e 	bgeu	r5,r4,15074 <memmove+0x34>
   15048:	298f883a 	add	r7,r5,r6
   1504c:	21c0092e 	bgeu	r4,r7,15074 <memmove+0x34>
   15050:	2187883a 	add	r3,r4,r6
   15054:	198bc83a 	sub	r5,r3,r6
   15058:	30004826 	beq	r6,zero,1517c <memmove+0x13c>
   1505c:	39ffffc4 	addi	r7,r7,-1
   15060:	39000003 	ldbu	r4,0(r7)
   15064:	18ffffc4 	addi	r3,r3,-1
   15068:	19000005 	stb	r4,0(r3)
   1506c:	28fffb1e 	bne	r5,r3,1505c <__alt_mem_nios_system_shared_memory+0xfffd505c>
   15070:	f800283a 	ret
   15074:	00c003c4 	movi	r3,15
   15078:	1980412e 	bgeu	r3,r6,15180 <memmove+0x140>
   1507c:	2886b03a 	or	r3,r5,r2
   15080:	18c000cc 	andi	r3,r3,3
   15084:	1800401e 	bne	r3,zero,15188 <memmove+0x148>
   15088:	33fffc04 	addi	r15,r6,-16
   1508c:	781ed13a 	srli	r15,r15,4
   15090:	28c00104 	addi	r3,r5,4
   15094:	13400104 	addi	r13,r2,4
   15098:	781c913a 	slli	r14,r15,4
   1509c:	2b000204 	addi	r12,r5,8
   150a0:	12c00204 	addi	r11,r2,8
   150a4:	73800504 	addi	r14,r14,20
   150a8:	2a800304 	addi	r10,r5,12
   150ac:	12400304 	addi	r9,r2,12
   150b0:	2b9d883a 	add	r14,r5,r14
   150b4:	2811883a 	mov	r8,r5
   150b8:	100f883a 	mov	r7,r2
   150bc:	41000017 	ldw	r4,0(r8)
   150c0:	39c00404 	addi	r7,r7,16
   150c4:	18c00404 	addi	r3,r3,16
   150c8:	393ffc15 	stw	r4,-16(r7)
   150cc:	193ffc17 	ldw	r4,-16(r3)
   150d0:	6b400404 	addi	r13,r13,16
   150d4:	5ac00404 	addi	r11,r11,16
   150d8:	693ffc15 	stw	r4,-16(r13)
   150dc:	61000017 	ldw	r4,0(r12)
   150e0:	4a400404 	addi	r9,r9,16
   150e4:	42000404 	addi	r8,r8,16
   150e8:	593ffc15 	stw	r4,-16(r11)
   150ec:	51000017 	ldw	r4,0(r10)
   150f0:	63000404 	addi	r12,r12,16
   150f4:	52800404 	addi	r10,r10,16
   150f8:	493ffc15 	stw	r4,-16(r9)
   150fc:	1bbfef1e 	bne	r3,r14,150bc <__alt_mem_nios_system_shared_memory+0xfffd50bc>
   15100:	79000044 	addi	r4,r15,1
   15104:	2008913a 	slli	r4,r4,4
   15108:	328003cc 	andi	r10,r6,15
   1510c:	02c000c4 	movi	r11,3
   15110:	1107883a 	add	r3,r2,r4
   15114:	290b883a 	add	r5,r5,r4
   15118:	5a801e2e 	bgeu	r11,r10,15194 <memmove+0x154>
   1511c:	1813883a 	mov	r9,r3
   15120:	2811883a 	mov	r8,r5
   15124:	500f883a 	mov	r7,r10
   15128:	41000017 	ldw	r4,0(r8)
   1512c:	4a400104 	addi	r9,r9,4
   15130:	39ffff04 	addi	r7,r7,-4
   15134:	493fff15 	stw	r4,-4(r9)
   15138:	42000104 	addi	r8,r8,4
   1513c:	59fffa36 	bltu	r11,r7,15128 <__alt_mem_nios_system_shared_memory+0xfffd5128>
   15140:	513fff04 	addi	r4,r10,-4
   15144:	2008d0ba 	srli	r4,r4,2
   15148:	318000cc 	andi	r6,r6,3
   1514c:	21000044 	addi	r4,r4,1
   15150:	2109883a 	add	r4,r4,r4
   15154:	2109883a 	add	r4,r4,r4
   15158:	1907883a 	add	r3,r3,r4
   1515c:	290b883a 	add	r5,r5,r4
   15160:	30000b26 	beq	r6,zero,15190 <memmove+0x150>
   15164:	198d883a 	add	r6,r3,r6
   15168:	29c00003 	ldbu	r7,0(r5)
   1516c:	18c00044 	addi	r3,r3,1
   15170:	29400044 	addi	r5,r5,1
   15174:	19ffffc5 	stb	r7,-1(r3)
   15178:	19bffb1e 	bne	r3,r6,15168 <__alt_mem_nios_system_shared_memory+0xfffd5168>
   1517c:	f800283a 	ret
   15180:	1007883a 	mov	r3,r2
   15184:	003ff606 	br	15160 <__alt_mem_nios_system_shared_memory+0xfffd5160>
   15188:	1007883a 	mov	r3,r2
   1518c:	003ff506 	br	15164 <__alt_mem_nios_system_shared_memory+0xfffd5164>
   15190:	f800283a 	ret
   15194:	500d883a 	mov	r6,r10
   15198:	003ff106 	br	15160 <__alt_mem_nios_system_shared_memory+0xfffd5160>

0001519c <_Balloc>:
   1519c:	20801317 	ldw	r2,76(r4)
   151a0:	defffc04 	addi	sp,sp,-16
   151a4:	dc400115 	stw	r17,4(sp)
   151a8:	dc000015 	stw	r16,0(sp)
   151ac:	dfc00315 	stw	ra,12(sp)
   151b0:	dc800215 	stw	r18,8(sp)
   151b4:	2023883a 	mov	r17,r4
   151b8:	2821883a 	mov	r16,r5
   151bc:	10000f26 	beq	r2,zero,151fc <_Balloc+0x60>
   151c0:	8407883a 	add	r3,r16,r16
   151c4:	18c7883a 	add	r3,r3,r3
   151c8:	10c7883a 	add	r3,r2,r3
   151cc:	18800017 	ldw	r2,0(r3)
   151d0:	10001126 	beq	r2,zero,15218 <_Balloc+0x7c>
   151d4:	11000017 	ldw	r4,0(r2)
   151d8:	19000015 	stw	r4,0(r3)
   151dc:	10000415 	stw	zero,16(r2)
   151e0:	10000315 	stw	zero,12(r2)
   151e4:	dfc00317 	ldw	ra,12(sp)
   151e8:	dc800217 	ldw	r18,8(sp)
   151ec:	dc400117 	ldw	r17,4(sp)
   151f0:	dc000017 	ldw	r16,0(sp)
   151f4:	dec00404 	addi	sp,sp,16
   151f8:	f800283a 	ret
   151fc:	01800844 	movi	r6,33
   15200:	01400104 	movi	r5,4
   15204:	00199e80 	call	199e8 <_calloc_r>
   15208:	88801315 	stw	r2,76(r17)
   1520c:	103fec1e 	bne	r2,zero,151c0 <__alt_mem_nios_system_shared_memory+0xfffd51c0>
   15210:	0005883a 	mov	r2,zero
   15214:	003ff306 	br	151e4 <__alt_mem_nios_system_shared_memory+0xfffd51e4>
   15218:	01400044 	movi	r5,1
   1521c:	2c24983a 	sll	r18,r5,r16
   15220:	8809883a 	mov	r4,r17
   15224:	91800144 	addi	r6,r18,5
   15228:	318d883a 	add	r6,r6,r6
   1522c:	318d883a 	add	r6,r6,r6
   15230:	00199e80 	call	199e8 <_calloc_r>
   15234:	103ff626 	beq	r2,zero,15210 <__alt_mem_nios_system_shared_memory+0xfffd5210>
   15238:	14000115 	stw	r16,4(r2)
   1523c:	14800215 	stw	r18,8(r2)
   15240:	003fe606 	br	151dc <__alt_mem_nios_system_shared_memory+0xfffd51dc>

00015244 <_Bfree>:
   15244:	28000826 	beq	r5,zero,15268 <_Bfree+0x24>
   15248:	28c00117 	ldw	r3,4(r5)
   1524c:	20801317 	ldw	r2,76(r4)
   15250:	18c7883a 	add	r3,r3,r3
   15254:	18c7883a 	add	r3,r3,r3
   15258:	10c5883a 	add	r2,r2,r3
   1525c:	10c00017 	ldw	r3,0(r2)
   15260:	28c00015 	stw	r3,0(r5)
   15264:	11400015 	stw	r5,0(r2)
   15268:	f800283a 	ret

0001526c <__multadd>:
   1526c:	defff704 	addi	sp,sp,-36
   15270:	dc800215 	stw	r18,8(sp)
   15274:	2c800417 	ldw	r18,16(r5)
   15278:	dd800615 	stw	r22,24(sp)
   1527c:	dd400515 	stw	r21,20(sp)
   15280:	dd000415 	stw	r20,16(sp)
   15284:	dcc00315 	stw	r19,12(sp)
   15288:	dc400115 	stw	r17,4(sp)
   1528c:	dc000015 	stw	r16,0(sp)
   15290:	dfc00815 	stw	ra,32(sp)
   15294:	ddc00715 	stw	r23,28(sp)
   15298:	2827883a 	mov	r19,r5
   1529c:	2029883a 	mov	r20,r4
   152a0:	3023883a 	mov	r17,r6
   152a4:	3821883a 	mov	r16,r7
   152a8:	2d400504 	addi	r21,r5,20
   152ac:	002d883a 	mov	r22,zero
   152b0:	adc00017 	ldw	r23,0(r21)
   152b4:	880b883a 	mov	r5,r17
   152b8:	ad400104 	addi	r21,r21,4
   152bc:	b93fffcc 	andi	r4,r23,65535
   152c0:	00051580 	call	5158 <__mulsi3>
   152c4:	b808d43a 	srli	r4,r23,16
   152c8:	880b883a 	mov	r5,r17
   152cc:	1421883a 	add	r16,r2,r16
   152d0:	00051580 	call	5158 <__mulsi3>
   152d4:	800ed43a 	srli	r7,r16,16
   152d8:	80ffffcc 	andi	r3,r16,65535
   152dc:	b5800044 	addi	r22,r22,1
   152e0:	11c5883a 	add	r2,r2,r7
   152e4:	100e943a 	slli	r7,r2,16
   152e8:	1020d43a 	srli	r16,r2,16
   152ec:	38c7883a 	add	r3,r7,r3
   152f0:	a8ffff15 	stw	r3,-4(r21)
   152f4:	b4bfee16 	blt	r22,r18,152b0 <__alt_mem_nios_system_shared_memory+0xfffd52b0>
   152f8:	80000926 	beq	r16,zero,15320 <__multadd+0xb4>
   152fc:	98800217 	ldw	r2,8(r19)
   15300:	9080130e 	bge	r18,r2,15350 <__multadd+0xe4>
   15304:	90800144 	addi	r2,r18,5
   15308:	1085883a 	add	r2,r2,r2
   1530c:	1085883a 	add	r2,r2,r2
   15310:	9885883a 	add	r2,r19,r2
   15314:	14000015 	stw	r16,0(r2)
   15318:	94800044 	addi	r18,r18,1
   1531c:	9c800415 	stw	r18,16(r19)
   15320:	9805883a 	mov	r2,r19
   15324:	dfc00817 	ldw	ra,32(sp)
   15328:	ddc00717 	ldw	r23,28(sp)
   1532c:	dd800617 	ldw	r22,24(sp)
   15330:	dd400517 	ldw	r21,20(sp)
   15334:	dd000417 	ldw	r20,16(sp)
   15338:	dcc00317 	ldw	r19,12(sp)
   1533c:	dc800217 	ldw	r18,8(sp)
   15340:	dc400117 	ldw	r17,4(sp)
   15344:	dc000017 	ldw	r16,0(sp)
   15348:	dec00904 	addi	sp,sp,36
   1534c:	f800283a 	ret
   15350:	99400117 	ldw	r5,4(r19)
   15354:	a009883a 	mov	r4,r20
   15358:	29400044 	addi	r5,r5,1
   1535c:	001519c0 	call	1519c <_Balloc>
   15360:	99800417 	ldw	r6,16(r19)
   15364:	99400304 	addi	r5,r19,12
   15368:	11000304 	addi	r4,r2,12
   1536c:	31800084 	addi	r6,r6,2
   15370:	318d883a 	add	r6,r6,r6
   15374:	318d883a 	add	r6,r6,r6
   15378:	1023883a 	mov	r17,r2
   1537c:	000b0ac0 	call	b0ac <memcpy>
   15380:	98000a26 	beq	r19,zero,153ac <__multadd+0x140>
   15384:	98c00117 	ldw	r3,4(r19)
   15388:	a0801317 	ldw	r2,76(r20)
   1538c:	18c7883a 	add	r3,r3,r3
   15390:	18c7883a 	add	r3,r3,r3
   15394:	10c5883a 	add	r2,r2,r3
   15398:	10c00017 	ldw	r3,0(r2)
   1539c:	98c00015 	stw	r3,0(r19)
   153a0:	14c00015 	stw	r19,0(r2)
   153a4:	8827883a 	mov	r19,r17
   153a8:	003fd606 	br	15304 <__alt_mem_nios_system_shared_memory+0xfffd5304>
   153ac:	8827883a 	mov	r19,r17
   153b0:	003fd406 	br	15304 <__alt_mem_nios_system_shared_memory+0xfffd5304>

000153b4 <__s2b>:
   153b4:	defff904 	addi	sp,sp,-28
   153b8:	dc400115 	stw	r17,4(sp)
   153bc:	dc000015 	stw	r16,0(sp)
   153c0:	2023883a 	mov	r17,r4
   153c4:	2821883a 	mov	r16,r5
   153c8:	39000204 	addi	r4,r7,8
   153cc:	01400244 	movi	r5,9
   153d0:	dcc00315 	stw	r19,12(sp)
   153d4:	dc800215 	stw	r18,8(sp)
   153d8:	dfc00615 	stw	ra,24(sp)
   153dc:	dd400515 	stw	r21,20(sp)
   153e0:	dd000415 	stw	r20,16(sp)
   153e4:	3825883a 	mov	r18,r7
   153e8:	3027883a 	mov	r19,r6
   153ec:	0004fa40 	call	4fa4 <__divsi3>
   153f0:	00c00044 	movi	r3,1
   153f4:	000b883a 	mov	r5,zero
   153f8:	1880030e 	bge	r3,r2,15408 <__s2b+0x54>
   153fc:	18c7883a 	add	r3,r3,r3
   15400:	29400044 	addi	r5,r5,1
   15404:	18bffd16 	blt	r3,r2,153fc <__alt_mem_nios_system_shared_memory+0xfffd53fc>
   15408:	8809883a 	mov	r4,r17
   1540c:	001519c0 	call	1519c <_Balloc>
   15410:	d8c00717 	ldw	r3,28(sp)
   15414:	10c00515 	stw	r3,20(r2)
   15418:	00c00044 	movi	r3,1
   1541c:	10c00415 	stw	r3,16(r2)
   15420:	00c00244 	movi	r3,9
   15424:	1cc0210e 	bge	r3,r19,154ac <__s2b+0xf8>
   15428:	80eb883a 	add	r21,r16,r3
   1542c:	a829883a 	mov	r20,r21
   15430:	84e1883a 	add	r16,r16,r19
   15434:	a1c00007 	ldb	r7,0(r20)
   15438:	01800284 	movi	r6,10
   1543c:	a5000044 	addi	r20,r20,1
   15440:	100b883a 	mov	r5,r2
   15444:	39fff404 	addi	r7,r7,-48
   15448:	8809883a 	mov	r4,r17
   1544c:	001526c0 	call	1526c <__multadd>
   15450:	a43ff81e 	bne	r20,r16,15434 <__alt_mem_nios_system_shared_memory+0xfffd5434>
   15454:	ace1883a 	add	r16,r21,r19
   15458:	843ffe04 	addi	r16,r16,-8
   1545c:	9c800a0e 	bge	r19,r18,15488 <__s2b+0xd4>
   15460:	94e5c83a 	sub	r18,r18,r19
   15464:	84a5883a 	add	r18,r16,r18
   15468:	81c00007 	ldb	r7,0(r16)
   1546c:	01800284 	movi	r6,10
   15470:	84000044 	addi	r16,r16,1
   15474:	100b883a 	mov	r5,r2
   15478:	39fff404 	addi	r7,r7,-48
   1547c:	8809883a 	mov	r4,r17
   15480:	001526c0 	call	1526c <__multadd>
   15484:	84bff81e 	bne	r16,r18,15468 <__alt_mem_nios_system_shared_memory+0xfffd5468>
   15488:	dfc00617 	ldw	ra,24(sp)
   1548c:	dd400517 	ldw	r21,20(sp)
   15490:	dd000417 	ldw	r20,16(sp)
   15494:	dcc00317 	ldw	r19,12(sp)
   15498:	dc800217 	ldw	r18,8(sp)
   1549c:	dc400117 	ldw	r17,4(sp)
   154a0:	dc000017 	ldw	r16,0(sp)
   154a4:	dec00704 	addi	sp,sp,28
   154a8:	f800283a 	ret
   154ac:	84000284 	addi	r16,r16,10
   154b0:	1827883a 	mov	r19,r3
   154b4:	003fe906 	br	1545c <__alt_mem_nios_system_shared_memory+0xfffd545c>

000154b8 <__hi0bits>:
   154b8:	20bfffec 	andhi	r2,r4,65535
   154bc:	1000141e 	bne	r2,zero,15510 <__hi0bits+0x58>
   154c0:	2008943a 	slli	r4,r4,16
   154c4:	00800404 	movi	r2,16
   154c8:	20ffc02c 	andhi	r3,r4,65280
   154cc:	1800021e 	bne	r3,zero,154d8 <__hi0bits+0x20>
   154d0:	2008923a 	slli	r4,r4,8
   154d4:	10800204 	addi	r2,r2,8
   154d8:	20fc002c 	andhi	r3,r4,61440
   154dc:	1800021e 	bne	r3,zero,154e8 <__hi0bits+0x30>
   154e0:	2008913a 	slli	r4,r4,4
   154e4:	10800104 	addi	r2,r2,4
   154e8:	20f0002c 	andhi	r3,r4,49152
   154ec:	1800031e 	bne	r3,zero,154fc <__hi0bits+0x44>
   154f0:	2109883a 	add	r4,r4,r4
   154f4:	10800084 	addi	r2,r2,2
   154f8:	2109883a 	add	r4,r4,r4
   154fc:	20000316 	blt	r4,zero,1550c <__hi0bits+0x54>
   15500:	2110002c 	andhi	r4,r4,16384
   15504:	2000041e 	bne	r4,zero,15518 <__hi0bits+0x60>
   15508:	00800804 	movi	r2,32
   1550c:	f800283a 	ret
   15510:	0005883a 	mov	r2,zero
   15514:	003fec06 	br	154c8 <__alt_mem_nios_system_shared_memory+0xfffd54c8>
   15518:	10800044 	addi	r2,r2,1
   1551c:	f800283a 	ret

00015520 <__lo0bits>:
   15520:	20c00017 	ldw	r3,0(r4)
   15524:	188001cc 	andi	r2,r3,7
   15528:	10000826 	beq	r2,zero,1554c <__lo0bits+0x2c>
   1552c:	1880004c 	andi	r2,r3,1
   15530:	1000211e 	bne	r2,zero,155b8 <__lo0bits+0x98>
   15534:	1880008c 	andi	r2,r3,2
   15538:	1000211e 	bne	r2,zero,155c0 <__lo0bits+0xa0>
   1553c:	1806d0ba 	srli	r3,r3,2
   15540:	00800084 	movi	r2,2
   15544:	20c00015 	stw	r3,0(r4)
   15548:	f800283a 	ret
   1554c:	18bfffcc 	andi	r2,r3,65535
   15550:	10001326 	beq	r2,zero,155a0 <__lo0bits+0x80>
   15554:	0005883a 	mov	r2,zero
   15558:	19403fcc 	andi	r5,r3,255
   1555c:	2800021e 	bne	r5,zero,15568 <__lo0bits+0x48>
   15560:	1806d23a 	srli	r3,r3,8
   15564:	10800204 	addi	r2,r2,8
   15568:	194003cc 	andi	r5,r3,15
   1556c:	2800021e 	bne	r5,zero,15578 <__lo0bits+0x58>
   15570:	1806d13a 	srli	r3,r3,4
   15574:	10800104 	addi	r2,r2,4
   15578:	194000cc 	andi	r5,r3,3
   1557c:	2800021e 	bne	r5,zero,15588 <__lo0bits+0x68>
   15580:	1806d0ba 	srli	r3,r3,2
   15584:	10800084 	addi	r2,r2,2
   15588:	1940004c 	andi	r5,r3,1
   1558c:	2800081e 	bne	r5,zero,155b0 <__lo0bits+0x90>
   15590:	1806d07a 	srli	r3,r3,1
   15594:	1800051e 	bne	r3,zero,155ac <__lo0bits+0x8c>
   15598:	00800804 	movi	r2,32
   1559c:	f800283a 	ret
   155a0:	1806d43a 	srli	r3,r3,16
   155a4:	00800404 	movi	r2,16
   155a8:	003feb06 	br	15558 <__alt_mem_nios_system_shared_memory+0xfffd5558>
   155ac:	10800044 	addi	r2,r2,1
   155b0:	20c00015 	stw	r3,0(r4)
   155b4:	f800283a 	ret
   155b8:	0005883a 	mov	r2,zero
   155bc:	f800283a 	ret
   155c0:	1806d07a 	srli	r3,r3,1
   155c4:	00800044 	movi	r2,1
   155c8:	20c00015 	stw	r3,0(r4)
   155cc:	f800283a 	ret

000155d0 <__i2b>:
   155d0:	defffd04 	addi	sp,sp,-12
   155d4:	dc000015 	stw	r16,0(sp)
   155d8:	04000044 	movi	r16,1
   155dc:	dc400115 	stw	r17,4(sp)
   155e0:	2823883a 	mov	r17,r5
   155e4:	800b883a 	mov	r5,r16
   155e8:	dfc00215 	stw	ra,8(sp)
   155ec:	001519c0 	call	1519c <_Balloc>
   155f0:	14400515 	stw	r17,20(r2)
   155f4:	14000415 	stw	r16,16(r2)
   155f8:	dfc00217 	ldw	ra,8(sp)
   155fc:	dc400117 	ldw	r17,4(sp)
   15600:	dc000017 	ldw	r16,0(sp)
   15604:	dec00304 	addi	sp,sp,12
   15608:	f800283a 	ret

0001560c <__multiply>:
   1560c:	deffef04 	addi	sp,sp,-68
   15610:	dc400815 	stw	r17,32(sp)
   15614:	dc000715 	stw	r16,28(sp)
   15618:	34400417 	ldw	r17,16(r6)
   1561c:	2c000417 	ldw	r16,16(r5)
   15620:	dd800d15 	stw	r22,52(sp)
   15624:	dc800915 	stw	r18,36(sp)
   15628:	dfc01015 	stw	ra,64(sp)
   1562c:	df000f15 	stw	fp,60(sp)
   15630:	ddc00e15 	stw	r23,56(sp)
   15634:	dd400c15 	stw	r21,48(sp)
   15638:	dd000b15 	stw	r20,44(sp)
   1563c:	dcc00a15 	stw	r19,40(sp)
   15640:	2825883a 	mov	r18,r5
   15644:	302d883a 	mov	r22,r6
   15648:	8440050e 	bge	r16,r17,15660 <__multiply+0x54>
   1564c:	8007883a 	mov	r3,r16
   15650:	3025883a 	mov	r18,r6
   15654:	8821883a 	mov	r16,r17
   15658:	282d883a 	mov	r22,r5
   1565c:	1823883a 	mov	r17,r3
   15660:	90800217 	ldw	r2,8(r18)
   15664:	8447883a 	add	r3,r16,r17
   15668:	d8c00215 	stw	r3,8(sp)
   1566c:	91400117 	ldw	r5,4(r18)
   15670:	10c0010e 	bge	r2,r3,15678 <__multiply+0x6c>
   15674:	29400044 	addi	r5,r5,1
   15678:	001519c0 	call	1519c <_Balloc>
   1567c:	d8c00217 	ldw	r3,8(sp)
   15680:	d8800615 	stw	r2,24(sp)
   15684:	18eb883a 	add	r21,r3,r3
   15688:	ad6b883a 	add	r21,r21,r21
   1568c:	10c00504 	addi	r3,r2,20
   15690:	1d6b883a 	add	r21,r3,r21
   15694:	d8c00115 	stw	r3,4(sp)
   15698:	dd400315 	stw	r21,12(sp)
   1569c:	1805883a 	mov	r2,r3
   156a0:	1d40042e 	bgeu	r3,r21,156b4 <__multiply+0xa8>
   156a4:	d8c00317 	ldw	r3,12(sp)
   156a8:	10000015 	stw	zero,0(r2)
   156ac:	10800104 	addi	r2,r2,4
   156b0:	10fffc36 	bltu	r2,r3,156a4 <__alt_mem_nios_system_shared_memory+0xfffd56a4>
   156b4:	8c63883a 	add	r17,r17,r17
   156b8:	b5800504 	addi	r22,r22,20
   156bc:	8c63883a 	add	r17,r17,r17
   156c0:	94800504 	addi	r18,r18,20
   156c4:	8421883a 	add	r16,r16,r16
   156c8:	b463883a 	add	r17,r22,r17
   156cc:	8421883a 	add	r16,r16,r16
   156d0:	dd800015 	stw	r22,0(sp)
   156d4:	dc800415 	stw	r18,16(sp)
   156d8:	dc400515 	stw	r17,20(sp)
   156dc:	9429883a 	add	r20,r18,r16
   156e0:	b4404f2e 	bgeu	r22,r17,15820 <__multiply+0x214>
   156e4:	d8c00017 	ldw	r3,0(sp)
   156e8:	1c800017 	ldw	r18,0(r3)
   156ec:	947fffcc 	andi	r17,r18,65535
   156f0:	88001e26 	beq	r17,zero,1576c <__multiply+0x160>
   156f4:	dd800117 	ldw	r22,4(sp)
   156f8:	dd400417 	ldw	r21,16(sp)
   156fc:	0027883a 	mov	r19,zero
   15700:	ac800017 	ldw	r18,0(r21)
   15704:	b4000017 	ldw	r16,0(r22)
   15708:	880b883a 	mov	r5,r17
   1570c:	913fffcc 	andi	r4,r18,65535
   15710:	00051580 	call	5158 <__mulsi3>
   15714:	9008d43a 	srli	r4,r18,16
   15718:	84bfffcc 	andi	r18,r16,65535
   1571c:	1485883a 	add	r2,r2,r18
   15720:	14e5883a 	add	r18,r2,r19
   15724:	8020d43a 	srli	r16,r16,16
   15728:	9026d43a 	srli	r19,r18,16
   1572c:	880b883a 	mov	r5,r17
   15730:	00051580 	call	5158 <__mulsi3>
   15734:	1405883a 	add	r2,r2,r16
   15738:	14e1883a 	add	r16,r2,r19
   1573c:	90ffffcc 	andi	r3,r18,65535
   15740:	8024943a 	slli	r18,r16,16
   15744:	ad400104 	addi	r21,r21,4
   15748:	b005883a 	mov	r2,r22
   1574c:	90c6b03a 	or	r3,r18,r3
   15750:	b0c00015 	stw	r3,0(r22)
   15754:	8026d43a 	srli	r19,r16,16
   15758:	b5800104 	addi	r22,r22,4
   1575c:	ad3fe836 	bltu	r21,r20,15700 <__alt_mem_nios_system_shared_memory+0xfffd5700>
   15760:	d8c00017 	ldw	r3,0(sp)
   15764:	14c00115 	stw	r19,4(r2)
   15768:	1c800017 	ldw	r18,0(r3)
   1576c:	9024d43a 	srli	r18,r18,16
   15770:	90002226 	beq	r18,zero,157fc <__multiply+0x1f0>
   15774:	d8c00117 	ldw	r3,4(sp)
   15778:	dd800417 	ldw	r22,16(sp)
   1577c:	002f883a 	mov	r23,zero
   15780:	1f000017 	ldw	fp,0(r3)
   15784:	1823883a 	mov	r17,r3
   15788:	182b883a 	mov	r21,r3
   1578c:	e021883a 	mov	r16,fp
   15790:	00000106 	br	15798 <__multiply+0x18c>
   15794:	982b883a 	mov	r21,r19
   15798:	b100000b 	ldhu	r4,0(r22)
   1579c:	8020d43a 	srli	r16,r16,16
   157a0:	900b883a 	mov	r5,r18
   157a4:	00051580 	call	5158 <__mulsi3>
   157a8:	1405883a 	add	r2,r2,r16
   157ac:	15ef883a 	add	r23,r2,r23
   157b0:	b804943a 	slli	r2,r23,16
   157b4:	e0ffffcc 	andi	r3,fp,65535
   157b8:	8c400104 	addi	r17,r17,4
   157bc:	10c6b03a 	or	r3,r2,r3
   157c0:	88ffff15 	stw	r3,-4(r17)
   157c4:	b5800104 	addi	r22,r22,4
   157c8:	b13fff17 	ldw	r4,-4(r22)
   157cc:	acc00104 	addi	r19,r21,4
   157d0:	900b883a 	mov	r5,r18
   157d4:	2008d43a 	srli	r4,r4,16
   157d8:	9c000017 	ldw	r16,0(r19)
   157dc:	00051580 	call	5158 <__mulsi3>
   157e0:	b806d43a 	srli	r3,r23,16
   157e4:	813fffcc 	andi	r4,r16,65535
   157e8:	1105883a 	add	r2,r2,r4
   157ec:	10f9883a 	add	fp,r2,r3
   157f0:	e02ed43a 	srli	r23,fp,16
   157f4:	b53fe736 	bltu	r22,r20,15794 <__alt_mem_nios_system_shared_memory+0xfffd5794>
   157f8:	af000115 	stw	fp,4(r21)
   157fc:	d8c00017 	ldw	r3,0(sp)
   15800:	d9000517 	ldw	r4,20(sp)
   15804:	18c00104 	addi	r3,r3,4
   15808:	d8c00015 	stw	r3,0(sp)
   1580c:	d8c00117 	ldw	r3,4(sp)
   15810:	18c00104 	addi	r3,r3,4
   15814:	d8c00115 	stw	r3,4(sp)
   15818:	d8c00017 	ldw	r3,0(sp)
   1581c:	193fb136 	bltu	r3,r4,156e4 <__alt_mem_nios_system_shared_memory+0xfffd56e4>
   15820:	d8c00217 	ldw	r3,8(sp)
   15824:	00c00c0e 	bge	zero,r3,15858 <__multiply+0x24c>
   15828:	d8c00317 	ldw	r3,12(sp)
   1582c:	18bfff17 	ldw	r2,-4(r3)
   15830:	1d7fff04 	addi	r21,r3,-4
   15834:	10000326 	beq	r2,zero,15844 <__multiply+0x238>
   15838:	00000706 	br	15858 <__multiply+0x24c>
   1583c:	a8800017 	ldw	r2,0(r21)
   15840:	1000051e 	bne	r2,zero,15858 <__multiply+0x24c>
   15844:	d8c00217 	ldw	r3,8(sp)
   15848:	ad7fff04 	addi	r21,r21,-4
   1584c:	18ffffc4 	addi	r3,r3,-1
   15850:	d8c00215 	stw	r3,8(sp)
   15854:	183ff91e 	bne	r3,zero,1583c <__alt_mem_nios_system_shared_memory+0xfffd583c>
   15858:	d8c00617 	ldw	r3,24(sp)
   1585c:	d9000217 	ldw	r4,8(sp)
   15860:	1805883a 	mov	r2,r3
   15864:	19000415 	stw	r4,16(r3)
   15868:	dfc01017 	ldw	ra,64(sp)
   1586c:	df000f17 	ldw	fp,60(sp)
   15870:	ddc00e17 	ldw	r23,56(sp)
   15874:	dd800d17 	ldw	r22,52(sp)
   15878:	dd400c17 	ldw	r21,48(sp)
   1587c:	dd000b17 	ldw	r20,44(sp)
   15880:	dcc00a17 	ldw	r19,40(sp)
   15884:	dc800917 	ldw	r18,36(sp)
   15888:	dc400817 	ldw	r17,32(sp)
   1588c:	dc000717 	ldw	r16,28(sp)
   15890:	dec01104 	addi	sp,sp,68
   15894:	f800283a 	ret

00015898 <__pow5mult>:
   15898:	defffa04 	addi	sp,sp,-24
   1589c:	dcc00315 	stw	r19,12(sp)
   158a0:	dc000015 	stw	r16,0(sp)
   158a4:	dfc00515 	stw	ra,20(sp)
   158a8:	dd000415 	stw	r20,16(sp)
   158ac:	dc800215 	stw	r18,8(sp)
   158b0:	dc400115 	stw	r17,4(sp)
   158b4:	308000cc 	andi	r2,r6,3
   158b8:	3021883a 	mov	r16,r6
   158bc:	2027883a 	mov	r19,r4
   158c0:	10002f1e 	bne	r2,zero,15980 <__pow5mult+0xe8>
   158c4:	2825883a 	mov	r18,r5
   158c8:	8021d0ba 	srai	r16,r16,2
   158cc:	80001a26 	beq	r16,zero,15938 <__pow5mult+0xa0>
   158d0:	9c401217 	ldw	r17,72(r19)
   158d4:	8800061e 	bne	r17,zero,158f0 <__pow5mult+0x58>
   158d8:	00003406 	br	159ac <__pow5mult+0x114>
   158dc:	8021d07a 	srai	r16,r16,1
   158e0:	80001526 	beq	r16,zero,15938 <__pow5mult+0xa0>
   158e4:	88800017 	ldw	r2,0(r17)
   158e8:	10001c26 	beq	r2,zero,1595c <__pow5mult+0xc4>
   158ec:	1023883a 	mov	r17,r2
   158f0:	8080004c 	andi	r2,r16,1
   158f4:	103ff926 	beq	r2,zero,158dc <__alt_mem_nios_system_shared_memory+0xfffd58dc>
   158f8:	880d883a 	mov	r6,r17
   158fc:	900b883a 	mov	r5,r18
   15900:	9809883a 	mov	r4,r19
   15904:	001560c0 	call	1560c <__multiply>
   15908:	90001b26 	beq	r18,zero,15978 <__pow5mult+0xe0>
   1590c:	91000117 	ldw	r4,4(r18)
   15910:	98c01317 	ldw	r3,76(r19)
   15914:	8021d07a 	srai	r16,r16,1
   15918:	2109883a 	add	r4,r4,r4
   1591c:	2109883a 	add	r4,r4,r4
   15920:	1907883a 	add	r3,r3,r4
   15924:	19000017 	ldw	r4,0(r3)
   15928:	91000015 	stw	r4,0(r18)
   1592c:	1c800015 	stw	r18,0(r3)
   15930:	1025883a 	mov	r18,r2
   15934:	803feb1e 	bne	r16,zero,158e4 <__alt_mem_nios_system_shared_memory+0xfffd58e4>
   15938:	9005883a 	mov	r2,r18
   1593c:	dfc00517 	ldw	ra,20(sp)
   15940:	dd000417 	ldw	r20,16(sp)
   15944:	dcc00317 	ldw	r19,12(sp)
   15948:	dc800217 	ldw	r18,8(sp)
   1594c:	dc400117 	ldw	r17,4(sp)
   15950:	dc000017 	ldw	r16,0(sp)
   15954:	dec00604 	addi	sp,sp,24
   15958:	f800283a 	ret
   1595c:	880d883a 	mov	r6,r17
   15960:	880b883a 	mov	r5,r17
   15964:	9809883a 	mov	r4,r19
   15968:	001560c0 	call	1560c <__multiply>
   1596c:	88800015 	stw	r2,0(r17)
   15970:	10000015 	stw	zero,0(r2)
   15974:	003fdd06 	br	158ec <__alt_mem_nios_system_shared_memory+0xfffd58ec>
   15978:	1025883a 	mov	r18,r2
   1597c:	003fd706 	br	158dc <__alt_mem_nios_system_shared_memory+0xfffd58dc>
   15980:	10bfffc4 	addi	r2,r2,-1
   15984:	1085883a 	add	r2,r2,r2
   15988:	00c000b4 	movhi	r3,2
   1598c:	18faef04 	addi	r3,r3,-5188
   15990:	1085883a 	add	r2,r2,r2
   15994:	1885883a 	add	r2,r3,r2
   15998:	11800017 	ldw	r6,0(r2)
   1599c:	000f883a 	mov	r7,zero
   159a0:	001526c0 	call	1526c <__multadd>
   159a4:	1025883a 	mov	r18,r2
   159a8:	003fc706 	br	158c8 <__alt_mem_nios_system_shared_memory+0xfffd58c8>
   159ac:	05000044 	movi	r20,1
   159b0:	a00b883a 	mov	r5,r20
   159b4:	9809883a 	mov	r4,r19
   159b8:	001519c0 	call	1519c <_Balloc>
   159bc:	1023883a 	mov	r17,r2
   159c0:	00809c44 	movi	r2,625
   159c4:	88800515 	stw	r2,20(r17)
   159c8:	8d000415 	stw	r20,16(r17)
   159cc:	9c401215 	stw	r17,72(r19)
   159d0:	88000015 	stw	zero,0(r17)
   159d4:	003fc606 	br	158f0 <__alt_mem_nios_system_shared_memory+0xfffd58f0>

000159d8 <__lshift>:
   159d8:	defff904 	addi	sp,sp,-28
   159dc:	dd400515 	stw	r21,20(sp)
   159e0:	dcc00315 	stw	r19,12(sp)
   159e4:	302bd17a 	srai	r21,r6,5
   159e8:	2cc00417 	ldw	r19,16(r5)
   159ec:	28800217 	ldw	r2,8(r5)
   159f0:	dd000415 	stw	r20,16(sp)
   159f4:	ace7883a 	add	r19,r21,r19
   159f8:	dc800215 	stw	r18,8(sp)
   159fc:	dc400115 	stw	r17,4(sp)
   15a00:	dc000015 	stw	r16,0(sp)
   15a04:	dfc00615 	stw	ra,24(sp)
   15a08:	9c000044 	addi	r16,r19,1
   15a0c:	2823883a 	mov	r17,r5
   15a10:	3029883a 	mov	r20,r6
   15a14:	2025883a 	mov	r18,r4
   15a18:	29400117 	ldw	r5,4(r5)
   15a1c:	1400030e 	bge	r2,r16,15a2c <__lshift+0x54>
   15a20:	1085883a 	add	r2,r2,r2
   15a24:	29400044 	addi	r5,r5,1
   15a28:	143ffd16 	blt	r2,r16,15a20 <__alt_mem_nios_system_shared_memory+0xfffd5a20>
   15a2c:	9009883a 	mov	r4,r18
   15a30:	001519c0 	call	1519c <_Balloc>
   15a34:	10c00504 	addi	r3,r2,20
   15a38:	0540070e 	bge	zero,r21,15a58 <__lshift+0x80>
   15a3c:	ad6b883a 	add	r21,r21,r21
   15a40:	ad6b883a 	add	r21,r21,r21
   15a44:	1809883a 	mov	r4,r3
   15a48:	1d47883a 	add	r3,r3,r21
   15a4c:	20000015 	stw	zero,0(r4)
   15a50:	21000104 	addi	r4,r4,4
   15a54:	193ffd1e 	bne	r3,r4,15a4c <__alt_mem_nios_system_shared_memory+0xfffd5a4c>
   15a58:	8a000417 	ldw	r8,16(r17)
   15a5c:	89000504 	addi	r4,r17,20
   15a60:	a18007cc 	andi	r6,r20,31
   15a64:	4211883a 	add	r8,r8,r8
   15a68:	4211883a 	add	r8,r8,r8
   15a6c:	2211883a 	add	r8,r4,r8
   15a70:	30002326 	beq	r6,zero,15b00 <__lshift+0x128>
   15a74:	02400804 	movi	r9,32
   15a78:	4993c83a 	sub	r9,r9,r6
   15a7c:	000b883a 	mov	r5,zero
   15a80:	21c00017 	ldw	r7,0(r4)
   15a84:	1815883a 	mov	r10,r3
   15a88:	18c00104 	addi	r3,r3,4
   15a8c:	398e983a 	sll	r7,r7,r6
   15a90:	21000104 	addi	r4,r4,4
   15a94:	394ab03a 	or	r5,r7,r5
   15a98:	197fff15 	stw	r5,-4(r3)
   15a9c:	217fff17 	ldw	r5,-4(r4)
   15aa0:	2a4ad83a 	srl	r5,r5,r9
   15aa4:	223ff636 	bltu	r4,r8,15a80 <__alt_mem_nios_system_shared_memory+0xfffd5a80>
   15aa8:	51400115 	stw	r5,4(r10)
   15aac:	28001a1e 	bne	r5,zero,15b18 <__lshift+0x140>
   15ab0:	843fffc4 	addi	r16,r16,-1
   15ab4:	14000415 	stw	r16,16(r2)
   15ab8:	88000826 	beq	r17,zero,15adc <__lshift+0x104>
   15abc:	89000117 	ldw	r4,4(r17)
   15ac0:	90c01317 	ldw	r3,76(r18)
   15ac4:	2109883a 	add	r4,r4,r4
   15ac8:	2109883a 	add	r4,r4,r4
   15acc:	1907883a 	add	r3,r3,r4
   15ad0:	19000017 	ldw	r4,0(r3)
   15ad4:	89000015 	stw	r4,0(r17)
   15ad8:	1c400015 	stw	r17,0(r3)
   15adc:	dfc00617 	ldw	ra,24(sp)
   15ae0:	dd400517 	ldw	r21,20(sp)
   15ae4:	dd000417 	ldw	r20,16(sp)
   15ae8:	dcc00317 	ldw	r19,12(sp)
   15aec:	dc800217 	ldw	r18,8(sp)
   15af0:	dc400117 	ldw	r17,4(sp)
   15af4:	dc000017 	ldw	r16,0(sp)
   15af8:	dec00704 	addi	sp,sp,28
   15afc:	f800283a 	ret
   15b00:	21400017 	ldw	r5,0(r4)
   15b04:	18c00104 	addi	r3,r3,4
   15b08:	21000104 	addi	r4,r4,4
   15b0c:	197fff15 	stw	r5,-4(r3)
   15b10:	223ffb36 	bltu	r4,r8,15b00 <__alt_mem_nios_system_shared_memory+0xfffd5b00>
   15b14:	003fe606 	br	15ab0 <__alt_mem_nios_system_shared_memory+0xfffd5ab0>
   15b18:	9c000084 	addi	r16,r19,2
   15b1c:	003fe406 	br	15ab0 <__alt_mem_nios_system_shared_memory+0xfffd5ab0>

00015b20 <__mcmp>:
   15b20:	20800417 	ldw	r2,16(r4)
   15b24:	28c00417 	ldw	r3,16(r5)
   15b28:	10c5c83a 	sub	r2,r2,r3
   15b2c:	1000111e 	bne	r2,zero,15b74 <__mcmp+0x54>
   15b30:	18c7883a 	add	r3,r3,r3
   15b34:	18c7883a 	add	r3,r3,r3
   15b38:	21000504 	addi	r4,r4,20
   15b3c:	29400504 	addi	r5,r5,20
   15b40:	20c5883a 	add	r2,r4,r3
   15b44:	28cb883a 	add	r5,r5,r3
   15b48:	00000106 	br	15b50 <__mcmp+0x30>
   15b4c:	20800a2e 	bgeu	r4,r2,15b78 <__mcmp+0x58>
   15b50:	10bfff04 	addi	r2,r2,-4
   15b54:	297fff04 	addi	r5,r5,-4
   15b58:	11800017 	ldw	r6,0(r2)
   15b5c:	28c00017 	ldw	r3,0(r5)
   15b60:	30fffa26 	beq	r6,r3,15b4c <__alt_mem_nios_system_shared_memory+0xfffd5b4c>
   15b64:	30c00236 	bltu	r6,r3,15b70 <__mcmp+0x50>
   15b68:	00800044 	movi	r2,1
   15b6c:	f800283a 	ret
   15b70:	00bfffc4 	movi	r2,-1
   15b74:	f800283a 	ret
   15b78:	0005883a 	mov	r2,zero
   15b7c:	f800283a 	ret

00015b80 <__mdiff>:
   15b80:	28c00417 	ldw	r3,16(r5)
   15b84:	30800417 	ldw	r2,16(r6)
   15b88:	defffa04 	addi	sp,sp,-24
   15b8c:	dcc00315 	stw	r19,12(sp)
   15b90:	dc800215 	stw	r18,8(sp)
   15b94:	dfc00515 	stw	ra,20(sp)
   15b98:	dd000415 	stw	r20,16(sp)
   15b9c:	dc400115 	stw	r17,4(sp)
   15ba0:	dc000015 	stw	r16,0(sp)
   15ba4:	1887c83a 	sub	r3,r3,r2
   15ba8:	2825883a 	mov	r18,r5
   15bac:	3027883a 	mov	r19,r6
   15bb0:	1800141e 	bne	r3,zero,15c04 <__mdiff+0x84>
   15bb4:	1085883a 	add	r2,r2,r2
   15bb8:	1085883a 	add	r2,r2,r2
   15bbc:	2a000504 	addi	r8,r5,20
   15bc0:	34000504 	addi	r16,r6,20
   15bc4:	4087883a 	add	r3,r8,r2
   15bc8:	8085883a 	add	r2,r16,r2
   15bcc:	00000106 	br	15bd4 <__mdiff+0x54>
   15bd0:	40c0592e 	bgeu	r8,r3,15d38 <__mdiff+0x1b8>
   15bd4:	18ffff04 	addi	r3,r3,-4
   15bd8:	10bfff04 	addi	r2,r2,-4
   15bdc:	19c00017 	ldw	r7,0(r3)
   15be0:	11400017 	ldw	r5,0(r2)
   15be4:	397ffa26 	beq	r7,r5,15bd0 <__alt_mem_nios_system_shared_memory+0xfffd5bd0>
   15be8:	3940592e 	bgeu	r7,r5,15d50 <__mdiff+0x1d0>
   15bec:	9005883a 	mov	r2,r18
   15bf0:	4023883a 	mov	r17,r8
   15bf4:	9825883a 	mov	r18,r19
   15bf8:	05000044 	movi	r20,1
   15bfc:	1027883a 	mov	r19,r2
   15c00:	00000406 	br	15c14 <__mdiff+0x94>
   15c04:	18005616 	blt	r3,zero,15d60 <__mdiff+0x1e0>
   15c08:	34400504 	addi	r17,r6,20
   15c0c:	2c000504 	addi	r16,r5,20
   15c10:	0029883a 	mov	r20,zero
   15c14:	91400117 	ldw	r5,4(r18)
   15c18:	001519c0 	call	1519c <_Balloc>
   15c1c:	92400417 	ldw	r9,16(r18)
   15c20:	9b000417 	ldw	r12,16(r19)
   15c24:	12c00504 	addi	r11,r2,20
   15c28:	4a51883a 	add	r8,r9,r9
   15c2c:	6319883a 	add	r12,r12,r12
   15c30:	4211883a 	add	r8,r8,r8
   15c34:	6319883a 	add	r12,r12,r12
   15c38:	15000315 	stw	r20,12(r2)
   15c3c:	8211883a 	add	r8,r16,r8
   15c40:	8b19883a 	add	r12,r17,r12
   15c44:	0007883a 	mov	r3,zero
   15c48:	81400017 	ldw	r5,0(r16)
   15c4c:	89c00017 	ldw	r7,0(r17)
   15c50:	59800104 	addi	r6,r11,4
   15c54:	293fffcc 	andi	r4,r5,65535
   15c58:	20c7883a 	add	r3,r4,r3
   15c5c:	393fffcc 	andi	r4,r7,65535
   15c60:	1909c83a 	sub	r4,r3,r4
   15c64:	280ad43a 	srli	r5,r5,16
   15c68:	380ed43a 	srli	r7,r7,16
   15c6c:	2007d43a 	srai	r3,r4,16
   15c70:	213fffcc 	andi	r4,r4,65535
   15c74:	29cbc83a 	sub	r5,r5,r7
   15c78:	28c7883a 	add	r3,r5,r3
   15c7c:	180a943a 	slli	r5,r3,16
   15c80:	8c400104 	addi	r17,r17,4
   15c84:	84000104 	addi	r16,r16,4
   15c88:	2908b03a 	or	r4,r5,r4
   15c8c:	59000015 	stw	r4,0(r11)
   15c90:	1807d43a 	srai	r3,r3,16
   15c94:	3015883a 	mov	r10,r6
   15c98:	3017883a 	mov	r11,r6
   15c9c:	8b3fea36 	bltu	r17,r12,15c48 <__alt_mem_nios_system_shared_memory+0xfffd5c48>
   15ca0:	8200162e 	bgeu	r16,r8,15cfc <__mdiff+0x17c>
   15ca4:	8017883a 	mov	r11,r16
   15ca8:	59400017 	ldw	r5,0(r11)
   15cac:	31800104 	addi	r6,r6,4
   15cb0:	5ac00104 	addi	r11,r11,4
   15cb4:	293fffcc 	andi	r4,r5,65535
   15cb8:	20c7883a 	add	r3,r4,r3
   15cbc:	280ed43a 	srli	r7,r5,16
   15cc0:	180bd43a 	srai	r5,r3,16
   15cc4:	193fffcc 	andi	r4,r3,65535
   15cc8:	3947883a 	add	r3,r7,r5
   15ccc:	180a943a 	slli	r5,r3,16
   15cd0:	1807d43a 	srai	r3,r3,16
   15cd4:	2908b03a 	or	r4,r5,r4
   15cd8:	313fff15 	stw	r4,-4(r6)
   15cdc:	5a3ff236 	bltu	r11,r8,15ca8 <__alt_mem_nios_system_shared_memory+0xfffd5ca8>
   15ce0:	0406303a 	nor	r3,zero,r16
   15ce4:	1a07883a 	add	r3,r3,r8
   15ce8:	1806d0ba 	srli	r3,r3,2
   15cec:	18c00044 	addi	r3,r3,1
   15cf0:	18c7883a 	add	r3,r3,r3
   15cf4:	18c7883a 	add	r3,r3,r3
   15cf8:	50d5883a 	add	r10,r10,r3
   15cfc:	50ffff04 	addi	r3,r10,-4
   15d00:	2000041e 	bne	r4,zero,15d14 <__mdiff+0x194>
   15d04:	18ffff04 	addi	r3,r3,-4
   15d08:	19000017 	ldw	r4,0(r3)
   15d0c:	4a7fffc4 	addi	r9,r9,-1
   15d10:	203ffc26 	beq	r4,zero,15d04 <__alt_mem_nios_system_shared_memory+0xfffd5d04>
   15d14:	12400415 	stw	r9,16(r2)
   15d18:	dfc00517 	ldw	ra,20(sp)
   15d1c:	dd000417 	ldw	r20,16(sp)
   15d20:	dcc00317 	ldw	r19,12(sp)
   15d24:	dc800217 	ldw	r18,8(sp)
   15d28:	dc400117 	ldw	r17,4(sp)
   15d2c:	dc000017 	ldw	r16,0(sp)
   15d30:	dec00604 	addi	sp,sp,24
   15d34:	f800283a 	ret
   15d38:	000b883a 	mov	r5,zero
   15d3c:	001519c0 	call	1519c <_Balloc>
   15d40:	00c00044 	movi	r3,1
   15d44:	10c00415 	stw	r3,16(r2)
   15d48:	10000515 	stw	zero,20(r2)
   15d4c:	003ff206 	br	15d18 <__alt_mem_nios_system_shared_memory+0xfffd5d18>
   15d50:	8023883a 	mov	r17,r16
   15d54:	0029883a 	mov	r20,zero
   15d58:	4021883a 	mov	r16,r8
   15d5c:	003fad06 	br	15c14 <__alt_mem_nios_system_shared_memory+0xfffd5c14>
   15d60:	9005883a 	mov	r2,r18
   15d64:	94400504 	addi	r17,r18,20
   15d68:	9c000504 	addi	r16,r19,20
   15d6c:	9825883a 	mov	r18,r19
   15d70:	05000044 	movi	r20,1
   15d74:	1027883a 	mov	r19,r2
   15d78:	003fa606 	br	15c14 <__alt_mem_nios_system_shared_memory+0xfffd5c14>

00015d7c <__ulp>:
   15d7c:	295ffc2c 	andhi	r5,r5,32752
   15d80:	00bf3034 	movhi	r2,64704
   15d84:	2887883a 	add	r3,r5,r2
   15d88:	00c0020e 	bge	zero,r3,15d94 <__ulp+0x18>
   15d8c:	0005883a 	mov	r2,zero
   15d90:	f800283a 	ret
   15d94:	00c7c83a 	sub	r3,zero,r3
   15d98:	1807d53a 	srai	r3,r3,20
   15d9c:	008004c4 	movi	r2,19
   15da0:	10c00b0e 	bge	r2,r3,15dd0 <__ulp+0x54>
   15da4:	18bffb04 	addi	r2,r3,-20
   15da8:	01000784 	movi	r4,30
   15dac:	0007883a 	mov	r3,zero
   15db0:	20800516 	blt	r4,r2,15dc8 <__ulp+0x4c>
   15db4:	010007c4 	movi	r4,31
   15db8:	2089c83a 	sub	r4,r4,r2
   15dbc:	00800044 	movi	r2,1
   15dc0:	1104983a 	sll	r2,r2,r4
   15dc4:	f800283a 	ret
   15dc8:	00800044 	movi	r2,1
   15dcc:	f800283a 	ret
   15dd0:	01400234 	movhi	r5,8
   15dd4:	28c7d83a 	sra	r3,r5,r3
   15dd8:	0005883a 	mov	r2,zero
   15ddc:	f800283a 	ret

00015de0 <__b2d>:
   15de0:	defffa04 	addi	sp,sp,-24
   15de4:	dc000015 	stw	r16,0(sp)
   15de8:	24000417 	ldw	r16,16(r4)
   15dec:	dc400115 	stw	r17,4(sp)
   15df0:	24400504 	addi	r17,r4,20
   15df4:	8421883a 	add	r16,r16,r16
   15df8:	8421883a 	add	r16,r16,r16
   15dfc:	8c21883a 	add	r16,r17,r16
   15e00:	dc800215 	stw	r18,8(sp)
   15e04:	84bfff17 	ldw	r18,-4(r16)
   15e08:	dd000415 	stw	r20,16(sp)
   15e0c:	dcc00315 	stw	r19,12(sp)
   15e10:	9009883a 	mov	r4,r18
   15e14:	2829883a 	mov	r20,r5
   15e18:	dfc00515 	stw	ra,20(sp)
   15e1c:	00154b80 	call	154b8 <__hi0bits>
   15e20:	00c00804 	movi	r3,32
   15e24:	1889c83a 	sub	r4,r3,r2
   15e28:	a1000015 	stw	r4,0(r20)
   15e2c:	01000284 	movi	r4,10
   15e30:	84ffff04 	addi	r19,r16,-4
   15e34:	20801216 	blt	r4,r2,15e80 <__b2d+0xa0>
   15e38:	018002c4 	movi	r6,11
   15e3c:	308dc83a 	sub	r6,r6,r2
   15e40:	9186d83a 	srl	r3,r18,r6
   15e44:	18cffc34 	orhi	r3,r3,16368
   15e48:	8cc0212e 	bgeu	r17,r19,15ed0 <__b2d+0xf0>
   15e4c:	813ffe17 	ldw	r4,-8(r16)
   15e50:	218cd83a 	srl	r6,r4,r6
   15e54:	10800544 	addi	r2,r2,21
   15e58:	9084983a 	sll	r2,r18,r2
   15e5c:	1184b03a 	or	r2,r2,r6
   15e60:	dfc00517 	ldw	ra,20(sp)
   15e64:	dd000417 	ldw	r20,16(sp)
   15e68:	dcc00317 	ldw	r19,12(sp)
   15e6c:	dc800217 	ldw	r18,8(sp)
   15e70:	dc400117 	ldw	r17,4(sp)
   15e74:	dc000017 	ldw	r16,0(sp)
   15e78:	dec00604 	addi	sp,sp,24
   15e7c:	f800283a 	ret
   15e80:	8cc00f2e 	bgeu	r17,r19,15ec0 <__b2d+0xe0>
   15e84:	117ffd44 	addi	r5,r2,-11
   15e88:	80bffe17 	ldw	r2,-8(r16)
   15e8c:	28000e26 	beq	r5,zero,15ec8 <__b2d+0xe8>
   15e90:	1949c83a 	sub	r4,r3,r5
   15e94:	9164983a 	sll	r18,r18,r5
   15e98:	1106d83a 	srl	r3,r2,r4
   15e9c:	81bffe04 	addi	r6,r16,-8
   15ea0:	948ffc34 	orhi	r18,r18,16368
   15ea4:	90c6b03a 	or	r3,r18,r3
   15ea8:	89800e2e 	bgeu	r17,r6,15ee4 <__b2d+0x104>
   15eac:	81bffd17 	ldw	r6,-12(r16)
   15eb0:	1144983a 	sll	r2,r2,r5
   15eb4:	310ad83a 	srl	r5,r6,r4
   15eb8:	2884b03a 	or	r2,r5,r2
   15ebc:	003fe806 	br	15e60 <__alt_mem_nios_system_shared_memory+0xfffd5e60>
   15ec0:	10bffd44 	addi	r2,r2,-11
   15ec4:	1000041e 	bne	r2,zero,15ed8 <__b2d+0xf8>
   15ec8:	90cffc34 	orhi	r3,r18,16368
   15ecc:	003fe406 	br	15e60 <__alt_mem_nios_system_shared_memory+0xfffd5e60>
   15ed0:	000d883a 	mov	r6,zero
   15ed4:	003fdf06 	br	15e54 <__alt_mem_nios_system_shared_memory+0xfffd5e54>
   15ed8:	90a4983a 	sll	r18,r18,r2
   15edc:	0005883a 	mov	r2,zero
   15ee0:	003ff906 	br	15ec8 <__alt_mem_nios_system_shared_memory+0xfffd5ec8>
   15ee4:	1144983a 	sll	r2,r2,r5
   15ee8:	003fdd06 	br	15e60 <__alt_mem_nios_system_shared_memory+0xfffd5e60>

00015eec <__d2b>:
   15eec:	defff804 	addi	sp,sp,-32
   15ef0:	dc000215 	stw	r16,8(sp)
   15ef4:	3021883a 	mov	r16,r6
   15ef8:	dc400315 	stw	r17,12(sp)
   15efc:	8022907a 	slli	r17,r16,1
   15f00:	dd000615 	stw	r20,24(sp)
   15f04:	2829883a 	mov	r20,r5
   15f08:	01400044 	movi	r5,1
   15f0c:	dcc00515 	stw	r19,20(sp)
   15f10:	dc800415 	stw	r18,16(sp)
   15f14:	dfc00715 	stw	ra,28(sp)
   15f18:	3825883a 	mov	r18,r7
   15f1c:	8822d57a 	srli	r17,r17,21
   15f20:	001519c0 	call	1519c <_Balloc>
   15f24:	1027883a 	mov	r19,r2
   15f28:	00800434 	movhi	r2,16
   15f2c:	10bfffc4 	addi	r2,r2,-1
   15f30:	808c703a 	and	r6,r16,r2
   15f34:	88000126 	beq	r17,zero,15f3c <__d2b+0x50>
   15f38:	31800434 	orhi	r6,r6,16
   15f3c:	d9800015 	stw	r6,0(sp)
   15f40:	a0002426 	beq	r20,zero,15fd4 <__d2b+0xe8>
   15f44:	d9000104 	addi	r4,sp,4
   15f48:	dd000115 	stw	r20,4(sp)
   15f4c:	00155200 	call	15520 <__lo0bits>
   15f50:	d8c00017 	ldw	r3,0(sp)
   15f54:	10002f1e 	bne	r2,zero,16014 <__d2b+0x128>
   15f58:	d9000117 	ldw	r4,4(sp)
   15f5c:	99000515 	stw	r4,20(r19)
   15f60:	1821003a 	cmpeq	r16,r3,zero
   15f64:	01000084 	movi	r4,2
   15f68:	2421c83a 	sub	r16,r4,r16
   15f6c:	98c00615 	stw	r3,24(r19)
   15f70:	9c000415 	stw	r16,16(r19)
   15f74:	88001f1e 	bne	r17,zero,15ff4 <__d2b+0x108>
   15f78:	10bef384 	addi	r2,r2,-1074
   15f7c:	90800015 	stw	r2,0(r18)
   15f80:	00900034 	movhi	r2,16384
   15f84:	10bfffc4 	addi	r2,r2,-1
   15f88:	8085883a 	add	r2,r16,r2
   15f8c:	1085883a 	add	r2,r2,r2
   15f90:	1085883a 	add	r2,r2,r2
   15f94:	9885883a 	add	r2,r19,r2
   15f98:	11000517 	ldw	r4,20(r2)
   15f9c:	8020917a 	slli	r16,r16,5
   15fa0:	00154b80 	call	154b8 <__hi0bits>
   15fa4:	d8c00817 	ldw	r3,32(sp)
   15fa8:	8085c83a 	sub	r2,r16,r2
   15fac:	18800015 	stw	r2,0(r3)
   15fb0:	9805883a 	mov	r2,r19
   15fb4:	dfc00717 	ldw	ra,28(sp)
   15fb8:	dd000617 	ldw	r20,24(sp)
   15fbc:	dcc00517 	ldw	r19,20(sp)
   15fc0:	dc800417 	ldw	r18,16(sp)
   15fc4:	dc400317 	ldw	r17,12(sp)
   15fc8:	dc000217 	ldw	r16,8(sp)
   15fcc:	dec00804 	addi	sp,sp,32
   15fd0:	f800283a 	ret
   15fd4:	d809883a 	mov	r4,sp
   15fd8:	00155200 	call	15520 <__lo0bits>
   15fdc:	d8c00017 	ldw	r3,0(sp)
   15fe0:	04000044 	movi	r16,1
   15fe4:	9c000415 	stw	r16,16(r19)
   15fe8:	98c00515 	stw	r3,20(r19)
   15fec:	10800804 	addi	r2,r2,32
   15ff0:	883fe126 	beq	r17,zero,15f78 <__alt_mem_nios_system_shared_memory+0xfffd5f78>
   15ff4:	00c00d44 	movi	r3,53
   15ff8:	8c7ef344 	addi	r17,r17,-1075
   15ffc:	88a3883a 	add	r17,r17,r2
   16000:	1885c83a 	sub	r2,r3,r2
   16004:	d8c00817 	ldw	r3,32(sp)
   16008:	94400015 	stw	r17,0(r18)
   1600c:	18800015 	stw	r2,0(r3)
   16010:	003fe706 	br	15fb0 <__alt_mem_nios_system_shared_memory+0xfffd5fb0>
   16014:	01000804 	movi	r4,32
   16018:	2089c83a 	sub	r4,r4,r2
   1601c:	1908983a 	sll	r4,r3,r4
   16020:	d9400117 	ldw	r5,4(sp)
   16024:	1886d83a 	srl	r3,r3,r2
   16028:	2148b03a 	or	r4,r4,r5
   1602c:	99000515 	stw	r4,20(r19)
   16030:	d8c00015 	stw	r3,0(sp)
   16034:	003fca06 	br	15f60 <__alt_mem_nios_system_shared_memory+0xfffd5f60>

00016038 <__ratio>:
   16038:	defff904 	addi	sp,sp,-28
   1603c:	dc400315 	stw	r17,12(sp)
   16040:	2823883a 	mov	r17,r5
   16044:	d9400104 	addi	r5,sp,4
   16048:	dfc00615 	stw	ra,24(sp)
   1604c:	dcc00515 	stw	r19,20(sp)
   16050:	dc800415 	stw	r18,16(sp)
   16054:	2027883a 	mov	r19,r4
   16058:	dc000215 	stw	r16,8(sp)
   1605c:	0015de00 	call	15de0 <__b2d>
   16060:	d80b883a 	mov	r5,sp
   16064:	8809883a 	mov	r4,r17
   16068:	1025883a 	mov	r18,r2
   1606c:	1821883a 	mov	r16,r3
   16070:	0015de00 	call	15de0 <__b2d>
   16074:	8a000417 	ldw	r8,16(r17)
   16078:	99000417 	ldw	r4,16(r19)
   1607c:	d9400117 	ldw	r5,4(sp)
   16080:	2209c83a 	sub	r4,r4,r8
   16084:	2010917a 	slli	r8,r4,5
   16088:	d9000017 	ldw	r4,0(sp)
   1608c:	2909c83a 	sub	r4,r5,r4
   16090:	4109883a 	add	r4,r8,r4
   16094:	01000e0e 	bge	zero,r4,160d0 <__ratio+0x98>
   16098:	2008953a 	slli	r4,r4,20
   1609c:	2421883a 	add	r16,r4,r16
   160a0:	100d883a 	mov	r6,r2
   160a4:	180f883a 	mov	r7,r3
   160a8:	9009883a 	mov	r4,r18
   160ac:	800b883a 	mov	r5,r16
   160b0:	00070580 	call	7058 <__divdf3>
   160b4:	dfc00617 	ldw	ra,24(sp)
   160b8:	dcc00517 	ldw	r19,20(sp)
   160bc:	dc800417 	ldw	r18,16(sp)
   160c0:	dc400317 	ldw	r17,12(sp)
   160c4:	dc000217 	ldw	r16,8(sp)
   160c8:	dec00704 	addi	sp,sp,28
   160cc:	f800283a 	ret
   160d0:	2008953a 	slli	r4,r4,20
   160d4:	1907c83a 	sub	r3,r3,r4
   160d8:	003ff106 	br	160a0 <__alt_mem_nios_system_shared_memory+0xfffd60a0>

000160dc <_mprec_log10>:
   160dc:	defffe04 	addi	sp,sp,-8
   160e0:	dc000015 	stw	r16,0(sp)
   160e4:	dfc00115 	stw	ra,4(sp)
   160e8:	008005c4 	movi	r2,23
   160ec:	2021883a 	mov	r16,r4
   160f0:	11000d0e 	bge	r2,r4,16128 <_mprec_log10+0x4c>
   160f4:	0005883a 	mov	r2,zero
   160f8:	00cffc34 	movhi	r3,16368
   160fc:	843fffc4 	addi	r16,r16,-1
   16100:	000d883a 	mov	r6,zero
   16104:	01d00934 	movhi	r7,16420
   16108:	1009883a 	mov	r4,r2
   1610c:	180b883a 	mov	r5,r3
   16110:	0007c800 	call	7c80 <__muldf3>
   16114:	803ff91e 	bne	r16,zero,160fc <__alt_mem_nios_system_shared_memory+0xfffd60fc>
   16118:	dfc00117 	ldw	ra,4(sp)
   1611c:	dc000017 	ldw	r16,0(sp)
   16120:	dec00204 	addi	sp,sp,8
   16124:	f800283a 	ret
   16128:	202090fa 	slli	r16,r4,3
   1612c:	008000b4 	movhi	r2,2
   16130:	10bb0604 	addi	r2,r2,-5096
   16134:	1421883a 	add	r16,r2,r16
   16138:	80800017 	ldw	r2,0(r16)
   1613c:	80c00117 	ldw	r3,4(r16)
   16140:	dfc00117 	ldw	ra,4(sp)
   16144:	dc000017 	ldw	r16,0(sp)
   16148:	dec00204 	addi	sp,sp,8
   1614c:	f800283a 	ret

00016150 <__copybits>:
   16150:	297fffc4 	addi	r5,r5,-1
   16154:	280fd17a 	srai	r7,r5,5
   16158:	30c00417 	ldw	r3,16(r6)
   1615c:	30800504 	addi	r2,r6,20
   16160:	39c00044 	addi	r7,r7,1
   16164:	18c7883a 	add	r3,r3,r3
   16168:	39cf883a 	add	r7,r7,r7
   1616c:	18c7883a 	add	r3,r3,r3
   16170:	39cf883a 	add	r7,r7,r7
   16174:	10c7883a 	add	r3,r2,r3
   16178:	21cf883a 	add	r7,r4,r7
   1617c:	10c00d2e 	bgeu	r2,r3,161b4 <__copybits+0x64>
   16180:	200b883a 	mov	r5,r4
   16184:	12000017 	ldw	r8,0(r2)
   16188:	29400104 	addi	r5,r5,4
   1618c:	10800104 	addi	r2,r2,4
   16190:	2a3fff15 	stw	r8,-4(r5)
   16194:	10fffb36 	bltu	r2,r3,16184 <__alt_mem_nios_system_shared_memory+0xfffd6184>
   16198:	1985c83a 	sub	r2,r3,r6
   1619c:	10bffac4 	addi	r2,r2,-21
   161a0:	1004d0ba 	srli	r2,r2,2
   161a4:	10800044 	addi	r2,r2,1
   161a8:	1085883a 	add	r2,r2,r2
   161ac:	1085883a 	add	r2,r2,r2
   161b0:	2089883a 	add	r4,r4,r2
   161b4:	21c0032e 	bgeu	r4,r7,161c4 <__copybits+0x74>
   161b8:	20000015 	stw	zero,0(r4)
   161bc:	21000104 	addi	r4,r4,4
   161c0:	21fffd36 	bltu	r4,r7,161b8 <__alt_mem_nios_system_shared_memory+0xfffd61b8>
   161c4:	f800283a 	ret

000161c8 <__any_on>:
   161c8:	20c00417 	ldw	r3,16(r4)
   161cc:	2805d17a 	srai	r2,r5,5
   161d0:	21000504 	addi	r4,r4,20
   161d4:	18800d0e 	bge	r3,r2,1620c <__any_on+0x44>
   161d8:	18c7883a 	add	r3,r3,r3
   161dc:	18c7883a 	add	r3,r3,r3
   161e0:	20c7883a 	add	r3,r4,r3
   161e4:	20c0192e 	bgeu	r4,r3,1624c <__any_on+0x84>
   161e8:	18bfff17 	ldw	r2,-4(r3)
   161ec:	18ffff04 	addi	r3,r3,-4
   161f0:	1000041e 	bne	r2,zero,16204 <__any_on+0x3c>
   161f4:	20c0142e 	bgeu	r4,r3,16248 <__any_on+0x80>
   161f8:	18ffff04 	addi	r3,r3,-4
   161fc:	19400017 	ldw	r5,0(r3)
   16200:	283ffc26 	beq	r5,zero,161f4 <__alt_mem_nios_system_shared_memory+0xfffd61f4>
   16204:	00800044 	movi	r2,1
   16208:	f800283a 	ret
   1620c:	10c00a0e 	bge	r2,r3,16238 <__any_on+0x70>
   16210:	1085883a 	add	r2,r2,r2
   16214:	1085883a 	add	r2,r2,r2
   16218:	294007cc 	andi	r5,r5,31
   1621c:	2087883a 	add	r3,r4,r2
   16220:	283ff026 	beq	r5,zero,161e4 <__alt_mem_nios_system_shared_memory+0xfffd61e4>
   16224:	19800017 	ldw	r6,0(r3)
   16228:	3144d83a 	srl	r2,r6,r5
   1622c:	114a983a 	sll	r5,r2,r5
   16230:	317ff41e 	bne	r6,r5,16204 <__alt_mem_nios_system_shared_memory+0xfffd6204>
   16234:	003feb06 	br	161e4 <__alt_mem_nios_system_shared_memory+0xfffd61e4>
   16238:	1085883a 	add	r2,r2,r2
   1623c:	1085883a 	add	r2,r2,r2
   16240:	2087883a 	add	r3,r4,r2
   16244:	003fe706 	br	161e4 <__alt_mem_nios_system_shared_memory+0xfffd61e4>
   16248:	f800283a 	ret
   1624c:	0005883a 	mov	r2,zero
   16250:	f800283a 	ret

00016254 <_putc_r>:
   16254:	defffc04 	addi	sp,sp,-16
   16258:	dc000215 	stw	r16,8(sp)
   1625c:	dfc00315 	stw	ra,12(sp)
   16260:	2021883a 	mov	r16,r4
   16264:	20000226 	beq	r4,zero,16270 <_putc_r+0x1c>
   16268:	20800e17 	ldw	r2,56(r4)
   1626c:	10001b26 	beq	r2,zero,162dc <_putc_r+0x88>
   16270:	30800217 	ldw	r2,8(r6)
   16274:	10bfffc4 	addi	r2,r2,-1
   16278:	30800215 	stw	r2,8(r6)
   1627c:	10000a16 	blt	r2,zero,162a8 <_putc_r+0x54>
   16280:	30800017 	ldw	r2,0(r6)
   16284:	11400005 	stb	r5,0(r2)
   16288:	30800017 	ldw	r2,0(r6)
   1628c:	10c00044 	addi	r3,r2,1
   16290:	30c00015 	stw	r3,0(r6)
   16294:	10800003 	ldbu	r2,0(r2)
   16298:	dfc00317 	ldw	ra,12(sp)
   1629c:	dc000217 	ldw	r16,8(sp)
   162a0:	dec00404 	addi	sp,sp,16
   162a4:	f800283a 	ret
   162a8:	30c00617 	ldw	r3,24(r6)
   162ac:	10c00616 	blt	r2,r3,162c8 <_putc_r+0x74>
   162b0:	30800017 	ldw	r2,0(r6)
   162b4:	00c00284 	movi	r3,10
   162b8:	11400005 	stb	r5,0(r2)
   162bc:	30800017 	ldw	r2,0(r6)
   162c0:	11400003 	ldbu	r5,0(r2)
   162c4:	28fff11e 	bne	r5,r3,1628c <__alt_mem_nios_system_shared_memory+0xfffd628c>
   162c8:	8009883a 	mov	r4,r16
   162cc:	dfc00317 	ldw	ra,12(sp)
   162d0:	dc000217 	ldw	r16,8(sp)
   162d4:	dec00404 	addi	sp,sp,16
   162d8:	00198901 	jmpi	19890 <__swbuf_r>
   162dc:	d9400015 	stw	r5,0(sp)
   162e0:	d9800115 	stw	r6,4(sp)
   162e4:	00099c00 	call	99c0 <__sinit>
   162e8:	d9800117 	ldw	r6,4(sp)
   162ec:	d9400017 	ldw	r5,0(sp)
   162f0:	003fdf06 	br	16270 <__alt_mem_nios_system_shared_memory+0xfffd6270>

000162f4 <putc>:
   162f4:	008000b4 	movhi	r2,2
   162f8:	defffc04 	addi	sp,sp,-16
   162fc:	10824204 	addi	r2,r2,2312
   16300:	dc000115 	stw	r16,4(sp)
   16304:	14000017 	ldw	r16,0(r2)
   16308:	dc400215 	stw	r17,8(sp)
   1630c:	dfc00315 	stw	ra,12(sp)
   16310:	2023883a 	mov	r17,r4
   16314:	80000226 	beq	r16,zero,16320 <putc+0x2c>
   16318:	80800e17 	ldw	r2,56(r16)
   1631c:	10001a26 	beq	r2,zero,16388 <putc+0x94>
   16320:	28800217 	ldw	r2,8(r5)
   16324:	10bfffc4 	addi	r2,r2,-1
   16328:	28800215 	stw	r2,8(r5)
   1632c:	10000b16 	blt	r2,zero,1635c <putc+0x68>
   16330:	28800017 	ldw	r2,0(r5)
   16334:	14400005 	stb	r17,0(r2)
   16338:	28800017 	ldw	r2,0(r5)
   1633c:	10c00044 	addi	r3,r2,1
   16340:	28c00015 	stw	r3,0(r5)
   16344:	10800003 	ldbu	r2,0(r2)
   16348:	dfc00317 	ldw	ra,12(sp)
   1634c:	dc400217 	ldw	r17,8(sp)
   16350:	dc000117 	ldw	r16,4(sp)
   16354:	dec00404 	addi	sp,sp,16
   16358:	f800283a 	ret
   1635c:	28c00617 	ldw	r3,24(r5)
   16360:	10c00e16 	blt	r2,r3,1639c <putc+0xa8>
   16364:	28800017 	ldw	r2,0(r5)
   16368:	01000284 	movi	r4,10
   1636c:	14400005 	stb	r17,0(r2)
   16370:	28800017 	ldw	r2,0(r5)
   16374:	10c00003 	ldbu	r3,0(r2)
   16378:	193ff01e 	bne	r3,r4,1633c <__alt_mem_nios_system_shared_memory+0xfffd633c>
   1637c:	280d883a 	mov	r6,r5
   16380:	180b883a 	mov	r5,r3
   16384:	00000706 	br	163a4 <putc+0xb0>
   16388:	8009883a 	mov	r4,r16
   1638c:	d9400015 	stw	r5,0(sp)
   16390:	00099c00 	call	99c0 <__sinit>
   16394:	d9400017 	ldw	r5,0(sp)
   16398:	003fe106 	br	16320 <__alt_mem_nios_system_shared_memory+0xfffd6320>
   1639c:	280d883a 	mov	r6,r5
   163a0:	880b883a 	mov	r5,r17
   163a4:	8009883a 	mov	r4,r16
   163a8:	dfc00317 	ldw	ra,12(sp)
   163ac:	dc400217 	ldw	r17,8(sp)
   163b0:	dc000117 	ldw	r16,4(sp)
   163b4:	dec00404 	addi	sp,sp,16
   163b8:	00198901 	jmpi	19890 <__swbuf_r>

000163bc <_read_r>:
   163bc:	defffd04 	addi	sp,sp,-12
   163c0:	2805883a 	mov	r2,r5
   163c4:	dc000015 	stw	r16,0(sp)
   163c8:	040000b4 	movhi	r16,2
   163cc:	dc400115 	stw	r17,4(sp)
   163d0:	300b883a 	mov	r5,r6
   163d4:	84094804 	addi	r16,r16,9504
   163d8:	2023883a 	mov	r17,r4
   163dc:	380d883a 	mov	r6,r7
   163e0:	1009883a 	mov	r4,r2
   163e4:	dfc00215 	stw	ra,8(sp)
   163e8:	80000015 	stw	zero,0(r16)
   163ec:	001b6180 	call	1b618 <read>
   163f0:	00ffffc4 	movi	r3,-1
   163f4:	10c00526 	beq	r2,r3,1640c <_read_r+0x50>
   163f8:	dfc00217 	ldw	ra,8(sp)
   163fc:	dc400117 	ldw	r17,4(sp)
   16400:	dc000017 	ldw	r16,0(sp)
   16404:	dec00304 	addi	sp,sp,12
   16408:	f800283a 	ret
   1640c:	80c00017 	ldw	r3,0(r16)
   16410:	183ff926 	beq	r3,zero,163f8 <__alt_mem_nios_system_shared_memory+0xfffd63f8>
   16414:	88c00015 	stw	r3,0(r17)
   16418:	003ff706 	br	163f8 <__alt_mem_nios_system_shared_memory+0xfffd63f8>

0001641c <_realloc_r>:
   1641c:	defff604 	addi	sp,sp,-40
   16420:	dc800215 	stw	r18,8(sp)
   16424:	dfc00915 	stw	ra,36(sp)
   16428:	df000815 	stw	fp,32(sp)
   1642c:	ddc00715 	stw	r23,28(sp)
   16430:	dd800615 	stw	r22,24(sp)
   16434:	dd400515 	stw	r21,20(sp)
   16438:	dd000415 	stw	r20,16(sp)
   1643c:	dcc00315 	stw	r19,12(sp)
   16440:	dc400115 	stw	r17,4(sp)
   16444:	dc000015 	stw	r16,0(sp)
   16448:	3025883a 	mov	r18,r6
   1644c:	2800b726 	beq	r5,zero,1672c <_realloc_r+0x310>
   16450:	282b883a 	mov	r21,r5
   16454:	2029883a 	mov	r20,r4
   16458:	001b3100 	call	1b310 <__malloc_lock>
   1645c:	a8bfff17 	ldw	r2,-4(r21)
   16460:	043fff04 	movi	r16,-4
   16464:	90c002c4 	addi	r3,r18,11
   16468:	01000584 	movi	r4,22
   1646c:	acfffe04 	addi	r19,r21,-8
   16470:	1420703a 	and	r16,r2,r16
   16474:	20c0332e 	bgeu	r4,r3,16544 <_realloc_r+0x128>
   16478:	047ffe04 	movi	r17,-8
   1647c:	1c62703a 	and	r17,r3,r17
   16480:	8807883a 	mov	r3,r17
   16484:	88005816 	blt	r17,zero,165e8 <_realloc_r+0x1cc>
   16488:	8c805736 	bltu	r17,r18,165e8 <_realloc_r+0x1cc>
   1648c:	80c0300e 	bge	r16,r3,16550 <_realloc_r+0x134>
   16490:	070000b4 	movhi	fp,2
   16494:	e73c6904 	addi	fp,fp,-3676
   16498:	e1c00217 	ldw	r7,8(fp)
   1649c:	9c09883a 	add	r4,r19,r16
   164a0:	22000117 	ldw	r8,4(r4)
   164a4:	21c06326 	beq	r4,r7,16634 <_realloc_r+0x218>
   164a8:	017fff84 	movi	r5,-2
   164ac:	414a703a 	and	r5,r8,r5
   164b0:	214b883a 	add	r5,r4,r5
   164b4:	29800117 	ldw	r6,4(r5)
   164b8:	3180004c 	andi	r6,r6,1
   164bc:	30003f26 	beq	r6,zero,165bc <_realloc_r+0x1a0>
   164c0:	1080004c 	andi	r2,r2,1
   164c4:	10008326 	beq	r2,zero,166d4 <_realloc_r+0x2b8>
   164c8:	900b883a 	mov	r5,r18
   164cc:	a009883a 	mov	r4,r20
   164d0:	000a7bc0 	call	a7bc <_malloc_r>
   164d4:	1025883a 	mov	r18,r2
   164d8:	10011e26 	beq	r2,zero,16954 <_realloc_r+0x538>
   164dc:	a93fff17 	ldw	r4,-4(r21)
   164e0:	10fffe04 	addi	r3,r2,-8
   164e4:	00bfff84 	movi	r2,-2
   164e8:	2084703a 	and	r2,r4,r2
   164ec:	9885883a 	add	r2,r19,r2
   164f0:	1880ee26 	beq	r3,r2,168ac <_realloc_r+0x490>
   164f4:	81bfff04 	addi	r6,r16,-4
   164f8:	00800904 	movi	r2,36
   164fc:	1180b836 	bltu	r2,r6,167e0 <_realloc_r+0x3c4>
   16500:	00c004c4 	movi	r3,19
   16504:	19809636 	bltu	r3,r6,16760 <_realloc_r+0x344>
   16508:	9005883a 	mov	r2,r18
   1650c:	a807883a 	mov	r3,r21
   16510:	19000017 	ldw	r4,0(r3)
   16514:	11000015 	stw	r4,0(r2)
   16518:	19000117 	ldw	r4,4(r3)
   1651c:	11000115 	stw	r4,4(r2)
   16520:	18c00217 	ldw	r3,8(r3)
   16524:	10c00215 	stw	r3,8(r2)
   16528:	a80b883a 	mov	r5,r21
   1652c:	a009883a 	mov	r4,r20
   16530:	0009c8c0 	call	9c8c <_free_r>
   16534:	a009883a 	mov	r4,r20
   16538:	001b3340 	call	1b334 <__malloc_unlock>
   1653c:	9005883a 	mov	r2,r18
   16540:	00001206 	br	1658c <_realloc_r+0x170>
   16544:	00c00404 	movi	r3,16
   16548:	1823883a 	mov	r17,r3
   1654c:	003fce06 	br	16488 <__alt_mem_nios_system_shared_memory+0xfffd6488>
   16550:	a825883a 	mov	r18,r21
   16554:	8445c83a 	sub	r2,r16,r17
   16558:	00c003c4 	movi	r3,15
   1655c:	18802636 	bltu	r3,r2,165f8 <_realloc_r+0x1dc>
   16560:	99800117 	ldw	r6,4(r19)
   16564:	9c07883a 	add	r3,r19,r16
   16568:	3180004c 	andi	r6,r6,1
   1656c:	3420b03a 	or	r16,r6,r16
   16570:	9c000115 	stw	r16,4(r19)
   16574:	18800117 	ldw	r2,4(r3)
   16578:	10800054 	ori	r2,r2,1
   1657c:	18800115 	stw	r2,4(r3)
   16580:	a009883a 	mov	r4,r20
   16584:	001b3340 	call	1b334 <__malloc_unlock>
   16588:	9005883a 	mov	r2,r18
   1658c:	dfc00917 	ldw	ra,36(sp)
   16590:	df000817 	ldw	fp,32(sp)
   16594:	ddc00717 	ldw	r23,28(sp)
   16598:	dd800617 	ldw	r22,24(sp)
   1659c:	dd400517 	ldw	r21,20(sp)
   165a0:	dd000417 	ldw	r20,16(sp)
   165a4:	dcc00317 	ldw	r19,12(sp)
   165a8:	dc800217 	ldw	r18,8(sp)
   165ac:	dc400117 	ldw	r17,4(sp)
   165b0:	dc000017 	ldw	r16,0(sp)
   165b4:	dec00a04 	addi	sp,sp,40
   165b8:	f800283a 	ret
   165bc:	017fff04 	movi	r5,-4
   165c0:	414a703a 	and	r5,r8,r5
   165c4:	814d883a 	add	r6,r16,r5
   165c8:	30c01f16 	blt	r6,r3,16648 <_realloc_r+0x22c>
   165cc:	20800317 	ldw	r2,12(r4)
   165d0:	20c00217 	ldw	r3,8(r4)
   165d4:	a825883a 	mov	r18,r21
   165d8:	3021883a 	mov	r16,r6
   165dc:	18800315 	stw	r2,12(r3)
   165e0:	10c00215 	stw	r3,8(r2)
   165e4:	003fdb06 	br	16554 <__alt_mem_nios_system_shared_memory+0xfffd6554>
   165e8:	00800304 	movi	r2,12
   165ec:	a0800015 	stw	r2,0(r20)
   165f0:	0005883a 	mov	r2,zero
   165f4:	003fe506 	br	1658c <__alt_mem_nios_system_shared_memory+0xfffd658c>
   165f8:	98c00117 	ldw	r3,4(r19)
   165fc:	9c4b883a 	add	r5,r19,r17
   16600:	11000054 	ori	r4,r2,1
   16604:	18c0004c 	andi	r3,r3,1
   16608:	1c62b03a 	or	r17,r3,r17
   1660c:	9c400115 	stw	r17,4(r19)
   16610:	29000115 	stw	r4,4(r5)
   16614:	2885883a 	add	r2,r5,r2
   16618:	10c00117 	ldw	r3,4(r2)
   1661c:	29400204 	addi	r5,r5,8
   16620:	a009883a 	mov	r4,r20
   16624:	18c00054 	ori	r3,r3,1
   16628:	10c00115 	stw	r3,4(r2)
   1662c:	0009c8c0 	call	9c8c <_free_r>
   16630:	003fd306 	br	16580 <__alt_mem_nios_system_shared_memory+0xfffd6580>
   16634:	017fff04 	movi	r5,-4
   16638:	414a703a 	and	r5,r8,r5
   1663c:	89800404 	addi	r6,r17,16
   16640:	8151883a 	add	r8,r16,r5
   16644:	4180590e 	bge	r8,r6,167ac <_realloc_r+0x390>
   16648:	1080004c 	andi	r2,r2,1
   1664c:	103f9e1e 	bne	r2,zero,164c8 <__alt_mem_nios_system_shared_memory+0xfffd64c8>
   16650:	adbffe17 	ldw	r22,-8(r21)
   16654:	00bfff04 	movi	r2,-4
   16658:	9dadc83a 	sub	r22,r19,r22
   1665c:	b1800117 	ldw	r6,4(r22)
   16660:	3084703a 	and	r2,r6,r2
   16664:	20002026 	beq	r4,zero,166e8 <_realloc_r+0x2cc>
   16668:	80af883a 	add	r23,r16,r2
   1666c:	b96f883a 	add	r23,r23,r5
   16670:	21c05f26 	beq	r4,r7,167f0 <_realloc_r+0x3d4>
   16674:	b8c01c16 	blt	r23,r3,166e8 <_realloc_r+0x2cc>
   16678:	20800317 	ldw	r2,12(r4)
   1667c:	20c00217 	ldw	r3,8(r4)
   16680:	81bfff04 	addi	r6,r16,-4
   16684:	01000904 	movi	r4,36
   16688:	18800315 	stw	r2,12(r3)
   1668c:	10c00215 	stw	r3,8(r2)
   16690:	b0c00217 	ldw	r3,8(r22)
   16694:	b0800317 	ldw	r2,12(r22)
   16698:	b4800204 	addi	r18,r22,8
   1669c:	18800315 	stw	r2,12(r3)
   166a0:	10c00215 	stw	r3,8(r2)
   166a4:	21801b36 	bltu	r4,r6,16714 <_realloc_r+0x2f8>
   166a8:	008004c4 	movi	r2,19
   166ac:	1180352e 	bgeu	r2,r6,16784 <_realloc_r+0x368>
   166b0:	a8800017 	ldw	r2,0(r21)
   166b4:	b0800215 	stw	r2,8(r22)
   166b8:	a8800117 	ldw	r2,4(r21)
   166bc:	b0800315 	stw	r2,12(r22)
   166c0:	008006c4 	movi	r2,27
   166c4:	11807f36 	bltu	r2,r6,168c4 <_realloc_r+0x4a8>
   166c8:	b0800404 	addi	r2,r22,16
   166cc:	ad400204 	addi	r21,r21,8
   166d0:	00002d06 	br	16788 <_realloc_r+0x36c>
   166d4:	adbffe17 	ldw	r22,-8(r21)
   166d8:	00bfff04 	movi	r2,-4
   166dc:	9dadc83a 	sub	r22,r19,r22
   166e0:	b1000117 	ldw	r4,4(r22)
   166e4:	2084703a 	and	r2,r4,r2
   166e8:	b03f7726 	beq	r22,zero,164c8 <__alt_mem_nios_system_shared_memory+0xfffd64c8>
   166ec:	80af883a 	add	r23,r16,r2
   166f0:	b8ff7516 	blt	r23,r3,164c8 <__alt_mem_nios_system_shared_memory+0xfffd64c8>
   166f4:	b0800317 	ldw	r2,12(r22)
   166f8:	b0c00217 	ldw	r3,8(r22)
   166fc:	81bfff04 	addi	r6,r16,-4
   16700:	01000904 	movi	r4,36
   16704:	18800315 	stw	r2,12(r3)
   16708:	10c00215 	stw	r3,8(r2)
   1670c:	b4800204 	addi	r18,r22,8
   16710:	21bfe52e 	bgeu	r4,r6,166a8 <__alt_mem_nios_system_shared_memory+0xfffd66a8>
   16714:	a80b883a 	mov	r5,r21
   16718:	9009883a 	mov	r4,r18
   1671c:	00150400 	call	15040 <memmove>
   16720:	b821883a 	mov	r16,r23
   16724:	b027883a 	mov	r19,r22
   16728:	003f8a06 	br	16554 <__alt_mem_nios_system_shared_memory+0xfffd6554>
   1672c:	300b883a 	mov	r5,r6
   16730:	dfc00917 	ldw	ra,36(sp)
   16734:	df000817 	ldw	fp,32(sp)
   16738:	ddc00717 	ldw	r23,28(sp)
   1673c:	dd800617 	ldw	r22,24(sp)
   16740:	dd400517 	ldw	r21,20(sp)
   16744:	dd000417 	ldw	r20,16(sp)
   16748:	dcc00317 	ldw	r19,12(sp)
   1674c:	dc800217 	ldw	r18,8(sp)
   16750:	dc400117 	ldw	r17,4(sp)
   16754:	dc000017 	ldw	r16,0(sp)
   16758:	dec00a04 	addi	sp,sp,40
   1675c:	000a7bc1 	jmpi	a7bc <_malloc_r>
   16760:	a8c00017 	ldw	r3,0(r21)
   16764:	90c00015 	stw	r3,0(r18)
   16768:	a8c00117 	ldw	r3,4(r21)
   1676c:	90c00115 	stw	r3,4(r18)
   16770:	00c006c4 	movi	r3,27
   16774:	19804536 	bltu	r3,r6,1688c <_realloc_r+0x470>
   16778:	90800204 	addi	r2,r18,8
   1677c:	a8c00204 	addi	r3,r21,8
   16780:	003f6306 	br	16510 <__alt_mem_nios_system_shared_memory+0xfffd6510>
   16784:	9005883a 	mov	r2,r18
   16788:	a8c00017 	ldw	r3,0(r21)
   1678c:	b821883a 	mov	r16,r23
   16790:	b027883a 	mov	r19,r22
   16794:	10c00015 	stw	r3,0(r2)
   16798:	a8c00117 	ldw	r3,4(r21)
   1679c:	10c00115 	stw	r3,4(r2)
   167a0:	a8c00217 	ldw	r3,8(r21)
   167a4:	10c00215 	stw	r3,8(r2)
   167a8:	003f6a06 	br	16554 <__alt_mem_nios_system_shared_memory+0xfffd6554>
   167ac:	9c67883a 	add	r19,r19,r17
   167b0:	4445c83a 	sub	r2,r8,r17
   167b4:	e4c00215 	stw	r19,8(fp)
   167b8:	10800054 	ori	r2,r2,1
   167bc:	98800115 	stw	r2,4(r19)
   167c0:	a8bfff17 	ldw	r2,-4(r21)
   167c4:	a009883a 	mov	r4,r20
   167c8:	1080004c 	andi	r2,r2,1
   167cc:	1462b03a 	or	r17,r2,r17
   167d0:	ac7fff15 	stw	r17,-4(r21)
   167d4:	001b3340 	call	1b334 <__malloc_unlock>
   167d8:	a805883a 	mov	r2,r21
   167dc:	003f6b06 	br	1658c <__alt_mem_nios_system_shared_memory+0xfffd658c>
   167e0:	a80b883a 	mov	r5,r21
   167e4:	9009883a 	mov	r4,r18
   167e8:	00150400 	call	15040 <memmove>
   167ec:	003f4e06 	br	16528 <__alt_mem_nios_system_shared_memory+0xfffd6528>
   167f0:	89000404 	addi	r4,r17,16
   167f4:	b93fbc16 	blt	r23,r4,166e8 <__alt_mem_nios_system_shared_memory+0xfffd66e8>
   167f8:	b0800317 	ldw	r2,12(r22)
   167fc:	b0c00217 	ldw	r3,8(r22)
   16800:	81bfff04 	addi	r6,r16,-4
   16804:	01000904 	movi	r4,36
   16808:	18800315 	stw	r2,12(r3)
   1680c:	10c00215 	stw	r3,8(r2)
   16810:	b4800204 	addi	r18,r22,8
   16814:	21804336 	bltu	r4,r6,16924 <_realloc_r+0x508>
   16818:	008004c4 	movi	r2,19
   1681c:	11803f2e 	bgeu	r2,r6,1691c <_realloc_r+0x500>
   16820:	a8800017 	ldw	r2,0(r21)
   16824:	b0800215 	stw	r2,8(r22)
   16828:	a8800117 	ldw	r2,4(r21)
   1682c:	b0800315 	stw	r2,12(r22)
   16830:	008006c4 	movi	r2,27
   16834:	11803f36 	bltu	r2,r6,16934 <_realloc_r+0x518>
   16838:	b0800404 	addi	r2,r22,16
   1683c:	ad400204 	addi	r21,r21,8
   16840:	a8c00017 	ldw	r3,0(r21)
   16844:	10c00015 	stw	r3,0(r2)
   16848:	a8c00117 	ldw	r3,4(r21)
   1684c:	10c00115 	stw	r3,4(r2)
   16850:	a8c00217 	ldw	r3,8(r21)
   16854:	10c00215 	stw	r3,8(r2)
   16858:	b447883a 	add	r3,r22,r17
   1685c:	bc45c83a 	sub	r2,r23,r17
   16860:	e0c00215 	stw	r3,8(fp)
   16864:	10800054 	ori	r2,r2,1
   16868:	18800115 	stw	r2,4(r3)
   1686c:	b0800117 	ldw	r2,4(r22)
   16870:	a009883a 	mov	r4,r20
   16874:	1080004c 	andi	r2,r2,1
   16878:	1462b03a 	or	r17,r2,r17
   1687c:	b4400115 	stw	r17,4(r22)
   16880:	001b3340 	call	1b334 <__malloc_unlock>
   16884:	9005883a 	mov	r2,r18
   16888:	003f4006 	br	1658c <__alt_mem_nios_system_shared_memory+0xfffd658c>
   1688c:	a8c00217 	ldw	r3,8(r21)
   16890:	90c00215 	stw	r3,8(r18)
   16894:	a8c00317 	ldw	r3,12(r21)
   16898:	90c00315 	stw	r3,12(r18)
   1689c:	30801126 	beq	r6,r2,168e4 <_realloc_r+0x4c8>
   168a0:	90800404 	addi	r2,r18,16
   168a4:	a8c00404 	addi	r3,r21,16
   168a8:	003f1906 	br	16510 <__alt_mem_nios_system_shared_memory+0xfffd6510>
   168ac:	90ffff17 	ldw	r3,-4(r18)
   168b0:	00bfff04 	movi	r2,-4
   168b4:	a825883a 	mov	r18,r21
   168b8:	1884703a 	and	r2,r3,r2
   168bc:	80a1883a 	add	r16,r16,r2
   168c0:	003f2406 	br	16554 <__alt_mem_nios_system_shared_memory+0xfffd6554>
   168c4:	a8800217 	ldw	r2,8(r21)
   168c8:	b0800415 	stw	r2,16(r22)
   168cc:	a8800317 	ldw	r2,12(r21)
   168d0:	b0800515 	stw	r2,20(r22)
   168d4:	31000a26 	beq	r6,r4,16900 <_realloc_r+0x4e4>
   168d8:	b0800604 	addi	r2,r22,24
   168dc:	ad400404 	addi	r21,r21,16
   168e0:	003fa906 	br	16788 <__alt_mem_nios_system_shared_memory+0xfffd6788>
   168e4:	a9000417 	ldw	r4,16(r21)
   168e8:	90800604 	addi	r2,r18,24
   168ec:	a8c00604 	addi	r3,r21,24
   168f0:	91000415 	stw	r4,16(r18)
   168f4:	a9000517 	ldw	r4,20(r21)
   168f8:	91000515 	stw	r4,20(r18)
   168fc:	003f0406 	br	16510 <__alt_mem_nios_system_shared_memory+0xfffd6510>
   16900:	a8c00417 	ldw	r3,16(r21)
   16904:	ad400604 	addi	r21,r21,24
   16908:	b0800804 	addi	r2,r22,32
   1690c:	b0c00615 	stw	r3,24(r22)
   16910:	a8ffff17 	ldw	r3,-4(r21)
   16914:	b0c00715 	stw	r3,28(r22)
   16918:	003f9b06 	br	16788 <__alt_mem_nios_system_shared_memory+0xfffd6788>
   1691c:	9005883a 	mov	r2,r18
   16920:	003fc706 	br	16840 <__alt_mem_nios_system_shared_memory+0xfffd6840>
   16924:	a80b883a 	mov	r5,r21
   16928:	9009883a 	mov	r4,r18
   1692c:	00150400 	call	15040 <memmove>
   16930:	003fc906 	br	16858 <__alt_mem_nios_system_shared_memory+0xfffd6858>
   16934:	a8800217 	ldw	r2,8(r21)
   16938:	b0800415 	stw	r2,16(r22)
   1693c:	a8800317 	ldw	r2,12(r21)
   16940:	b0800515 	stw	r2,20(r22)
   16944:	31000726 	beq	r6,r4,16964 <_realloc_r+0x548>
   16948:	b0800604 	addi	r2,r22,24
   1694c:	ad400404 	addi	r21,r21,16
   16950:	003fbb06 	br	16840 <__alt_mem_nios_system_shared_memory+0xfffd6840>
   16954:	a009883a 	mov	r4,r20
   16958:	001b3340 	call	1b334 <__malloc_unlock>
   1695c:	0005883a 	mov	r2,zero
   16960:	003f0a06 	br	1658c <__alt_mem_nios_system_shared_memory+0xfffd658c>
   16964:	a8c00417 	ldw	r3,16(r21)
   16968:	ad400604 	addi	r21,r21,24
   1696c:	b0800804 	addi	r2,r22,32
   16970:	b0c00615 	stw	r3,24(r22)
   16974:	a8ffff17 	ldw	r3,-4(r21)
   16978:	b0c00715 	stw	r3,28(r22)
   1697c:	003fb006 	br	16840 <__alt_mem_nios_system_shared_memory+0xfffd6840>

00016980 <__fpclassifyd>:
   16980:	00a00034 	movhi	r2,32768
   16984:	10bfffc4 	addi	r2,r2,-1
   16988:	2884703a 	and	r2,r5,r2
   1698c:	10000726 	beq	r2,zero,169ac <__fpclassifyd+0x2c>
   16990:	00fffc34 	movhi	r3,65520
   16994:	019ff834 	movhi	r6,32736
   16998:	28c7883a 	add	r3,r5,r3
   1699c:	31bfffc4 	addi	r6,r6,-1
   169a0:	30c00536 	bltu	r6,r3,169b8 <__fpclassifyd+0x38>
   169a4:	00800104 	movi	r2,4
   169a8:	f800283a 	ret
   169ac:	2000021e 	bne	r4,zero,169b8 <__fpclassifyd+0x38>
   169b0:	00800084 	movi	r2,2
   169b4:	f800283a 	ret
   169b8:	00dffc34 	movhi	r3,32752
   169bc:	019ff834 	movhi	r6,32736
   169c0:	28cb883a 	add	r5,r5,r3
   169c4:	31bfffc4 	addi	r6,r6,-1
   169c8:	317ff62e 	bgeu	r6,r5,169a4 <__alt_mem_nios_system_shared_memory+0xfffd69a4>
   169cc:	01400434 	movhi	r5,16
   169d0:	297fffc4 	addi	r5,r5,-1
   169d4:	28800236 	bltu	r5,r2,169e0 <__fpclassifyd+0x60>
   169d8:	008000c4 	movi	r2,3
   169dc:	f800283a 	ret
   169e0:	10c00226 	beq	r2,r3,169ec <__fpclassifyd+0x6c>
   169e4:	0005883a 	mov	r2,zero
   169e8:	f800283a 	ret
   169ec:	2005003a 	cmpeq	r2,r4,zero
   169f0:	f800283a 	ret

000169f4 <strchr>:
   169f4:	2ac03fcc 	andi	r11,r5,255
   169f8:	2813883a 	mov	r9,r5
   169fc:	208000cc 	andi	r2,r4,3
   16a00:	58003726 	beq	r11,zero,16ae0 <strchr+0xec>
   16a04:	10000b26 	beq	r2,zero,16a34 <strchr+0x40>
   16a08:	20800003 	ldbu	r2,0(r4)
   16a0c:	10003226 	beq	r2,zero,16ad8 <strchr+0xe4>
   16a10:	28c03fcc 	andi	r3,r5,255
   16a14:	5880041e 	bne	r11,r2,16a28 <strchr+0x34>
   16a18:	00004d06 	br	16b50 <strchr+0x15c>
   16a1c:	20800003 	ldbu	r2,0(r4)
   16a20:	10002d26 	beq	r2,zero,16ad8 <strchr+0xe4>
   16a24:	18804a26 	beq	r3,r2,16b50 <strchr+0x15c>
   16a28:	21000044 	addi	r4,r4,1
   16a2c:	208000cc 	andi	r2,r4,3
   16a30:	103ffa1e 	bne	r2,zero,16a1c <__alt_mem_nios_system_shared_memory+0xfffd6a1c>
   16a34:	29403fcc 	andi	r5,r5,255
   16a38:	2814923a 	slli	r10,r5,8
   16a3c:	20800017 	ldw	r2,0(r4)
   16a40:	01bfbff4 	movhi	r6,65279
   16a44:	2a8ab03a 	or	r5,r5,r10
   16a48:	2814943a 	slli	r10,r5,16
   16a4c:	31bfbfc4 	addi	r6,r6,-257
   16a50:	119b883a 	add	r13,r2,r6
   16a54:	5154b03a 	or	r10,r10,r5
   16a58:	008e303a 	nor	r7,zero,r2
   16a5c:	5084f03a 	xor	r2,r10,r2
   16a60:	1191883a 	add	r8,r2,r6
   16a64:	0086303a 	nor	r3,zero,r2
   16a68:	03202074 	movhi	r12,32897
   16a6c:	69ca703a 	and	r5,r13,r7
   16a70:	40c4703a 	and	r2,r8,r3
   16a74:	63202004 	addi	r12,r12,-32640
   16a78:	2884b03a 	or	r2,r5,r2
   16a7c:	1304703a 	and	r2,r2,r12
   16a80:	10000c1e 	bne	r2,zero,16ab4 <strchr+0xc0>
   16a84:	21000104 	addi	r4,r4,4
   16a88:	20c00017 	ldw	r3,0(r4)
   16a8c:	50c4f03a 	xor	r2,r10,r3
   16a90:	1991883a 	add	r8,r3,r6
   16a94:	00ca303a 	nor	r5,zero,r3
   16a98:	118f883a 	add	r7,r2,r6
   16a9c:	0086303a 	nor	r3,zero,r2
   16aa0:	414a703a 	and	r5,r8,r5
   16aa4:	38c4703a 	and	r2,r7,r3
   16aa8:	2884b03a 	or	r2,r5,r2
   16aac:	1304703a 	and	r2,r2,r12
   16ab0:	103ff426 	beq	r2,zero,16a84 <__alt_mem_nios_system_shared_memory+0xfffd6a84>
   16ab4:	20800003 	ldbu	r2,0(r4)
   16ab8:	10000726 	beq	r2,zero,16ad8 <strchr+0xe4>
   16abc:	58802426 	beq	r11,r2,16b50 <strchr+0x15c>
   16ac0:	48c03fcc 	andi	r3,r9,255
   16ac4:	00000106 	br	16acc <strchr+0xd8>
   16ac8:	18802126 	beq	r3,r2,16b50 <strchr+0x15c>
   16acc:	21000044 	addi	r4,r4,1
   16ad0:	20800003 	ldbu	r2,0(r4)
   16ad4:	103ffc1e 	bne	r2,zero,16ac8 <__alt_mem_nios_system_shared_memory+0xfffd6ac8>
   16ad8:	0005883a 	mov	r2,zero
   16adc:	f800283a 	ret
   16ae0:	10000526 	beq	r2,zero,16af8 <strchr+0x104>
   16ae4:	20800003 	ldbu	r2,0(r4)
   16ae8:	10001926 	beq	r2,zero,16b50 <strchr+0x15c>
   16aec:	21000044 	addi	r4,r4,1
   16af0:	208000cc 	andi	r2,r4,3
   16af4:	103ffb1e 	bne	r2,zero,16ae4 <__alt_mem_nios_system_shared_memory+0xfffd6ae4>
   16af8:	20800017 	ldw	r2,0(r4)
   16afc:	01bfbff4 	movhi	r6,65279
   16b00:	31bfbfc4 	addi	r6,r6,-257
   16b04:	0086303a 	nor	r3,zero,r2
   16b08:	01602074 	movhi	r5,32897
   16b0c:	1185883a 	add	r2,r2,r6
   16b10:	29602004 	addi	r5,r5,-32640
   16b14:	10c4703a 	and	r2,r2,r3
   16b18:	1144703a 	and	r2,r2,r5
   16b1c:	1000071e 	bne	r2,zero,16b3c <strchr+0x148>
   16b20:	21000104 	addi	r4,r4,4
   16b24:	20800017 	ldw	r2,0(r4)
   16b28:	1187883a 	add	r3,r2,r6
   16b2c:	0084303a 	nor	r2,zero,r2
   16b30:	1884703a 	and	r2,r3,r2
   16b34:	1144703a 	and	r2,r2,r5
   16b38:	103ff926 	beq	r2,zero,16b20 <__alt_mem_nios_system_shared_memory+0xfffd6b20>
   16b3c:	20800003 	ldbu	r2,0(r4)
   16b40:	10000326 	beq	r2,zero,16b50 <strchr+0x15c>
   16b44:	21000044 	addi	r4,r4,1
   16b48:	20800003 	ldbu	r2,0(r4)
   16b4c:	103ffd1e 	bne	r2,zero,16b44 <__alt_mem_nios_system_shared_memory+0xfffd6b44>
   16b50:	2005883a 	mov	r2,r4
   16b54:	f800283a 	ret

00016b58 <strncmp>:
   16b58:	30003126 	beq	r6,zero,16c20 <strncmp+0xc8>
   16b5c:	2144b03a 	or	r2,r4,r5
   16b60:	108000cc 	andi	r2,r2,3
   16b64:	10001e1e 	bne	r2,zero,16be0 <strncmp+0x88>
   16b68:	024000c4 	movi	r9,3
   16b6c:	49801c2e 	bgeu	r9,r6,16be0 <strncmp+0x88>
   16b70:	20800017 	ldw	r2,0(r4)
   16b74:	28c00017 	ldw	r3,0(r5)
   16b78:	10c0191e 	bne	r2,r3,16be0 <strncmp+0x88>
   16b7c:	31bfff04 	addi	r6,r6,-4
   16b80:	30002726 	beq	r6,zero,16c20 <strncmp+0xc8>
   16b84:	02ffbff4 	movhi	r11,65279
   16b88:	5affbfc4 	addi	r11,r11,-257
   16b8c:	0086303a 	nor	r3,zero,r2
   16b90:	02a02074 	movhi	r10,32897
   16b94:	12c5883a 	add	r2,r2,r11
   16b98:	52a02004 	addi	r10,r10,-32640
   16b9c:	10c4703a 	and	r2,r2,r3
   16ba0:	1284703a 	and	r2,r2,r10
   16ba4:	10000b26 	beq	r2,zero,16bd4 <strncmp+0x7c>
   16ba8:	00001d06 	br	16c20 <strncmp+0xc8>
   16bac:	20c00017 	ldw	r3,0(r4)
   16bb0:	29c00017 	ldw	r7,0(r5)
   16bb4:	1ad1883a 	add	r8,r3,r11
   16bb8:	00c4303a 	nor	r2,zero,r3
   16bbc:	4084703a 	and	r2,r8,r2
   16bc0:	1284703a 	and	r2,r2,r10
   16bc4:	19c0061e 	bne	r3,r7,16be0 <strncmp+0x88>
   16bc8:	31bfff04 	addi	r6,r6,-4
   16bcc:	30001426 	beq	r6,zero,16c20 <strncmp+0xc8>
   16bd0:	1000131e 	bne	r2,zero,16c20 <strncmp+0xc8>
   16bd4:	21000104 	addi	r4,r4,4
   16bd8:	29400104 	addi	r5,r5,4
   16bdc:	49bff336 	bltu	r9,r6,16bac <__alt_mem_nios_system_shared_memory+0xfffd6bac>
   16be0:	28800007 	ldb	r2,0(r5)
   16be4:	20c00007 	ldb	r3,0(r4)
   16be8:	31bfffc4 	addi	r6,r6,-1
   16bec:	10c0081e 	bne	r2,r3,16c10 <strncmp+0xb8>
   16bf0:	30000b26 	beq	r6,zero,16c20 <strncmp+0xc8>
   16bf4:	10000a26 	beq	r2,zero,16c20 <strncmp+0xc8>
   16bf8:	21000044 	addi	r4,r4,1
   16bfc:	29400044 	addi	r5,r5,1
   16c00:	20800007 	ldb	r2,0(r4)
   16c04:	28c00007 	ldb	r3,0(r5)
   16c08:	31bfffc4 	addi	r6,r6,-1
   16c0c:	10fff826 	beq	r2,r3,16bf0 <__alt_mem_nios_system_shared_memory+0xfffd6bf0>
   16c10:	20800003 	ldbu	r2,0(r4)
   16c14:	28c00003 	ldbu	r3,0(r5)
   16c18:	10c5c83a 	sub	r2,r2,r3
   16c1c:	f800283a 	ret
   16c20:	0005883a 	mov	r2,zero
   16c24:	f800283a 	ret

00016c28 <__ssprint_r>:
   16c28:	30800217 	ldw	r2,8(r6)
   16c2c:	defff604 	addi	sp,sp,-40
   16c30:	dc800215 	stw	r18,8(sp)
   16c34:	dfc00915 	stw	ra,36(sp)
   16c38:	df000815 	stw	fp,32(sp)
   16c3c:	ddc00715 	stw	r23,28(sp)
   16c40:	dd800615 	stw	r22,24(sp)
   16c44:	dd400515 	stw	r21,20(sp)
   16c48:	dd000415 	stw	r20,16(sp)
   16c4c:	dcc00315 	stw	r19,12(sp)
   16c50:	dc400115 	stw	r17,4(sp)
   16c54:	dc000015 	stw	r16,0(sp)
   16c58:	3025883a 	mov	r18,r6
   16c5c:	10005826 	beq	r2,zero,16dc0 <__ssprint_r+0x198>
   16c60:	2027883a 	mov	r19,r4
   16c64:	35c00017 	ldw	r23,0(r6)
   16c68:	29000017 	ldw	r4,0(r5)
   16c6c:	28800217 	ldw	r2,8(r5)
   16c70:	2823883a 	mov	r17,r5
   16c74:	0039883a 	mov	fp,zero
   16c78:	0021883a 	mov	r16,zero
   16c7c:	80003926 	beq	r16,zero,16d64 <__ssprint_r+0x13c>
   16c80:	102b883a 	mov	r21,r2
   16c84:	102d883a 	mov	r22,r2
   16c88:	80803a36 	bltu	r16,r2,16d74 <__ssprint_r+0x14c>
   16c8c:	88c0030b 	ldhu	r3,12(r17)
   16c90:	1881200c 	andi	r2,r3,1152
   16c94:	10002626 	beq	r2,zero,16d30 <__ssprint_r+0x108>
   16c98:	88800517 	ldw	r2,20(r17)
   16c9c:	89400417 	ldw	r5,16(r17)
   16ca0:	81800044 	addi	r6,r16,1
   16ca4:	108f883a 	add	r7,r2,r2
   16ca8:	3885883a 	add	r2,r7,r2
   16cac:	100ed7fa 	srli	r7,r2,31
   16cb0:	216dc83a 	sub	r22,r4,r5
   16cb4:	3589883a 	add	r4,r6,r22
   16cb8:	3885883a 	add	r2,r7,r2
   16cbc:	102bd07a 	srai	r21,r2,1
   16cc0:	a80d883a 	mov	r6,r21
   16cc4:	a900022e 	bgeu	r21,r4,16cd0 <__ssprint_r+0xa8>
   16cc8:	202b883a 	mov	r21,r4
   16ccc:	200d883a 	mov	r6,r4
   16cd0:	18c1000c 	andi	r3,r3,1024
   16cd4:	18002a26 	beq	r3,zero,16d80 <__ssprint_r+0x158>
   16cd8:	300b883a 	mov	r5,r6
   16cdc:	9809883a 	mov	r4,r19
   16ce0:	000a7bc0 	call	a7bc <_malloc_r>
   16ce4:	1029883a 	mov	r20,r2
   16ce8:	10002c26 	beq	r2,zero,16d9c <__ssprint_r+0x174>
   16cec:	89400417 	ldw	r5,16(r17)
   16cf0:	b00d883a 	mov	r6,r22
   16cf4:	1009883a 	mov	r4,r2
   16cf8:	000b0ac0 	call	b0ac <memcpy>
   16cfc:	8880030b 	ldhu	r2,12(r17)
   16d00:	00fedfc4 	movi	r3,-1153
   16d04:	10c4703a 	and	r2,r2,r3
   16d08:	10802014 	ori	r2,r2,128
   16d0c:	8880030d 	sth	r2,12(r17)
   16d10:	a589883a 	add	r4,r20,r22
   16d14:	adadc83a 	sub	r22,r21,r22
   16d18:	8d400515 	stw	r21,20(r17)
   16d1c:	8d800215 	stw	r22,8(r17)
   16d20:	8d000415 	stw	r20,16(r17)
   16d24:	89000015 	stw	r4,0(r17)
   16d28:	802b883a 	mov	r21,r16
   16d2c:	802d883a 	mov	r22,r16
   16d30:	b00d883a 	mov	r6,r22
   16d34:	e00b883a 	mov	r5,fp
   16d38:	00150400 	call	15040 <memmove>
   16d3c:	88800217 	ldw	r2,8(r17)
   16d40:	89000017 	ldw	r4,0(r17)
   16d44:	90c00217 	ldw	r3,8(r18)
   16d48:	1545c83a 	sub	r2,r2,r21
   16d4c:	2589883a 	add	r4,r4,r22
   16d50:	88800215 	stw	r2,8(r17)
   16d54:	89000015 	stw	r4,0(r17)
   16d58:	1c21c83a 	sub	r16,r3,r16
   16d5c:	94000215 	stw	r16,8(r18)
   16d60:	80001726 	beq	r16,zero,16dc0 <__ssprint_r+0x198>
   16d64:	bf000017 	ldw	fp,0(r23)
   16d68:	bc000117 	ldw	r16,4(r23)
   16d6c:	bdc00204 	addi	r23,r23,8
   16d70:	003fc206 	br	16c7c <__alt_mem_nios_system_shared_memory+0xfffd6c7c>
   16d74:	802b883a 	mov	r21,r16
   16d78:	802d883a 	mov	r22,r16
   16d7c:	003fec06 	br	16d30 <__alt_mem_nios_system_shared_memory+0xfffd6d30>
   16d80:	9809883a 	mov	r4,r19
   16d84:	001641c0 	call	1641c <_realloc_r>
   16d88:	1029883a 	mov	r20,r2
   16d8c:	103fe01e 	bne	r2,zero,16d10 <__alt_mem_nios_system_shared_memory+0xfffd6d10>
   16d90:	89400417 	ldw	r5,16(r17)
   16d94:	9809883a 	mov	r4,r19
   16d98:	0009c8c0 	call	9c8c <_free_r>
   16d9c:	88c0030b 	ldhu	r3,12(r17)
   16da0:	00800304 	movi	r2,12
   16da4:	98800015 	stw	r2,0(r19)
   16da8:	18c01014 	ori	r3,r3,64
   16dac:	88c0030d 	sth	r3,12(r17)
   16db0:	00bfffc4 	movi	r2,-1
   16db4:	90000215 	stw	zero,8(r18)
   16db8:	90000115 	stw	zero,4(r18)
   16dbc:	00000206 	br	16dc8 <__ssprint_r+0x1a0>
   16dc0:	90000115 	stw	zero,4(r18)
   16dc4:	0005883a 	mov	r2,zero
   16dc8:	dfc00917 	ldw	ra,36(sp)
   16dcc:	df000817 	ldw	fp,32(sp)
   16dd0:	ddc00717 	ldw	r23,28(sp)
   16dd4:	dd800617 	ldw	r22,24(sp)
   16dd8:	dd400517 	ldw	r21,20(sp)
   16ddc:	dd000417 	ldw	r20,16(sp)
   16de0:	dcc00317 	ldw	r19,12(sp)
   16de4:	dc800217 	ldw	r18,8(sp)
   16de8:	dc400117 	ldw	r17,4(sp)
   16dec:	dc000017 	ldw	r16,0(sp)
   16df0:	dec00a04 	addi	sp,sp,40
   16df4:	f800283a 	ret

00016df8 <___svfiprintf_internal_r>:
   16df8:	2880030b 	ldhu	r2,12(r5)
   16dfc:	deffc804 	addi	sp,sp,-224
   16e00:	dcc03115 	stw	r19,196(sp)
   16e04:	dfc03715 	stw	ra,220(sp)
   16e08:	df003615 	stw	fp,216(sp)
   16e0c:	ddc03515 	stw	r23,212(sp)
   16e10:	dd803415 	stw	r22,208(sp)
   16e14:	dd403315 	stw	r21,204(sp)
   16e18:	dd003215 	stw	r20,200(sp)
   16e1c:	dc803015 	stw	r18,192(sp)
   16e20:	dc402f15 	stw	r17,188(sp)
   16e24:	dc002e15 	stw	r16,184(sp)
   16e28:	d9402315 	stw	r5,140(sp)
   16e2c:	d9002715 	stw	r4,156(sp)
   16e30:	1080200c 	andi	r2,r2,128
   16e34:	d9c02415 	stw	r7,144(sp)
   16e38:	3027883a 	mov	r19,r6
   16e3c:	10000226 	beq	r2,zero,16e48 <___svfiprintf_internal_r+0x50>
   16e40:	28800417 	ldw	r2,16(r5)
   16e44:	10046d26 	beq	r2,zero,17ffc <___svfiprintf_internal_r+0x1204>
   16e48:	d8801a04 	addi	r2,sp,104
   16e4c:	d8c019c4 	addi	r3,sp,103
   16e50:	058000b4 	movhi	r22,2
   16e54:	10c9c83a 	sub	r4,r2,r3
   16e58:	b5bb3804 	addi	r22,r22,-4896
   16e5c:	d8801e15 	stw	r2,120(sp)
   16e60:	d8c01f15 	stw	r3,124(sp)
   16e64:	dec01a15 	stw	sp,104(sp)
   16e68:	d8001c15 	stw	zero,112(sp)
   16e6c:	d8001b15 	stw	zero,108(sp)
   16e70:	d811883a 	mov	r8,sp
   16e74:	d8002915 	stw	zero,164(sp)
   16e78:	d8002615 	stw	zero,152(sp)
   16e7c:	d9002c15 	stw	r4,176(sp)
   16e80:	98800007 	ldb	r2,0(r19)
   16e84:	10031426 	beq	r2,zero,17ad8 <___svfiprintf_internal_r+0xce0>
   16e88:	00c00944 	movi	r3,37
   16e8c:	9825883a 	mov	r18,r19
   16e90:	10c0021e 	bne	r2,r3,16e9c <___svfiprintf_internal_r+0xa4>
   16e94:	00001406 	br	16ee8 <___svfiprintf_internal_r+0xf0>
   16e98:	10c00326 	beq	r2,r3,16ea8 <___svfiprintf_internal_r+0xb0>
   16e9c:	94800044 	addi	r18,r18,1
   16ea0:	90800007 	ldb	r2,0(r18)
   16ea4:	103ffc1e 	bne	r2,zero,16e98 <__alt_mem_nios_system_shared_memory+0xfffd6e98>
   16ea8:	94e1c83a 	sub	r16,r18,r19
   16eac:	80000e26 	beq	r16,zero,16ee8 <___svfiprintf_internal_r+0xf0>
   16eb0:	d8c01c17 	ldw	r3,112(sp)
   16eb4:	d8801b17 	ldw	r2,108(sp)
   16eb8:	44c00015 	stw	r19,0(r8)
   16ebc:	1c07883a 	add	r3,r3,r16
   16ec0:	10800044 	addi	r2,r2,1
   16ec4:	d8c01c15 	stw	r3,112(sp)
   16ec8:	44000115 	stw	r16,4(r8)
   16ecc:	d8801b15 	stw	r2,108(sp)
   16ed0:	00c001c4 	movi	r3,7
   16ed4:	18835c16 	blt	r3,r2,17c48 <___svfiprintf_internal_r+0xe50>
   16ed8:	42000204 	addi	r8,r8,8
   16edc:	d9402617 	ldw	r5,152(sp)
   16ee0:	2c0b883a 	add	r5,r5,r16
   16ee4:	d9402615 	stw	r5,152(sp)
   16ee8:	90800007 	ldb	r2,0(r18)
   16eec:	1002fc26 	beq	r2,zero,17ae0 <___svfiprintf_internal_r+0xce8>
   16ef0:	0023883a 	mov	r17,zero
   16ef4:	00bfffc4 	movi	r2,-1
   16ef8:	0021883a 	mov	r16,zero
   16efc:	94c00044 	addi	r19,r18,1
   16f00:	90c00047 	ldb	r3,1(r18)
   16f04:	dc402105 	stb	r17,132(sp)
   16f08:	d8001d85 	stb	zero,118(sp)
   16f0c:	002b883a 	mov	r21,zero
   16f10:	d8802015 	stw	r2,128(sp)
   16f14:	d8002515 	stw	zero,148(sp)
   16f18:	04801604 	movi	r18,88
   16f1c:	05000244 	movi	r20,9
   16f20:	402f883a 	mov	r23,r8
   16f24:	8023883a 	mov	r17,r16
   16f28:	9cc00044 	addi	r19,r19,1
   16f2c:	18bff804 	addi	r2,r3,-32
   16f30:	9081fb36 	bltu	r18,r2,17720 <___svfiprintf_internal_r+0x928>
   16f34:	100490ba 	slli	r2,r2,2
   16f38:	01000074 	movhi	r4,1
   16f3c:	211bd304 	addi	r4,r4,28492
   16f40:	1105883a 	add	r2,r2,r4
   16f44:	10800017 	ldw	r2,0(r2)
   16f48:	1000683a 	jmp	r2
   16f4c:	0001714c 	andi	zero,zero,1477
   16f50:	00017720 	cmpeqi	zero,zero,1500
   16f54:	00017720 	cmpeqi	zero,zero,1500
   16f58:	00017140 	call	1714 <set_acc_scale+0xa4>
   16f5c:	00017720 	cmpeqi	zero,zero,1500
   16f60:	00017720 	cmpeqi	zero,zero,1500
   16f64:	00017720 	cmpeqi	zero,zero,1500
   16f68:	00017720 	cmpeqi	zero,zero,1500
   16f6c:	00017720 	cmpeqi	zero,zero,1500
   16f70:	00017720 	cmpeqi	zero,zero,1500
   16f74:	000170b0 	cmpltui	zero,zero,1474
   16f78:	000172ac 	andhi	zero,zero,1482
   16f7c:	00017720 	cmpeqi	zero,zero,1500
   16f80:	000170d8 	cmpnei	zero,zero,1475
   16f84:	0001775c 	xori	zero,zero,1501
   16f88:	00017720 	cmpeqi	zero,zero,1500
   16f8c:	00017750 	cmplti	zero,zero,1501
   16f90:	000176e4 	muli	zero,zero,1499
   16f94:	000176e4 	muli	zero,zero,1499
   16f98:	000176e4 	muli	zero,zero,1499
   16f9c:	000176e4 	muli	zero,zero,1499
   16fa0:	000176e4 	muli	zero,zero,1499
   16fa4:	000176e4 	muli	zero,zero,1499
   16fa8:	000176e4 	muli	zero,zero,1499
   16fac:	000176e4 	muli	zero,zero,1499
   16fb0:	000176e4 	muli	zero,zero,1499
   16fb4:	00017720 	cmpeqi	zero,zero,1500
   16fb8:	00017720 	cmpeqi	zero,zero,1500
   16fbc:	00017720 	cmpeqi	zero,zero,1500
   16fc0:	00017720 	cmpeqi	zero,zero,1500
   16fc4:	00017720 	cmpeqi	zero,zero,1500
   16fc8:	00017720 	cmpeqi	zero,zero,1500
   16fcc:	00017720 	cmpeqi	zero,zero,1500
   16fd0:	00017720 	cmpeqi	zero,zero,1500
   16fd4:	00017720 	cmpeqi	zero,zero,1500
   16fd8:	00017720 	cmpeqi	zero,zero,1500
   16fdc:	00017668 	cmpgeui	zero,zero,1497
   16fe0:	00017720 	cmpeqi	zero,zero,1500
   16fe4:	00017720 	cmpeqi	zero,zero,1500
   16fe8:	00017720 	cmpeqi	zero,zero,1500
   16fec:	00017720 	cmpeqi	zero,zero,1500
   16ff0:	00017720 	cmpeqi	zero,zero,1500
   16ff4:	00017720 	cmpeqi	zero,zero,1500
   16ff8:	00017720 	cmpeqi	zero,zero,1500
   16ffc:	00017720 	cmpeqi	zero,zero,1500
   17000:	00017720 	cmpeqi	zero,zero,1500
   17004:	00017720 	cmpeqi	zero,zero,1500
   17008:	00017818 	cmpnei	zero,zero,1504
   1700c:	00017720 	cmpeqi	zero,zero,1500
   17010:	00017720 	cmpeqi	zero,zero,1500
   17014:	00017720 	cmpeqi	zero,zero,1500
   17018:	00017720 	cmpeqi	zero,zero,1500
   1701c:	00017720 	cmpeqi	zero,zero,1500
   17020:	000177a4 	muli	zero,zero,1502
   17024:	00017720 	cmpeqi	zero,zero,1500
   17028:	00017720 	cmpeqi	zero,zero,1500
   1702c:	000174a4 	muli	zero,zero,1490
   17030:	00017720 	cmpeqi	zero,zero,1500
   17034:	00017720 	cmpeqi	zero,zero,1500
   17038:	00017720 	cmpeqi	zero,zero,1500
   1703c:	00017720 	cmpeqi	zero,zero,1500
   17040:	00017720 	cmpeqi	zero,zero,1500
   17044:	00017720 	cmpeqi	zero,zero,1500
   17048:	00017720 	cmpeqi	zero,zero,1500
   1704c:	00017720 	cmpeqi	zero,zero,1500
   17050:	00017720 	cmpeqi	zero,zero,1500
   17054:	00017720 	cmpeqi	zero,zero,1500
   17058:	00017370 	cmpltui	zero,zero,1485
   1705c:	00017554 	movui	zero,1493
   17060:	00017720 	cmpeqi	zero,zero,1500
   17064:	00017720 	cmpeqi	zero,zero,1500
   17068:	00017720 	cmpeqi	zero,zero,1500
   1706c:	00017548 	cmpgei	zero,zero,1493
   17070:	00017554 	movui	zero,1493
   17074:	00017720 	cmpeqi	zero,zero,1500
   17078:	00017720 	cmpeqi	zero,zero,1500
   1707c:	00017534 	movhi	zero,1492
   17080:	00017720 	cmpeqi	zero,zero,1500
   17084:	000174f4 	movhi	zero,1491
   17088:	000172c0 	call	172c <set_acc_scale+0xbc>
   1708c:	000170e4 	muli	zero,zero,1475
   17090:	0001765c 	xori	zero,zero,1497
   17094:	00017720 	cmpeqi	zero,zero,1500
   17098:	00017608 	cmpgei	zero,zero,1496
   1709c:	00017720 	cmpeqi	zero,zero,1500
   170a0:	00017224 	muli	zero,zero,1480
   170a4:	00017720 	cmpeqi	zero,zero,1500
   170a8:	00017720 	cmpeqi	zero,zero,1500
   170ac:	00017170 	cmpltui	zero,zero,1477
   170b0:	d9002417 	ldw	r4,144(sp)
   170b4:	d9402417 	ldw	r5,144(sp)
   170b8:	21000017 	ldw	r4,0(r4)
   170bc:	28800104 	addi	r2,r5,4
   170c0:	d9002515 	stw	r4,148(sp)
   170c4:	20032b0e 	bge	r4,zero,17d74 <___svfiprintf_internal_r+0xf7c>
   170c8:	d8c02517 	ldw	r3,148(sp)
   170cc:	d8802415 	stw	r2,144(sp)
   170d0:	00c7c83a 	sub	r3,zero,r3
   170d4:	d8c02515 	stw	r3,148(sp)
   170d8:	8c400114 	ori	r17,r17,4
   170dc:	98c00007 	ldb	r3,0(r19)
   170e0:	003f9106 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   170e4:	00800c04 	movi	r2,48
   170e8:	d9402417 	ldw	r5,144(sp)
   170ec:	d9002017 	ldw	r4,128(sp)
   170f0:	d8801d05 	stb	r2,116(sp)
   170f4:	00801e04 	movi	r2,120
   170f8:	d8801d45 	stb	r2,117(sp)
   170fc:	d8001d85 	stb	zero,118(sp)
   17100:	b811883a 	mov	r8,r23
   17104:	28c00104 	addi	r3,r5,4
   17108:	2c800017 	ldw	r18,0(r5)
   1710c:	0029883a 	mov	r20,zero
   17110:	88800094 	ori	r2,r17,2
   17114:	20036316 	blt	r4,zero,17ea4 <___svfiprintf_internal_r+0x10ac>
   17118:	00bfdfc4 	movi	r2,-129
   1711c:	88a0703a 	and	r16,r17,r2
   17120:	d8c02415 	stw	r3,144(sp)
   17124:	84000094 	ori	r16,r16,2
   17128:	90031c26 	beq	r18,zero,17d9c <___svfiprintf_internal_r+0xfa4>
   1712c:	014000b4 	movhi	r5,2
   17130:	297a9104 	addi	r5,r5,-5564
   17134:	002b883a 	mov	r21,zero
   17138:	d9402915 	stw	r5,164(sp)
   1713c:	00002906 	br	171e4 <___svfiprintf_internal_r+0x3ec>
   17140:	8c400054 	ori	r17,r17,1
   17144:	98c00007 	ldb	r3,0(r19)
   17148:	003f7706 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   1714c:	a8803fcc 	andi	r2,r21,255
   17150:	1080201c 	xori	r2,r2,128
   17154:	10bfe004 	addi	r2,r2,-128
   17158:	10032a1e 	bne	r2,zero,17e04 <___svfiprintf_internal_r+0x100c>
   1715c:	00c00044 	movi	r3,1
   17160:	d8c02105 	stb	r3,132(sp)
   17164:	05400804 	movi	r21,32
   17168:	98c00007 	ldb	r3,0(r19)
   1716c:	003f6e06 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   17170:	8821883a 	mov	r16,r17
   17174:	dc402103 	ldbu	r17,132(sp)
   17178:	b811883a 	mov	r8,r23
   1717c:	8c403fcc 	andi	r17,r17,255
   17180:	8803f01e 	bne	r17,zero,18144 <___svfiprintf_internal_r+0x134c>
   17184:	008000b4 	movhi	r2,2
   17188:	10ba9104 	addi	r2,r2,-5564
   1718c:	d8802915 	stw	r2,164(sp)
   17190:	8080080c 	andi	r2,r16,32
   17194:	1000cd26 	beq	r2,zero,174cc <___svfiprintf_internal_r+0x6d4>
   17198:	d9002417 	ldw	r4,144(sp)
   1719c:	24800017 	ldw	r18,0(r4)
   171a0:	25000117 	ldw	r20,4(r4)
   171a4:	21000204 	addi	r4,r4,8
   171a8:	d9002415 	stw	r4,144(sp)
   171ac:	8080004c 	andi	r2,r16,1
   171b0:	1002c726 	beq	r2,zero,17cd0 <___svfiprintf_internal_r+0xed8>
   171b4:	9504b03a 	or	r2,r18,r20
   171b8:	1003061e 	bne	r2,zero,17dd4 <___svfiprintf_internal_r+0xfdc>
   171bc:	d9002017 	ldw	r4,128(sp)
   171c0:	d8001d85 	stb	zero,118(sp)
   171c4:	20033e16 	blt	r4,zero,17ec0 <___svfiprintf_internal_r+0x10c8>
   171c8:	00bfdfc4 	movi	r2,-129
   171cc:	80a0703a 	and	r16,r16,r2
   171d0:	d9402017 	ldw	r5,128(sp)
   171d4:	002b883a 	mov	r21,zero
   171d8:	28002826 	beq	r5,zero,1727c <___svfiprintf_internal_r+0x484>
   171dc:	0025883a 	mov	r18,zero
   171e0:	0029883a 	mov	r20,zero
   171e4:	d9002917 	ldw	r4,164(sp)
   171e8:	dc401a04 	addi	r17,sp,104
   171ec:	908003cc 	andi	r2,r18,15
   171f0:	a006973a 	slli	r3,r20,28
   171f4:	2085883a 	add	r2,r4,r2
   171f8:	9024d13a 	srli	r18,r18,4
   171fc:	10800003 	ldbu	r2,0(r2)
   17200:	a028d13a 	srli	r20,r20,4
   17204:	8c7fffc4 	addi	r17,r17,-1
   17208:	1ca4b03a 	or	r18,r3,r18
   1720c:	88800005 	stb	r2,0(r17)
   17210:	9504b03a 	or	r2,r18,r20
   17214:	103ff51e 	bne	r2,zero,171ec <__alt_mem_nios_system_shared_memory+0xfffd71ec>
   17218:	d8801e17 	ldw	r2,120(sp)
   1721c:	1469c83a 	sub	r20,r2,r17
   17220:	00001906 	br	17288 <___svfiprintf_internal_r+0x490>
   17224:	8821883a 	mov	r16,r17
   17228:	dc402103 	ldbu	r17,132(sp)
   1722c:	b811883a 	mov	r8,r23
   17230:	8c403fcc 	andi	r17,r17,255
   17234:	8803d01e 	bne	r17,zero,18178 <___svfiprintf_internal_r+0x1380>
   17238:	8080080c 	andi	r2,r16,32
   1723c:	10016126 	beq	r2,zero,177c4 <___svfiprintf_internal_r+0x9cc>
   17240:	d9002417 	ldw	r4,144(sp)
   17244:	d9402017 	ldw	r5,128(sp)
   17248:	d8001d85 	stb	zero,118(sp)
   1724c:	20c00204 	addi	r3,r4,8
   17250:	24800017 	ldw	r18,0(r4)
   17254:	25000117 	ldw	r20,4(r4)
   17258:	28030f16 	blt	r5,zero,17e98 <___svfiprintf_internal_r+0x10a0>
   1725c:	013fdfc4 	movi	r4,-129
   17260:	9504b03a 	or	r2,r18,r20
   17264:	d8c02415 	stw	r3,144(sp)
   17268:	8120703a 	and	r16,r16,r4
   1726c:	002b883a 	mov	r21,zero
   17270:	1000cd1e 	bne	r2,zero,175a8 <___svfiprintf_internal_r+0x7b0>
   17274:	d8c02017 	ldw	r3,128(sp)
   17278:	1803141e 	bne	r3,zero,17ecc <___svfiprintf_internal_r+0x10d4>
   1727c:	d8002015 	stw	zero,128(sp)
   17280:	0029883a 	mov	r20,zero
   17284:	dc401a04 	addi	r17,sp,104
   17288:	dc802017 	ldw	r18,128(sp)
   1728c:	9500010e 	bge	r18,r20,17294 <___svfiprintf_internal_r+0x49c>
   17290:	a025883a 	mov	r18,r20
   17294:	ad403fcc 	andi	r21,r21,255
   17298:	ad40201c 	xori	r21,r21,128
   1729c:	ad7fe004 	addi	r21,r21,-128
   172a0:	a8003f26 	beq	r21,zero,173a0 <___svfiprintf_internal_r+0x5a8>
   172a4:	94800044 	addi	r18,r18,1
   172a8:	00003d06 	br	173a0 <___svfiprintf_internal_r+0x5a8>
   172ac:	00c00044 	movi	r3,1
   172b0:	d8c02105 	stb	r3,132(sp)
   172b4:	05400ac4 	movi	r21,43
   172b8:	98c00007 	ldb	r3,0(r19)
   172bc:	003f1a06 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   172c0:	8821883a 	mov	r16,r17
   172c4:	dc402103 	ldbu	r17,132(sp)
   172c8:	b811883a 	mov	r8,r23
   172cc:	8c403fcc 	andi	r17,r17,255
   172d0:	8803a71e 	bne	r17,zero,18170 <___svfiprintf_internal_r+0x1378>
   172d4:	8080080c 	andi	r2,r16,32
   172d8:	10015726 	beq	r2,zero,17838 <___svfiprintf_internal_r+0xa40>
   172dc:	d8c02417 	ldw	r3,144(sp)
   172e0:	d9002017 	ldw	r4,128(sp)
   172e4:	d8001d85 	stb	zero,118(sp)
   172e8:	18800204 	addi	r2,r3,8
   172ec:	1c800017 	ldw	r18,0(r3)
   172f0:	1d000117 	ldw	r20,4(r3)
   172f4:	2002db16 	blt	r4,zero,17e64 <___svfiprintf_internal_r+0x106c>
   172f8:	013fdfc4 	movi	r4,-129
   172fc:	9506b03a 	or	r3,r18,r20
   17300:	d8802415 	stw	r2,144(sp)
   17304:	8120703a 	and	r16,r16,r4
   17308:	18015826 	beq	r3,zero,1786c <___svfiprintf_internal_r+0xa74>
   1730c:	002b883a 	mov	r21,zero
   17310:	dc401a04 	addi	r17,sp,104
   17314:	9006d0fa 	srli	r3,r18,3
   17318:	a008977a 	slli	r4,r20,29
   1731c:	a028d0fa 	srli	r20,r20,3
   17320:	948001cc 	andi	r18,r18,7
   17324:	90800c04 	addi	r2,r18,48
   17328:	8c7fffc4 	addi	r17,r17,-1
   1732c:	20e4b03a 	or	r18,r4,r3
   17330:	88800005 	stb	r2,0(r17)
   17334:	9506b03a 	or	r3,r18,r20
   17338:	183ff61e 	bne	r3,zero,17314 <__alt_mem_nios_system_shared_memory+0xfffd7314>
   1733c:	80c0004c 	andi	r3,r16,1
   17340:	18028926 	beq	r3,zero,17d68 <___svfiprintf_internal_r+0xf70>
   17344:	10803fcc 	andi	r2,r2,255
   17348:	1080201c 	xori	r2,r2,128
   1734c:	10bfe004 	addi	r2,r2,-128
   17350:	00c00c04 	movi	r3,48
   17354:	10ffb026 	beq	r2,r3,17218 <__alt_mem_nios_system_shared_memory+0xfffd7218>
   17358:	88ffffc5 	stb	r3,-1(r17)
   1735c:	d8c01e17 	ldw	r3,120(sp)
   17360:	88bfffc4 	addi	r2,r17,-1
   17364:	1023883a 	mov	r17,r2
   17368:	18a9c83a 	sub	r20,r3,r2
   1736c:	003fc606 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   17370:	d8c02417 	ldw	r3,144(sp)
   17374:	04800044 	movi	r18,1
   17378:	8821883a 	mov	r16,r17
   1737c:	18800017 	ldw	r2,0(r3)
   17380:	18c00104 	addi	r3,r3,4
   17384:	b811883a 	mov	r8,r23
   17388:	d8001d85 	stb	zero,118(sp)
   1738c:	d8801005 	stb	r2,64(sp)
   17390:	d8c02415 	stw	r3,144(sp)
   17394:	9029883a 	mov	r20,r18
   17398:	dc401004 	addi	r17,sp,64
   1739c:	d8002015 	stw	zero,128(sp)
   173a0:	80c0008c 	andi	r3,r16,2
   173a4:	d8c02115 	stw	r3,132(sp)
   173a8:	18000126 	beq	r3,zero,173b0 <___svfiprintf_internal_r+0x5b8>
   173ac:	94800084 	addi	r18,r18,2
   173b0:	80c0210c 	andi	r3,r16,132
   173b4:	d8c02215 	stw	r3,136(sp)
   173b8:	1801321e 	bne	r3,zero,17884 <___svfiprintf_internal_r+0xa8c>
   173bc:	d9002517 	ldw	r4,148(sp)
   173c0:	24b9c83a 	sub	fp,r4,r18
   173c4:	07012f0e 	bge	zero,fp,17884 <___svfiprintf_internal_r+0xa8c>
   173c8:	02400404 	movi	r9,16
   173cc:	d8c01c17 	ldw	r3,112(sp)
   173d0:	d8801b17 	ldw	r2,108(sp)
   173d4:	4f03250e 	bge	r9,fp,1806c <___svfiprintf_internal_r+0x1274>
   173d8:	010000b4 	movhi	r4,2
   173dc:	213b3c04 	addi	r4,r4,-4880
   173e0:	dc002a15 	stw	r16,168(sp)
   173e4:	dc402b15 	stw	r17,172(sp)
   173e8:	d9002815 	stw	r4,160(sp)
   173ec:	e023883a 	mov	r17,fp
   173f0:	482f883a 	mov	r23,r9
   173f4:	9839883a 	mov	fp,r19
   173f8:	054001c4 	movi	r21,7
   173fc:	9027883a 	mov	r19,r18
   17400:	dc002717 	ldw	r16,156(sp)
   17404:	dc802317 	ldw	r18,140(sp)
   17408:	00000306 	br	17418 <___svfiprintf_internal_r+0x620>
   1740c:	8c7ffc04 	addi	r17,r17,-16
   17410:	42000204 	addi	r8,r8,8
   17414:	bc40130e 	bge	r23,r17,17464 <___svfiprintf_internal_r+0x66c>
   17418:	014000b4 	movhi	r5,2
   1741c:	18c00404 	addi	r3,r3,16
   17420:	10800044 	addi	r2,r2,1
   17424:	297b3c04 	addi	r5,r5,-4880
   17428:	41400015 	stw	r5,0(r8)
   1742c:	45c00115 	stw	r23,4(r8)
   17430:	d8c01c15 	stw	r3,112(sp)
   17434:	d8801b15 	stw	r2,108(sp)
   17438:	a8bff40e 	bge	r21,r2,1740c <__alt_mem_nios_system_shared_memory+0xfffd740c>
   1743c:	d9801a04 	addi	r6,sp,104
   17440:	900b883a 	mov	r5,r18
   17444:	8009883a 	mov	r4,r16
   17448:	0016c280 	call	16c28 <__ssprint_r>
   1744c:	1001aa1e 	bne	r2,zero,17af8 <___svfiprintf_internal_r+0xd00>
   17450:	8c7ffc04 	addi	r17,r17,-16
   17454:	d8c01c17 	ldw	r3,112(sp)
   17458:	d8801b17 	ldw	r2,108(sp)
   1745c:	d811883a 	mov	r8,sp
   17460:	bc7fed16 	blt	r23,r17,17418 <__alt_mem_nios_system_shared_memory+0xfffd7418>
   17464:	9825883a 	mov	r18,r19
   17468:	dc002a17 	ldw	r16,168(sp)
   1746c:	e027883a 	mov	r19,fp
   17470:	8839883a 	mov	fp,r17
   17474:	dc402b17 	ldw	r17,172(sp)
   17478:	d9002817 	ldw	r4,160(sp)
   1747c:	e0c7883a 	add	r3,fp,r3
   17480:	10800044 	addi	r2,r2,1
   17484:	41000015 	stw	r4,0(r8)
   17488:	47000115 	stw	fp,4(r8)
   1748c:	d8c01c15 	stw	r3,112(sp)
   17490:	d8801b15 	stw	r2,108(sp)
   17494:	010001c4 	movi	r4,7
   17498:	20821616 	blt	r4,r2,17cf4 <___svfiprintf_internal_r+0xefc>
   1749c:	42000204 	addi	r8,r8,8
   174a0:	0000fa06 	br	1788c <___svfiprintf_internal_r+0xa94>
   174a4:	8821883a 	mov	r16,r17
   174a8:	dc402103 	ldbu	r17,132(sp)
   174ac:	b811883a 	mov	r8,r23
   174b0:	8c403fcc 	andi	r17,r17,255
   174b4:	8803361e 	bne	r17,zero,18190 <___svfiprintf_internal_r+0x1398>
   174b8:	014000b4 	movhi	r5,2
   174bc:	297a8c04 	addi	r5,r5,-5584
   174c0:	d9402915 	stw	r5,164(sp)
   174c4:	8080080c 	andi	r2,r16,32
   174c8:	103f331e 	bne	r2,zero,17198 <__alt_mem_nios_system_shared_memory+0xfffd7198>
   174cc:	8080040c 	andi	r2,r16,16
   174d0:	1002551e 	bne	r2,zero,17e28 <___svfiprintf_internal_r+0x1030>
   174d4:	8080100c 	andi	r2,r16,64
   174d8:	1002a626 	beq	r2,zero,17f74 <___svfiprintf_internal_r+0x117c>
   174dc:	d8802417 	ldw	r2,144(sp)
   174e0:	0029883a 	mov	r20,zero
   174e4:	1480000b 	ldhu	r18,0(r2)
   174e8:	10800104 	addi	r2,r2,4
   174ec:	d8802415 	stw	r2,144(sp)
   174f0:	003f2e06 	br	171ac <__alt_mem_nios_system_shared_memory+0xfffd71ac>
   174f4:	8821883a 	mov	r16,r17
   174f8:	dc402103 	ldbu	r17,132(sp)
   174fc:	b811883a 	mov	r8,r23
   17500:	8c403fcc 	andi	r17,r17,255
   17504:	88030b1e 	bne	r17,zero,18134 <___svfiprintf_internal_r+0x133c>
   17508:	8080080c 	andi	r2,r16,32
   1750c:	1002271e 	bne	r2,zero,17dac <___svfiprintf_internal_r+0xfb4>
   17510:	8080040c 	andi	r2,r16,16
   17514:	10028e26 	beq	r2,zero,17f50 <___svfiprintf_internal_r+0x1158>
   17518:	d8c02417 	ldw	r3,144(sp)
   1751c:	d9002617 	ldw	r4,152(sp)
   17520:	18800017 	ldw	r2,0(r3)
   17524:	18c00104 	addi	r3,r3,4
   17528:	d8c02415 	stw	r3,144(sp)
   1752c:	11000015 	stw	r4,0(r2)
   17530:	003e5306 	br	16e80 <__alt_mem_nios_system_shared_memory+0xfffd6e80>
   17534:	98c00007 	ldb	r3,0(r19)
   17538:	01401b04 	movi	r5,108
   1753c:	19424f26 	beq	r3,r5,17e7c <___svfiprintf_internal_r+0x1084>
   17540:	8c400414 	ori	r17,r17,16
   17544:	003e7806 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   17548:	8c401014 	ori	r17,r17,64
   1754c:	98c00007 	ldb	r3,0(r19)
   17550:	003e7506 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   17554:	8821883a 	mov	r16,r17
   17558:	dc402103 	ldbu	r17,132(sp)
   1755c:	b811883a 	mov	r8,r23
   17560:	8c403fcc 	andi	r17,r17,255
   17564:	8802fe1e 	bne	r17,zero,18160 <___svfiprintf_internal_r+0x1368>
   17568:	8080080c 	andi	r2,r16,32
   1756c:	10004626 	beq	r2,zero,17688 <___svfiprintf_internal_r+0x890>
   17570:	d9002417 	ldw	r4,144(sp)
   17574:	20800117 	ldw	r2,4(r4)
   17578:	24800017 	ldw	r18,0(r4)
   1757c:	21000204 	addi	r4,r4,8
   17580:	d9002415 	stw	r4,144(sp)
   17584:	1029883a 	mov	r20,r2
   17588:	10004a16 	blt	r2,zero,176b4 <___svfiprintf_internal_r+0x8bc>
   1758c:	d9002017 	ldw	r4,128(sp)
   17590:	dd401d83 	ldbu	r21,118(sp)
   17594:	2001eb16 	blt	r4,zero,17d44 <___svfiprintf_internal_r+0xf4c>
   17598:	00ffdfc4 	movi	r3,-129
   1759c:	9504b03a 	or	r2,r18,r20
   175a0:	80e0703a 	and	r16,r16,r3
   175a4:	103f3326 	beq	r2,zero,17274 <__alt_mem_nios_system_shared_memory+0xfffd7274>
   175a8:	a0009426 	beq	r20,zero,177fc <___svfiprintf_internal_r+0xa04>
   175ac:	dc401a04 	addi	r17,sp,104
   175b0:	402f883a 	mov	r23,r8
   175b4:	9009883a 	mov	r4,r18
   175b8:	a00b883a 	mov	r5,r20
   175bc:	01800284 	movi	r6,10
   175c0:	000f883a 	mov	r7,zero
   175c4:	001a5240 	call	1a524 <__umoddi3>
   175c8:	10800c04 	addi	r2,r2,48
   175cc:	8c7fffc4 	addi	r17,r17,-1
   175d0:	9009883a 	mov	r4,r18
   175d4:	a00b883a 	mov	r5,r20
   175d8:	88800005 	stb	r2,0(r17)
   175dc:	01800284 	movi	r6,10
   175e0:	000f883a 	mov	r7,zero
   175e4:	0019f280 	call	19f28 <__udivdi3>
   175e8:	1025883a 	mov	r18,r2
   175ec:	10c4b03a 	or	r2,r2,r3
   175f0:	1829883a 	mov	r20,r3
   175f4:	103fef1e 	bne	r2,zero,175b4 <__alt_mem_nios_system_shared_memory+0xfffd75b4>
   175f8:	d9001e17 	ldw	r4,120(sp)
   175fc:	b811883a 	mov	r8,r23
   17600:	2469c83a 	sub	r20,r4,r17
   17604:	003f2006 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   17608:	d8802417 	ldw	r2,144(sp)
   1760c:	8821883a 	mov	r16,r17
   17610:	d8001d85 	stb	zero,118(sp)
   17614:	14400017 	ldw	r17,0(r2)
   17618:	b811883a 	mov	r8,r23
   1761c:	15c00104 	addi	r23,r2,4
   17620:	88026c26 	beq	r17,zero,17fd4 <___svfiprintf_internal_r+0x11dc>
   17624:	d8c02017 	ldw	r3,128(sp)
   17628:	18025f16 	blt	r3,zero,17fa8 <___svfiprintf_internal_r+0x11b0>
   1762c:	180d883a 	mov	r6,r3
   17630:	000b883a 	mov	r5,zero
   17634:	8809883a 	mov	r4,r17
   17638:	da002d15 	stw	r8,180(sp)
   1763c:	000afc80 	call	afc8 <memchr>
   17640:	da002d17 	ldw	r8,180(sp)
   17644:	1002a526 	beq	r2,zero,180dc <___svfiprintf_internal_r+0x12e4>
   17648:	1469c83a 	sub	r20,r2,r17
   1764c:	dd401d83 	ldbu	r21,118(sp)
   17650:	ddc02415 	stw	r23,144(sp)
   17654:	d8002015 	stw	zero,128(sp)
   17658:	003f0b06 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   1765c:	8c400814 	ori	r17,r17,32
   17660:	98c00007 	ldb	r3,0(r19)
   17664:	003e3006 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   17668:	8821883a 	mov	r16,r17
   1766c:	dc402103 	ldbu	r17,132(sp)
   17670:	b811883a 	mov	r8,r23
   17674:	8c403fcc 	andi	r17,r17,255
   17678:	8802b01e 	bne	r17,zero,1813c <___svfiprintf_internal_r+0x1344>
   1767c:	84000414 	ori	r16,r16,16
   17680:	8080080c 	andi	r2,r16,32
   17684:	103fba1e 	bne	r2,zero,17570 <__alt_mem_nios_system_shared_memory+0xfffd7570>
   17688:	8080040c 	andi	r2,r16,16
   1768c:	1001df1e 	bne	r2,zero,17e0c <___svfiprintf_internal_r+0x1014>
   17690:	8080100c 	andi	r2,r16,64
   17694:	10023d26 	beq	r2,zero,17f8c <___svfiprintf_internal_r+0x1194>
   17698:	d8802417 	ldw	r2,144(sp)
   1769c:	1480000f 	ldh	r18,0(r2)
   176a0:	10800104 	addi	r2,r2,4
   176a4:	d8802415 	stw	r2,144(sp)
   176a8:	9029d7fa 	srai	r20,r18,31
   176ac:	a005883a 	mov	r2,r20
   176b0:	103fb60e 	bge	r2,zero,1758c <__alt_mem_nios_system_shared_memory+0xfffd758c>
   176b4:	d9402017 	ldw	r5,128(sp)
   176b8:	04a5c83a 	sub	r18,zero,r18
   176bc:	05400b44 	movi	r21,45
   176c0:	9004c03a 	cmpne	r2,r18,zero
   176c4:	0529c83a 	sub	r20,zero,r20
   176c8:	dd401d85 	stb	r21,118(sp)
   176cc:	a0a9c83a 	sub	r20,r20,r2
   176d0:	28026c16 	blt	r5,zero,18084 <___svfiprintf_internal_r+0x128c>
   176d4:	00bfdfc4 	movi	r2,-129
   176d8:	80a0703a 	and	r16,r16,r2
   176dc:	a03fb31e 	bne	r20,zero,175ac <__alt_mem_nios_system_shared_memory+0xfffd75ac>
   176e0:	00004606 	br	177fc <___svfiprintf_internal_r+0xa04>
   176e4:	9839883a 	mov	fp,r19
   176e8:	d8002515 	stw	zero,148(sp)
   176ec:	1c3ff404 	addi	r16,r3,-48
   176f0:	0009883a 	mov	r4,zero
   176f4:	01400284 	movi	r5,10
   176f8:	00051580 	call	5158 <__mulsi3>
   176fc:	e0c00007 	ldb	r3,0(fp)
   17700:	8089883a 	add	r4,r16,r2
   17704:	9cc00044 	addi	r19,r19,1
   17708:	1c3ff404 	addi	r16,r3,-48
   1770c:	9839883a 	mov	fp,r19
   17710:	a43ff82e 	bgeu	r20,r16,176f4 <__alt_mem_nios_system_shared_memory+0xfffd76f4>
   17714:	d9002515 	stw	r4,148(sp)
   17718:	18bff804 	addi	r2,r3,-32
   1771c:	90be052e 	bgeu	r18,r2,16f34 <__alt_mem_nios_system_shared_memory+0xfffd6f34>
   17720:	8821883a 	mov	r16,r17
   17724:	dc402103 	ldbu	r17,132(sp)
   17728:	b811883a 	mov	r8,r23
   1772c:	8c403fcc 	andi	r17,r17,255
   17730:	88028d1e 	bne	r17,zero,18168 <___svfiprintf_internal_r+0x1370>
   17734:	1800ea26 	beq	r3,zero,17ae0 <___svfiprintf_internal_r+0xce8>
   17738:	04800044 	movi	r18,1
   1773c:	d8c01005 	stb	r3,64(sp)
   17740:	d8001d85 	stb	zero,118(sp)
   17744:	9029883a 	mov	r20,r18
   17748:	dc401004 	addi	r17,sp,64
   1774c:	003f1306 	br	1739c <__alt_mem_nios_system_shared_memory+0xfffd739c>
   17750:	8c402014 	ori	r17,r17,128
   17754:	98c00007 	ldb	r3,0(r19)
   17758:	003df306 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   1775c:	98c00007 	ldb	r3,0(r19)
   17760:	01000a84 	movi	r4,42
   17764:	9f000044 	addi	fp,r19,1
   17768:	19026326 	beq	r3,r4,180f8 <___svfiprintf_internal_r+0x1300>
   1776c:	1c3ff404 	addi	r16,r3,-48
   17770:	0009883a 	mov	r4,zero
   17774:	a4025636 	bltu	r20,r16,180d0 <___svfiprintf_internal_r+0x12d8>
   17778:	01400284 	movi	r5,10
   1777c:	00051580 	call	5158 <__mulsi3>
   17780:	e0c00007 	ldb	r3,0(fp)
   17784:	1409883a 	add	r4,r2,r16
   17788:	e4c00044 	addi	r19,fp,1
   1778c:	1c3ff404 	addi	r16,r3,-48
   17790:	9839883a 	mov	fp,r19
   17794:	a43ff82e 	bgeu	r20,r16,17778 <__alt_mem_nios_system_shared_memory+0xfffd7778>
   17798:	20020c16 	blt	r4,zero,17fcc <___svfiprintf_internal_r+0x11d4>
   1779c:	d9002015 	stw	r4,128(sp)
   177a0:	003de206 	br	16f2c <__alt_mem_nios_system_shared_memory+0xfffd6f2c>
   177a4:	8821883a 	mov	r16,r17
   177a8:	dc402103 	ldbu	r17,132(sp)
   177ac:	b811883a 	mov	r8,r23
   177b0:	8c403fcc 	andi	r17,r17,255
   177b4:	8802721e 	bne	r17,zero,18180 <___svfiprintf_internal_r+0x1388>
   177b8:	84000414 	ori	r16,r16,16
   177bc:	8080080c 	andi	r2,r16,32
   177c0:	103e9f1e 	bne	r2,zero,17240 <__alt_mem_nios_system_shared_memory+0xfffd7240>
   177c4:	8080040c 	andi	r2,r16,16
   177c8:	10015326 	beq	r2,zero,17d18 <___svfiprintf_internal_r+0xf20>
   177cc:	d8c02417 	ldw	r3,144(sp)
   177d0:	d9002017 	ldw	r4,128(sp)
   177d4:	d8001d85 	stb	zero,118(sp)
   177d8:	18800104 	addi	r2,r3,4
   177dc:	1c800017 	ldw	r18,0(r3)
   177e0:	0029883a 	mov	r20,zero
   177e4:	20015516 	blt	r4,zero,17d3c <___svfiprintf_internal_r+0xf44>
   177e8:	00ffdfc4 	movi	r3,-129
   177ec:	d8802415 	stw	r2,144(sp)
   177f0:	80e0703a 	and	r16,r16,r3
   177f4:	002b883a 	mov	r21,zero
   177f8:	903e9e26 	beq	r18,zero,17274 <__alt_mem_nios_system_shared_memory+0xfffd7274>
   177fc:	00800244 	movi	r2,9
   17800:	14bf6a36 	bltu	r2,r18,175ac <__alt_mem_nios_system_shared_memory+0xfffd75ac>
   17804:	94800c04 	addi	r18,r18,48
   17808:	dc8019c5 	stb	r18,103(sp)
   1780c:	dd002c17 	ldw	r20,176(sp)
   17810:	dc4019c4 	addi	r17,sp,103
   17814:	003e9c06 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   17818:	8821883a 	mov	r16,r17
   1781c:	dc402103 	ldbu	r17,132(sp)
   17820:	b811883a 	mov	r8,r23
   17824:	8c403fcc 	andi	r17,r17,255
   17828:	8802571e 	bne	r17,zero,18188 <___svfiprintf_internal_r+0x1390>
   1782c:	84000414 	ori	r16,r16,16
   17830:	8080080c 	andi	r2,r16,32
   17834:	103ea91e 	bne	r2,zero,172dc <__alt_mem_nios_system_shared_memory+0xfffd72dc>
   17838:	8080040c 	andi	r2,r16,16
   1783c:	10018026 	beq	r2,zero,17e40 <___svfiprintf_internal_r+0x1048>
   17840:	d9402417 	ldw	r5,144(sp)
   17844:	d8c02017 	ldw	r3,128(sp)
   17848:	d8001d85 	stb	zero,118(sp)
   1784c:	28800104 	addi	r2,r5,4
   17850:	2c800017 	ldw	r18,0(r5)
   17854:	0029883a 	mov	r20,zero
   17858:	18018216 	blt	r3,zero,17e64 <___svfiprintf_internal_r+0x106c>
   1785c:	00ffdfc4 	movi	r3,-129
   17860:	d8802415 	stw	r2,144(sp)
   17864:	80e0703a 	and	r16,r16,r3
   17868:	903ea81e 	bne	r18,zero,1730c <__alt_mem_nios_system_shared_memory+0xfffd730c>
   1786c:	d8802017 	ldw	r2,128(sp)
   17870:	002b883a 	mov	r21,zero
   17874:	1001f226 	beq	r2,zero,18040 <___svfiprintf_internal_r+0x1248>
   17878:	0025883a 	mov	r18,zero
   1787c:	0029883a 	mov	r20,zero
   17880:	003ea306 	br	17310 <__alt_mem_nios_system_shared_memory+0xfffd7310>
   17884:	d8c01c17 	ldw	r3,112(sp)
   17888:	d8801b17 	ldw	r2,108(sp)
   1788c:	d9001d87 	ldb	r4,118(sp)
   17890:	20000b26 	beq	r4,zero,178c0 <___svfiprintf_internal_r+0xac8>
   17894:	d9001d84 	addi	r4,sp,118
   17898:	18c00044 	addi	r3,r3,1
   1789c:	10800044 	addi	r2,r2,1
   178a0:	41000015 	stw	r4,0(r8)
   178a4:	01000044 	movi	r4,1
   178a8:	41000115 	stw	r4,4(r8)
   178ac:	d8c01c15 	stw	r3,112(sp)
   178b0:	d8801b15 	stw	r2,108(sp)
   178b4:	010001c4 	movi	r4,7
   178b8:	2080f316 	blt	r4,r2,17c88 <___svfiprintf_internal_r+0xe90>
   178bc:	42000204 	addi	r8,r8,8
   178c0:	d9402117 	ldw	r5,132(sp)
   178c4:	28000b26 	beq	r5,zero,178f4 <___svfiprintf_internal_r+0xafc>
   178c8:	d9001d04 	addi	r4,sp,116
   178cc:	18c00084 	addi	r3,r3,2
   178d0:	10800044 	addi	r2,r2,1
   178d4:	41000015 	stw	r4,0(r8)
   178d8:	01000084 	movi	r4,2
   178dc:	41000115 	stw	r4,4(r8)
   178e0:	d8c01c15 	stw	r3,112(sp)
   178e4:	d8801b15 	stw	r2,108(sp)
   178e8:	010001c4 	movi	r4,7
   178ec:	2080ef16 	blt	r4,r2,17cac <___svfiprintf_internal_r+0xeb4>
   178f0:	42000204 	addi	r8,r8,8
   178f4:	d9402217 	ldw	r5,136(sp)
   178f8:	01002004 	movi	r4,128
   178fc:	29008f26 	beq	r5,r4,17b3c <___svfiprintf_internal_r+0xd44>
   17900:	d9002017 	ldw	r4,128(sp)
   17904:	252fc83a 	sub	r23,r4,r20
   17908:	05c0310e 	bge	zero,r23,179d0 <___svfiprintf_internal_r+0xbd8>
   1790c:	07000404 	movi	fp,16
   17910:	e5c17d0e 	bge	fp,r23,17f08 <___svfiprintf_internal_r+0x1110>
   17914:	010000b4 	movhi	r4,2
   17918:	213b3804 	addi	r4,r4,-4896
   1791c:	dc002015 	stw	r16,128(sp)
   17920:	dc402215 	stw	r17,136(sp)
   17924:	d9002115 	stw	r4,132(sp)
   17928:	b823883a 	mov	r17,r23
   1792c:	054001c4 	movi	r21,7
   17930:	982f883a 	mov	r23,r19
   17934:	dc002717 	ldw	r16,156(sp)
   17938:	9027883a 	mov	r19,r18
   1793c:	dc802317 	ldw	r18,140(sp)
   17940:	00000306 	br	17950 <___svfiprintf_internal_r+0xb58>
   17944:	8c7ffc04 	addi	r17,r17,-16
   17948:	42000204 	addi	r8,r8,8
   1794c:	e440110e 	bge	fp,r17,17994 <___svfiprintf_internal_r+0xb9c>
   17950:	18c00404 	addi	r3,r3,16
   17954:	10800044 	addi	r2,r2,1
   17958:	45800015 	stw	r22,0(r8)
   1795c:	47000115 	stw	fp,4(r8)
   17960:	d8c01c15 	stw	r3,112(sp)
   17964:	d8801b15 	stw	r2,108(sp)
   17968:	a8bff60e 	bge	r21,r2,17944 <__alt_mem_nios_system_shared_memory+0xfffd7944>
   1796c:	d9801a04 	addi	r6,sp,104
   17970:	900b883a 	mov	r5,r18
   17974:	8009883a 	mov	r4,r16
   17978:	0016c280 	call	16c28 <__ssprint_r>
   1797c:	10005e1e 	bne	r2,zero,17af8 <___svfiprintf_internal_r+0xd00>
   17980:	8c7ffc04 	addi	r17,r17,-16
   17984:	d8c01c17 	ldw	r3,112(sp)
   17988:	d8801b17 	ldw	r2,108(sp)
   1798c:	d811883a 	mov	r8,sp
   17990:	e47fef16 	blt	fp,r17,17950 <__alt_mem_nios_system_shared_memory+0xfffd7950>
   17994:	9825883a 	mov	r18,r19
   17998:	dc002017 	ldw	r16,128(sp)
   1799c:	b827883a 	mov	r19,r23
   179a0:	882f883a 	mov	r23,r17
   179a4:	dc402217 	ldw	r17,136(sp)
   179a8:	d9402117 	ldw	r5,132(sp)
   179ac:	1dc7883a 	add	r3,r3,r23
   179b0:	10800044 	addi	r2,r2,1
   179b4:	41400015 	stw	r5,0(r8)
   179b8:	45c00115 	stw	r23,4(r8)
   179bc:	d8c01c15 	stw	r3,112(sp)
   179c0:	d8801b15 	stw	r2,108(sp)
   179c4:	010001c4 	movi	r4,7
   179c8:	2080a616 	blt	r4,r2,17c64 <___svfiprintf_internal_r+0xe6c>
   179cc:	42000204 	addi	r8,r8,8
   179d0:	a0c7883a 	add	r3,r20,r3
   179d4:	10800044 	addi	r2,r2,1
   179d8:	44400015 	stw	r17,0(r8)
   179dc:	45000115 	stw	r20,4(r8)
   179e0:	d8c01c15 	stw	r3,112(sp)
   179e4:	d8801b15 	stw	r2,108(sp)
   179e8:	010001c4 	movi	r4,7
   179ec:	20808816 	blt	r4,r2,17c10 <___svfiprintf_internal_r+0xe18>
   179f0:	42000204 	addi	r8,r8,8
   179f4:	8400010c 	andi	r16,r16,4
   179f8:	80002c26 	beq	r16,zero,17aac <___svfiprintf_internal_r+0xcb4>
   179fc:	d8802517 	ldw	r2,148(sp)
   17a00:	14a1c83a 	sub	r16,r2,r18
   17a04:	0400290e 	bge	zero,r16,17aac <___svfiprintf_internal_r+0xcb4>
   17a08:	04400404 	movi	r17,16
   17a0c:	d8801b17 	ldw	r2,108(sp)
   17a10:	8c01a70e 	bge	r17,r16,180b0 <___svfiprintf_internal_r+0x12b8>
   17a14:	014000b4 	movhi	r5,2
   17a18:	297b3c04 	addi	r5,r5,-4880
   17a1c:	d9402815 	stw	r5,160(sp)
   17a20:	050001c4 	movi	r20,7
   17a24:	dd402717 	ldw	r21,156(sp)
   17a28:	ddc02317 	ldw	r23,140(sp)
   17a2c:	00000306 	br	17a3c <___svfiprintf_internal_r+0xc44>
   17a30:	843ffc04 	addi	r16,r16,-16
   17a34:	42000204 	addi	r8,r8,8
   17a38:	8c00130e 	bge	r17,r16,17a88 <___svfiprintf_internal_r+0xc90>
   17a3c:	010000b4 	movhi	r4,2
   17a40:	18c00404 	addi	r3,r3,16
   17a44:	10800044 	addi	r2,r2,1
   17a48:	213b3c04 	addi	r4,r4,-4880
   17a4c:	41000015 	stw	r4,0(r8)
   17a50:	44400115 	stw	r17,4(r8)
   17a54:	d8c01c15 	stw	r3,112(sp)
   17a58:	d8801b15 	stw	r2,108(sp)
   17a5c:	a0bff40e 	bge	r20,r2,17a30 <__alt_mem_nios_system_shared_memory+0xfffd7a30>
   17a60:	d9801a04 	addi	r6,sp,104
   17a64:	b80b883a 	mov	r5,r23
   17a68:	a809883a 	mov	r4,r21
   17a6c:	0016c280 	call	16c28 <__ssprint_r>
   17a70:	1000211e 	bne	r2,zero,17af8 <___svfiprintf_internal_r+0xd00>
   17a74:	843ffc04 	addi	r16,r16,-16
   17a78:	d8c01c17 	ldw	r3,112(sp)
   17a7c:	d8801b17 	ldw	r2,108(sp)
   17a80:	d811883a 	mov	r8,sp
   17a84:	8c3fed16 	blt	r17,r16,17a3c <__alt_mem_nios_system_shared_memory+0xfffd7a3c>
   17a88:	d9402817 	ldw	r5,160(sp)
   17a8c:	1c07883a 	add	r3,r3,r16
   17a90:	10800044 	addi	r2,r2,1
   17a94:	41400015 	stw	r5,0(r8)
   17a98:	44000115 	stw	r16,4(r8)
   17a9c:	d8c01c15 	stw	r3,112(sp)
   17aa0:	d8801b15 	stw	r2,108(sp)
   17aa4:	010001c4 	movi	r4,7
   17aa8:	2080b516 	blt	r4,r2,17d80 <___svfiprintf_internal_r+0xf88>
   17aac:	d8802517 	ldw	r2,148(sp)
   17ab0:	1480010e 	bge	r2,r18,17ab8 <___svfiprintf_internal_r+0xcc0>
   17ab4:	9005883a 	mov	r2,r18
   17ab8:	d9002617 	ldw	r4,152(sp)
   17abc:	2089883a 	add	r4,r4,r2
   17ac0:	d9002615 	stw	r4,152(sp)
   17ac4:	18005a1e 	bne	r3,zero,17c30 <___svfiprintf_internal_r+0xe38>
   17ac8:	98800007 	ldb	r2,0(r19)
   17acc:	d8001b15 	stw	zero,108(sp)
   17ad0:	d811883a 	mov	r8,sp
   17ad4:	103cec1e 	bne	r2,zero,16e88 <__alt_mem_nios_system_shared_memory+0xfffd6e88>
   17ad8:	9825883a 	mov	r18,r19
   17adc:	003d0206 	br	16ee8 <__alt_mem_nios_system_shared_memory+0xfffd6ee8>
   17ae0:	d8801c17 	ldw	r2,112(sp)
   17ae4:	10000426 	beq	r2,zero,17af8 <___svfiprintf_internal_r+0xd00>
   17ae8:	d9402317 	ldw	r5,140(sp)
   17aec:	d9002717 	ldw	r4,156(sp)
   17af0:	d9801a04 	addi	r6,sp,104
   17af4:	0016c280 	call	16c28 <__ssprint_r>
   17af8:	d9402317 	ldw	r5,140(sp)
   17afc:	d8802617 	ldw	r2,152(sp)
   17b00:	28c0030b 	ldhu	r3,12(r5)
   17b04:	18c0100c 	andi	r3,r3,64
   17b08:	18015c1e 	bne	r3,zero,1807c <___svfiprintf_internal_r+0x1284>
   17b0c:	dfc03717 	ldw	ra,220(sp)
   17b10:	df003617 	ldw	fp,216(sp)
   17b14:	ddc03517 	ldw	r23,212(sp)
   17b18:	dd803417 	ldw	r22,208(sp)
   17b1c:	dd403317 	ldw	r21,204(sp)
   17b20:	dd003217 	ldw	r20,200(sp)
   17b24:	dcc03117 	ldw	r19,196(sp)
   17b28:	dc803017 	ldw	r18,192(sp)
   17b2c:	dc402f17 	ldw	r17,188(sp)
   17b30:	dc002e17 	ldw	r16,184(sp)
   17b34:	dec03804 	addi	sp,sp,224
   17b38:	f800283a 	ret
   17b3c:	d9002517 	ldw	r4,148(sp)
   17b40:	24afc83a 	sub	r23,r4,r18
   17b44:	05ff6e0e 	bge	zero,r23,17900 <__alt_mem_nios_system_shared_memory+0xfffd7900>
   17b48:	07000404 	movi	fp,16
   17b4c:	e5c15c0e 	bge	fp,r23,180c0 <___svfiprintf_internal_r+0x12c8>
   17b50:	010000b4 	movhi	r4,2
   17b54:	213b3804 	addi	r4,r4,-4896
   17b58:	dc002215 	stw	r16,136(sp)
   17b5c:	dc402815 	stw	r17,160(sp)
   17b60:	d9002115 	stw	r4,132(sp)
   17b64:	b823883a 	mov	r17,r23
   17b68:	054001c4 	movi	r21,7
   17b6c:	982f883a 	mov	r23,r19
   17b70:	dc002717 	ldw	r16,156(sp)
   17b74:	9027883a 	mov	r19,r18
   17b78:	dc802317 	ldw	r18,140(sp)
   17b7c:	00000306 	br	17b8c <___svfiprintf_internal_r+0xd94>
   17b80:	8c7ffc04 	addi	r17,r17,-16
   17b84:	42000204 	addi	r8,r8,8
   17b88:	e440110e 	bge	fp,r17,17bd0 <___svfiprintf_internal_r+0xdd8>
   17b8c:	18c00404 	addi	r3,r3,16
   17b90:	10800044 	addi	r2,r2,1
   17b94:	45800015 	stw	r22,0(r8)
   17b98:	47000115 	stw	fp,4(r8)
   17b9c:	d8c01c15 	stw	r3,112(sp)
   17ba0:	d8801b15 	stw	r2,108(sp)
   17ba4:	a8bff60e 	bge	r21,r2,17b80 <__alt_mem_nios_system_shared_memory+0xfffd7b80>
   17ba8:	d9801a04 	addi	r6,sp,104
   17bac:	900b883a 	mov	r5,r18
   17bb0:	8009883a 	mov	r4,r16
   17bb4:	0016c280 	call	16c28 <__ssprint_r>
   17bb8:	103fcf1e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17bbc:	8c7ffc04 	addi	r17,r17,-16
   17bc0:	d8c01c17 	ldw	r3,112(sp)
   17bc4:	d8801b17 	ldw	r2,108(sp)
   17bc8:	d811883a 	mov	r8,sp
   17bcc:	e47fef16 	blt	fp,r17,17b8c <__alt_mem_nios_system_shared_memory+0xfffd7b8c>
   17bd0:	9825883a 	mov	r18,r19
   17bd4:	dc002217 	ldw	r16,136(sp)
   17bd8:	b827883a 	mov	r19,r23
   17bdc:	882f883a 	mov	r23,r17
   17be0:	dc402817 	ldw	r17,160(sp)
   17be4:	d9402117 	ldw	r5,132(sp)
   17be8:	1dc7883a 	add	r3,r3,r23
   17bec:	10800044 	addi	r2,r2,1
   17bf0:	41400015 	stw	r5,0(r8)
   17bf4:	45c00115 	stw	r23,4(r8)
   17bf8:	d8c01c15 	stw	r3,112(sp)
   17bfc:	d8801b15 	stw	r2,108(sp)
   17c00:	010001c4 	movi	r4,7
   17c04:	2080b716 	blt	r4,r2,17ee4 <___svfiprintf_internal_r+0x10ec>
   17c08:	42000204 	addi	r8,r8,8
   17c0c:	003f3c06 	br	17900 <__alt_mem_nios_system_shared_memory+0xfffd7900>
   17c10:	d9402317 	ldw	r5,140(sp)
   17c14:	d9002717 	ldw	r4,156(sp)
   17c18:	d9801a04 	addi	r6,sp,104
   17c1c:	0016c280 	call	16c28 <__ssprint_r>
   17c20:	103fb51e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17c24:	d8c01c17 	ldw	r3,112(sp)
   17c28:	d811883a 	mov	r8,sp
   17c2c:	003f7106 	br	179f4 <__alt_mem_nios_system_shared_memory+0xfffd79f4>
   17c30:	d9402317 	ldw	r5,140(sp)
   17c34:	d9002717 	ldw	r4,156(sp)
   17c38:	d9801a04 	addi	r6,sp,104
   17c3c:	0016c280 	call	16c28 <__ssprint_r>
   17c40:	103fa126 	beq	r2,zero,17ac8 <__alt_mem_nios_system_shared_memory+0xfffd7ac8>
   17c44:	003fac06 	br	17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17c48:	d9402317 	ldw	r5,140(sp)
   17c4c:	d9002717 	ldw	r4,156(sp)
   17c50:	d9801a04 	addi	r6,sp,104
   17c54:	0016c280 	call	16c28 <__ssprint_r>
   17c58:	103fa71e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17c5c:	d811883a 	mov	r8,sp
   17c60:	003c9e06 	br	16edc <__alt_mem_nios_system_shared_memory+0xfffd6edc>
   17c64:	d9402317 	ldw	r5,140(sp)
   17c68:	d9002717 	ldw	r4,156(sp)
   17c6c:	d9801a04 	addi	r6,sp,104
   17c70:	0016c280 	call	16c28 <__ssprint_r>
   17c74:	103fa01e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17c78:	d8c01c17 	ldw	r3,112(sp)
   17c7c:	d8801b17 	ldw	r2,108(sp)
   17c80:	d811883a 	mov	r8,sp
   17c84:	003f5206 	br	179d0 <__alt_mem_nios_system_shared_memory+0xfffd79d0>
   17c88:	d9402317 	ldw	r5,140(sp)
   17c8c:	d9002717 	ldw	r4,156(sp)
   17c90:	d9801a04 	addi	r6,sp,104
   17c94:	0016c280 	call	16c28 <__ssprint_r>
   17c98:	103f971e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17c9c:	d8c01c17 	ldw	r3,112(sp)
   17ca0:	d8801b17 	ldw	r2,108(sp)
   17ca4:	d811883a 	mov	r8,sp
   17ca8:	003f0506 	br	178c0 <__alt_mem_nios_system_shared_memory+0xfffd78c0>
   17cac:	d9402317 	ldw	r5,140(sp)
   17cb0:	d9002717 	ldw	r4,156(sp)
   17cb4:	d9801a04 	addi	r6,sp,104
   17cb8:	0016c280 	call	16c28 <__ssprint_r>
   17cbc:	103f8e1e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17cc0:	d8c01c17 	ldw	r3,112(sp)
   17cc4:	d8801b17 	ldw	r2,108(sp)
   17cc8:	d811883a 	mov	r8,sp
   17ccc:	003f0906 	br	178f4 <__alt_mem_nios_system_shared_memory+0xfffd78f4>
   17cd0:	d9402017 	ldw	r5,128(sp)
   17cd4:	d8001d85 	stb	zero,118(sp)
   17cd8:	28007716 	blt	r5,zero,17eb8 <___svfiprintf_internal_r+0x10c0>
   17cdc:	00ffdfc4 	movi	r3,-129
   17ce0:	9504b03a 	or	r2,r18,r20
   17ce4:	80e0703a 	and	r16,r16,r3
   17ce8:	103d3926 	beq	r2,zero,171d0 <__alt_mem_nios_system_shared_memory+0xfffd71d0>
   17cec:	002b883a 	mov	r21,zero
   17cf0:	003d3c06 	br	171e4 <__alt_mem_nios_system_shared_memory+0xfffd71e4>
   17cf4:	d9402317 	ldw	r5,140(sp)
   17cf8:	d9002717 	ldw	r4,156(sp)
   17cfc:	d9801a04 	addi	r6,sp,104
   17d00:	0016c280 	call	16c28 <__ssprint_r>
   17d04:	103f7c1e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17d08:	d8c01c17 	ldw	r3,112(sp)
   17d0c:	d8801b17 	ldw	r2,108(sp)
   17d10:	d811883a 	mov	r8,sp
   17d14:	003edd06 	br	1788c <__alt_mem_nios_system_shared_memory+0xfffd788c>
   17d18:	8080100c 	andi	r2,r16,64
   17d1c:	d8001d85 	stb	zero,118(sp)
   17d20:	10008426 	beq	r2,zero,17f34 <___svfiprintf_internal_r+0x113c>
   17d24:	d9402417 	ldw	r5,144(sp)
   17d28:	d8c02017 	ldw	r3,128(sp)
   17d2c:	0029883a 	mov	r20,zero
   17d30:	28800104 	addi	r2,r5,4
   17d34:	2c80000b 	ldhu	r18,0(r5)
   17d38:	183eab0e 	bge	r3,zero,177e8 <__alt_mem_nios_system_shared_memory+0xfffd77e8>
   17d3c:	d8802415 	stw	r2,144(sp)
   17d40:	002b883a 	mov	r21,zero
   17d44:	9504b03a 	or	r2,r18,r20
   17d48:	103e171e 	bne	r2,zero,175a8 <__alt_mem_nios_system_shared_memory+0xfffd75a8>
   17d4c:	00800044 	movi	r2,1
   17d50:	10803fcc 	andi	r2,r2,255
   17d54:	00c00044 	movi	r3,1
   17d58:	10c05c26 	beq	r2,r3,17ecc <___svfiprintf_internal_r+0x10d4>
   17d5c:	00c00084 	movi	r3,2
   17d60:	10fd1e26 	beq	r2,r3,171dc <__alt_mem_nios_system_shared_memory+0xfffd71dc>
   17d64:	003ec406 	br	17878 <__alt_mem_nios_system_shared_memory+0xfffd7878>
   17d68:	d9401e17 	ldw	r5,120(sp)
   17d6c:	2c69c83a 	sub	r20,r5,r17
   17d70:	003d4506 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   17d74:	d8802415 	stw	r2,144(sp)
   17d78:	98c00007 	ldb	r3,0(r19)
   17d7c:	003c6a06 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   17d80:	d9402317 	ldw	r5,140(sp)
   17d84:	d9002717 	ldw	r4,156(sp)
   17d88:	d9801a04 	addi	r6,sp,104
   17d8c:	0016c280 	call	16c28 <__ssprint_r>
   17d90:	103f591e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17d94:	d8c01c17 	ldw	r3,112(sp)
   17d98:	003f4406 	br	17aac <__alt_mem_nios_system_shared_memory+0xfffd7aac>
   17d9c:	014000b4 	movhi	r5,2
   17da0:	297a9104 	addi	r5,r5,-5564
   17da4:	d9402915 	stw	r5,164(sp)
   17da8:	003d0906 	br	171d0 <__alt_mem_nios_system_shared_memory+0xfffd71d0>
   17dac:	d8c02417 	ldw	r3,144(sp)
   17db0:	d9002617 	ldw	r4,152(sp)
   17db4:	d9402417 	ldw	r5,144(sp)
   17db8:	18800017 	ldw	r2,0(r3)
   17dbc:	2007d7fa 	srai	r3,r4,31
   17dc0:	29400104 	addi	r5,r5,4
   17dc4:	d9402415 	stw	r5,144(sp)
   17dc8:	11000015 	stw	r4,0(r2)
   17dcc:	10c00115 	stw	r3,4(r2)
   17dd0:	003c2b06 	br	16e80 <__alt_mem_nios_system_shared_memory+0xfffd6e80>
   17dd4:	d8c01d45 	stb	r3,117(sp)
   17dd8:	d8c02017 	ldw	r3,128(sp)
   17ddc:	00800c04 	movi	r2,48
   17de0:	d8801d05 	stb	r2,116(sp)
   17de4:	d8001d85 	stb	zero,118(sp)
   17de8:	80800094 	ori	r2,r16,2
   17dec:	1800ac16 	blt	r3,zero,180a0 <___svfiprintf_internal_r+0x12a8>
   17df0:	00bfdfc4 	movi	r2,-129
   17df4:	80a0703a 	and	r16,r16,r2
   17df8:	84000094 	ori	r16,r16,2
   17dfc:	002b883a 	mov	r21,zero
   17e00:	003cf806 	br	171e4 <__alt_mem_nios_system_shared_memory+0xfffd71e4>
   17e04:	98c00007 	ldb	r3,0(r19)
   17e08:	003c4706 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   17e0c:	d9402417 	ldw	r5,144(sp)
   17e10:	2c800017 	ldw	r18,0(r5)
   17e14:	29400104 	addi	r5,r5,4
   17e18:	d9402415 	stw	r5,144(sp)
   17e1c:	9029d7fa 	srai	r20,r18,31
   17e20:	a005883a 	mov	r2,r20
   17e24:	003dd806 	br	17588 <__alt_mem_nios_system_shared_memory+0xfffd7588>
   17e28:	d9402417 	ldw	r5,144(sp)
   17e2c:	0029883a 	mov	r20,zero
   17e30:	2c800017 	ldw	r18,0(r5)
   17e34:	29400104 	addi	r5,r5,4
   17e38:	d9402415 	stw	r5,144(sp)
   17e3c:	003cdb06 	br	171ac <__alt_mem_nios_system_shared_memory+0xfffd71ac>
   17e40:	8080100c 	andi	r2,r16,64
   17e44:	d8001d85 	stb	zero,118(sp)
   17e48:	10003326 	beq	r2,zero,17f18 <___svfiprintf_internal_r+0x1120>
   17e4c:	d9002417 	ldw	r4,144(sp)
   17e50:	d9402017 	ldw	r5,128(sp)
   17e54:	0029883a 	mov	r20,zero
   17e58:	20800104 	addi	r2,r4,4
   17e5c:	2480000b 	ldhu	r18,0(r4)
   17e60:	283e7e0e 	bge	r5,zero,1785c <__alt_mem_nios_system_shared_memory+0xfffd785c>
   17e64:	9506b03a 	or	r3,r18,r20
   17e68:	d8802415 	stw	r2,144(sp)
   17e6c:	183d271e 	bne	r3,zero,1730c <__alt_mem_nios_system_shared_memory+0xfffd730c>
   17e70:	002b883a 	mov	r21,zero
   17e74:	0005883a 	mov	r2,zero
   17e78:	003fb506 	br	17d50 <__alt_mem_nios_system_shared_memory+0xfffd7d50>
   17e7c:	98c00043 	ldbu	r3,1(r19)
   17e80:	8c400814 	ori	r17,r17,32
   17e84:	9cc00044 	addi	r19,r19,1
   17e88:	18c03fcc 	andi	r3,r3,255
   17e8c:	18c0201c 	xori	r3,r3,128
   17e90:	18ffe004 	addi	r3,r3,-128
   17e94:	003c2406 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   17e98:	d8c02415 	stw	r3,144(sp)
   17e9c:	002b883a 	mov	r21,zero
   17ea0:	003fa806 	br	17d44 <__alt_mem_nios_system_shared_memory+0xfffd7d44>
   17ea4:	010000b4 	movhi	r4,2
   17ea8:	213a9104 	addi	r4,r4,-5564
   17eac:	d9002915 	stw	r4,164(sp)
   17eb0:	d8c02415 	stw	r3,144(sp)
   17eb4:	1021883a 	mov	r16,r2
   17eb8:	9504b03a 	or	r2,r18,r20
   17ebc:	103f8b1e 	bne	r2,zero,17cec <__alt_mem_nios_system_shared_memory+0xfffd7cec>
   17ec0:	002b883a 	mov	r21,zero
   17ec4:	00800084 	movi	r2,2
   17ec8:	003fa106 	br	17d50 <__alt_mem_nios_system_shared_memory+0xfffd7d50>
   17ecc:	0025883a 	mov	r18,zero
   17ed0:	94800c04 	addi	r18,r18,48
   17ed4:	dc8019c5 	stb	r18,103(sp)
   17ed8:	dd002c17 	ldw	r20,176(sp)
   17edc:	dc4019c4 	addi	r17,sp,103
   17ee0:	003ce906 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   17ee4:	d9402317 	ldw	r5,140(sp)
   17ee8:	d9002717 	ldw	r4,156(sp)
   17eec:	d9801a04 	addi	r6,sp,104
   17ef0:	0016c280 	call	16c28 <__ssprint_r>
   17ef4:	103f001e 	bne	r2,zero,17af8 <__alt_mem_nios_system_shared_memory+0xfffd7af8>
   17ef8:	d8c01c17 	ldw	r3,112(sp)
   17efc:	d8801b17 	ldw	r2,108(sp)
   17f00:	d811883a 	mov	r8,sp
   17f04:	003e7e06 	br	17900 <__alt_mem_nios_system_shared_memory+0xfffd7900>
   17f08:	014000b4 	movhi	r5,2
   17f0c:	297b3804 	addi	r5,r5,-4896
   17f10:	d9402115 	stw	r5,132(sp)
   17f14:	003ea406 	br	179a8 <__alt_mem_nios_system_shared_memory+0xfffd79a8>
   17f18:	d8c02417 	ldw	r3,144(sp)
   17f1c:	d9002017 	ldw	r4,128(sp)
   17f20:	0029883a 	mov	r20,zero
   17f24:	18800104 	addi	r2,r3,4
   17f28:	1c800017 	ldw	r18,0(r3)
   17f2c:	203e4b0e 	bge	r4,zero,1785c <__alt_mem_nios_system_shared_memory+0xfffd785c>
   17f30:	003fcc06 	br	17e64 <__alt_mem_nios_system_shared_memory+0xfffd7e64>
   17f34:	d9002417 	ldw	r4,144(sp)
   17f38:	d9402017 	ldw	r5,128(sp)
   17f3c:	0029883a 	mov	r20,zero
   17f40:	20800104 	addi	r2,r4,4
   17f44:	24800017 	ldw	r18,0(r4)
   17f48:	283e270e 	bge	r5,zero,177e8 <__alt_mem_nios_system_shared_memory+0xfffd77e8>
   17f4c:	003f7b06 	br	17d3c <__alt_mem_nios_system_shared_memory+0xfffd7d3c>
   17f50:	8400100c 	andi	r16,r16,64
   17f54:	80003326 	beq	r16,zero,18024 <___svfiprintf_internal_r+0x122c>
   17f58:	d9402417 	ldw	r5,144(sp)
   17f5c:	d8c02617 	ldw	r3,152(sp)
   17f60:	28800017 	ldw	r2,0(r5)
   17f64:	29400104 	addi	r5,r5,4
   17f68:	d9402415 	stw	r5,144(sp)
   17f6c:	10c0000d 	sth	r3,0(r2)
   17f70:	003bc306 	br	16e80 <__alt_mem_nios_system_shared_memory+0xfffd6e80>
   17f74:	d9002417 	ldw	r4,144(sp)
   17f78:	0029883a 	mov	r20,zero
   17f7c:	24800017 	ldw	r18,0(r4)
   17f80:	21000104 	addi	r4,r4,4
   17f84:	d9002415 	stw	r4,144(sp)
   17f88:	003c8806 	br	171ac <__alt_mem_nios_system_shared_memory+0xfffd71ac>
   17f8c:	d8c02417 	ldw	r3,144(sp)
   17f90:	1c800017 	ldw	r18,0(r3)
   17f94:	18c00104 	addi	r3,r3,4
   17f98:	d8c02415 	stw	r3,144(sp)
   17f9c:	9029d7fa 	srai	r20,r18,31
   17fa0:	a005883a 	mov	r2,r20
   17fa4:	003d7806 	br	17588 <__alt_mem_nios_system_shared_memory+0xfffd7588>
   17fa8:	8809883a 	mov	r4,r17
   17fac:	da002d15 	stw	r8,180(sp)
   17fb0:	000ba8c0 	call	ba8c <strlen>
   17fb4:	1029883a 	mov	r20,r2
   17fb8:	dd401d83 	ldbu	r21,118(sp)
   17fbc:	ddc02415 	stw	r23,144(sp)
   17fc0:	d8002015 	stw	zero,128(sp)
   17fc4:	da002d17 	ldw	r8,180(sp)
   17fc8:	003caf06 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   17fcc:	013fffc4 	movi	r4,-1
   17fd0:	003df206 	br	1779c <__alt_mem_nios_system_shared_memory+0xfffd779c>
   17fd4:	dd002017 	ldw	r20,128(sp)
   17fd8:	00800184 	movi	r2,6
   17fdc:	1500012e 	bgeu	r2,r20,17fe4 <___svfiprintf_internal_r+0x11ec>
   17fe0:	1029883a 	mov	r20,r2
   17fe4:	a025883a 	mov	r18,r20
   17fe8:	a0004116 	blt	r20,zero,180f0 <___svfiprintf_internal_r+0x12f8>
   17fec:	044000b4 	movhi	r17,2
   17ff0:	ddc02415 	stw	r23,144(sp)
   17ff4:	8c7a9604 	addi	r17,r17,-5544
   17ff8:	003ce806 	br	1739c <__alt_mem_nios_system_shared_memory+0xfffd739c>
   17ffc:	04001004 	movi	r16,64
   18000:	800b883a 	mov	r5,r16
   18004:	000a7bc0 	call	a7bc <_malloc_r>
   18008:	d8c02317 	ldw	r3,140(sp)
   1800c:	18800015 	stw	r2,0(r3)
   18010:	18800415 	stw	r2,16(r3)
   18014:	10004d26 	beq	r2,zero,1814c <___svfiprintf_internal_r+0x1354>
   18018:	d9402317 	ldw	r5,140(sp)
   1801c:	2c000515 	stw	r16,20(r5)
   18020:	003b8906 	br	16e48 <__alt_mem_nios_system_shared_memory+0xfffd6e48>
   18024:	d9002417 	ldw	r4,144(sp)
   18028:	d9402617 	ldw	r5,152(sp)
   1802c:	20800017 	ldw	r2,0(r4)
   18030:	21000104 	addi	r4,r4,4
   18034:	d9002415 	stw	r4,144(sp)
   18038:	11400015 	stw	r5,0(r2)
   1803c:	003b9006 	br	16e80 <__alt_mem_nios_system_shared_memory+0xfffd6e80>
   18040:	8080004c 	andi	r2,r16,1
   18044:	002b883a 	mov	r21,zero
   18048:	10000526 	beq	r2,zero,18060 <___svfiprintf_internal_r+0x1268>
   1804c:	00800c04 	movi	r2,48
   18050:	d88019c5 	stb	r2,103(sp)
   18054:	dd002c17 	ldw	r20,176(sp)
   18058:	dc4019c4 	addi	r17,sp,103
   1805c:	003c8a06 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   18060:	0029883a 	mov	r20,zero
   18064:	dc401a04 	addi	r17,sp,104
   18068:	003c8706 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   1806c:	014000b4 	movhi	r5,2
   18070:	297b3c04 	addi	r5,r5,-4880
   18074:	d9402815 	stw	r5,160(sp)
   18078:	003cff06 	br	17478 <__alt_mem_nios_system_shared_memory+0xfffd7478>
   1807c:	00bfffc4 	movi	r2,-1
   18080:	003ea206 	br	17b0c <__alt_mem_nios_system_shared_memory+0xfffd7b0c>
   18084:	00800044 	movi	r2,1
   18088:	10803fcc 	andi	r2,r2,255
   1808c:	00c00044 	movi	r3,1
   18090:	10fd4526 	beq	r2,r3,175a8 <__alt_mem_nios_system_shared_memory+0xfffd75a8>
   18094:	00c00084 	movi	r3,2
   18098:	10fc5226 	beq	r2,r3,171e4 <__alt_mem_nios_system_shared_memory+0xfffd71e4>
   1809c:	003c9c06 	br	17310 <__alt_mem_nios_system_shared_memory+0xfffd7310>
   180a0:	1021883a 	mov	r16,r2
   180a4:	002b883a 	mov	r21,zero
   180a8:	00800084 	movi	r2,2
   180ac:	003ff606 	br	18088 <__alt_mem_nios_system_shared_memory+0xfffd8088>
   180b0:	010000b4 	movhi	r4,2
   180b4:	213b3c04 	addi	r4,r4,-4880
   180b8:	d9002815 	stw	r4,160(sp)
   180bc:	003e7206 	br	17a88 <__alt_mem_nios_system_shared_memory+0xfffd7a88>
   180c0:	014000b4 	movhi	r5,2
   180c4:	297b3804 	addi	r5,r5,-4896
   180c8:	d9402115 	stw	r5,132(sp)
   180cc:	003ec506 	br	17be4 <__alt_mem_nios_system_shared_memory+0xfffd7be4>
   180d0:	e027883a 	mov	r19,fp
   180d4:	d8002015 	stw	zero,128(sp)
   180d8:	003b9406 	br	16f2c <__alt_mem_nios_system_shared_memory+0xfffd6f2c>
   180dc:	dd002017 	ldw	r20,128(sp)
   180e0:	dd401d83 	ldbu	r21,118(sp)
   180e4:	ddc02415 	stw	r23,144(sp)
   180e8:	d8002015 	stw	zero,128(sp)
   180ec:	003c6606 	br	17288 <__alt_mem_nios_system_shared_memory+0xfffd7288>
   180f0:	0025883a 	mov	r18,zero
   180f4:	003fbd06 	br	17fec <__alt_mem_nios_system_shared_memory+0xfffd7fec>
   180f8:	d9402417 	ldw	r5,144(sp)
   180fc:	d8c02417 	ldw	r3,144(sp)
   18100:	29400017 	ldw	r5,0(r5)
   18104:	19000104 	addi	r4,r3,4
   18108:	d9002415 	stw	r4,144(sp)
   1810c:	d9402015 	stw	r5,128(sp)
   18110:	98c00043 	ldbu	r3,1(r19)
   18114:	e027883a 	mov	r19,fp
   18118:	283f5b0e 	bge	r5,zero,17e88 <__alt_mem_nios_system_shared_memory+0xfffd7e88>
   1811c:	18c03fcc 	andi	r3,r3,255
   18120:	013fffc4 	movi	r4,-1
   18124:	18c0201c 	xori	r3,r3,128
   18128:	d9002015 	stw	r4,128(sp)
   1812c:	18ffe004 	addi	r3,r3,-128
   18130:	003b7d06 	br	16f28 <__alt_mem_nios_system_shared_memory+0xfffd6f28>
   18134:	dd401d85 	stb	r21,118(sp)
   18138:	003cf306 	br	17508 <__alt_mem_nios_system_shared_memory+0xfffd7508>
   1813c:	dd401d85 	stb	r21,118(sp)
   18140:	003d4e06 	br	1767c <__alt_mem_nios_system_shared_memory+0xfffd767c>
   18144:	dd401d85 	stb	r21,118(sp)
   18148:	003c0e06 	br	17184 <__alt_mem_nios_system_shared_memory+0xfffd7184>
   1814c:	d9002717 	ldw	r4,156(sp)
   18150:	00800304 	movi	r2,12
   18154:	20800015 	stw	r2,0(r4)
   18158:	00bfffc4 	movi	r2,-1
   1815c:	003e6b06 	br	17b0c <__alt_mem_nios_system_shared_memory+0xfffd7b0c>
   18160:	dd401d85 	stb	r21,118(sp)
   18164:	003d0006 	br	17568 <__alt_mem_nios_system_shared_memory+0xfffd7568>
   18168:	dd401d85 	stb	r21,118(sp)
   1816c:	003d7106 	br	17734 <__alt_mem_nios_system_shared_memory+0xfffd7734>
   18170:	dd401d85 	stb	r21,118(sp)
   18174:	003c5706 	br	172d4 <__alt_mem_nios_system_shared_memory+0xfffd72d4>
   18178:	dd401d85 	stb	r21,118(sp)
   1817c:	003c2e06 	br	17238 <__alt_mem_nios_system_shared_memory+0xfffd7238>
   18180:	dd401d85 	stb	r21,118(sp)
   18184:	003d8c06 	br	177b8 <__alt_mem_nios_system_shared_memory+0xfffd77b8>
   18188:	dd401d85 	stb	r21,118(sp)
   1818c:	003da706 	br	1782c <__alt_mem_nios_system_shared_memory+0xfffd782c>
   18190:	dd401d85 	stb	r21,118(sp)
   18194:	003cc806 	br	174b8 <__alt_mem_nios_system_shared_memory+0xfffd74b8>

00018198 <__sprint_r.part.0>:
   18198:	28801917 	ldw	r2,100(r5)
   1819c:	defff604 	addi	sp,sp,-40
   181a0:	dd400515 	stw	r21,20(sp)
   181a4:	dfc00915 	stw	ra,36(sp)
   181a8:	df000815 	stw	fp,32(sp)
   181ac:	ddc00715 	stw	r23,28(sp)
   181b0:	dd800615 	stw	r22,24(sp)
   181b4:	dd000415 	stw	r20,16(sp)
   181b8:	dcc00315 	stw	r19,12(sp)
   181bc:	dc800215 	stw	r18,8(sp)
   181c0:	dc400115 	stw	r17,4(sp)
   181c4:	dc000015 	stw	r16,0(sp)
   181c8:	1088000c 	andi	r2,r2,8192
   181cc:	302b883a 	mov	r21,r6
   181d0:	10002e26 	beq	r2,zero,1828c <__sprint_r.part.0+0xf4>
   181d4:	30800217 	ldw	r2,8(r6)
   181d8:	35800017 	ldw	r22,0(r6)
   181dc:	10002926 	beq	r2,zero,18284 <__sprint_r.part.0+0xec>
   181e0:	2827883a 	mov	r19,r5
   181e4:	2029883a 	mov	r20,r4
   181e8:	b5c00104 	addi	r23,r22,4
   181ec:	04bfffc4 	movi	r18,-1
   181f0:	bc400017 	ldw	r17,0(r23)
   181f4:	b4000017 	ldw	r16,0(r22)
   181f8:	0039883a 	mov	fp,zero
   181fc:	8822d0ba 	srli	r17,r17,2
   18200:	8800031e 	bne	r17,zero,18210 <__sprint_r.part.0+0x78>
   18204:	00001806 	br	18268 <__sprint_r.part.0+0xd0>
   18208:	84000104 	addi	r16,r16,4
   1820c:	8f001526 	beq	r17,fp,18264 <__sprint_r.part.0+0xcc>
   18210:	81400017 	ldw	r5,0(r16)
   18214:	980d883a 	mov	r6,r19
   18218:	a009883a 	mov	r4,r20
   1821c:	0019c280 	call	19c28 <_fputwc_r>
   18220:	e7000044 	addi	fp,fp,1
   18224:	14bff81e 	bne	r2,r18,18208 <__alt_mem_nios_system_shared_memory+0xfffd8208>
   18228:	9005883a 	mov	r2,r18
   1822c:	a8000215 	stw	zero,8(r21)
   18230:	a8000115 	stw	zero,4(r21)
   18234:	dfc00917 	ldw	ra,36(sp)
   18238:	df000817 	ldw	fp,32(sp)
   1823c:	ddc00717 	ldw	r23,28(sp)
   18240:	dd800617 	ldw	r22,24(sp)
   18244:	dd400517 	ldw	r21,20(sp)
   18248:	dd000417 	ldw	r20,16(sp)
   1824c:	dcc00317 	ldw	r19,12(sp)
   18250:	dc800217 	ldw	r18,8(sp)
   18254:	dc400117 	ldw	r17,4(sp)
   18258:	dc000017 	ldw	r16,0(sp)
   1825c:	dec00a04 	addi	sp,sp,40
   18260:	f800283a 	ret
   18264:	a8800217 	ldw	r2,8(r21)
   18268:	8c63883a 	add	r17,r17,r17
   1826c:	8c63883a 	add	r17,r17,r17
   18270:	1445c83a 	sub	r2,r2,r17
   18274:	a8800215 	stw	r2,8(r21)
   18278:	b5800204 	addi	r22,r22,8
   1827c:	bdc00204 	addi	r23,r23,8
   18280:	103fdb1e 	bne	r2,zero,181f0 <__alt_mem_nios_system_shared_memory+0xfffd81f0>
   18284:	0005883a 	mov	r2,zero
   18288:	003fe806 	br	1822c <__alt_mem_nios_system_shared_memory+0xfffd822c>
   1828c:	0013dc00 	call	13dc0 <__sfvwrite_r>
   18290:	003fe606 	br	1822c <__alt_mem_nios_system_shared_memory+0xfffd822c>

00018294 <__sprint_r>:
   18294:	30c00217 	ldw	r3,8(r6)
   18298:	18000126 	beq	r3,zero,182a0 <__sprint_r+0xc>
   1829c:	00181981 	jmpi	18198 <__sprint_r.part.0>
   182a0:	30000115 	stw	zero,4(r6)
   182a4:	0005883a 	mov	r2,zero
   182a8:	f800283a 	ret

000182ac <___vfiprintf_internal_r>:
   182ac:	deffca04 	addi	sp,sp,-216
   182b0:	dd403115 	stw	r21,196(sp)
   182b4:	dfc03515 	stw	ra,212(sp)
   182b8:	df003415 	stw	fp,208(sp)
   182bc:	ddc03315 	stw	r23,204(sp)
   182c0:	dd803215 	stw	r22,200(sp)
   182c4:	dd003015 	stw	r20,192(sp)
   182c8:	dcc02f15 	stw	r19,188(sp)
   182cc:	dc802e15 	stw	r18,184(sp)
   182d0:	dc402d15 	stw	r17,180(sp)
   182d4:	dc002c15 	stw	r16,176(sp)
   182d8:	d9002115 	stw	r4,132(sp)
   182dc:	d9402015 	stw	r5,128(sp)
   182e0:	d9c02215 	stw	r7,136(sp)
   182e4:	302b883a 	mov	r21,r6
   182e8:	20000226 	beq	r4,zero,182f4 <___vfiprintf_internal_r+0x48>
   182ec:	20800e17 	ldw	r2,56(r4)
   182f0:	1000cf26 	beq	r2,zero,18630 <___vfiprintf_internal_r+0x384>
   182f4:	d8c02017 	ldw	r3,128(sp)
   182f8:	1880030b 	ldhu	r2,12(r3)
   182fc:	10c8000c 	andi	r3,r2,8192
   18300:	1800071e 	bne	r3,zero,18320 <___vfiprintf_internal_r+0x74>
   18304:	d9402017 	ldw	r5,128(sp)
   18308:	00f7ffc4 	movi	r3,-8193
   1830c:	10880014 	ori	r2,r2,8192
   18310:	29001917 	ldw	r4,100(r5)
   18314:	2880030d 	sth	r2,12(r5)
   18318:	20c6703a 	and	r3,r4,r3
   1831c:	28c01915 	stw	r3,100(r5)
   18320:	10c0020c 	andi	r3,r2,8
   18324:	1800a526 	beq	r3,zero,185bc <___vfiprintf_internal_r+0x310>
   18328:	d9002017 	ldw	r4,128(sp)
   1832c:	20c00417 	ldw	r3,16(r4)
   18330:	1800a226 	beq	r3,zero,185bc <___vfiprintf_internal_r+0x310>
   18334:	1080068c 	andi	r2,r2,26
   18338:	00c00284 	movi	r3,10
   1833c:	10c0a826 	beq	r2,r3,185e0 <___vfiprintf_internal_r+0x334>
   18340:	d9001a04 	addi	r4,sp,104
   18344:	d94019c4 	addi	r5,sp,103
   18348:	048000b4 	movhi	r18,2
   1834c:	2145c83a 	sub	r2,r4,r5
   18350:	94bb4004 	addi	r18,r18,-4864
   18354:	d9001e15 	stw	r4,120(sp)
   18358:	d9401f15 	stw	r5,124(sp)
   1835c:	dec01a15 	stw	sp,104(sp)
   18360:	d8001c15 	stw	zero,112(sp)
   18364:	d8001b15 	stw	zero,108(sp)
   18368:	d811883a 	mov	r8,sp
   1836c:	d8002615 	stw	zero,152(sp)
   18370:	d8002415 	stw	zero,144(sp)
   18374:	d8802815 	stw	r2,160(sp)
   18378:	a82d883a 	mov	r22,r21
   1837c:	b0800007 	ldb	r2,0(r22)
   18380:	10040d26 	beq	r2,zero,193b8 <___vfiprintf_internal_r+0x110c>
   18384:	00c00944 	movi	r3,37
   18388:	b029883a 	mov	r20,r22
   1838c:	10c0021e 	bne	r2,r3,18398 <___vfiprintf_internal_r+0xec>
   18390:	00001606 	br	183ec <___vfiprintf_internal_r+0x140>
   18394:	10c00326 	beq	r2,r3,183a4 <___vfiprintf_internal_r+0xf8>
   18398:	a5000044 	addi	r20,r20,1
   1839c:	a0800007 	ldb	r2,0(r20)
   183a0:	103ffc1e 	bne	r2,zero,18394 <__alt_mem_nios_system_shared_memory+0xfffd8394>
   183a4:	a5a1c83a 	sub	r16,r20,r22
   183a8:	80001026 	beq	r16,zero,183ec <___vfiprintf_internal_r+0x140>
   183ac:	d8c01c17 	ldw	r3,112(sp)
   183b0:	d8801b17 	ldw	r2,108(sp)
   183b4:	45800015 	stw	r22,0(r8)
   183b8:	80c7883a 	add	r3,r16,r3
   183bc:	10800044 	addi	r2,r2,1
   183c0:	44000115 	stw	r16,4(r8)
   183c4:	d8c01c15 	stw	r3,112(sp)
   183c8:	d8801b15 	stw	r2,108(sp)
   183cc:	010001c4 	movi	r4,7
   183d0:	2080750e 	bge	r4,r2,185a8 <___vfiprintf_internal_r+0x2fc>
   183d4:	1803951e 	bne	r3,zero,1922c <___vfiprintf_internal_r+0xf80>
   183d8:	d8c02417 	ldw	r3,144(sp)
   183dc:	d8001b15 	stw	zero,108(sp)
   183e0:	d811883a 	mov	r8,sp
   183e4:	1c07883a 	add	r3,r3,r16
   183e8:	d8c02415 	stw	r3,144(sp)
   183ec:	a0800007 	ldb	r2,0(r20)
   183f0:	1002e026 	beq	r2,zero,18f74 <___vfiprintf_internal_r+0xcc8>
   183f4:	a5800044 	addi	r22,r20,1
   183f8:	a0c00047 	ldb	r3,1(r20)
   183fc:	d8001d85 	stb	zero,118(sp)
   18400:	0027883a 	mov	r19,zero
   18404:	d8002305 	stb	zero,140(sp)
   18408:	043fffc4 	movi	r16,-1
   1840c:	d8002515 	stw	zero,148(sp)
   18410:	0023883a 	mov	r17,zero
   18414:	05001604 	movi	r20,88
   18418:	05400244 	movi	r21,9
   1841c:	402f883a 	mov	r23,r8
   18420:	b5800044 	addi	r22,r22,1
   18424:	18bff804 	addi	r2,r3,-32
   18428:	a0827736 	bltu	r20,r2,18e08 <___vfiprintf_internal_r+0xb5c>
   1842c:	100490ba 	slli	r2,r2,2
   18430:	010000b4 	movhi	r4,2
   18434:	21211104 	addi	r4,r4,-31676
   18438:	1105883a 	add	r2,r2,r4
   1843c:	10800017 	ldw	r2,0(r2)
   18440:	1000683a 	jmp	r2
   18444:	00018b08 	cmpgei	zero,zero,1580
   18448:	00018e08 	cmpgei	zero,zero,1592
   1844c:	00018e08 	cmpgei	zero,zero,1592
   18450:	00018b24 	muli	zero,zero,1580
   18454:	00018e08 	cmpgei	zero,zero,1592
   18458:	00018e08 	cmpgei	zero,zero,1592
   1845c:	00018e08 	cmpgei	zero,zero,1592
   18460:	00018e08 	cmpgei	zero,zero,1592
   18464:	00018e08 	cmpgei	zero,zero,1592
   18468:	00018e08 	cmpgei	zero,zero,1592
   1846c:	00018d2c 	andhi	zero,zero,1588
   18470:	00018d50 	cmplti	zero,zero,1589
   18474:	00018e08 	cmpgei	zero,zero,1592
   18478:	00018648 	cmpgei	zero,zero,1561
   1847c:	00018d64 	muli	zero,zero,1589
   18480:	00018e08 	cmpgei	zero,zero,1592
   18484:	00018b30 	cmpltui	zero,zero,1580
   18488:	00018b3c 	xorhi	zero,zero,1580
   1848c:	00018b3c 	xorhi	zero,zero,1580
   18490:	00018b3c 	xorhi	zero,zero,1580
   18494:	00018b3c 	xorhi	zero,zero,1580
   18498:	00018b3c 	xorhi	zero,zero,1580
   1849c:	00018b3c 	xorhi	zero,zero,1580
   184a0:	00018b3c 	xorhi	zero,zero,1580
   184a4:	00018b3c 	xorhi	zero,zero,1580
   184a8:	00018b3c 	xorhi	zero,zero,1580
   184ac:	00018e08 	cmpgei	zero,zero,1592
   184b0:	00018e08 	cmpgei	zero,zero,1592
   184b4:	00018e08 	cmpgei	zero,zero,1592
   184b8:	00018e08 	cmpgei	zero,zero,1592
   184bc:	00018e08 	cmpgei	zero,zero,1592
   184c0:	00018e08 	cmpgei	zero,zero,1592
   184c4:	00018e08 	cmpgei	zero,zero,1592
   184c8:	00018e08 	cmpgei	zero,zero,1592
   184cc:	00018e08 	cmpgei	zero,zero,1592
   184d0:	00018e08 	cmpgei	zero,zero,1592
   184d4:	00018b7c 	xorhi	zero,zero,1581
   184d8:	00018e08 	cmpgei	zero,zero,1592
   184dc:	00018e08 	cmpgei	zero,zero,1592
   184e0:	00018e08 	cmpgei	zero,zero,1592
   184e4:	00018e08 	cmpgei	zero,zero,1592
   184e8:	00018e08 	cmpgei	zero,zero,1592
   184ec:	00018e08 	cmpgei	zero,zero,1592
   184f0:	00018e08 	cmpgei	zero,zero,1592
   184f4:	00018e08 	cmpgei	zero,zero,1592
   184f8:	00018e08 	cmpgei	zero,zero,1592
   184fc:	00018e08 	cmpgei	zero,zero,1592
   18500:	00018bb8 	rdprs	zero,zero,1582
   18504:	00018e08 	cmpgei	zero,zero,1592
   18508:	00018e08 	cmpgei	zero,zero,1592
   1850c:	00018e08 	cmpgei	zero,zero,1592
   18510:	00018e08 	cmpgei	zero,zero,1592
   18514:	00018e08 	cmpgei	zero,zero,1592
   18518:	00018c14 	movui	zero,1584
   1851c:	00018e08 	cmpgei	zero,zero,1592
   18520:	00018e08 	cmpgei	zero,zero,1592
   18524:	00018c88 	cmpgei	zero,zero,1586
   18528:	00018e08 	cmpgei	zero,zero,1592
   1852c:	00018e08 	cmpgei	zero,zero,1592
   18530:	00018e08 	cmpgei	zero,zero,1592
   18534:	00018e08 	cmpgei	zero,zero,1592
   18538:	00018e08 	cmpgei	zero,zero,1592
   1853c:	00018e08 	cmpgei	zero,zero,1592
   18540:	00018e08 	cmpgei	zero,zero,1592
   18544:	00018e08 	cmpgei	zero,zero,1592
   18548:	00018e08 	cmpgei	zero,zero,1592
   1854c:	00018e08 	cmpgei	zero,zero,1592
   18550:	00018a30 	cmpltui	zero,zero,1576
   18554:	00018a60 	cmpeqi	zero,zero,1577
   18558:	00018e08 	cmpgei	zero,zero,1592
   1855c:	00018e08 	cmpgei	zero,zero,1592
   18560:	00018e08 	cmpgei	zero,zero,1592
   18564:	00018db0 	cmpltui	zero,zero,1590
   18568:	00018a60 	cmpeqi	zero,zero,1577
   1856c:	00018e08 	cmpgei	zero,zero,1592
   18570:	00018e08 	cmpgei	zero,zero,1592
   18574:	00018908 	cmpgei	zero,zero,1572
   18578:	00018e08 	cmpgei	zero,zero,1592
   1857c:	0001891c 	xori	zero,zero,1572
   18580:	00018954 	movui	zero,1573
   18584:	00018654 	movui	zero,1561
   18588:	000188fc 	xorhi	zero,zero,1571
   1858c:	00018e08 	cmpgei	zero,zero,1592
   18590:	00018cc8 	cmpgei	zero,zero,1587
   18594:	00018e08 	cmpgei	zero,zero,1592
   18598:	00018d14 	movui	zero,1588
   1859c:	00018e08 	cmpgei	zero,zero,1592
   185a0:	00018e08 	cmpgei	zero,zero,1592
   185a4:	000189d8 	cmpnei	zero,zero,1575
   185a8:	42000204 	addi	r8,r8,8
   185ac:	d8c02417 	ldw	r3,144(sp)
   185b0:	1c07883a 	add	r3,r3,r16
   185b4:	d8c02415 	stw	r3,144(sp)
   185b8:	003f8c06 	br	183ec <__alt_mem_nios_system_shared_memory+0xfffd83ec>
   185bc:	d9402017 	ldw	r5,128(sp)
   185c0:	d9002117 	ldw	r4,132(sp)
   185c4:	00121b80 	call	121b8 <__swsetup_r>
   185c8:	1003c11e 	bne	r2,zero,194d0 <___vfiprintf_internal_r+0x1224>
   185cc:	d9402017 	ldw	r5,128(sp)
   185d0:	00c00284 	movi	r3,10
   185d4:	2880030b 	ldhu	r2,12(r5)
   185d8:	1080068c 	andi	r2,r2,26
   185dc:	10ff581e 	bne	r2,r3,18340 <__alt_mem_nios_system_shared_memory+0xfffd8340>
   185e0:	d8c02017 	ldw	r3,128(sp)
   185e4:	1880038f 	ldh	r2,14(r3)
   185e8:	103f5516 	blt	r2,zero,18340 <__alt_mem_nios_system_shared_memory+0xfffd8340>
   185ec:	d9c02217 	ldw	r7,136(sp)
   185f0:	d9002117 	ldw	r4,132(sp)
   185f4:	a80d883a 	mov	r6,r21
   185f8:	180b883a 	mov	r5,r3
   185fc:	00197d40 	call	197d4 <__sbprintf>
   18600:	dfc03517 	ldw	ra,212(sp)
   18604:	df003417 	ldw	fp,208(sp)
   18608:	ddc03317 	ldw	r23,204(sp)
   1860c:	dd803217 	ldw	r22,200(sp)
   18610:	dd403117 	ldw	r21,196(sp)
   18614:	dd003017 	ldw	r20,192(sp)
   18618:	dcc02f17 	ldw	r19,188(sp)
   1861c:	dc802e17 	ldw	r18,184(sp)
   18620:	dc402d17 	ldw	r17,180(sp)
   18624:	dc002c17 	ldw	r16,176(sp)
   18628:	dec03604 	addi	sp,sp,216
   1862c:	f800283a 	ret
   18630:	00099c00 	call	99c0 <__sinit>
   18634:	003f2f06 	br	182f4 <__alt_mem_nios_system_shared_memory+0xfffd82f4>
   18638:	d8c02517 	ldw	r3,148(sp)
   1863c:	d8802215 	stw	r2,136(sp)
   18640:	00c7c83a 	sub	r3,zero,r3
   18644:	d8c02515 	stw	r3,148(sp)
   18648:	8c400114 	ori	r17,r17,4
   1864c:	b0c00007 	ldb	r3,0(r22)
   18650:	003f7306 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18654:	00800c04 	movi	r2,48
   18658:	d9402217 	ldw	r5,136(sp)
   1865c:	d8801d05 	stb	r2,116(sp)
   18660:	00801e04 	movi	r2,120
   18664:	d8801d45 	stb	r2,117(sp)
   18668:	d8001d85 	stb	zero,118(sp)
   1866c:	b811883a 	mov	r8,r23
   18670:	28c00104 	addi	r3,r5,4
   18674:	2cc00017 	ldw	r19,0(r5)
   18678:	0029883a 	mov	r20,zero
   1867c:	88800094 	ori	r2,r17,2
   18680:	80032516 	blt	r16,zero,19318 <___vfiprintf_internal_r+0x106c>
   18684:	00bfdfc4 	movi	r2,-129
   18688:	88a2703a 	and	r17,r17,r2
   1868c:	d8c02215 	stw	r3,136(sp)
   18690:	8c400094 	ori	r17,r17,2
   18694:	98032a1e 	bne	r19,zero,19340 <___vfiprintf_internal_r+0x1094>
   18698:	008000b4 	movhi	r2,2
   1869c:	10ba9104 	addi	r2,r2,-5564
   186a0:	d8802615 	stw	r2,152(sp)
   186a4:	002b883a 	mov	r21,zero
   186a8:	8001741e 	bne	r16,zero,18c7c <___vfiprintf_internal_r+0x9d0>
   186ac:	0021883a 	mov	r16,zero
   186b0:	0029883a 	mov	r20,zero
   186b4:	ddc01a04 	addi	r23,sp,104
   186b8:	8027883a 	mov	r19,r16
   186bc:	8500010e 	bge	r16,r20,186c4 <___vfiprintf_internal_r+0x418>
   186c0:	a027883a 	mov	r19,r20
   186c4:	ad403fcc 	andi	r21,r21,255
   186c8:	ad40201c 	xori	r21,r21,128
   186cc:	ad7fe004 	addi	r21,r21,-128
   186d0:	a8000126 	beq	r21,zero,186d8 <___vfiprintf_internal_r+0x42c>
   186d4:	9cc00044 	addi	r19,r19,1
   186d8:	89c0008c 	andi	r7,r17,2
   186dc:	38000126 	beq	r7,zero,186e4 <___vfiprintf_internal_r+0x438>
   186e0:	9cc00084 	addi	r19,r19,2
   186e4:	88c0210c 	andi	r3,r17,132
   186e8:	1801dd1e 	bne	r3,zero,18e60 <___vfiprintf_internal_r+0xbb4>
   186ec:	d9402517 	ldw	r5,148(sp)
   186f0:	2cebc83a 	sub	r21,r5,r19
   186f4:	0541da0e 	bge	zero,r21,18e60 <___vfiprintf_internal_r+0xbb4>
   186f8:	07000404 	movi	fp,16
   186fc:	d8801c17 	ldw	r2,112(sp)
   18700:	e543be0e 	bge	fp,r21,195fc <___vfiprintf_internal_r+0x1350>
   18704:	014000b4 	movhi	r5,2
   18708:	297b4404 	addi	r5,r5,-4848
   1870c:	dc002715 	stw	r16,156(sp)
   18710:	d9801b17 	ldw	r6,108(sp)
   18714:	a821883a 	mov	r16,r21
   18718:	d9402315 	stw	r5,140(sp)
   1871c:	028001c4 	movi	r10,7
   18720:	d9c02915 	stw	r7,164(sp)
   18724:	182b883a 	mov	r21,r3
   18728:	00000506 	br	18740 <___vfiprintf_internal_r+0x494>
   1872c:	31000084 	addi	r4,r6,2
   18730:	42000204 	addi	r8,r8,8
   18734:	180d883a 	mov	r6,r3
   18738:	843ffc04 	addi	r16,r16,-16
   1873c:	e4000f0e 	bge	fp,r16,1877c <___vfiprintf_internal_r+0x4d0>
   18740:	010000b4 	movhi	r4,2
   18744:	10800404 	addi	r2,r2,16
   18748:	30c00044 	addi	r3,r6,1
   1874c:	213b4404 	addi	r4,r4,-4848
   18750:	41000015 	stw	r4,0(r8)
   18754:	47000115 	stw	fp,4(r8)
   18758:	d8801c15 	stw	r2,112(sp)
   1875c:	d8c01b15 	stw	r3,108(sp)
   18760:	50fff20e 	bge	r10,r3,1872c <__alt_mem_nios_system_shared_memory+0xfffd872c>
   18764:	1001b21e 	bne	r2,zero,18e30 <___vfiprintf_internal_r+0xb84>
   18768:	843ffc04 	addi	r16,r16,-16
   1876c:	000d883a 	mov	r6,zero
   18770:	01000044 	movi	r4,1
   18774:	d811883a 	mov	r8,sp
   18778:	e43ff116 	blt	fp,r16,18740 <__alt_mem_nios_system_shared_memory+0xfffd8740>
   1877c:	a807883a 	mov	r3,r21
   18780:	d9c02917 	ldw	r7,164(sp)
   18784:	802b883a 	mov	r21,r16
   18788:	dc002717 	ldw	r16,156(sp)
   1878c:	d9402317 	ldw	r5,140(sp)
   18790:	a885883a 	add	r2,r21,r2
   18794:	45400115 	stw	r21,4(r8)
   18798:	41400015 	stw	r5,0(r8)
   1879c:	d8801c15 	stw	r2,112(sp)
   187a0:	d9001b15 	stw	r4,108(sp)
   187a4:	014001c4 	movi	r5,7
   187a8:	29026216 	blt	r5,r4,19134 <___vfiprintf_internal_r+0xe88>
   187ac:	d9801d87 	ldb	r6,118(sp)
   187b0:	42000204 	addi	r8,r8,8
   187b4:	21400044 	addi	r5,r4,1
   187b8:	3001ae1e 	bne	r6,zero,18e74 <___vfiprintf_internal_r+0xbc8>
   187bc:	3801bb26 	beq	r7,zero,18eac <___vfiprintf_internal_r+0xc00>
   187c0:	d9001d04 	addi	r4,sp,116
   187c4:	10800084 	addi	r2,r2,2
   187c8:	41000015 	stw	r4,0(r8)
   187cc:	01000084 	movi	r4,2
   187d0:	41000115 	stw	r4,4(r8)
   187d4:	d8801c15 	stw	r2,112(sp)
   187d8:	d9401b15 	stw	r5,108(sp)
   187dc:	010001c4 	movi	r4,7
   187e0:	2142680e 	bge	r4,r5,19184 <___vfiprintf_internal_r+0xed8>
   187e4:	1002b11e 	bne	r2,zero,192ac <___vfiprintf_internal_r+0x1000>
   187e8:	01802004 	movi	r6,128
   187ec:	01400044 	movi	r5,1
   187f0:	0009883a 	mov	r4,zero
   187f4:	d811883a 	mov	r8,sp
   187f8:	1981ae1e 	bne	r3,r6,18eb4 <___vfiprintf_internal_r+0xc08>
   187fc:	d8c02517 	ldw	r3,148(sp)
   18800:	1cf9c83a 	sub	fp,r3,r19
   18804:	0701ab0e 	bge	zero,fp,18eb4 <___vfiprintf_internal_r+0xc08>
   18808:	05400404 	movi	r21,16
   1880c:	af03a90e 	bge	r21,fp,196b4 <___vfiprintf_internal_r+0x1408>
   18810:	014000b4 	movhi	r5,2
   18814:	297b4004 	addi	r5,r5,-4864
   18818:	d9402315 	stw	r5,140(sp)
   1881c:	01c001c4 	movi	r7,7
   18820:	00000506 	br	18838 <___vfiprintf_internal_r+0x58c>
   18824:	21800084 	addi	r6,r4,2
   18828:	42000204 	addi	r8,r8,8
   1882c:	1809883a 	mov	r4,r3
   18830:	e73ffc04 	addi	fp,fp,-16
   18834:	af000d0e 	bge	r21,fp,1886c <___vfiprintf_internal_r+0x5c0>
   18838:	10800404 	addi	r2,r2,16
   1883c:	20c00044 	addi	r3,r4,1
   18840:	44800015 	stw	r18,0(r8)
   18844:	45400115 	stw	r21,4(r8)
   18848:	d8801c15 	stw	r2,112(sp)
   1884c:	d8c01b15 	stw	r3,108(sp)
   18850:	38fff40e 	bge	r7,r3,18824 <__alt_mem_nios_system_shared_memory+0xfffd8824>
   18854:	10022b1e 	bne	r2,zero,19104 <___vfiprintf_internal_r+0xe58>
   18858:	e73ffc04 	addi	fp,fp,-16
   1885c:	01800044 	movi	r6,1
   18860:	0009883a 	mov	r4,zero
   18864:	d811883a 	mov	r8,sp
   18868:	af3ff316 	blt	r21,fp,18838 <__alt_mem_nios_system_shared_memory+0xfffd8838>
   1886c:	d8c02317 	ldw	r3,140(sp)
   18870:	1705883a 	add	r2,r2,fp
   18874:	47000115 	stw	fp,4(r8)
   18878:	40c00015 	stw	r3,0(r8)
   1887c:	d8801c15 	stw	r2,112(sp)
   18880:	d9801b15 	stw	r6,108(sp)
   18884:	00c001c4 	movi	r3,7
   18888:	19829416 	blt	r3,r6,192dc <___vfiprintf_internal_r+0x1030>
   1888c:	8521c83a 	sub	r16,r16,r20
   18890:	42000204 	addi	r8,r8,8
   18894:	31400044 	addi	r5,r6,1
   18898:	3009883a 	mov	r4,r6
   1889c:	04018716 	blt	zero,r16,18ebc <___vfiprintf_internal_r+0xc10>
   188a0:	a085883a 	add	r2,r20,r2
   188a4:	45c00015 	stw	r23,0(r8)
   188a8:	45000115 	stw	r20,4(r8)
   188ac:	d8801c15 	stw	r2,112(sp)
   188b0:	d9401b15 	stw	r5,108(sp)
   188b4:	00c001c4 	movi	r3,7
   188b8:	1941c20e 	bge	r3,r5,18fc4 <___vfiprintf_internal_r+0xd18>
   188bc:	1002531e 	bne	r2,zero,1920c <___vfiprintf_internal_r+0xf60>
   188c0:	d8001b15 	stw	zero,108(sp)
   188c4:	8c40010c 	andi	r17,r17,4
   188c8:	88023226 	beq	r17,zero,19194 <___vfiprintf_internal_r+0xee8>
   188cc:	d9002517 	ldw	r4,148(sp)
   188d0:	24e3c83a 	sub	r17,r4,r19
   188d4:	04432916 	blt	zero,r17,1957c <___vfiprintf_internal_r+0x12d0>
   188d8:	d8802517 	ldw	r2,148(sp)
   188dc:	14c0010e 	bge	r2,r19,188e4 <___vfiprintf_internal_r+0x638>
   188e0:	9805883a 	mov	r2,r19
   188e4:	d8c02417 	ldw	r3,144(sp)
   188e8:	1887883a 	add	r3,r3,r2
   188ec:	d8c02415 	stw	r3,144(sp)
   188f0:	d8001b15 	stw	zero,108(sp)
   188f4:	d811883a 	mov	r8,sp
   188f8:	003ea006 	br	1837c <__alt_mem_nios_system_shared_memory+0xfffd837c>
   188fc:	8c400814 	ori	r17,r17,32
   18900:	b0c00007 	ldb	r3,0(r22)
   18904:	003ec606 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18908:	b0c00007 	ldb	r3,0(r22)
   1890c:	00801b04 	movi	r2,108
   18910:	18832026 	beq	r3,r2,19594 <___vfiprintf_internal_r+0x12e8>
   18914:	8c400414 	ori	r17,r17,16
   18918:	003ec106 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   1891c:	9cc03fcc 	andi	r19,r19,255
   18920:	b811883a 	mov	r8,r23
   18924:	9803981e 	bne	r19,zero,19788 <___vfiprintf_internal_r+0x14dc>
   18928:	8880080c 	andi	r2,r17,32
   1892c:	1002be26 	beq	r2,zero,19428 <___vfiprintf_internal_r+0x117c>
   18930:	d9002217 	ldw	r4,136(sp)
   18934:	d9402417 	ldw	r5,144(sp)
   18938:	20800017 	ldw	r2,0(r4)
   1893c:	2807d7fa 	srai	r3,r5,31
   18940:	21000104 	addi	r4,r4,4
   18944:	d9002215 	stw	r4,136(sp)
   18948:	11400015 	stw	r5,0(r2)
   1894c:	10c00115 	stw	r3,4(r2)
   18950:	003e8a06 	br	1837c <__alt_mem_nios_system_shared_memory+0xfffd837c>
   18954:	9cc03fcc 	andi	r19,r19,255
   18958:	b811883a 	mov	r8,r23
   1895c:	9803871e 	bne	r19,zero,1977c <___vfiprintf_internal_r+0x14d0>
   18960:	8880080c 	andi	r2,r17,32
   18964:	10009a26 	beq	r2,zero,18bd0 <___vfiprintf_internal_r+0x924>
   18968:	d9002217 	ldw	r4,136(sp)
   1896c:	d8001d85 	stb	zero,118(sp)
   18970:	20800204 	addi	r2,r4,8
   18974:	24c00017 	ldw	r19,0(r4)
   18978:	25000117 	ldw	r20,4(r4)
   1897c:	8002a416 	blt	r16,zero,19410 <___vfiprintf_internal_r+0x1164>
   18980:	013fdfc4 	movi	r4,-129
   18984:	9d06b03a 	or	r3,r19,r20
   18988:	d8802215 	stw	r2,136(sp)
   1898c:	8922703a 	and	r17,r17,r4
   18990:	18009b26 	beq	r3,zero,18c00 <___vfiprintf_internal_r+0x954>
   18994:	002b883a 	mov	r21,zero
   18998:	ddc01a04 	addi	r23,sp,104
   1899c:	9806d0fa 	srli	r3,r19,3
   189a0:	a008977a 	slli	r4,r20,29
   189a4:	a028d0fa 	srli	r20,r20,3
   189a8:	9cc001cc 	andi	r19,r19,7
   189ac:	98800c04 	addi	r2,r19,48
   189b0:	bdffffc4 	addi	r23,r23,-1
   189b4:	20e6b03a 	or	r19,r4,r3
   189b8:	b8800005 	stb	r2,0(r23)
   189bc:	9d06b03a 	or	r3,r19,r20
   189c0:	183ff61e 	bne	r3,zero,1899c <__alt_mem_nios_system_shared_memory+0xfffd899c>
   189c4:	88c0004c 	andi	r3,r17,1
   189c8:	18021f1e 	bne	r3,zero,19248 <___vfiprintf_internal_r+0xf9c>
   189cc:	d9401e17 	ldw	r5,120(sp)
   189d0:	2de9c83a 	sub	r20,r5,r23
   189d4:	003f3806 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   189d8:	9cc03fcc 	andi	r19,r19,255
   189dc:	b811883a 	mov	r8,r23
   189e0:	98034f1e 	bne	r19,zero,19720 <___vfiprintf_internal_r+0x1474>
   189e4:	008000b4 	movhi	r2,2
   189e8:	10ba9104 	addi	r2,r2,-5564
   189ec:	d8802615 	stw	r2,152(sp)
   189f0:	8880080c 	andi	r2,r17,32
   189f4:	1000ac26 	beq	r2,zero,18ca8 <___vfiprintf_internal_r+0x9fc>
   189f8:	d9002217 	ldw	r4,136(sp)
   189fc:	24c00017 	ldw	r19,0(r4)
   18a00:	25000117 	ldw	r20,4(r4)
   18a04:	21000204 	addi	r4,r4,8
   18a08:	d9002215 	stw	r4,136(sp)
   18a0c:	8880004c 	andi	r2,r17,1
   18a10:	1001e726 	beq	r2,zero,191b0 <___vfiprintf_internal_r+0xf04>
   18a14:	9d04b03a 	or	r2,r19,r20
   18a18:	10025c1e 	bne	r2,zero,1938c <___vfiprintf_internal_r+0x10e0>
   18a1c:	d8001d85 	stb	zero,118(sp)
   18a20:	80024416 	blt	r16,zero,19334 <___vfiprintf_internal_r+0x1088>
   18a24:	00bfdfc4 	movi	r2,-129
   18a28:	88a2703a 	and	r17,r17,r2
   18a2c:	003f1d06 	br	186a4 <__alt_mem_nios_system_shared_memory+0xfffd86a4>
   18a30:	d8c02217 	ldw	r3,136(sp)
   18a34:	04c00044 	movi	r19,1
   18a38:	b811883a 	mov	r8,r23
   18a3c:	18800017 	ldw	r2,0(r3)
   18a40:	18c00104 	addi	r3,r3,4
   18a44:	d8001d85 	stb	zero,118(sp)
   18a48:	d8801005 	stb	r2,64(sp)
   18a4c:	d8c02215 	stw	r3,136(sp)
   18a50:	9829883a 	mov	r20,r19
   18a54:	ddc01004 	addi	r23,sp,64
   18a58:	0021883a 	mov	r16,zero
   18a5c:	003f1e06 	br	186d8 <__alt_mem_nios_system_shared_memory+0xfffd86d8>
   18a60:	9cc03fcc 	andi	r19,r19,255
   18a64:	b811883a 	mov	r8,r23
   18a68:	9803331e 	bne	r19,zero,19738 <___vfiprintf_internal_r+0x148c>
   18a6c:	8880080c 	andi	r2,r17,32
   18a70:	10004826 	beq	r2,zero,18b94 <___vfiprintf_internal_r+0x8e8>
   18a74:	d9002217 	ldw	r4,136(sp)
   18a78:	20800117 	ldw	r2,4(r4)
   18a7c:	24c00017 	ldw	r19,0(r4)
   18a80:	21000204 	addi	r4,r4,8
   18a84:	d9002215 	stw	r4,136(sp)
   18a88:	1029883a 	mov	r20,r2
   18a8c:	10024c16 	blt	r2,zero,193c0 <___vfiprintf_internal_r+0x1114>
   18a90:	dd401d83 	ldbu	r21,118(sp)
   18a94:	80007116 	blt	r16,zero,18c5c <___vfiprintf_internal_r+0x9b0>
   18a98:	00ffdfc4 	movi	r3,-129
   18a9c:	9d04b03a 	or	r2,r19,r20
   18aa0:	88e2703a 	and	r17,r17,r3
   18aa4:	1000d126 	beq	r2,zero,18dec <___vfiprintf_internal_r+0xb40>
   18aa8:	a0023526 	beq	r20,zero,19380 <___vfiprintf_internal_r+0x10d4>
   18aac:	ddc01a04 	addi	r23,sp,104
   18ab0:	4039883a 	mov	fp,r8
   18ab4:	9809883a 	mov	r4,r19
   18ab8:	a00b883a 	mov	r5,r20
   18abc:	01800284 	movi	r6,10
   18ac0:	000f883a 	mov	r7,zero
   18ac4:	001a5240 	call	1a524 <__umoddi3>
   18ac8:	10800c04 	addi	r2,r2,48
   18acc:	bdffffc4 	addi	r23,r23,-1
   18ad0:	9809883a 	mov	r4,r19
   18ad4:	a00b883a 	mov	r5,r20
   18ad8:	b8800005 	stb	r2,0(r23)
   18adc:	01800284 	movi	r6,10
   18ae0:	000f883a 	mov	r7,zero
   18ae4:	0019f280 	call	19f28 <__udivdi3>
   18ae8:	1027883a 	mov	r19,r2
   18aec:	10c4b03a 	or	r2,r2,r3
   18af0:	1829883a 	mov	r20,r3
   18af4:	103fef1e 	bne	r2,zero,18ab4 <__alt_mem_nios_system_shared_memory+0xfffd8ab4>
   18af8:	d9001e17 	ldw	r4,120(sp)
   18afc:	e011883a 	mov	r8,fp
   18b00:	25e9c83a 	sub	r20,r4,r23
   18b04:	003eec06 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   18b08:	d8802307 	ldb	r2,140(sp)
   18b0c:	1002361e 	bne	r2,zero,193e8 <___vfiprintf_internal_r+0x113c>
   18b10:	00c00804 	movi	r3,32
   18b14:	d8c02305 	stb	r3,140(sp)
   18b18:	04c00044 	movi	r19,1
   18b1c:	b0c00007 	ldb	r3,0(r22)
   18b20:	003e3f06 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18b24:	8c400054 	ori	r17,r17,1
   18b28:	b0c00007 	ldb	r3,0(r22)
   18b2c:	003e3c06 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18b30:	8c402014 	ori	r17,r17,128
   18b34:	b0c00007 	ldb	r3,0(r22)
   18b38:	003e3906 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18b3c:	dc002715 	stw	r16,156(sp)
   18b40:	d8002515 	stw	zero,148(sp)
   18b44:	1f3ff404 	addi	fp,r3,-48
   18b48:	0009883a 	mov	r4,zero
   18b4c:	b021883a 	mov	r16,r22
   18b50:	01400284 	movi	r5,10
   18b54:	00051580 	call	5158 <__mulsi3>
   18b58:	80c00007 	ldb	r3,0(r16)
   18b5c:	e089883a 	add	r4,fp,r2
   18b60:	b5800044 	addi	r22,r22,1
   18b64:	1f3ff404 	addi	fp,r3,-48
   18b68:	b021883a 	mov	r16,r22
   18b6c:	af3ff82e 	bgeu	r21,fp,18b50 <__alt_mem_nios_system_shared_memory+0xfffd8b50>
   18b70:	d9002515 	stw	r4,148(sp)
   18b74:	dc002717 	ldw	r16,156(sp)
   18b78:	003e2a06 	br	18424 <__alt_mem_nios_system_shared_memory+0xfffd8424>
   18b7c:	9cc03fcc 	andi	r19,r19,255
   18b80:	b811883a 	mov	r8,r23
   18b84:	9802e91e 	bne	r19,zero,1972c <___vfiprintf_internal_r+0x1480>
   18b88:	8c400414 	ori	r17,r17,16
   18b8c:	8880080c 	andi	r2,r17,32
   18b90:	103fb81e 	bne	r2,zero,18a74 <__alt_mem_nios_system_shared_memory+0xfffd8a74>
   18b94:	8880040c 	andi	r2,r17,16
   18b98:	10022e26 	beq	r2,zero,19454 <___vfiprintf_internal_r+0x11a8>
   18b9c:	d9402217 	ldw	r5,136(sp)
   18ba0:	2cc00017 	ldw	r19,0(r5)
   18ba4:	29400104 	addi	r5,r5,4
   18ba8:	d9402215 	stw	r5,136(sp)
   18bac:	9829d7fa 	srai	r20,r19,31
   18bb0:	a005883a 	mov	r2,r20
   18bb4:	003fb506 	br	18a8c <__alt_mem_nios_system_shared_memory+0xfffd8a8c>
   18bb8:	9cc03fcc 	andi	r19,r19,255
   18bbc:	b811883a 	mov	r8,r23
   18bc0:	9802fa1e 	bne	r19,zero,197ac <___vfiprintf_internal_r+0x1500>
   18bc4:	8c400414 	ori	r17,r17,16
   18bc8:	8880080c 	andi	r2,r17,32
   18bcc:	103f661e 	bne	r2,zero,18968 <__alt_mem_nios_system_shared_memory+0xfffd8968>
   18bd0:	8880040c 	andi	r2,r17,16
   18bd4:	10020626 	beq	r2,zero,193f0 <___vfiprintf_internal_r+0x1144>
   18bd8:	d9402217 	ldw	r5,136(sp)
   18bdc:	d8001d85 	stb	zero,118(sp)
   18be0:	0029883a 	mov	r20,zero
   18be4:	28800104 	addi	r2,r5,4
   18be8:	2cc00017 	ldw	r19,0(r5)
   18bec:	80020816 	blt	r16,zero,19410 <___vfiprintf_internal_r+0x1164>
   18bf0:	00ffdfc4 	movi	r3,-129
   18bf4:	d8802215 	stw	r2,136(sp)
   18bf8:	88e2703a 	and	r17,r17,r3
   18bfc:	983f651e 	bne	r19,zero,18994 <__alt_mem_nios_system_shared_memory+0xfffd8994>
   18c00:	002b883a 	mov	r21,zero
   18c04:	8002cf26 	beq	r16,zero,19744 <___vfiprintf_internal_r+0x1498>
   18c08:	0027883a 	mov	r19,zero
   18c0c:	0029883a 	mov	r20,zero
   18c10:	003f6106 	br	18998 <__alt_mem_nios_system_shared_memory+0xfffd8998>
   18c14:	9cc03fcc 	andi	r19,r19,255
   18c18:	b811883a 	mov	r8,r23
   18c1c:	9802e01e 	bne	r19,zero,197a0 <___vfiprintf_internal_r+0x14f4>
   18c20:	8c400414 	ori	r17,r17,16
   18c24:	8880080c 	andi	r2,r17,32
   18c28:	1000641e 	bne	r2,zero,18dbc <___vfiprintf_internal_r+0xb10>
   18c2c:	8880040c 	andi	r2,r17,16
   18c30:	1001c81e 	bne	r2,zero,19354 <___vfiprintf_internal_r+0x10a8>
   18c34:	8880100c 	andi	r2,r17,64
   18c38:	d8001d85 	stb	zero,118(sp)
   18c3c:	1002281e 	bne	r2,zero,194e0 <___vfiprintf_internal_r+0x1234>
   18c40:	d9002217 	ldw	r4,136(sp)
   18c44:	0029883a 	mov	r20,zero
   18c48:	20800104 	addi	r2,r4,4
   18c4c:	24c00017 	ldw	r19,0(r4)
   18c50:	8001c60e 	bge	r16,zero,1936c <___vfiprintf_internal_r+0x10c0>
   18c54:	d8802215 	stw	r2,136(sp)
   18c58:	002b883a 	mov	r21,zero
   18c5c:	9d04b03a 	or	r2,r19,r20
   18c60:	103f911e 	bne	r2,zero,18aa8 <__alt_mem_nios_system_shared_memory+0xfffd8aa8>
   18c64:	00800044 	movi	r2,1
   18c68:	10803fcc 	andi	r2,r2,255
   18c6c:	00c00044 	movi	r3,1
   18c70:	10c05f26 	beq	r2,r3,18df0 <___vfiprintf_internal_r+0xb44>
   18c74:	00c00084 	movi	r3,2
   18c78:	10ffe31e 	bne	r2,r3,18c08 <__alt_mem_nios_system_shared_memory+0xfffd8c08>
   18c7c:	0027883a 	mov	r19,zero
   18c80:	0029883a 	mov	r20,zero
   18c84:	00015106 	br	191cc <___vfiprintf_internal_r+0xf20>
   18c88:	9cc03fcc 	andi	r19,r19,255
   18c8c:	b811883a 	mov	r8,r23
   18c90:	9802c01e 	bne	r19,zero,19794 <___vfiprintf_internal_r+0x14e8>
   18c94:	014000b4 	movhi	r5,2
   18c98:	297a8c04 	addi	r5,r5,-5584
   18c9c:	d9402615 	stw	r5,152(sp)
   18ca0:	8880080c 	andi	r2,r17,32
   18ca4:	103f541e 	bne	r2,zero,189f8 <__alt_mem_nios_system_shared_memory+0xfffd89f8>
   18ca8:	8880040c 	andi	r2,r17,16
   18cac:	1001f226 	beq	r2,zero,19478 <___vfiprintf_internal_r+0x11cc>
   18cb0:	d9402217 	ldw	r5,136(sp)
   18cb4:	0029883a 	mov	r20,zero
   18cb8:	2cc00017 	ldw	r19,0(r5)
   18cbc:	29400104 	addi	r5,r5,4
   18cc0:	d9402215 	stw	r5,136(sp)
   18cc4:	003f5106 	br	18a0c <__alt_mem_nios_system_shared_memory+0xfffd8a0c>
   18cc8:	d8c02217 	ldw	r3,136(sp)
   18ccc:	b811883a 	mov	r8,r23
   18cd0:	d8001d85 	stb	zero,118(sp)
   18cd4:	1dc00017 	ldw	r23,0(r3)
   18cd8:	1f000104 	addi	fp,r3,4
   18cdc:	b8025926 	beq	r23,zero,19644 <___vfiprintf_internal_r+0x1398>
   18ce0:	80023316 	blt	r16,zero,195b0 <___vfiprintf_internal_r+0x1304>
   18ce4:	800d883a 	mov	r6,r16
   18ce8:	000b883a 	mov	r5,zero
   18cec:	b809883a 	mov	r4,r23
   18cf0:	da002a15 	stw	r8,168(sp)
   18cf4:	000afc80 	call	afc8 <memchr>
   18cf8:	da002a17 	ldw	r8,168(sp)
   18cfc:	10026826 	beq	r2,zero,196a0 <___vfiprintf_internal_r+0x13f4>
   18d00:	15e9c83a 	sub	r20,r2,r23
   18d04:	dd401d83 	ldbu	r21,118(sp)
   18d08:	df002215 	stw	fp,136(sp)
   18d0c:	0021883a 	mov	r16,zero
   18d10:	003e6906 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   18d14:	9cc03fcc 	andi	r19,r19,255
   18d18:	b811883a 	mov	r8,r23
   18d1c:	983fc126 	beq	r19,zero,18c24 <__alt_mem_nios_system_shared_memory+0xfffd8c24>
   18d20:	d8c02303 	ldbu	r3,140(sp)
   18d24:	d8c01d85 	stb	r3,118(sp)
   18d28:	003fbe06 	br	18c24 <__alt_mem_nios_system_shared_memory+0xfffd8c24>
   18d2c:	d9002217 	ldw	r4,136(sp)
   18d30:	d9402217 	ldw	r5,136(sp)
   18d34:	21000017 	ldw	r4,0(r4)
   18d38:	28800104 	addi	r2,r5,4
   18d3c:	d9002515 	stw	r4,148(sp)
   18d40:	203e3d16 	blt	r4,zero,18638 <__alt_mem_nios_system_shared_memory+0xfffd8638>
   18d44:	d8802215 	stw	r2,136(sp)
   18d48:	b0c00007 	ldb	r3,0(r22)
   18d4c:	003db406 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18d50:	00c00ac4 	movi	r3,43
   18d54:	d8c02305 	stb	r3,140(sp)
   18d58:	04c00044 	movi	r19,1
   18d5c:	b0c00007 	ldb	r3,0(r22)
   18d60:	003daf06 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18d64:	b0c00007 	ldb	r3,0(r22)
   18d68:	01000a84 	movi	r4,42
   18d6c:	b4000044 	addi	r16,r22,1
   18d70:	19025e26 	beq	r3,r4,196ec <___vfiprintf_internal_r+0x1440>
   18d74:	1f3ff404 	addi	fp,r3,-48
   18d78:	0009883a 	mov	r4,zero
   18d7c:	af025236 	bltu	r21,fp,196c8 <___vfiprintf_internal_r+0x141c>
   18d80:	01400284 	movi	r5,10
   18d84:	00051580 	call	5158 <__mulsi3>
   18d88:	80c00007 	ldb	r3,0(r16)
   18d8c:	1709883a 	add	r4,r2,fp
   18d90:	85800044 	addi	r22,r16,1
   18d94:	1f3ff404 	addi	fp,r3,-48
   18d98:	b021883a 	mov	r16,r22
   18d9c:	af3ff82e 	bgeu	r21,fp,18d80 <__alt_mem_nios_system_shared_memory+0xfffd8d80>
   18da0:	2021883a 	mov	r16,r4
   18da4:	203d9f0e 	bge	r4,zero,18424 <__alt_mem_nios_system_shared_memory+0xfffd8424>
   18da8:	043fffc4 	movi	r16,-1
   18dac:	003d9d06 	br	18424 <__alt_mem_nios_system_shared_memory+0xfffd8424>
   18db0:	8c401014 	ori	r17,r17,64
   18db4:	b0c00007 	ldb	r3,0(r22)
   18db8:	003d9906 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   18dbc:	d9002217 	ldw	r4,136(sp)
   18dc0:	d8001d85 	stb	zero,118(sp)
   18dc4:	20c00204 	addi	r3,r4,8
   18dc8:	24c00017 	ldw	r19,0(r4)
   18dcc:	25000117 	ldw	r20,4(r4)
   18dd0:	8001e716 	blt	r16,zero,19570 <___vfiprintf_internal_r+0x12c4>
   18dd4:	013fdfc4 	movi	r4,-129
   18dd8:	9d04b03a 	or	r2,r19,r20
   18ddc:	d8c02215 	stw	r3,136(sp)
   18de0:	8922703a 	and	r17,r17,r4
   18de4:	002b883a 	mov	r21,zero
   18de8:	103f2f1e 	bne	r2,zero,18aa8 <__alt_mem_nios_system_shared_memory+0xfffd8aa8>
   18dec:	803e2f26 	beq	r16,zero,186ac <__alt_mem_nios_system_shared_memory+0xfffd86ac>
   18df0:	0027883a 	mov	r19,zero
   18df4:	9cc00c04 	addi	r19,r19,48
   18df8:	dcc019c5 	stb	r19,103(sp)
   18dfc:	dd002817 	ldw	r20,160(sp)
   18e00:	ddc019c4 	addi	r23,sp,103
   18e04:	003e2c06 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   18e08:	9cc03fcc 	andi	r19,r19,255
   18e0c:	b811883a 	mov	r8,r23
   18e10:	9802571e 	bne	r19,zero,19770 <___vfiprintf_internal_r+0x14c4>
   18e14:	18005726 	beq	r3,zero,18f74 <___vfiprintf_internal_r+0xcc8>
   18e18:	04c00044 	movi	r19,1
   18e1c:	d8c01005 	stb	r3,64(sp)
   18e20:	d8001d85 	stb	zero,118(sp)
   18e24:	9829883a 	mov	r20,r19
   18e28:	ddc01004 	addi	r23,sp,64
   18e2c:	003f0a06 	br	18a58 <__alt_mem_nios_system_shared_memory+0xfffd8a58>
   18e30:	d9402017 	ldw	r5,128(sp)
   18e34:	d9002117 	ldw	r4,132(sp)
   18e38:	d9801a04 	addi	r6,sp,104
   18e3c:	da802a15 	stw	r10,168(sp)
   18e40:	00181980 	call	18198 <__sprint_r.part.0>
   18e44:	da802a17 	ldw	r10,168(sp)
   18e48:	1000501e 	bne	r2,zero,18f8c <___vfiprintf_internal_r+0xce0>
   18e4c:	d9801b17 	ldw	r6,108(sp)
   18e50:	d8801c17 	ldw	r2,112(sp)
   18e54:	d811883a 	mov	r8,sp
   18e58:	31000044 	addi	r4,r6,1
   18e5c:	003e3606 	br	18738 <__alt_mem_nios_system_shared_memory+0xfffd8738>
   18e60:	d9001b17 	ldw	r4,108(sp)
   18e64:	d8801c17 	ldw	r2,112(sp)
   18e68:	21400044 	addi	r5,r4,1
   18e6c:	d9801d87 	ldb	r6,118(sp)
   18e70:	303e5226 	beq	r6,zero,187bc <__alt_mem_nios_system_shared_memory+0xfffd87bc>
   18e74:	01800044 	movi	r6,1
   18e78:	d9001d84 	addi	r4,sp,118
   18e7c:	1185883a 	add	r2,r2,r6
   18e80:	41000015 	stw	r4,0(r8)
   18e84:	41800115 	stw	r6,4(r8)
   18e88:	d8801c15 	stw	r2,112(sp)
   18e8c:	d9401b15 	stw	r5,108(sp)
   18e90:	010001c4 	movi	r4,7
   18e94:	2140b00e 	bge	r4,r5,19158 <___vfiprintf_internal_r+0xeac>
   18e98:	1000f61e 	bne	r2,zero,19274 <___vfiprintf_internal_r+0xfc8>
   18e9c:	3800b31e 	bne	r7,zero,1916c <___vfiprintf_internal_r+0xec0>
   18ea0:	0009883a 	mov	r4,zero
   18ea4:	300b883a 	mov	r5,r6
   18ea8:	d811883a 	mov	r8,sp
   18eac:	01802004 	movi	r6,128
   18eb0:	19be5226 	beq	r3,r6,187fc <__alt_mem_nios_system_shared_memory+0xfffd87fc>
   18eb4:	8521c83a 	sub	r16,r16,r20
   18eb8:	043e790e 	bge	zero,r16,188a0 <__alt_mem_nios_system_shared_memory+0xfffd88a0>
   18ebc:	05400404 	movi	r21,16
   18ec0:	ac01b00e 	bge	r21,r16,19584 <___vfiprintf_internal_r+0x12d8>
   18ec4:	014000b4 	movhi	r5,2
   18ec8:	297b4004 	addi	r5,r5,-4864
   18ecc:	d9402315 	stw	r5,140(sp)
   18ed0:	070001c4 	movi	fp,7
   18ed4:	00000506 	br	18eec <___vfiprintf_internal_r+0xc40>
   18ed8:	21400084 	addi	r5,r4,2
   18edc:	42000204 	addi	r8,r8,8
   18ee0:	1809883a 	mov	r4,r3
   18ee4:	843ffc04 	addi	r16,r16,-16
   18ee8:	ac000d0e 	bge	r21,r16,18f20 <___vfiprintf_internal_r+0xc74>
   18eec:	10800404 	addi	r2,r2,16
   18ef0:	20c00044 	addi	r3,r4,1
   18ef4:	44800015 	stw	r18,0(r8)
   18ef8:	45400115 	stw	r21,4(r8)
   18efc:	d8801c15 	stw	r2,112(sp)
   18f00:	d8c01b15 	stw	r3,108(sp)
   18f04:	e0fff40e 	bge	fp,r3,18ed8 <__alt_mem_nios_system_shared_memory+0xfffd8ed8>
   18f08:	1000101e 	bne	r2,zero,18f4c <___vfiprintf_internal_r+0xca0>
   18f0c:	843ffc04 	addi	r16,r16,-16
   18f10:	01400044 	movi	r5,1
   18f14:	0009883a 	mov	r4,zero
   18f18:	d811883a 	mov	r8,sp
   18f1c:	ac3ff316 	blt	r21,r16,18eec <__alt_mem_nios_system_shared_memory+0xfffd8eec>
   18f20:	d8c02317 	ldw	r3,140(sp)
   18f24:	1405883a 	add	r2,r2,r16
   18f28:	44000115 	stw	r16,4(r8)
   18f2c:	40c00015 	stw	r3,0(r8)
   18f30:	d8801c15 	stw	r2,112(sp)
   18f34:	d9401b15 	stw	r5,108(sp)
   18f38:	00c001c4 	movi	r3,7
   18f3c:	19401916 	blt	r3,r5,18fa4 <___vfiprintf_internal_r+0xcf8>
   18f40:	42000204 	addi	r8,r8,8
   18f44:	29400044 	addi	r5,r5,1
   18f48:	003e5506 	br	188a0 <__alt_mem_nios_system_shared_memory+0xfffd88a0>
   18f4c:	d9402017 	ldw	r5,128(sp)
   18f50:	d9002117 	ldw	r4,132(sp)
   18f54:	d9801a04 	addi	r6,sp,104
   18f58:	00181980 	call	18198 <__sprint_r.part.0>
   18f5c:	10000b1e 	bne	r2,zero,18f8c <___vfiprintf_internal_r+0xce0>
   18f60:	d9001b17 	ldw	r4,108(sp)
   18f64:	d8801c17 	ldw	r2,112(sp)
   18f68:	d811883a 	mov	r8,sp
   18f6c:	21400044 	addi	r5,r4,1
   18f70:	003fdc06 	br	18ee4 <__alt_mem_nios_system_shared_memory+0xfffd8ee4>
   18f74:	d8801c17 	ldw	r2,112(sp)
   18f78:	10000426 	beq	r2,zero,18f8c <___vfiprintf_internal_r+0xce0>
   18f7c:	d9402017 	ldw	r5,128(sp)
   18f80:	d9002117 	ldw	r4,132(sp)
   18f84:	d9801a04 	addi	r6,sp,104
   18f88:	00181980 	call	18198 <__sprint_r.part.0>
   18f8c:	d9402017 	ldw	r5,128(sp)
   18f90:	2880030b 	ldhu	r2,12(r5)
   18f94:	1080100c 	andi	r2,r2,64
   18f98:	10014d1e 	bne	r2,zero,194d0 <___vfiprintf_internal_r+0x1224>
   18f9c:	d8802417 	ldw	r2,144(sp)
   18fa0:	003d9706 	br	18600 <__alt_mem_nios_system_shared_memory+0xfffd8600>
   18fa4:	1000d21e 	bne	r2,zero,192f0 <___vfiprintf_internal_r+0x1044>
   18fa8:	00c00044 	movi	r3,1
   18fac:	a005883a 	mov	r2,r20
   18fb0:	ddc00015 	stw	r23,0(sp)
   18fb4:	dd000115 	stw	r20,4(sp)
   18fb8:	dd001c15 	stw	r20,112(sp)
   18fbc:	d8c01b15 	stw	r3,108(sp)
   18fc0:	d811883a 	mov	r8,sp
   18fc4:	42000204 	addi	r8,r8,8
   18fc8:	8c40010c 	andi	r17,r17,4
   18fcc:	88004026 	beq	r17,zero,190d0 <___vfiprintf_internal_r+0xe24>
   18fd0:	d9002517 	ldw	r4,148(sp)
   18fd4:	24e3c83a 	sub	r17,r4,r19
   18fd8:	04403d0e 	bge	zero,r17,190d0 <___vfiprintf_internal_r+0xe24>
   18fdc:	04000404 	movi	r16,16
   18fe0:	8441a90e 	bge	r16,r17,19688 <___vfiprintf_internal_r+0x13dc>
   18fe4:	00c000b4 	movhi	r3,2
   18fe8:	18fb4404 	addi	r3,r3,-4848
   18fec:	d9001b17 	ldw	r4,108(sp)
   18ff0:	d8c02315 	stw	r3,140(sp)
   18ff4:	050001c4 	movi	r20,7
   18ff8:	dd402117 	ldw	r21,132(sp)
   18ffc:	ddc02017 	ldw	r23,128(sp)
   19000:	00000506 	br	19018 <___vfiprintf_internal_r+0xd6c>
   19004:	21400084 	addi	r5,r4,2
   19008:	42000204 	addi	r8,r8,8
   1900c:	1809883a 	mov	r4,r3
   19010:	8c7ffc04 	addi	r17,r17,-16
   19014:	84400f0e 	bge	r16,r17,19054 <___vfiprintf_internal_r+0xda8>
   19018:	014000b4 	movhi	r5,2
   1901c:	10800404 	addi	r2,r2,16
   19020:	20c00044 	addi	r3,r4,1
   19024:	297b4404 	addi	r5,r5,-4848
   19028:	41400015 	stw	r5,0(r8)
   1902c:	44000115 	stw	r16,4(r8)
   19030:	d8801c15 	stw	r2,112(sp)
   19034:	d8c01b15 	stw	r3,108(sp)
   19038:	a0fff20e 	bge	r20,r3,19004 <__alt_mem_nios_system_shared_memory+0xfffd9004>
   1903c:	1000141e 	bne	r2,zero,19090 <___vfiprintf_internal_r+0xde4>
   19040:	8c7ffc04 	addi	r17,r17,-16
   19044:	01400044 	movi	r5,1
   19048:	0009883a 	mov	r4,zero
   1904c:	d811883a 	mov	r8,sp
   19050:	847ff116 	blt	r16,r17,19018 <__alt_mem_nios_system_shared_memory+0xfffd9018>
   19054:	d8c02317 	ldw	r3,140(sp)
   19058:	1445883a 	add	r2,r2,r17
   1905c:	44400115 	stw	r17,4(r8)
   19060:	40c00015 	stw	r3,0(r8)
   19064:	d8801c15 	stw	r2,112(sp)
   19068:	d9401b15 	stw	r5,108(sp)
   1906c:	00c001c4 	movi	r3,7
   19070:	1940170e 	bge	r3,r5,190d0 <___vfiprintf_internal_r+0xe24>
   19074:	1000101e 	bne	r2,zero,190b8 <___vfiprintf_internal_r+0xe0c>
   19078:	d8802517 	ldw	r2,148(sp)
   1907c:	14c11616 	blt	r2,r19,194d8 <___vfiprintf_internal_r+0x122c>
   19080:	d9002417 	ldw	r4,144(sp)
   19084:	2089883a 	add	r4,r4,r2
   19088:	d9002415 	stw	r4,144(sp)
   1908c:	003e1806 	br	188f0 <__alt_mem_nios_system_shared_memory+0xfffd88f0>
   19090:	d9801a04 	addi	r6,sp,104
   19094:	b80b883a 	mov	r5,r23
   19098:	a809883a 	mov	r4,r21
   1909c:	00181980 	call	18198 <__sprint_r.part.0>
   190a0:	103fba1e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   190a4:	d9001b17 	ldw	r4,108(sp)
   190a8:	d8801c17 	ldw	r2,112(sp)
   190ac:	d811883a 	mov	r8,sp
   190b0:	21400044 	addi	r5,r4,1
   190b4:	003fd606 	br	19010 <__alt_mem_nios_system_shared_memory+0xfffd9010>
   190b8:	d9402017 	ldw	r5,128(sp)
   190bc:	d9002117 	ldw	r4,132(sp)
   190c0:	d9801a04 	addi	r6,sp,104
   190c4:	00181980 	call	18198 <__sprint_r.part.0>
   190c8:	103fb01e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   190cc:	d8801c17 	ldw	r2,112(sp)
   190d0:	d8c02517 	ldw	r3,148(sp)
   190d4:	1cc0010e 	bge	r3,r19,190dc <___vfiprintf_internal_r+0xe30>
   190d8:	9807883a 	mov	r3,r19
   190dc:	d9002417 	ldw	r4,144(sp)
   190e0:	20c9883a 	add	r4,r4,r3
   190e4:	d9002415 	stw	r4,144(sp)
   190e8:	103e0126 	beq	r2,zero,188f0 <__alt_mem_nios_system_shared_memory+0xfffd88f0>
   190ec:	d9402017 	ldw	r5,128(sp)
   190f0:	d9002117 	ldw	r4,132(sp)
   190f4:	d9801a04 	addi	r6,sp,104
   190f8:	00181980 	call	18198 <__sprint_r.part.0>
   190fc:	103dfc26 	beq	r2,zero,188f0 <__alt_mem_nios_system_shared_memory+0xfffd88f0>
   19100:	003fa206 	br	18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   19104:	d9402017 	ldw	r5,128(sp)
   19108:	d9002117 	ldw	r4,132(sp)
   1910c:	d9801a04 	addi	r6,sp,104
   19110:	d9c02b15 	stw	r7,172(sp)
   19114:	00181980 	call	18198 <__sprint_r.part.0>
   19118:	d9c02b17 	ldw	r7,172(sp)
   1911c:	103f9b1e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   19120:	d9001b17 	ldw	r4,108(sp)
   19124:	d8801c17 	ldw	r2,112(sp)
   19128:	d811883a 	mov	r8,sp
   1912c:	21800044 	addi	r6,r4,1
   19130:	003dbf06 	br	18830 <__alt_mem_nios_system_shared_memory+0xfffd8830>
   19134:	1000d81e 	bne	r2,zero,19498 <___vfiprintf_internal_r+0x11ec>
   19138:	d9001d87 	ldb	r4,118(sp)
   1913c:	20000a26 	beq	r4,zero,19168 <___vfiprintf_internal_r+0xebc>
   19140:	00800044 	movi	r2,1
   19144:	d9001d84 	addi	r4,sp,118
   19148:	100b883a 	mov	r5,r2
   1914c:	d9000015 	stw	r4,0(sp)
   19150:	d8800115 	stw	r2,4(sp)
   19154:	d811883a 	mov	r8,sp
   19158:	2809883a 	mov	r4,r5
   1915c:	42000204 	addi	r8,r8,8
   19160:	29400044 	addi	r5,r5,1
   19164:	003d9506 	br	187bc <__alt_mem_nios_system_shared_memory+0xfffd87bc>
   19168:	3800fd26 	beq	r7,zero,19560 <___vfiprintf_internal_r+0x12b4>
   1916c:	00800084 	movi	r2,2
   19170:	d9001d04 	addi	r4,sp,116
   19174:	d9000015 	stw	r4,0(sp)
   19178:	d8800115 	stw	r2,4(sp)
   1917c:	01400044 	movi	r5,1
   19180:	d811883a 	mov	r8,sp
   19184:	2809883a 	mov	r4,r5
   19188:	42000204 	addi	r8,r8,8
   1918c:	29400044 	addi	r5,r5,1
   19190:	003f4606 	br	18eac <__alt_mem_nios_system_shared_memory+0xfffd8eac>
   19194:	d8802517 	ldw	r2,148(sp)
   19198:	14c0010e 	bge	r2,r19,191a0 <___vfiprintf_internal_r+0xef4>
   1919c:	9805883a 	mov	r2,r19
   191a0:	d9402417 	ldw	r5,144(sp)
   191a4:	288b883a 	add	r5,r5,r2
   191a8:	d9402415 	stw	r5,144(sp)
   191ac:	003dd006 	br	188f0 <__alt_mem_nios_system_shared_memory+0xfffd88f0>
   191b0:	d8001d85 	stb	zero,118(sp)
   191b4:	80005d16 	blt	r16,zero,1932c <___vfiprintf_internal_r+0x1080>
   191b8:	00ffdfc4 	movi	r3,-129
   191bc:	9d04b03a 	or	r2,r19,r20
   191c0:	88e2703a 	and	r17,r17,r3
   191c4:	103d3726 	beq	r2,zero,186a4 <__alt_mem_nios_system_shared_memory+0xfffd86a4>
   191c8:	002b883a 	mov	r21,zero
   191cc:	d9002617 	ldw	r4,152(sp)
   191d0:	ddc01a04 	addi	r23,sp,104
   191d4:	988003cc 	andi	r2,r19,15
   191d8:	a006973a 	slli	r3,r20,28
   191dc:	2085883a 	add	r2,r4,r2
   191e0:	9826d13a 	srli	r19,r19,4
   191e4:	10800003 	ldbu	r2,0(r2)
   191e8:	a028d13a 	srli	r20,r20,4
   191ec:	bdffffc4 	addi	r23,r23,-1
   191f0:	1ce6b03a 	or	r19,r3,r19
   191f4:	b8800005 	stb	r2,0(r23)
   191f8:	9d04b03a 	or	r2,r19,r20
   191fc:	103ff51e 	bne	r2,zero,191d4 <__alt_mem_nios_system_shared_memory+0xfffd91d4>
   19200:	d8801e17 	ldw	r2,120(sp)
   19204:	15e9c83a 	sub	r20,r2,r23
   19208:	003d2b06 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   1920c:	d9402017 	ldw	r5,128(sp)
   19210:	d9002117 	ldw	r4,132(sp)
   19214:	d9801a04 	addi	r6,sp,104
   19218:	00181980 	call	18198 <__sprint_r.part.0>
   1921c:	103f5b1e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   19220:	d8801c17 	ldw	r2,112(sp)
   19224:	d811883a 	mov	r8,sp
   19228:	003f6706 	br	18fc8 <__alt_mem_nios_system_shared_memory+0xfffd8fc8>
   1922c:	d9402017 	ldw	r5,128(sp)
   19230:	d9002117 	ldw	r4,132(sp)
   19234:	d9801a04 	addi	r6,sp,104
   19238:	00181980 	call	18198 <__sprint_r.part.0>
   1923c:	103f531e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   19240:	d811883a 	mov	r8,sp
   19244:	003cd906 	br	185ac <__alt_mem_nios_system_shared_memory+0xfffd85ac>
   19248:	10803fcc 	andi	r2,r2,255
   1924c:	1080201c 	xori	r2,r2,128
   19250:	10bfe004 	addi	r2,r2,-128
   19254:	00c00c04 	movi	r3,48
   19258:	10ffe926 	beq	r2,r3,19200 <__alt_mem_nios_system_shared_memory+0xfffd9200>
   1925c:	b8ffffc5 	stb	r3,-1(r23)
   19260:	d8c01e17 	ldw	r3,120(sp)
   19264:	b8bfffc4 	addi	r2,r23,-1
   19268:	102f883a 	mov	r23,r2
   1926c:	18a9c83a 	sub	r20,r3,r2
   19270:	003d1106 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   19274:	d9402017 	ldw	r5,128(sp)
   19278:	d9002117 	ldw	r4,132(sp)
   1927c:	d9801a04 	addi	r6,sp,104
   19280:	d8c02a15 	stw	r3,168(sp)
   19284:	d9c02b15 	stw	r7,172(sp)
   19288:	00181980 	call	18198 <__sprint_r.part.0>
   1928c:	d8c02a17 	ldw	r3,168(sp)
   19290:	d9c02b17 	ldw	r7,172(sp)
   19294:	103f3d1e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   19298:	d9001b17 	ldw	r4,108(sp)
   1929c:	d8801c17 	ldw	r2,112(sp)
   192a0:	d811883a 	mov	r8,sp
   192a4:	21400044 	addi	r5,r4,1
   192a8:	003d4406 	br	187bc <__alt_mem_nios_system_shared_memory+0xfffd87bc>
   192ac:	d9402017 	ldw	r5,128(sp)
   192b0:	d9002117 	ldw	r4,132(sp)
   192b4:	d9801a04 	addi	r6,sp,104
   192b8:	d8c02a15 	stw	r3,168(sp)
   192bc:	00181980 	call	18198 <__sprint_r.part.0>
   192c0:	d8c02a17 	ldw	r3,168(sp)
   192c4:	103f311e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   192c8:	d9001b17 	ldw	r4,108(sp)
   192cc:	d8801c17 	ldw	r2,112(sp)
   192d0:	d811883a 	mov	r8,sp
   192d4:	21400044 	addi	r5,r4,1
   192d8:	003ef406 	br	18eac <__alt_mem_nios_system_shared_memory+0xfffd8eac>
   192dc:	1000bd1e 	bne	r2,zero,195d4 <___vfiprintf_internal_r+0x1328>
   192e0:	01400044 	movi	r5,1
   192e4:	0009883a 	mov	r4,zero
   192e8:	d811883a 	mov	r8,sp
   192ec:	003ef106 	br	18eb4 <__alt_mem_nios_system_shared_memory+0xfffd8eb4>
   192f0:	d9402017 	ldw	r5,128(sp)
   192f4:	d9002117 	ldw	r4,132(sp)
   192f8:	d9801a04 	addi	r6,sp,104
   192fc:	00181980 	call	18198 <__sprint_r.part.0>
   19300:	103f221e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   19304:	d9401b17 	ldw	r5,108(sp)
   19308:	d8801c17 	ldw	r2,112(sp)
   1930c:	d811883a 	mov	r8,sp
   19310:	29400044 	addi	r5,r5,1
   19314:	003d6206 	br	188a0 <__alt_mem_nios_system_shared_memory+0xfffd88a0>
   19318:	014000b4 	movhi	r5,2
   1931c:	297a9104 	addi	r5,r5,-5564
   19320:	d9402615 	stw	r5,152(sp)
   19324:	d8c02215 	stw	r3,136(sp)
   19328:	1023883a 	mov	r17,r2
   1932c:	9d04b03a 	or	r2,r19,r20
   19330:	103fa51e 	bne	r2,zero,191c8 <__alt_mem_nios_system_shared_memory+0xfffd91c8>
   19334:	002b883a 	mov	r21,zero
   19338:	00800084 	movi	r2,2
   1933c:	003e4a06 	br	18c68 <__alt_mem_nios_system_shared_memory+0xfffd8c68>
   19340:	014000b4 	movhi	r5,2
   19344:	297a9104 	addi	r5,r5,-5564
   19348:	002b883a 	mov	r21,zero
   1934c:	d9402615 	stw	r5,152(sp)
   19350:	003f9e06 	br	191cc <__alt_mem_nios_system_shared_memory+0xfffd91cc>
   19354:	d9402217 	ldw	r5,136(sp)
   19358:	d8001d85 	stb	zero,118(sp)
   1935c:	0029883a 	mov	r20,zero
   19360:	28800104 	addi	r2,r5,4
   19364:	2cc00017 	ldw	r19,0(r5)
   19368:	803e3a16 	blt	r16,zero,18c54 <__alt_mem_nios_system_shared_memory+0xfffd8c54>
   1936c:	00ffdfc4 	movi	r3,-129
   19370:	d8802215 	stw	r2,136(sp)
   19374:	88e2703a 	and	r17,r17,r3
   19378:	002b883a 	mov	r21,zero
   1937c:	983e9b26 	beq	r19,zero,18dec <__alt_mem_nios_system_shared_memory+0xfffd8dec>
   19380:	00800244 	movi	r2,9
   19384:	14fdc936 	bltu	r2,r19,18aac <__alt_mem_nios_system_shared_memory+0xfffd8aac>
   19388:	003e9a06 	br	18df4 <__alt_mem_nios_system_shared_memory+0xfffd8df4>
   1938c:	00800c04 	movi	r2,48
   19390:	d8c01d45 	stb	r3,117(sp)
   19394:	d8801d05 	stb	r2,116(sp)
   19398:	d8001d85 	stb	zero,118(sp)
   1939c:	88c00094 	ori	r3,r17,2
   193a0:	80009c16 	blt	r16,zero,19614 <___vfiprintf_internal_r+0x1368>
   193a4:	00bfdfc4 	movi	r2,-129
   193a8:	88a2703a 	and	r17,r17,r2
   193ac:	8c400094 	ori	r17,r17,2
   193b0:	002b883a 	mov	r21,zero
   193b4:	003f8506 	br	191cc <__alt_mem_nios_system_shared_memory+0xfffd91cc>
   193b8:	b029883a 	mov	r20,r22
   193bc:	003c0b06 	br	183ec <__alt_mem_nios_system_shared_memory+0xfffd83ec>
   193c0:	04e7c83a 	sub	r19,zero,r19
   193c4:	05400b44 	movi	r21,45
   193c8:	9804c03a 	cmpne	r2,r19,zero
   193cc:	0529c83a 	sub	r20,zero,r20
   193d0:	dd401d85 	stb	r21,118(sp)
   193d4:	a0a9c83a 	sub	r20,r20,r2
   193d8:	80009716 	blt	r16,zero,19638 <___vfiprintf_internal_r+0x138c>
   193dc:	00bfdfc4 	movi	r2,-129
   193e0:	88a2703a 	and	r17,r17,r2
   193e4:	003db006 	br	18aa8 <__alt_mem_nios_system_shared_memory+0xfffd8aa8>
   193e8:	b0c00007 	ldb	r3,0(r22)
   193ec:	003c0c06 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   193f0:	8880100c 	andi	r2,r17,64
   193f4:	d8001d85 	stb	zero,118(sp)
   193f8:	1000461e 	bne	r2,zero,19514 <___vfiprintf_internal_r+0x1268>
   193fc:	d9002217 	ldw	r4,136(sp)
   19400:	0029883a 	mov	r20,zero
   19404:	20800104 	addi	r2,r4,4
   19408:	24c00017 	ldw	r19,0(r4)
   1940c:	803df80e 	bge	r16,zero,18bf0 <__alt_mem_nios_system_shared_memory+0xfffd8bf0>
   19410:	9d06b03a 	or	r3,r19,r20
   19414:	d8802215 	stw	r2,136(sp)
   19418:	183d5e1e 	bne	r3,zero,18994 <__alt_mem_nios_system_shared_memory+0xfffd8994>
   1941c:	002b883a 	mov	r21,zero
   19420:	0005883a 	mov	r2,zero
   19424:	003e1006 	br	18c68 <__alt_mem_nios_system_shared_memory+0xfffd8c68>
   19428:	8880040c 	andi	r2,r17,16
   1942c:	1000321e 	bne	r2,zero,194f8 <___vfiprintf_internal_r+0x124c>
   19430:	8c40100c 	andi	r17,r17,64
   19434:	88008d26 	beq	r17,zero,1966c <___vfiprintf_internal_r+0x13c0>
   19438:	d9402217 	ldw	r5,136(sp)
   1943c:	d8c02417 	ldw	r3,144(sp)
   19440:	28800017 	ldw	r2,0(r5)
   19444:	29400104 	addi	r5,r5,4
   19448:	d9402215 	stw	r5,136(sp)
   1944c:	10c0000d 	sth	r3,0(r2)
   19450:	003bca06 	br	1837c <__alt_mem_nios_system_shared_memory+0xfffd837c>
   19454:	8880100c 	andi	r2,r17,64
   19458:	10003a26 	beq	r2,zero,19544 <___vfiprintf_internal_r+0x1298>
   1945c:	d8802217 	ldw	r2,136(sp)
   19460:	14c0000f 	ldh	r19,0(r2)
   19464:	10800104 	addi	r2,r2,4
   19468:	d8802215 	stw	r2,136(sp)
   1946c:	9829d7fa 	srai	r20,r19,31
   19470:	a005883a 	mov	r2,r20
   19474:	003d8506 	br	18a8c <__alt_mem_nios_system_shared_memory+0xfffd8a8c>
   19478:	8880100c 	andi	r2,r17,64
   1947c:	10002b26 	beq	r2,zero,1952c <___vfiprintf_internal_r+0x1280>
   19480:	d8802217 	ldw	r2,136(sp)
   19484:	0029883a 	mov	r20,zero
   19488:	14c0000b 	ldhu	r19,0(r2)
   1948c:	10800104 	addi	r2,r2,4
   19490:	d8802215 	stw	r2,136(sp)
   19494:	003d5d06 	br	18a0c <__alt_mem_nios_system_shared_memory+0xfffd8a0c>
   19498:	d9402017 	ldw	r5,128(sp)
   1949c:	d9002117 	ldw	r4,132(sp)
   194a0:	d9801a04 	addi	r6,sp,104
   194a4:	d8c02a15 	stw	r3,168(sp)
   194a8:	d9c02b15 	stw	r7,172(sp)
   194ac:	00181980 	call	18198 <__sprint_r.part.0>
   194b0:	d8c02a17 	ldw	r3,168(sp)
   194b4:	d9c02b17 	ldw	r7,172(sp)
   194b8:	103eb41e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   194bc:	d9001b17 	ldw	r4,108(sp)
   194c0:	d8801c17 	ldw	r2,112(sp)
   194c4:	d811883a 	mov	r8,sp
   194c8:	21400044 	addi	r5,r4,1
   194cc:	003e6706 	br	18e6c <__alt_mem_nios_system_shared_memory+0xfffd8e6c>
   194d0:	00bfffc4 	movi	r2,-1
   194d4:	003c4a06 	br	18600 <__alt_mem_nios_system_shared_memory+0xfffd8600>
   194d8:	9805883a 	mov	r2,r19
   194dc:	003ee806 	br	19080 <__alt_mem_nios_system_shared_memory+0xfffd9080>
   194e0:	d8c02217 	ldw	r3,136(sp)
   194e4:	0029883a 	mov	r20,zero
   194e8:	18800104 	addi	r2,r3,4
   194ec:	1cc0000b 	ldhu	r19,0(r3)
   194f0:	803f9e0e 	bge	r16,zero,1936c <__alt_mem_nios_system_shared_memory+0xfffd936c>
   194f4:	003dd706 	br	18c54 <__alt_mem_nios_system_shared_memory+0xfffd8c54>
   194f8:	d8c02217 	ldw	r3,136(sp)
   194fc:	d9002417 	ldw	r4,144(sp)
   19500:	18800017 	ldw	r2,0(r3)
   19504:	18c00104 	addi	r3,r3,4
   19508:	d8c02215 	stw	r3,136(sp)
   1950c:	11000015 	stw	r4,0(r2)
   19510:	003b9a06 	br	1837c <__alt_mem_nios_system_shared_memory+0xfffd837c>
   19514:	d8c02217 	ldw	r3,136(sp)
   19518:	0029883a 	mov	r20,zero
   1951c:	18800104 	addi	r2,r3,4
   19520:	1cc0000b 	ldhu	r19,0(r3)
   19524:	803db20e 	bge	r16,zero,18bf0 <__alt_mem_nios_system_shared_memory+0xfffd8bf0>
   19528:	003fb906 	br	19410 <__alt_mem_nios_system_shared_memory+0xfffd9410>
   1952c:	d9002217 	ldw	r4,136(sp)
   19530:	0029883a 	mov	r20,zero
   19534:	24c00017 	ldw	r19,0(r4)
   19538:	21000104 	addi	r4,r4,4
   1953c:	d9002215 	stw	r4,136(sp)
   19540:	003d3206 	br	18a0c <__alt_mem_nios_system_shared_memory+0xfffd8a0c>
   19544:	d8c02217 	ldw	r3,136(sp)
   19548:	1cc00017 	ldw	r19,0(r3)
   1954c:	18c00104 	addi	r3,r3,4
   19550:	d8c02215 	stw	r3,136(sp)
   19554:	9829d7fa 	srai	r20,r19,31
   19558:	a005883a 	mov	r2,r20
   1955c:	003d4b06 	br	18a8c <__alt_mem_nios_system_shared_memory+0xfffd8a8c>
   19560:	0009883a 	mov	r4,zero
   19564:	01400044 	movi	r5,1
   19568:	d811883a 	mov	r8,sp
   1956c:	003e4f06 	br	18eac <__alt_mem_nios_system_shared_memory+0xfffd8eac>
   19570:	d8c02215 	stw	r3,136(sp)
   19574:	002b883a 	mov	r21,zero
   19578:	003db806 	br	18c5c <__alt_mem_nios_system_shared_memory+0xfffd8c5c>
   1957c:	d811883a 	mov	r8,sp
   19580:	003e9606 	br	18fdc <__alt_mem_nios_system_shared_memory+0xfffd8fdc>
   19584:	010000b4 	movhi	r4,2
   19588:	213b4004 	addi	r4,r4,-4864
   1958c:	d9002315 	stw	r4,140(sp)
   19590:	003e6306 	br	18f20 <__alt_mem_nios_system_shared_memory+0xfffd8f20>
   19594:	b0c00043 	ldbu	r3,1(r22)
   19598:	8c400814 	ori	r17,r17,32
   1959c:	b5800044 	addi	r22,r22,1
   195a0:	18c03fcc 	andi	r3,r3,255
   195a4:	18c0201c 	xori	r3,r3,128
   195a8:	18ffe004 	addi	r3,r3,-128
   195ac:	003b9c06 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   195b0:	b809883a 	mov	r4,r23
   195b4:	da002a15 	stw	r8,168(sp)
   195b8:	000ba8c0 	call	ba8c <strlen>
   195bc:	1029883a 	mov	r20,r2
   195c0:	dd401d83 	ldbu	r21,118(sp)
   195c4:	df002215 	stw	fp,136(sp)
   195c8:	0021883a 	mov	r16,zero
   195cc:	da002a17 	ldw	r8,168(sp)
   195d0:	003c3906 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   195d4:	d9402017 	ldw	r5,128(sp)
   195d8:	d9002117 	ldw	r4,132(sp)
   195dc:	d9801a04 	addi	r6,sp,104
   195e0:	00181980 	call	18198 <__sprint_r.part.0>
   195e4:	103e691e 	bne	r2,zero,18f8c <__alt_mem_nios_system_shared_memory+0xfffd8f8c>
   195e8:	d9001b17 	ldw	r4,108(sp)
   195ec:	d8801c17 	ldw	r2,112(sp)
   195f0:	d811883a 	mov	r8,sp
   195f4:	21400044 	addi	r5,r4,1
   195f8:	003e2e06 	br	18eb4 <__alt_mem_nios_system_shared_memory+0xfffd8eb4>
   195fc:	010000b4 	movhi	r4,2
   19600:	213b4404 	addi	r4,r4,-4848
   19604:	d9002315 	stw	r4,140(sp)
   19608:	d9001b17 	ldw	r4,108(sp)
   1960c:	21000044 	addi	r4,r4,1
   19610:	003c5e06 	br	1878c <__alt_mem_nios_system_shared_memory+0xfffd878c>
   19614:	002b883a 	mov	r21,zero
   19618:	00800084 	movi	r2,2
   1961c:	10803fcc 	andi	r2,r2,255
   19620:	01000044 	movi	r4,1
   19624:	11002b26 	beq	r2,r4,196d4 <___vfiprintf_internal_r+0x1428>
   19628:	01000084 	movi	r4,2
   1962c:	11002b1e 	bne	r2,r4,196dc <___vfiprintf_internal_r+0x1430>
   19630:	1823883a 	mov	r17,r3
   19634:	003ee506 	br	191cc <__alt_mem_nios_system_shared_memory+0xfffd91cc>
   19638:	8807883a 	mov	r3,r17
   1963c:	00800044 	movi	r2,1
   19640:	003ff606 	br	1961c <__alt_mem_nios_system_shared_memory+0xfffd961c>
   19644:	00800184 	movi	r2,6
   19648:	1400012e 	bgeu	r2,r16,19650 <___vfiprintf_internal_r+0x13a4>
   1964c:	1021883a 	mov	r16,r2
   19650:	8029883a 	mov	r20,r16
   19654:	8027883a 	mov	r19,r16
   19658:	80002216 	blt	r16,zero,196e4 <___vfiprintf_internal_r+0x1438>
   1965c:	05c000b4 	movhi	r23,2
   19660:	df002215 	stw	fp,136(sp)
   19664:	bdfa9604 	addi	r23,r23,-5544
   19668:	003cfb06 	br	18a58 <__alt_mem_nios_system_shared_memory+0xfffd8a58>
   1966c:	d9002217 	ldw	r4,136(sp)
   19670:	d9402417 	ldw	r5,144(sp)
   19674:	20800017 	ldw	r2,0(r4)
   19678:	21000104 	addi	r4,r4,4
   1967c:	d9002215 	stw	r4,136(sp)
   19680:	11400015 	stw	r5,0(r2)
   19684:	003b3d06 	br	1837c <__alt_mem_nios_system_shared_memory+0xfffd837c>
   19688:	014000b4 	movhi	r5,2
   1968c:	297b4404 	addi	r5,r5,-4848
   19690:	d9402315 	stw	r5,140(sp)
   19694:	d9401b17 	ldw	r5,108(sp)
   19698:	29400044 	addi	r5,r5,1
   1969c:	003e6d06 	br	19054 <__alt_mem_nios_system_shared_memory+0xfffd9054>
   196a0:	8029883a 	mov	r20,r16
   196a4:	dd401d83 	ldbu	r21,118(sp)
   196a8:	df002215 	stw	fp,136(sp)
   196ac:	0021883a 	mov	r16,zero
   196b0:	003c0106 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   196b4:	00c000b4 	movhi	r3,2
   196b8:	18fb4004 	addi	r3,r3,-4864
   196bc:	d8c02315 	stw	r3,140(sp)
   196c0:	280d883a 	mov	r6,r5
   196c4:	003c6906 	br	1886c <__alt_mem_nios_system_shared_memory+0xfffd886c>
   196c8:	802d883a 	mov	r22,r16
   196cc:	0021883a 	mov	r16,zero
   196d0:	003b5406 	br	18424 <__alt_mem_nios_system_shared_memory+0xfffd8424>
   196d4:	1823883a 	mov	r17,r3
   196d8:	003cf306 	br	18aa8 <__alt_mem_nios_system_shared_memory+0xfffd8aa8>
   196dc:	1823883a 	mov	r17,r3
   196e0:	003cad06 	br	18998 <__alt_mem_nios_system_shared_memory+0xfffd8998>
   196e4:	0027883a 	mov	r19,zero
   196e8:	003fdc06 	br	1965c <__alt_mem_nios_system_shared_memory+0xfffd965c>
   196ec:	d9402217 	ldw	r5,136(sp)
   196f0:	8005883a 	mov	r2,r16
   196f4:	b0c00043 	ldbu	r3,1(r22)
   196f8:	2c000017 	ldw	r16,0(r5)
   196fc:	29000104 	addi	r4,r5,4
   19700:	d9002215 	stw	r4,136(sp)
   19704:	102d883a 	mov	r22,r2
   19708:	803fa50e 	bge	r16,zero,195a0 <__alt_mem_nios_system_shared_memory+0xfffd95a0>
   1970c:	18c03fcc 	andi	r3,r3,255
   19710:	18c0201c 	xori	r3,r3,128
   19714:	043fffc4 	movi	r16,-1
   19718:	18ffe004 	addi	r3,r3,-128
   1971c:	003b4006 	br	18420 <__alt_mem_nios_system_shared_memory+0xfffd8420>
   19720:	d9402303 	ldbu	r5,140(sp)
   19724:	d9401d85 	stb	r5,118(sp)
   19728:	003cae06 	br	189e4 <__alt_mem_nios_system_shared_memory+0xfffd89e4>
   1972c:	d8c02303 	ldbu	r3,140(sp)
   19730:	d8c01d85 	stb	r3,118(sp)
   19734:	003d1406 	br	18b88 <__alt_mem_nios_system_shared_memory+0xfffd8b88>
   19738:	d8c02303 	ldbu	r3,140(sp)
   1973c:	d8c01d85 	stb	r3,118(sp)
   19740:	003cca06 	br	18a6c <__alt_mem_nios_system_shared_memory+0xfffd8a6c>
   19744:	8880004c 	andi	r2,r17,1
   19748:	002b883a 	mov	r21,zero
   1974c:	10000526 	beq	r2,zero,19764 <___vfiprintf_internal_r+0x14b8>
   19750:	00800c04 	movi	r2,48
   19754:	d88019c5 	stb	r2,103(sp)
   19758:	dd002817 	ldw	r20,160(sp)
   1975c:	ddc019c4 	addi	r23,sp,103
   19760:	003bd506 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   19764:	0029883a 	mov	r20,zero
   19768:	ddc01a04 	addi	r23,sp,104
   1976c:	003bd206 	br	186b8 <__alt_mem_nios_system_shared_memory+0xfffd86b8>
   19770:	d9002303 	ldbu	r4,140(sp)
   19774:	d9001d85 	stb	r4,118(sp)
   19778:	003da606 	br	18e14 <__alt_mem_nios_system_shared_memory+0xfffd8e14>
   1977c:	d8c02303 	ldbu	r3,140(sp)
   19780:	d8c01d85 	stb	r3,118(sp)
   19784:	003c7606 	br	18960 <__alt_mem_nios_system_shared_memory+0xfffd8960>
   19788:	d8c02303 	ldbu	r3,140(sp)
   1978c:	d8c01d85 	stb	r3,118(sp)
   19790:	003c6506 	br	18928 <__alt_mem_nios_system_shared_memory+0xfffd8928>
   19794:	d9002303 	ldbu	r4,140(sp)
   19798:	d9001d85 	stb	r4,118(sp)
   1979c:	003d3d06 	br	18c94 <__alt_mem_nios_system_shared_memory+0xfffd8c94>
   197a0:	d8c02303 	ldbu	r3,140(sp)
   197a4:	d8c01d85 	stb	r3,118(sp)
   197a8:	003d1d06 	br	18c20 <__alt_mem_nios_system_shared_memory+0xfffd8c20>
   197ac:	d8c02303 	ldbu	r3,140(sp)
   197b0:	d8c01d85 	stb	r3,118(sp)
   197b4:	003d0306 	br	18bc4 <__alt_mem_nios_system_shared_memory+0xfffd8bc4>

000197b8 <__vfiprintf_internal>:
   197b8:	008000b4 	movhi	r2,2
   197bc:	10824204 	addi	r2,r2,2312
   197c0:	300f883a 	mov	r7,r6
   197c4:	280d883a 	mov	r6,r5
   197c8:	200b883a 	mov	r5,r4
   197cc:	11000017 	ldw	r4,0(r2)
   197d0:	00182ac1 	jmpi	182ac <___vfiprintf_internal_r>

000197d4 <__sbprintf>:
   197d4:	2880030b 	ldhu	r2,12(r5)
   197d8:	2ac01917 	ldw	r11,100(r5)
   197dc:	2a80038b 	ldhu	r10,14(r5)
   197e0:	2a400717 	ldw	r9,28(r5)
   197e4:	2a000917 	ldw	r8,36(r5)
   197e8:	defee204 	addi	sp,sp,-1144
   197ec:	00c10004 	movi	r3,1024
   197f0:	dc011a15 	stw	r16,1128(sp)
   197f4:	10bfff4c 	andi	r2,r2,65533
   197f8:	2821883a 	mov	r16,r5
   197fc:	d8cb883a 	add	r5,sp,r3
   19800:	dc811c15 	stw	r18,1136(sp)
   19804:	dc411b15 	stw	r17,1132(sp)
   19808:	dfc11d15 	stw	ra,1140(sp)
   1980c:	2025883a 	mov	r18,r4
   19810:	d881030d 	sth	r2,1036(sp)
   19814:	dac11915 	stw	r11,1124(sp)
   19818:	da81038d 	sth	r10,1038(sp)
   1981c:	da410715 	stw	r9,1052(sp)
   19820:	da010915 	stw	r8,1060(sp)
   19824:	dec10015 	stw	sp,1024(sp)
   19828:	dec10415 	stw	sp,1040(sp)
   1982c:	d8c10215 	stw	r3,1032(sp)
   19830:	d8c10515 	stw	r3,1044(sp)
   19834:	d8010615 	stw	zero,1048(sp)
   19838:	00182ac0 	call	182ac <___vfiprintf_internal_r>
   1983c:	1023883a 	mov	r17,r2
   19840:	10000416 	blt	r2,zero,19854 <__sbprintf+0x80>
   19844:	d9410004 	addi	r5,sp,1024
   19848:	9009883a 	mov	r4,r18
   1984c:	000940c0 	call	940c <_fflush_r>
   19850:	10000d1e 	bne	r2,zero,19888 <__sbprintf+0xb4>
   19854:	d881030b 	ldhu	r2,1036(sp)
   19858:	1080100c 	andi	r2,r2,64
   1985c:	10000326 	beq	r2,zero,1986c <__sbprintf+0x98>
   19860:	8080030b 	ldhu	r2,12(r16)
   19864:	10801014 	ori	r2,r2,64
   19868:	8080030d 	sth	r2,12(r16)
   1986c:	8805883a 	mov	r2,r17
   19870:	dfc11d17 	ldw	ra,1140(sp)
   19874:	dc811c17 	ldw	r18,1136(sp)
   19878:	dc411b17 	ldw	r17,1132(sp)
   1987c:	dc011a17 	ldw	r16,1128(sp)
   19880:	dec11e04 	addi	sp,sp,1144
   19884:	f800283a 	ret
   19888:	047fffc4 	movi	r17,-1
   1988c:	003ff106 	br	19854 <__alt_mem_nios_system_shared_memory+0xfffd9854>

00019890 <__swbuf_r>:
   19890:	defffb04 	addi	sp,sp,-20
   19894:	dcc00315 	stw	r19,12(sp)
   19898:	dc800215 	stw	r18,8(sp)
   1989c:	dc000015 	stw	r16,0(sp)
   198a0:	dfc00415 	stw	ra,16(sp)
   198a4:	dc400115 	stw	r17,4(sp)
   198a8:	2025883a 	mov	r18,r4
   198ac:	2827883a 	mov	r19,r5
   198b0:	3021883a 	mov	r16,r6
   198b4:	20000226 	beq	r4,zero,198c0 <__swbuf_r+0x30>
   198b8:	20800e17 	ldw	r2,56(r4)
   198bc:	10004226 	beq	r2,zero,199c8 <__swbuf_r+0x138>
   198c0:	80800617 	ldw	r2,24(r16)
   198c4:	8100030b 	ldhu	r4,12(r16)
   198c8:	80800215 	stw	r2,8(r16)
   198cc:	2080020c 	andi	r2,r4,8
   198d0:	10003626 	beq	r2,zero,199ac <__swbuf_r+0x11c>
   198d4:	80c00417 	ldw	r3,16(r16)
   198d8:	18003426 	beq	r3,zero,199ac <__swbuf_r+0x11c>
   198dc:	2088000c 	andi	r2,r4,8192
   198e0:	9c403fcc 	andi	r17,r19,255
   198e4:	10001a26 	beq	r2,zero,19950 <__swbuf_r+0xc0>
   198e8:	80800017 	ldw	r2,0(r16)
   198ec:	81000517 	ldw	r4,20(r16)
   198f0:	10c7c83a 	sub	r3,r2,r3
   198f4:	1900200e 	bge	r3,r4,19978 <__swbuf_r+0xe8>
   198f8:	18c00044 	addi	r3,r3,1
   198fc:	81000217 	ldw	r4,8(r16)
   19900:	11400044 	addi	r5,r2,1
   19904:	81400015 	stw	r5,0(r16)
   19908:	213fffc4 	addi	r4,r4,-1
   1990c:	81000215 	stw	r4,8(r16)
   19910:	14c00005 	stb	r19,0(r2)
   19914:	80800517 	ldw	r2,20(r16)
   19918:	10c01e26 	beq	r2,r3,19994 <__swbuf_r+0x104>
   1991c:	8080030b 	ldhu	r2,12(r16)
   19920:	1080004c 	andi	r2,r2,1
   19924:	10000226 	beq	r2,zero,19930 <__swbuf_r+0xa0>
   19928:	00800284 	movi	r2,10
   1992c:	88801926 	beq	r17,r2,19994 <__swbuf_r+0x104>
   19930:	8805883a 	mov	r2,r17
   19934:	dfc00417 	ldw	ra,16(sp)
   19938:	dcc00317 	ldw	r19,12(sp)
   1993c:	dc800217 	ldw	r18,8(sp)
   19940:	dc400117 	ldw	r17,4(sp)
   19944:	dc000017 	ldw	r16,0(sp)
   19948:	dec00504 	addi	sp,sp,20
   1994c:	f800283a 	ret
   19950:	81401917 	ldw	r5,100(r16)
   19954:	00b7ffc4 	movi	r2,-8193
   19958:	21080014 	ori	r4,r4,8192
   1995c:	2884703a 	and	r2,r5,r2
   19960:	80801915 	stw	r2,100(r16)
   19964:	80800017 	ldw	r2,0(r16)
   19968:	8100030d 	sth	r4,12(r16)
   1996c:	81000517 	ldw	r4,20(r16)
   19970:	10c7c83a 	sub	r3,r2,r3
   19974:	193fe016 	blt	r3,r4,198f8 <__alt_mem_nios_system_shared_memory+0xfffd98f8>
   19978:	800b883a 	mov	r5,r16
   1997c:	9009883a 	mov	r4,r18
   19980:	000940c0 	call	940c <_fflush_r>
   19984:	1000071e 	bne	r2,zero,199a4 <__swbuf_r+0x114>
   19988:	80800017 	ldw	r2,0(r16)
   1998c:	00c00044 	movi	r3,1
   19990:	003fda06 	br	198fc <__alt_mem_nios_system_shared_memory+0xfffd98fc>
   19994:	800b883a 	mov	r5,r16
   19998:	9009883a 	mov	r4,r18
   1999c:	000940c0 	call	940c <_fflush_r>
   199a0:	103fe326 	beq	r2,zero,19930 <__alt_mem_nios_system_shared_memory+0xfffd9930>
   199a4:	00bfffc4 	movi	r2,-1
   199a8:	003fe206 	br	19934 <__alt_mem_nios_system_shared_memory+0xfffd9934>
   199ac:	800b883a 	mov	r5,r16
   199b0:	9009883a 	mov	r4,r18
   199b4:	00121b80 	call	121b8 <__swsetup_r>
   199b8:	103ffa1e 	bne	r2,zero,199a4 <__alt_mem_nios_system_shared_memory+0xfffd99a4>
   199bc:	8100030b 	ldhu	r4,12(r16)
   199c0:	80c00417 	ldw	r3,16(r16)
   199c4:	003fc506 	br	198dc <__alt_mem_nios_system_shared_memory+0xfffd98dc>
   199c8:	00099c00 	call	99c0 <__sinit>
   199cc:	003fbc06 	br	198c0 <__alt_mem_nios_system_shared_memory+0xfffd98c0>

000199d0 <__swbuf>:
   199d0:	008000b4 	movhi	r2,2
   199d4:	10824204 	addi	r2,r2,2312
   199d8:	280d883a 	mov	r6,r5
   199dc:	200b883a 	mov	r5,r4
   199e0:	11000017 	ldw	r4,0(r2)
   199e4:	00198901 	jmpi	19890 <__swbuf_r>

000199e8 <_calloc_r>:
   199e8:	defffe04 	addi	sp,sp,-8
   199ec:	2805883a 	mov	r2,r5
   199f0:	dc000015 	stw	r16,0(sp)
   199f4:	300b883a 	mov	r5,r6
   199f8:	2021883a 	mov	r16,r4
   199fc:	1009883a 	mov	r4,r2
   19a00:	dfc00115 	stw	ra,4(sp)
   19a04:	00051580 	call	5158 <__mulsi3>
   19a08:	100b883a 	mov	r5,r2
   19a0c:	8009883a 	mov	r4,r16
   19a10:	000a7bc0 	call	a7bc <_malloc_r>
   19a14:	10002926 	beq	r2,zero,19abc <_calloc_r+0xd4>
   19a18:	11bfff17 	ldw	r6,-4(r2)
   19a1c:	1021883a 	mov	r16,r2
   19a20:	00bfff04 	movi	r2,-4
   19a24:	308c703a 	and	r6,r6,r2
   19a28:	00c00904 	movi	r3,36
   19a2c:	308d883a 	add	r6,r6,r2
   19a30:	19801636 	bltu	r3,r6,19a8c <_calloc_r+0xa4>
   19a34:	008004c4 	movi	r2,19
   19a38:	11800b2e 	bgeu	r2,r6,19a68 <_calloc_r+0x80>
   19a3c:	80000015 	stw	zero,0(r16)
   19a40:	80000115 	stw	zero,4(r16)
   19a44:	008006c4 	movi	r2,27
   19a48:	11801a2e 	bgeu	r2,r6,19ab4 <_calloc_r+0xcc>
   19a4c:	80000215 	stw	zero,8(r16)
   19a50:	80000315 	stw	zero,12(r16)
   19a54:	30c0151e 	bne	r6,r3,19aac <_calloc_r+0xc4>
   19a58:	80000415 	stw	zero,16(r16)
   19a5c:	80800604 	addi	r2,r16,24
   19a60:	80000515 	stw	zero,20(r16)
   19a64:	00000106 	br	19a6c <_calloc_r+0x84>
   19a68:	8005883a 	mov	r2,r16
   19a6c:	10000015 	stw	zero,0(r2)
   19a70:	10000115 	stw	zero,4(r2)
   19a74:	10000215 	stw	zero,8(r2)
   19a78:	8005883a 	mov	r2,r16
   19a7c:	dfc00117 	ldw	ra,4(sp)
   19a80:	dc000017 	ldw	r16,0(sp)
   19a84:	dec00204 	addi	sp,sp,8
   19a88:	f800283a 	ret
   19a8c:	000b883a 	mov	r5,zero
   19a90:	8009883a 	mov	r4,r16
   19a94:	000b1f40 	call	b1f4 <memset>
   19a98:	8005883a 	mov	r2,r16
   19a9c:	dfc00117 	ldw	ra,4(sp)
   19aa0:	dc000017 	ldw	r16,0(sp)
   19aa4:	dec00204 	addi	sp,sp,8
   19aa8:	f800283a 	ret
   19aac:	80800404 	addi	r2,r16,16
   19ab0:	003fee06 	br	19a6c <__alt_mem_nios_system_shared_memory+0xfffd9a6c>
   19ab4:	80800204 	addi	r2,r16,8
   19ab8:	003fec06 	br	19a6c <__alt_mem_nios_system_shared_memory+0xfffd9a6c>
   19abc:	0005883a 	mov	r2,zero
   19ac0:	003fee06 	br	19a7c <__alt_mem_nios_system_shared_memory+0xfffd9a7c>

00019ac4 <__fputwc>:
   19ac4:	defff804 	addi	sp,sp,-32
   19ac8:	dcc00415 	stw	r19,16(sp)
   19acc:	dc800315 	stw	r18,12(sp)
   19ad0:	dc000115 	stw	r16,4(sp)
   19ad4:	dfc00715 	stw	ra,28(sp)
   19ad8:	dd400615 	stw	r21,24(sp)
   19adc:	dd000515 	stw	r20,20(sp)
   19ae0:	dc400215 	stw	r17,8(sp)
   19ae4:	2027883a 	mov	r19,r4
   19ae8:	2825883a 	mov	r18,r5
   19aec:	3021883a 	mov	r16,r6
   19af0:	0014f100 	call	14f10 <__locale_mb_cur_max>
   19af4:	00c00044 	movi	r3,1
   19af8:	10c03e26 	beq	r2,r3,19bf4 <__fputwc+0x130>
   19afc:	81c01704 	addi	r7,r16,92
   19b00:	900d883a 	mov	r6,r18
   19b04:	d80b883a 	mov	r5,sp
   19b08:	9809883a 	mov	r4,r19
   19b0c:	0019ccc0 	call	19ccc <_wcrtomb_r>
   19b10:	1029883a 	mov	r20,r2
   19b14:	00bfffc4 	movi	r2,-1
   19b18:	a0802026 	beq	r20,r2,19b9c <__fputwc+0xd8>
   19b1c:	d9400003 	ldbu	r5,0(sp)
   19b20:	a0001c26 	beq	r20,zero,19b94 <__fputwc+0xd0>
   19b24:	0023883a 	mov	r17,zero
   19b28:	05400284 	movi	r21,10
   19b2c:	00000906 	br	19b54 <__fputwc+0x90>
   19b30:	80800017 	ldw	r2,0(r16)
   19b34:	11400005 	stb	r5,0(r2)
   19b38:	80c00017 	ldw	r3,0(r16)
   19b3c:	18c00044 	addi	r3,r3,1
   19b40:	80c00015 	stw	r3,0(r16)
   19b44:	8c400044 	addi	r17,r17,1
   19b48:	dc45883a 	add	r2,sp,r17
   19b4c:	8d00112e 	bgeu	r17,r20,19b94 <__fputwc+0xd0>
   19b50:	11400003 	ldbu	r5,0(r2)
   19b54:	80c00217 	ldw	r3,8(r16)
   19b58:	18ffffc4 	addi	r3,r3,-1
   19b5c:	80c00215 	stw	r3,8(r16)
   19b60:	183ff30e 	bge	r3,zero,19b30 <__alt_mem_nios_system_shared_memory+0xfffd9b30>
   19b64:	80800617 	ldw	r2,24(r16)
   19b68:	18801916 	blt	r3,r2,19bd0 <__fputwc+0x10c>
   19b6c:	80800017 	ldw	r2,0(r16)
   19b70:	11400005 	stb	r5,0(r2)
   19b74:	80800017 	ldw	r2,0(r16)
   19b78:	10c00003 	ldbu	r3,0(r2)
   19b7c:	10800044 	addi	r2,r2,1
   19b80:	1d402326 	beq	r3,r21,19c10 <__fputwc+0x14c>
   19b84:	80800015 	stw	r2,0(r16)
   19b88:	8c400044 	addi	r17,r17,1
   19b8c:	dc45883a 	add	r2,sp,r17
   19b90:	8d3fef36 	bltu	r17,r20,19b50 <__alt_mem_nios_system_shared_memory+0xfffd9b50>
   19b94:	9005883a 	mov	r2,r18
   19b98:	00000406 	br	19bac <__fputwc+0xe8>
   19b9c:	80c0030b 	ldhu	r3,12(r16)
   19ba0:	a005883a 	mov	r2,r20
   19ba4:	18c01014 	ori	r3,r3,64
   19ba8:	80c0030d 	sth	r3,12(r16)
   19bac:	dfc00717 	ldw	ra,28(sp)
   19bb0:	dd400617 	ldw	r21,24(sp)
   19bb4:	dd000517 	ldw	r20,20(sp)
   19bb8:	dcc00417 	ldw	r19,16(sp)
   19bbc:	dc800317 	ldw	r18,12(sp)
   19bc0:	dc400217 	ldw	r17,8(sp)
   19bc4:	dc000117 	ldw	r16,4(sp)
   19bc8:	dec00804 	addi	sp,sp,32
   19bcc:	f800283a 	ret
   19bd0:	800d883a 	mov	r6,r16
   19bd4:	29403fcc 	andi	r5,r5,255
   19bd8:	9809883a 	mov	r4,r19
   19bdc:	00198900 	call	19890 <__swbuf_r>
   19be0:	10bfffe0 	cmpeqi	r2,r2,-1
   19be4:	10803fcc 	andi	r2,r2,255
   19be8:	103fd626 	beq	r2,zero,19b44 <__alt_mem_nios_system_shared_memory+0xfffd9b44>
   19bec:	00bfffc4 	movi	r2,-1
   19bf0:	003fee06 	br	19bac <__alt_mem_nios_system_shared_memory+0xfffd9bac>
   19bf4:	90ffffc4 	addi	r3,r18,-1
   19bf8:	01003f84 	movi	r4,254
   19bfc:	20ffbf36 	bltu	r4,r3,19afc <__alt_mem_nios_system_shared_memory+0xfffd9afc>
   19c00:	900b883a 	mov	r5,r18
   19c04:	dc800005 	stb	r18,0(sp)
   19c08:	1029883a 	mov	r20,r2
   19c0c:	003fc506 	br	19b24 <__alt_mem_nios_system_shared_memory+0xfffd9b24>
   19c10:	800d883a 	mov	r6,r16
   19c14:	a80b883a 	mov	r5,r21
   19c18:	9809883a 	mov	r4,r19
   19c1c:	00198900 	call	19890 <__swbuf_r>
   19c20:	10bfffe0 	cmpeqi	r2,r2,-1
   19c24:	003fef06 	br	19be4 <__alt_mem_nios_system_shared_memory+0xfffd9be4>

00019c28 <_fputwc_r>:
   19c28:	3080030b 	ldhu	r2,12(r6)
   19c2c:	10c8000c 	andi	r3,r2,8192
   19c30:	1800051e 	bne	r3,zero,19c48 <_fputwc_r+0x20>
   19c34:	30c01917 	ldw	r3,100(r6)
   19c38:	10880014 	ori	r2,r2,8192
   19c3c:	3080030d 	sth	r2,12(r6)
   19c40:	18880014 	ori	r2,r3,8192
   19c44:	30801915 	stw	r2,100(r6)
   19c48:	0019ac41 	jmpi	19ac4 <__fputwc>

00019c4c <fputwc>:
   19c4c:	008000b4 	movhi	r2,2
   19c50:	defffc04 	addi	sp,sp,-16
   19c54:	10824204 	addi	r2,r2,2312
   19c58:	dc000115 	stw	r16,4(sp)
   19c5c:	14000017 	ldw	r16,0(r2)
   19c60:	dc400215 	stw	r17,8(sp)
   19c64:	dfc00315 	stw	ra,12(sp)
   19c68:	2023883a 	mov	r17,r4
   19c6c:	80000226 	beq	r16,zero,19c78 <fputwc+0x2c>
   19c70:	80800e17 	ldw	r2,56(r16)
   19c74:	10001026 	beq	r2,zero,19cb8 <fputwc+0x6c>
   19c78:	2880030b 	ldhu	r2,12(r5)
   19c7c:	10c8000c 	andi	r3,r2,8192
   19c80:	1800051e 	bne	r3,zero,19c98 <fputwc+0x4c>
   19c84:	28c01917 	ldw	r3,100(r5)
   19c88:	10880014 	ori	r2,r2,8192
   19c8c:	2880030d 	sth	r2,12(r5)
   19c90:	18880014 	ori	r2,r3,8192
   19c94:	28801915 	stw	r2,100(r5)
   19c98:	280d883a 	mov	r6,r5
   19c9c:	8009883a 	mov	r4,r16
   19ca0:	880b883a 	mov	r5,r17
   19ca4:	dfc00317 	ldw	ra,12(sp)
   19ca8:	dc400217 	ldw	r17,8(sp)
   19cac:	dc000117 	ldw	r16,4(sp)
   19cb0:	dec00404 	addi	sp,sp,16
   19cb4:	0019ac41 	jmpi	19ac4 <__fputwc>
   19cb8:	8009883a 	mov	r4,r16
   19cbc:	d9400015 	stw	r5,0(sp)
   19cc0:	00099c00 	call	99c0 <__sinit>
   19cc4:	d9400017 	ldw	r5,0(sp)
   19cc8:	003feb06 	br	19c78 <__alt_mem_nios_system_shared_memory+0xfffd9c78>

00019ccc <_wcrtomb_r>:
   19ccc:	defff604 	addi	sp,sp,-40
   19cd0:	008000b4 	movhi	r2,2
   19cd4:	dc800815 	stw	r18,32(sp)
   19cd8:	dc400715 	stw	r17,28(sp)
   19cdc:	dc000615 	stw	r16,24(sp)
   19ce0:	10824604 	addi	r2,r2,2328
   19ce4:	dfc00915 	stw	ra,36(sp)
   19ce8:	2021883a 	mov	r16,r4
   19cec:	3823883a 	mov	r17,r7
   19cf0:	14800017 	ldw	r18,0(r2)
   19cf4:	28001426 	beq	r5,zero,19d48 <_wcrtomb_r+0x7c>
   19cf8:	d9400415 	stw	r5,16(sp)
   19cfc:	d9800515 	stw	r6,20(sp)
   19d00:	0014f040 	call	14f04 <__locale_charset>
   19d04:	d9800517 	ldw	r6,20(sp)
   19d08:	d9400417 	ldw	r5,16(sp)
   19d0c:	100f883a 	mov	r7,r2
   19d10:	dc400015 	stw	r17,0(sp)
   19d14:	8009883a 	mov	r4,r16
   19d18:	903ee83a 	callr	r18
   19d1c:	00ffffc4 	movi	r3,-1
   19d20:	10c0031e 	bne	r2,r3,19d30 <_wcrtomb_r+0x64>
   19d24:	88000015 	stw	zero,0(r17)
   19d28:	00c02284 	movi	r3,138
   19d2c:	80c00015 	stw	r3,0(r16)
   19d30:	dfc00917 	ldw	ra,36(sp)
   19d34:	dc800817 	ldw	r18,32(sp)
   19d38:	dc400717 	ldw	r17,28(sp)
   19d3c:	dc000617 	ldw	r16,24(sp)
   19d40:	dec00a04 	addi	sp,sp,40
   19d44:	f800283a 	ret
   19d48:	0014f040 	call	14f04 <__locale_charset>
   19d4c:	100f883a 	mov	r7,r2
   19d50:	dc400015 	stw	r17,0(sp)
   19d54:	000d883a 	mov	r6,zero
   19d58:	d9400104 	addi	r5,sp,4
   19d5c:	8009883a 	mov	r4,r16
   19d60:	903ee83a 	callr	r18
   19d64:	003fed06 	br	19d1c <__alt_mem_nios_system_shared_memory+0xfffd9d1c>

00019d68 <wcrtomb>:
   19d68:	defff604 	addi	sp,sp,-40
   19d6c:	008000b4 	movhi	r2,2
   19d70:	dc800615 	stw	r18,24(sp)
   19d74:	dc400515 	stw	r17,20(sp)
   19d78:	10824204 	addi	r2,r2,2312
   19d7c:	dfc00915 	stw	ra,36(sp)
   19d80:	dd000815 	stw	r20,32(sp)
   19d84:	dcc00715 	stw	r19,28(sp)
   19d88:	dc000415 	stw	r16,16(sp)
   19d8c:	3025883a 	mov	r18,r6
   19d90:	14400017 	ldw	r17,0(r2)
   19d94:	20001926 	beq	r4,zero,19dfc <wcrtomb+0x94>
   19d98:	008000b4 	movhi	r2,2
   19d9c:	10824604 	addi	r2,r2,2328
   19da0:	15000017 	ldw	r20,0(r2)
   19da4:	2021883a 	mov	r16,r4
   19da8:	2827883a 	mov	r19,r5
   19dac:	0014f040 	call	14f04 <__locale_charset>
   19db0:	100f883a 	mov	r7,r2
   19db4:	dc800015 	stw	r18,0(sp)
   19db8:	980d883a 	mov	r6,r19
   19dbc:	800b883a 	mov	r5,r16
   19dc0:	8809883a 	mov	r4,r17
   19dc4:	a03ee83a 	callr	r20
   19dc8:	00ffffc4 	movi	r3,-1
   19dcc:	10c0031e 	bne	r2,r3,19ddc <wcrtomb+0x74>
   19dd0:	90000015 	stw	zero,0(r18)
   19dd4:	00c02284 	movi	r3,138
   19dd8:	88c00015 	stw	r3,0(r17)
   19ddc:	dfc00917 	ldw	ra,36(sp)
   19de0:	dd000817 	ldw	r20,32(sp)
   19de4:	dcc00717 	ldw	r19,28(sp)
   19de8:	dc800617 	ldw	r18,24(sp)
   19dec:	dc400517 	ldw	r17,20(sp)
   19df0:	dc000417 	ldw	r16,16(sp)
   19df4:	dec00a04 	addi	sp,sp,40
   19df8:	f800283a 	ret
   19dfc:	008000b4 	movhi	r2,2
   19e00:	10824604 	addi	r2,r2,2328
   19e04:	14000017 	ldw	r16,0(r2)
   19e08:	0014f040 	call	14f04 <__locale_charset>
   19e0c:	100f883a 	mov	r7,r2
   19e10:	dc800015 	stw	r18,0(sp)
   19e14:	000d883a 	mov	r6,zero
   19e18:	d9400104 	addi	r5,sp,4
   19e1c:	8809883a 	mov	r4,r17
   19e20:	803ee83a 	callr	r16
   19e24:	003fe806 	br	19dc8 <__alt_mem_nios_system_shared_memory+0xfffd9dc8>

00019e28 <__ascii_wctomb>:
   19e28:	28000526 	beq	r5,zero,19e40 <__ascii_wctomb+0x18>
   19e2c:	00803fc4 	movi	r2,255
   19e30:	11800536 	bltu	r2,r6,19e48 <__ascii_wctomb+0x20>
   19e34:	29800005 	stb	r6,0(r5)
   19e38:	00800044 	movi	r2,1
   19e3c:	f800283a 	ret
   19e40:	0005883a 	mov	r2,zero
   19e44:	f800283a 	ret
   19e48:	00802284 	movi	r2,138
   19e4c:	20800015 	stw	r2,0(r4)
   19e50:	00bfffc4 	movi	r2,-1
   19e54:	f800283a 	ret

00019e58 <_wctomb_r>:
   19e58:	008000b4 	movhi	r2,2
   19e5c:	defff904 	addi	sp,sp,-28
   19e60:	10824604 	addi	r2,r2,2328
   19e64:	dfc00615 	stw	ra,24(sp)
   19e68:	dc400515 	stw	r17,20(sp)
   19e6c:	dc000415 	stw	r16,16(sp)
   19e70:	3823883a 	mov	r17,r7
   19e74:	14000017 	ldw	r16,0(r2)
   19e78:	d9000115 	stw	r4,4(sp)
   19e7c:	d9400215 	stw	r5,8(sp)
   19e80:	d9800315 	stw	r6,12(sp)
   19e84:	0014f040 	call	14f04 <__locale_charset>
   19e88:	d9800317 	ldw	r6,12(sp)
   19e8c:	d9400217 	ldw	r5,8(sp)
   19e90:	d9000117 	ldw	r4,4(sp)
   19e94:	100f883a 	mov	r7,r2
   19e98:	dc400015 	stw	r17,0(sp)
   19e9c:	803ee83a 	callr	r16
   19ea0:	dfc00617 	ldw	ra,24(sp)
   19ea4:	dc400517 	ldw	r17,20(sp)
   19ea8:	dc000417 	ldw	r16,16(sp)
   19eac:	dec00704 	addi	sp,sp,28
   19eb0:	f800283a 	ret

00019eb4 <__fixunsdfsi>:
   19eb4:	defffd04 	addi	sp,sp,-12
   19eb8:	000d883a 	mov	r6,zero
   19ebc:	01d07834 	movhi	r7,16864
   19ec0:	dc400115 	stw	r17,4(sp)
   19ec4:	dc000015 	stw	r16,0(sp)
   19ec8:	dfc00215 	stw	ra,8(sp)
   19ecc:	2023883a 	mov	r17,r4
   19ed0:	2821883a 	mov	r16,r5
   19ed4:	0007ab00 	call	7ab0 <__gedf2>
   19ed8:	1000080e 	bge	r2,zero,19efc <__fixunsdfsi+0x48>
   19edc:	8809883a 	mov	r4,r17
   19ee0:	800b883a 	mov	r5,r16
   19ee4:	001aae80 	call	1aae8 <__fixdfsi>
   19ee8:	dfc00217 	ldw	ra,8(sp)
   19eec:	dc400117 	ldw	r17,4(sp)
   19ef0:	dc000017 	ldw	r16,0(sp)
   19ef4:	dec00304 	addi	sp,sp,12
   19ef8:	f800283a 	ret
   19efc:	000d883a 	mov	r6,zero
   19f00:	01d07834 	movhi	r7,16864
   19f04:	8809883a 	mov	r4,r17
   19f08:	800b883a 	mov	r5,r16
   19f0c:	00084ec0 	call	84ec <__subdf3>
   19f10:	180b883a 	mov	r5,r3
   19f14:	1009883a 	mov	r4,r2
   19f18:	001aae80 	call	1aae8 <__fixdfsi>
   19f1c:	00e00034 	movhi	r3,32768
   19f20:	10c5883a 	add	r2,r2,r3
   19f24:	003ff006 	br	19ee8 <__alt_mem_nios_system_shared_memory+0xfffd9ee8>

00019f28 <__udivdi3>:
   19f28:	defff404 	addi	sp,sp,-48
   19f2c:	dcc00515 	stw	r19,20(sp)
   19f30:	dc000215 	stw	r16,8(sp)
   19f34:	dfc00b15 	stw	ra,44(sp)
   19f38:	df000a15 	stw	fp,40(sp)
   19f3c:	ddc00915 	stw	r23,36(sp)
   19f40:	dd800815 	stw	r22,32(sp)
   19f44:	dd400715 	stw	r21,28(sp)
   19f48:	dd000615 	stw	r20,24(sp)
   19f4c:	dc800415 	stw	r18,16(sp)
   19f50:	dc400315 	stw	r17,12(sp)
   19f54:	2027883a 	mov	r19,r4
   19f58:	2821883a 	mov	r16,r5
   19f5c:	3800461e 	bne	r7,zero,1a078 <__udivdi3+0x150>
   19f60:	3023883a 	mov	r17,r6
   19f64:	2025883a 	mov	r18,r4
   19f68:	2980572e 	bgeu	r5,r6,1a0c8 <__udivdi3+0x1a0>
   19f6c:	00bfffd4 	movui	r2,65535
   19f70:	282d883a 	mov	r22,r5
   19f74:	1180b236 	bltu	r2,r6,1a240 <__udivdi3+0x318>
   19f78:	00803fc4 	movi	r2,255
   19f7c:	1185803a 	cmpltu	r2,r2,r6
   19f80:	100490fa 	slli	r2,r2,3
   19f84:	3086d83a 	srl	r3,r6,r2
   19f88:	010000b4 	movhi	r4,2
   19f8c:	213a2f04 	addi	r4,r4,-5956
   19f90:	20c7883a 	add	r3,r4,r3
   19f94:	18c00003 	ldbu	r3,0(r3)
   19f98:	1885883a 	add	r2,r3,r2
   19f9c:	00c00804 	movi	r3,32
   19fa0:	1887c83a 	sub	r3,r3,r2
   19fa4:	18000526 	beq	r3,zero,19fbc <__udivdi3+0x94>
   19fa8:	80e0983a 	sll	r16,r16,r3
   19fac:	9884d83a 	srl	r2,r19,r2
   19fb0:	30e2983a 	sll	r17,r6,r3
   19fb4:	98e4983a 	sll	r18,r19,r3
   19fb8:	142cb03a 	or	r22,r2,r16
   19fbc:	882ad43a 	srli	r21,r17,16
   19fc0:	b009883a 	mov	r4,r22
   19fc4:	8d3fffcc 	andi	r20,r17,65535
   19fc8:	a80b883a 	mov	r5,r21
   19fcc:	00051000 	call	5100 <__umodsi3>
   19fd0:	b009883a 	mov	r4,r22
   19fd4:	a80b883a 	mov	r5,r21
   19fd8:	1027883a 	mov	r19,r2
   19fdc:	000509c0 	call	509c <__udivsi3>
   19fe0:	100b883a 	mov	r5,r2
   19fe4:	a009883a 	mov	r4,r20
   19fe8:	102d883a 	mov	r22,r2
   19fec:	00051580 	call	5158 <__mulsi3>
   19ff0:	9826943a 	slli	r19,r19,16
   19ff4:	9006d43a 	srli	r3,r18,16
   19ff8:	1cc6b03a 	or	r3,r3,r19
   19ffc:	1880052e 	bgeu	r3,r2,1a014 <__udivdi3+0xec>
   1a000:	1c47883a 	add	r3,r3,r17
   1a004:	b13fffc4 	addi	r4,r22,-1
   1a008:	1c400136 	bltu	r3,r17,1a010 <__udivdi3+0xe8>
   1a00c:	18814236 	bltu	r3,r2,1a518 <__udivdi3+0x5f0>
   1a010:	202d883a 	mov	r22,r4
   1a014:	18a1c83a 	sub	r16,r3,r2
   1a018:	8009883a 	mov	r4,r16
   1a01c:	a80b883a 	mov	r5,r21
   1a020:	00051000 	call	5100 <__umodsi3>
   1a024:	1027883a 	mov	r19,r2
   1a028:	8009883a 	mov	r4,r16
   1a02c:	a80b883a 	mov	r5,r21
   1a030:	9826943a 	slli	r19,r19,16
   1a034:	000509c0 	call	509c <__udivsi3>
   1a038:	100b883a 	mov	r5,r2
   1a03c:	a009883a 	mov	r4,r20
   1a040:	94bfffcc 	andi	r18,r18,65535
   1a044:	1021883a 	mov	r16,r2
   1a048:	94e4b03a 	or	r18,r18,r19
   1a04c:	00051580 	call	5158 <__mulsi3>
   1a050:	9080052e 	bgeu	r18,r2,1a068 <__udivdi3+0x140>
   1a054:	8ca5883a 	add	r18,r17,r18
   1a058:	80ffffc4 	addi	r3,r16,-1
   1a05c:	94410c36 	bltu	r18,r17,1a490 <__udivdi3+0x568>
   1a060:	90810b2e 	bgeu	r18,r2,1a490 <__udivdi3+0x568>
   1a064:	843fff84 	addi	r16,r16,-2
   1a068:	b004943a 	slli	r2,r22,16
   1a06c:	0007883a 	mov	r3,zero
   1a070:	1404b03a 	or	r2,r2,r16
   1a074:	00005e06 	br	1a1f0 <__udivdi3+0x2c8>
   1a078:	29c05b36 	bltu	r5,r7,1a1e8 <__udivdi3+0x2c0>
   1a07c:	00bfffd4 	movui	r2,65535
   1a080:	11c0672e 	bgeu	r2,r7,1a220 <__udivdi3+0x2f8>
   1a084:	00804034 	movhi	r2,256
   1a088:	10bfffc4 	addi	r2,r2,-1
   1a08c:	11c10a36 	bltu	r2,r7,1a4b8 <__udivdi3+0x590>
   1a090:	00800404 	movi	r2,16
   1a094:	3886d83a 	srl	r3,r7,r2
   1a098:	010000b4 	movhi	r4,2
   1a09c:	213a2f04 	addi	r4,r4,-5956
   1a0a0:	20c7883a 	add	r3,r4,r3
   1a0a4:	18c00003 	ldbu	r3,0(r3)
   1a0a8:	05c00804 	movi	r23,32
   1a0ac:	1885883a 	add	r2,r3,r2
   1a0b0:	b8afc83a 	sub	r23,r23,r2
   1a0b4:	b800671e 	bne	r23,zero,1a254 <__udivdi3+0x32c>
   1a0b8:	3c010536 	bltu	r7,r16,1a4d0 <__udivdi3+0x5a8>
   1a0bc:	9985403a 	cmpgeu	r2,r19,r6
   1a0c0:	0007883a 	mov	r3,zero
   1a0c4:	00004a06 	br	1a1f0 <__udivdi3+0x2c8>
   1a0c8:	3000041e 	bne	r6,zero,1a0dc <__udivdi3+0x1b4>
   1a0cc:	000b883a 	mov	r5,zero
   1a0d0:	01000044 	movi	r4,1
   1a0d4:	000509c0 	call	509c <__udivsi3>
   1a0d8:	1023883a 	mov	r17,r2
   1a0dc:	00bfffd4 	movui	r2,65535
   1a0e0:	1440532e 	bgeu	r2,r17,1a230 <__udivdi3+0x308>
   1a0e4:	00804034 	movhi	r2,256
   1a0e8:	10bfffc4 	addi	r2,r2,-1
   1a0ec:	1440f436 	bltu	r2,r17,1a4c0 <__udivdi3+0x598>
   1a0f0:	00800404 	movi	r2,16
   1a0f4:	8886d83a 	srl	r3,r17,r2
   1a0f8:	010000b4 	movhi	r4,2
   1a0fc:	213a2f04 	addi	r4,r4,-5956
   1a100:	20c7883a 	add	r3,r4,r3
   1a104:	18c00003 	ldbu	r3,0(r3)
   1a108:	1885883a 	add	r2,r3,r2
   1a10c:	00c00804 	movi	r3,32
   1a110:	1887c83a 	sub	r3,r3,r2
   1a114:	1800a51e 	bne	r3,zero,1a3ac <__udivdi3+0x484>
   1a118:	882ad43a 	srli	r21,r17,16
   1a11c:	8461c83a 	sub	r16,r16,r17
   1a120:	8d3fffcc 	andi	r20,r17,65535
   1a124:	00c00044 	movi	r3,1
   1a128:	a80b883a 	mov	r5,r21
   1a12c:	8009883a 	mov	r4,r16
   1a130:	d8c00115 	stw	r3,4(sp)
   1a134:	00051000 	call	5100 <__umodsi3>
   1a138:	a80b883a 	mov	r5,r21
   1a13c:	8009883a 	mov	r4,r16
   1a140:	1027883a 	mov	r19,r2
   1a144:	000509c0 	call	509c <__udivsi3>
   1a148:	a00b883a 	mov	r5,r20
   1a14c:	1009883a 	mov	r4,r2
   1a150:	102d883a 	mov	r22,r2
   1a154:	00051580 	call	5158 <__mulsi3>
   1a158:	9826943a 	slli	r19,r19,16
   1a15c:	900ed43a 	srli	r7,r18,16
   1a160:	d8c00117 	ldw	r3,4(sp)
   1a164:	3cceb03a 	or	r7,r7,r19
   1a168:	3880052e 	bgeu	r7,r2,1a180 <__udivdi3+0x258>
   1a16c:	3c4f883a 	add	r7,r7,r17
   1a170:	b13fffc4 	addi	r4,r22,-1
   1a174:	3c400136 	bltu	r7,r17,1a17c <__udivdi3+0x254>
   1a178:	3880e436 	bltu	r7,r2,1a50c <__udivdi3+0x5e4>
   1a17c:	202d883a 	mov	r22,r4
   1a180:	38a1c83a 	sub	r16,r7,r2
   1a184:	8009883a 	mov	r4,r16
   1a188:	a80b883a 	mov	r5,r21
   1a18c:	d8c00115 	stw	r3,4(sp)
   1a190:	00051000 	call	5100 <__umodsi3>
   1a194:	1027883a 	mov	r19,r2
   1a198:	8009883a 	mov	r4,r16
   1a19c:	a80b883a 	mov	r5,r21
   1a1a0:	9826943a 	slli	r19,r19,16
   1a1a4:	000509c0 	call	509c <__udivsi3>
   1a1a8:	a00b883a 	mov	r5,r20
   1a1ac:	1009883a 	mov	r4,r2
   1a1b0:	94bfffcc 	andi	r18,r18,65535
   1a1b4:	1021883a 	mov	r16,r2
   1a1b8:	94e4b03a 	or	r18,r18,r19
   1a1bc:	00051580 	call	5158 <__mulsi3>
   1a1c0:	d8c00117 	ldw	r3,4(sp)
   1a1c4:	9080052e 	bgeu	r18,r2,1a1dc <__udivdi3+0x2b4>
   1a1c8:	8ca5883a 	add	r18,r17,r18
   1a1cc:	813fffc4 	addi	r4,r16,-1
   1a1d0:	9440ad36 	bltu	r18,r17,1a488 <__udivdi3+0x560>
   1a1d4:	9080ac2e 	bgeu	r18,r2,1a488 <__udivdi3+0x560>
   1a1d8:	843fff84 	addi	r16,r16,-2
   1a1dc:	b004943a 	slli	r2,r22,16
   1a1e0:	1404b03a 	or	r2,r2,r16
   1a1e4:	00000206 	br	1a1f0 <__udivdi3+0x2c8>
   1a1e8:	0007883a 	mov	r3,zero
   1a1ec:	0005883a 	mov	r2,zero
   1a1f0:	dfc00b17 	ldw	ra,44(sp)
   1a1f4:	df000a17 	ldw	fp,40(sp)
   1a1f8:	ddc00917 	ldw	r23,36(sp)
   1a1fc:	dd800817 	ldw	r22,32(sp)
   1a200:	dd400717 	ldw	r21,28(sp)
   1a204:	dd000617 	ldw	r20,24(sp)
   1a208:	dcc00517 	ldw	r19,20(sp)
   1a20c:	dc800417 	ldw	r18,16(sp)
   1a210:	dc400317 	ldw	r17,12(sp)
   1a214:	dc000217 	ldw	r16,8(sp)
   1a218:	dec00c04 	addi	sp,sp,48
   1a21c:	f800283a 	ret
   1a220:	00803fc4 	movi	r2,255
   1a224:	11c5803a 	cmpltu	r2,r2,r7
   1a228:	100490fa 	slli	r2,r2,3
   1a22c:	003f9906 	br	1a094 <__alt_mem_nios_system_shared_memory+0xfffda094>
   1a230:	00803fc4 	movi	r2,255
   1a234:	1445803a 	cmpltu	r2,r2,r17
   1a238:	100490fa 	slli	r2,r2,3
   1a23c:	003fad06 	br	1a0f4 <__alt_mem_nios_system_shared_memory+0xfffda0f4>
   1a240:	00804034 	movhi	r2,256
   1a244:	10bfffc4 	addi	r2,r2,-1
   1a248:	11809f36 	bltu	r2,r6,1a4c8 <__udivdi3+0x5a0>
   1a24c:	00800404 	movi	r2,16
   1a250:	003f4c06 	br	19f84 <__alt_mem_nios_system_shared_memory+0xfffd9f84>
   1a254:	3dce983a 	sll	r7,r7,r23
   1a258:	30b8d83a 	srl	fp,r6,r2
   1a25c:	80a2d83a 	srl	r17,r16,r2
   1a260:	35cc983a 	sll	r6,r6,r23
   1a264:	3f38b03a 	or	fp,r7,fp
   1a268:	e024d43a 	srli	r18,fp,16
   1a26c:	9884d83a 	srl	r2,r19,r2
   1a270:	85e0983a 	sll	r16,r16,r23
   1a274:	8809883a 	mov	r4,r17
   1a278:	900b883a 	mov	r5,r18
   1a27c:	d9800015 	stw	r6,0(sp)
   1a280:	1420b03a 	or	r16,r2,r16
   1a284:	00051000 	call	5100 <__umodsi3>
   1a288:	900b883a 	mov	r5,r18
   1a28c:	8809883a 	mov	r4,r17
   1a290:	1029883a 	mov	r20,r2
   1a294:	e5bfffcc 	andi	r22,fp,65535
   1a298:	000509c0 	call	509c <__udivsi3>
   1a29c:	100b883a 	mov	r5,r2
   1a2a0:	b009883a 	mov	r4,r22
   1a2a4:	102b883a 	mov	r21,r2
   1a2a8:	00051580 	call	5158 <__mulsi3>
   1a2ac:	a028943a 	slli	r20,r20,16
   1a2b0:	8006d43a 	srli	r3,r16,16
   1a2b4:	1d06b03a 	or	r3,r3,r20
   1a2b8:	1880042e 	bgeu	r3,r2,1a2cc <__udivdi3+0x3a4>
   1a2bc:	1f07883a 	add	r3,r3,fp
   1a2c0:	a93fffc4 	addi	r4,r21,-1
   1a2c4:	1f00892e 	bgeu	r3,fp,1a4ec <__udivdi3+0x5c4>
   1a2c8:	202b883a 	mov	r21,r4
   1a2cc:	18a3c83a 	sub	r17,r3,r2
   1a2d0:	8809883a 	mov	r4,r17
   1a2d4:	900b883a 	mov	r5,r18
   1a2d8:	00051000 	call	5100 <__umodsi3>
   1a2dc:	1029883a 	mov	r20,r2
   1a2e0:	8809883a 	mov	r4,r17
   1a2e4:	900b883a 	mov	r5,r18
   1a2e8:	a028943a 	slli	r20,r20,16
   1a2ec:	000509c0 	call	509c <__udivsi3>
   1a2f0:	100b883a 	mov	r5,r2
   1a2f4:	b009883a 	mov	r4,r22
   1a2f8:	843fffcc 	andi	r16,r16,65535
   1a2fc:	1023883a 	mov	r17,r2
   1a300:	8520b03a 	or	r16,r16,r20
   1a304:	00051580 	call	5158 <__mulsi3>
   1a308:	8080042e 	bgeu	r16,r2,1a31c <__udivdi3+0x3f4>
   1a30c:	8721883a 	add	r16,r16,fp
   1a310:	88ffffc4 	addi	r3,r17,-1
   1a314:	8700712e 	bgeu	r16,fp,1a4dc <__udivdi3+0x5b4>
   1a318:	1823883a 	mov	r17,r3
   1a31c:	a80e943a 	slli	r7,r21,16
   1a320:	d8c00017 	ldw	r3,0(sp)
   1a324:	80a1c83a 	sub	r16,r16,r2
   1a328:	3c64b03a 	or	r18,r7,r17
   1a32c:	1d3fffcc 	andi	r20,r3,65535
   1a330:	9022d43a 	srli	r17,r18,16
   1a334:	95bfffcc 	andi	r22,r18,65535
   1a338:	a00b883a 	mov	r5,r20
   1a33c:	b009883a 	mov	r4,r22
   1a340:	182ad43a 	srli	r21,r3,16
   1a344:	00051580 	call	5158 <__mulsi3>
   1a348:	a00b883a 	mov	r5,r20
   1a34c:	8809883a 	mov	r4,r17
   1a350:	1039883a 	mov	fp,r2
   1a354:	00051580 	call	5158 <__mulsi3>
   1a358:	8809883a 	mov	r4,r17
   1a35c:	a80b883a 	mov	r5,r21
   1a360:	1029883a 	mov	r20,r2
   1a364:	00051580 	call	5158 <__mulsi3>
   1a368:	a80b883a 	mov	r5,r21
   1a36c:	b009883a 	mov	r4,r22
   1a370:	1023883a 	mov	r17,r2
   1a374:	00051580 	call	5158 <__mulsi3>
   1a378:	e006d43a 	srli	r3,fp,16
   1a37c:	1505883a 	add	r2,r2,r20
   1a380:	1887883a 	add	r3,r3,r2
   1a384:	1d00022e 	bgeu	r3,r20,1a390 <__udivdi3+0x468>
   1a388:	00800074 	movhi	r2,1
   1a38c:	88a3883a 	add	r17,r17,r2
   1a390:	1804d43a 	srli	r2,r3,16
   1a394:	1463883a 	add	r17,r2,r17
   1a398:	84404436 	bltu	r16,r17,1a4ac <__udivdi3+0x584>
   1a39c:	84403e26 	beq	r16,r17,1a498 <__udivdi3+0x570>
   1a3a0:	9005883a 	mov	r2,r18
   1a3a4:	0007883a 	mov	r3,zero
   1a3a8:	003f9106 	br	1a1f0 <__alt_mem_nios_system_shared_memory+0xfffda1f0>
   1a3ac:	88e2983a 	sll	r17,r17,r3
   1a3b0:	80aed83a 	srl	r23,r16,r2
   1a3b4:	80e0983a 	sll	r16,r16,r3
   1a3b8:	882ad43a 	srli	r21,r17,16
   1a3bc:	9884d83a 	srl	r2,r19,r2
   1a3c0:	b809883a 	mov	r4,r23
   1a3c4:	a80b883a 	mov	r5,r21
   1a3c8:	98e4983a 	sll	r18,r19,r3
   1a3cc:	142cb03a 	or	r22,r2,r16
   1a3d0:	00051000 	call	5100 <__umodsi3>
   1a3d4:	b809883a 	mov	r4,r23
   1a3d8:	a80b883a 	mov	r5,r21
   1a3dc:	1027883a 	mov	r19,r2
   1a3e0:	8d3fffcc 	andi	r20,r17,65535
   1a3e4:	000509c0 	call	509c <__udivsi3>
   1a3e8:	a009883a 	mov	r4,r20
   1a3ec:	100b883a 	mov	r5,r2
   1a3f0:	102f883a 	mov	r23,r2
   1a3f4:	00051580 	call	5158 <__mulsi3>
   1a3f8:	9826943a 	slli	r19,r19,16
   1a3fc:	b008d43a 	srli	r4,r22,16
   1a400:	24c8b03a 	or	r4,r4,r19
   1a404:	2080062e 	bgeu	r4,r2,1a420 <__udivdi3+0x4f8>
   1a408:	2449883a 	add	r4,r4,r17
   1a40c:	b8ffffc4 	addi	r3,r23,-1
   1a410:	24403c36 	bltu	r4,r17,1a504 <__udivdi3+0x5dc>
   1a414:	20803b2e 	bgeu	r4,r2,1a504 <__udivdi3+0x5dc>
   1a418:	bdffff84 	addi	r23,r23,-2
   1a41c:	2449883a 	add	r4,r4,r17
   1a420:	20a1c83a 	sub	r16,r4,r2
   1a424:	a80b883a 	mov	r5,r21
   1a428:	8009883a 	mov	r4,r16
   1a42c:	00051000 	call	5100 <__umodsi3>
   1a430:	a80b883a 	mov	r5,r21
   1a434:	8009883a 	mov	r4,r16
   1a438:	1027883a 	mov	r19,r2
   1a43c:	000509c0 	call	509c <__udivsi3>
   1a440:	a009883a 	mov	r4,r20
   1a444:	100b883a 	mov	r5,r2
   1a448:	9826943a 	slli	r19,r19,16
   1a44c:	1039883a 	mov	fp,r2
   1a450:	00051580 	call	5158 <__mulsi3>
   1a454:	b13fffcc 	andi	r4,r22,65535
   1a458:	24c8b03a 	or	r4,r4,r19
   1a45c:	2080062e 	bgeu	r4,r2,1a478 <__udivdi3+0x550>
   1a460:	2449883a 	add	r4,r4,r17
   1a464:	e0ffffc4 	addi	r3,fp,-1
   1a468:	24402436 	bltu	r4,r17,1a4fc <__udivdi3+0x5d4>
   1a46c:	2080232e 	bgeu	r4,r2,1a4fc <__udivdi3+0x5d4>
   1a470:	e73fff84 	addi	fp,fp,-2
   1a474:	2449883a 	add	r4,r4,r17
   1a478:	b82e943a 	slli	r23,r23,16
   1a47c:	20a1c83a 	sub	r16,r4,r2
   1a480:	bf06b03a 	or	r3,r23,fp
   1a484:	003f2806 	br	1a128 <__alt_mem_nios_system_shared_memory+0xfffda128>
   1a488:	2021883a 	mov	r16,r4
   1a48c:	003f5306 	br	1a1dc <__alt_mem_nios_system_shared_memory+0xfffda1dc>
   1a490:	1821883a 	mov	r16,r3
   1a494:	003ef406 	br	1a068 <__alt_mem_nios_system_shared_memory+0xfffda068>
   1a498:	1806943a 	slli	r3,r3,16
   1a49c:	9de6983a 	sll	r19,r19,r23
   1a4a0:	e73fffcc 	andi	fp,fp,65535
   1a4a4:	1f07883a 	add	r3,r3,fp
   1a4a8:	98ffbd2e 	bgeu	r19,r3,1a3a0 <__alt_mem_nios_system_shared_memory+0xfffda3a0>
   1a4ac:	90bfffc4 	addi	r2,r18,-1
   1a4b0:	0007883a 	mov	r3,zero
   1a4b4:	003f4e06 	br	1a1f0 <__alt_mem_nios_system_shared_memory+0xfffda1f0>
   1a4b8:	00800604 	movi	r2,24
   1a4bc:	003ef506 	br	1a094 <__alt_mem_nios_system_shared_memory+0xfffda094>
   1a4c0:	00800604 	movi	r2,24
   1a4c4:	003f0b06 	br	1a0f4 <__alt_mem_nios_system_shared_memory+0xfffda0f4>
   1a4c8:	00800604 	movi	r2,24
   1a4cc:	003ead06 	br	19f84 <__alt_mem_nios_system_shared_memory+0xfffd9f84>
   1a4d0:	0007883a 	mov	r3,zero
   1a4d4:	00800044 	movi	r2,1
   1a4d8:	003f4506 	br	1a1f0 <__alt_mem_nios_system_shared_memory+0xfffda1f0>
   1a4dc:	80bf8e2e 	bgeu	r16,r2,1a318 <__alt_mem_nios_system_shared_memory+0xfffda318>
   1a4e0:	8c7fff84 	addi	r17,r17,-2
   1a4e4:	8721883a 	add	r16,r16,fp
   1a4e8:	003f8c06 	br	1a31c <__alt_mem_nios_system_shared_memory+0xfffda31c>
   1a4ec:	18bf762e 	bgeu	r3,r2,1a2c8 <__alt_mem_nios_system_shared_memory+0xfffda2c8>
   1a4f0:	ad7fff84 	addi	r21,r21,-2
   1a4f4:	1f07883a 	add	r3,r3,fp
   1a4f8:	003f7406 	br	1a2cc <__alt_mem_nios_system_shared_memory+0xfffda2cc>
   1a4fc:	1839883a 	mov	fp,r3
   1a500:	003fdd06 	br	1a478 <__alt_mem_nios_system_shared_memory+0xfffda478>
   1a504:	182f883a 	mov	r23,r3
   1a508:	003fc506 	br	1a420 <__alt_mem_nios_system_shared_memory+0xfffda420>
   1a50c:	b5bfff84 	addi	r22,r22,-2
   1a510:	3c4f883a 	add	r7,r7,r17
   1a514:	003f1a06 	br	1a180 <__alt_mem_nios_system_shared_memory+0xfffda180>
   1a518:	b5bfff84 	addi	r22,r22,-2
   1a51c:	1c47883a 	add	r3,r3,r17
   1a520:	003ebc06 	br	1a014 <__alt_mem_nios_system_shared_memory+0xfffda014>

0001a524 <__umoddi3>:
   1a524:	defff304 	addi	sp,sp,-52
   1a528:	df000b15 	stw	fp,44(sp)
   1a52c:	dc400415 	stw	r17,16(sp)
   1a530:	dc000315 	stw	r16,12(sp)
   1a534:	dfc00c15 	stw	ra,48(sp)
   1a538:	ddc00a15 	stw	r23,40(sp)
   1a53c:	dd800915 	stw	r22,36(sp)
   1a540:	dd400815 	stw	r21,32(sp)
   1a544:	dd000715 	stw	r20,28(sp)
   1a548:	dcc00615 	stw	r19,24(sp)
   1a54c:	dc800515 	stw	r18,20(sp)
   1a550:	2021883a 	mov	r16,r4
   1a554:	2823883a 	mov	r17,r5
   1a558:	2839883a 	mov	fp,r5
   1a55c:	3800401e 	bne	r7,zero,1a660 <__umoddi3+0x13c>
   1a560:	3027883a 	mov	r19,r6
   1a564:	2029883a 	mov	r20,r4
   1a568:	2980552e 	bgeu	r5,r6,1a6c0 <__umoddi3+0x19c>
   1a56c:	00bfffd4 	movui	r2,65535
   1a570:	1180a236 	bltu	r2,r6,1a7fc <__umoddi3+0x2d8>
   1a574:	01003fc4 	movi	r4,255
   1a578:	2189803a 	cmpltu	r4,r4,r6
   1a57c:	200890fa 	slli	r4,r4,3
   1a580:	3104d83a 	srl	r2,r6,r4
   1a584:	00c000b4 	movhi	r3,2
   1a588:	18fa2f04 	addi	r3,r3,-5956
   1a58c:	1885883a 	add	r2,r3,r2
   1a590:	10c00003 	ldbu	r3,0(r2)
   1a594:	00800804 	movi	r2,32
   1a598:	1909883a 	add	r4,r3,r4
   1a59c:	1125c83a 	sub	r18,r2,r4
   1a5a0:	90000526 	beq	r18,zero,1a5b8 <__umoddi3+0x94>
   1a5a4:	8ca2983a 	sll	r17,r17,r18
   1a5a8:	8108d83a 	srl	r4,r16,r4
   1a5ac:	34a6983a 	sll	r19,r6,r18
   1a5b0:	84a8983a 	sll	r20,r16,r18
   1a5b4:	2478b03a 	or	fp,r4,r17
   1a5b8:	982cd43a 	srli	r22,r19,16
   1a5bc:	e009883a 	mov	r4,fp
   1a5c0:	9dffffcc 	andi	r23,r19,65535
   1a5c4:	b00b883a 	mov	r5,r22
   1a5c8:	00051000 	call	5100 <__umodsi3>
   1a5cc:	b00b883a 	mov	r5,r22
   1a5d0:	e009883a 	mov	r4,fp
   1a5d4:	102b883a 	mov	r21,r2
   1a5d8:	000509c0 	call	509c <__udivsi3>
   1a5dc:	100b883a 	mov	r5,r2
   1a5e0:	b809883a 	mov	r4,r23
   1a5e4:	00051580 	call	5158 <__mulsi3>
   1a5e8:	a82a943a 	slli	r21,r21,16
   1a5ec:	a006d43a 	srli	r3,r20,16
   1a5f0:	1d46b03a 	or	r3,r3,r21
   1a5f4:	1880032e 	bgeu	r3,r2,1a604 <__umoddi3+0xe0>
   1a5f8:	1cc7883a 	add	r3,r3,r19
   1a5fc:	1cc00136 	bltu	r3,r19,1a604 <__umoddi3+0xe0>
   1a600:	18813136 	bltu	r3,r2,1aac8 <__umoddi3+0x5a4>
   1a604:	18a1c83a 	sub	r16,r3,r2
   1a608:	b00b883a 	mov	r5,r22
   1a60c:	8009883a 	mov	r4,r16
   1a610:	00051000 	call	5100 <__umodsi3>
   1a614:	b00b883a 	mov	r5,r22
   1a618:	8009883a 	mov	r4,r16
   1a61c:	1023883a 	mov	r17,r2
   1a620:	000509c0 	call	509c <__udivsi3>
   1a624:	100b883a 	mov	r5,r2
   1a628:	b809883a 	mov	r4,r23
   1a62c:	8822943a 	slli	r17,r17,16
   1a630:	00051580 	call	5158 <__mulsi3>
   1a634:	a0ffffcc 	andi	r3,r20,65535
   1a638:	1c46b03a 	or	r3,r3,r17
   1a63c:	1880042e 	bgeu	r3,r2,1a650 <__umoddi3+0x12c>
   1a640:	1cc7883a 	add	r3,r3,r19
   1a644:	1cc00236 	bltu	r3,r19,1a650 <__umoddi3+0x12c>
   1a648:	1880012e 	bgeu	r3,r2,1a650 <__umoddi3+0x12c>
   1a64c:	1cc7883a 	add	r3,r3,r19
   1a650:	1885c83a 	sub	r2,r3,r2
   1a654:	1484d83a 	srl	r2,r2,r18
   1a658:	0007883a 	mov	r3,zero
   1a65c:	00005306 	br	1a7ac <__umoddi3+0x288>
   1a660:	29c05036 	bltu	r5,r7,1a7a4 <__umoddi3+0x280>
   1a664:	00bfffd4 	movui	r2,65535
   1a668:	11c05c2e 	bgeu	r2,r7,1a7dc <__umoddi3+0x2b8>
   1a66c:	00804034 	movhi	r2,256
   1a670:	10bfffc4 	addi	r2,r2,-1
   1a674:	11c10636 	bltu	r2,r7,1aa90 <__umoddi3+0x56c>
   1a678:	01000404 	movi	r4,16
   1a67c:	3904d83a 	srl	r2,r7,r4
   1a680:	00c000b4 	movhi	r3,2
   1a684:	18fa2f04 	addi	r3,r3,-5956
   1a688:	1885883a 	add	r2,r3,r2
   1a68c:	14c00003 	ldbu	r19,0(r2)
   1a690:	00c00804 	movi	r3,32
   1a694:	9927883a 	add	r19,r19,r4
   1a698:	1ce9c83a 	sub	r20,r3,r19
   1a69c:	a0005c1e 	bne	r20,zero,1a810 <__umoddi3+0x2ec>
   1a6a0:	3c400136 	bltu	r7,r17,1a6a8 <__umoddi3+0x184>
   1a6a4:	81810a36 	bltu	r16,r6,1aad0 <__umoddi3+0x5ac>
   1a6a8:	8185c83a 	sub	r2,r16,r6
   1a6ac:	89e3c83a 	sub	r17,r17,r7
   1a6b0:	8089803a 	cmpltu	r4,r16,r2
   1a6b4:	8939c83a 	sub	fp,r17,r4
   1a6b8:	e007883a 	mov	r3,fp
   1a6bc:	00003b06 	br	1a7ac <__umoddi3+0x288>
   1a6c0:	3000041e 	bne	r6,zero,1a6d4 <__umoddi3+0x1b0>
   1a6c4:	000b883a 	mov	r5,zero
   1a6c8:	01000044 	movi	r4,1
   1a6cc:	000509c0 	call	509c <__udivsi3>
   1a6d0:	1027883a 	mov	r19,r2
   1a6d4:	00bfffd4 	movui	r2,65535
   1a6d8:	14c0442e 	bgeu	r2,r19,1a7ec <__umoddi3+0x2c8>
   1a6dc:	00804034 	movhi	r2,256
   1a6e0:	10bfffc4 	addi	r2,r2,-1
   1a6e4:	14c0ec36 	bltu	r2,r19,1aa98 <__umoddi3+0x574>
   1a6e8:	00800404 	movi	r2,16
   1a6ec:	9886d83a 	srl	r3,r19,r2
   1a6f0:	010000b4 	movhi	r4,2
   1a6f4:	213a2f04 	addi	r4,r4,-5956
   1a6f8:	20c7883a 	add	r3,r4,r3
   1a6fc:	18c00003 	ldbu	r3,0(r3)
   1a700:	1887883a 	add	r3,r3,r2
   1a704:	00800804 	movi	r2,32
   1a708:	10e5c83a 	sub	r18,r2,r3
   1a70c:	9000ab1e 	bne	r18,zero,1a9bc <__umoddi3+0x498>
   1a710:	982cd43a 	srli	r22,r19,16
   1a714:	8ce3c83a 	sub	r17,r17,r19
   1a718:	9dffffcc 	andi	r23,r19,65535
   1a71c:	b00b883a 	mov	r5,r22
   1a720:	8809883a 	mov	r4,r17
   1a724:	00051000 	call	5100 <__umodsi3>
   1a728:	b00b883a 	mov	r5,r22
   1a72c:	8809883a 	mov	r4,r17
   1a730:	102b883a 	mov	r21,r2
   1a734:	000509c0 	call	509c <__udivsi3>
   1a738:	b80b883a 	mov	r5,r23
   1a73c:	1009883a 	mov	r4,r2
   1a740:	00051580 	call	5158 <__mulsi3>
   1a744:	a82a943a 	slli	r21,r21,16
   1a748:	a006d43a 	srli	r3,r20,16
   1a74c:	1d46b03a 	or	r3,r3,r21
   1a750:	1880042e 	bgeu	r3,r2,1a764 <__umoddi3+0x240>
   1a754:	1cc7883a 	add	r3,r3,r19
   1a758:	1cc00236 	bltu	r3,r19,1a764 <__umoddi3+0x240>
   1a75c:	1880012e 	bgeu	r3,r2,1a764 <__umoddi3+0x240>
   1a760:	1cc7883a 	add	r3,r3,r19
   1a764:	18a1c83a 	sub	r16,r3,r2
   1a768:	b00b883a 	mov	r5,r22
   1a76c:	8009883a 	mov	r4,r16
   1a770:	00051000 	call	5100 <__umodsi3>
   1a774:	1023883a 	mov	r17,r2
   1a778:	b00b883a 	mov	r5,r22
   1a77c:	8009883a 	mov	r4,r16
   1a780:	000509c0 	call	509c <__udivsi3>
   1a784:	8822943a 	slli	r17,r17,16
   1a788:	b80b883a 	mov	r5,r23
   1a78c:	1009883a 	mov	r4,r2
   1a790:	00051580 	call	5158 <__mulsi3>
   1a794:	a53fffcc 	andi	r20,r20,65535
   1a798:	a446b03a 	or	r3,r20,r17
   1a79c:	18bfac2e 	bgeu	r3,r2,1a650 <__alt_mem_nios_system_shared_memory+0xfffda650>
   1a7a0:	003fa706 	br	1a640 <__alt_mem_nios_system_shared_memory+0xfffda640>
   1a7a4:	2005883a 	mov	r2,r4
   1a7a8:	2807883a 	mov	r3,r5
   1a7ac:	dfc00c17 	ldw	ra,48(sp)
   1a7b0:	df000b17 	ldw	fp,44(sp)
   1a7b4:	ddc00a17 	ldw	r23,40(sp)
   1a7b8:	dd800917 	ldw	r22,36(sp)
   1a7bc:	dd400817 	ldw	r21,32(sp)
   1a7c0:	dd000717 	ldw	r20,28(sp)
   1a7c4:	dcc00617 	ldw	r19,24(sp)
   1a7c8:	dc800517 	ldw	r18,20(sp)
   1a7cc:	dc400417 	ldw	r17,16(sp)
   1a7d0:	dc000317 	ldw	r16,12(sp)
   1a7d4:	dec00d04 	addi	sp,sp,52
   1a7d8:	f800283a 	ret
   1a7dc:	04c03fc4 	movi	r19,255
   1a7e0:	99c9803a 	cmpltu	r4,r19,r7
   1a7e4:	200890fa 	slli	r4,r4,3
   1a7e8:	003fa406 	br	1a67c <__alt_mem_nios_system_shared_memory+0xfffda67c>
   1a7ec:	00803fc4 	movi	r2,255
   1a7f0:	14c5803a 	cmpltu	r2,r2,r19
   1a7f4:	100490fa 	slli	r2,r2,3
   1a7f8:	003fbc06 	br	1a6ec <__alt_mem_nios_system_shared_memory+0xfffda6ec>
   1a7fc:	00804034 	movhi	r2,256
   1a800:	10bfffc4 	addi	r2,r2,-1
   1a804:	1180a636 	bltu	r2,r6,1aaa0 <__umoddi3+0x57c>
   1a808:	01000404 	movi	r4,16
   1a80c:	003f5c06 	br	1a580 <__alt_mem_nios_system_shared_memory+0xfffda580>
   1a810:	3d0e983a 	sll	r7,r7,r20
   1a814:	34ead83a 	srl	r21,r6,r19
   1a818:	8cc6d83a 	srl	r3,r17,r19
   1a81c:	8d10983a 	sll	r8,r17,r20
   1a820:	3d6ab03a 	or	r21,r7,r21
   1a824:	a82cd43a 	srli	r22,r21,16
   1a828:	84e2d83a 	srl	r17,r16,r19
   1a82c:	1809883a 	mov	r4,r3
   1a830:	b00b883a 	mov	r5,r22
   1a834:	8a22b03a 	or	r17,r17,r8
   1a838:	3524983a 	sll	r18,r6,r20
   1a83c:	dc400015 	stw	r17,0(sp)
   1a840:	d8c00115 	stw	r3,4(sp)
   1a844:	00051000 	call	5100 <__umodsi3>
   1a848:	d8c00117 	ldw	r3,4(sp)
   1a84c:	b00b883a 	mov	r5,r22
   1a850:	1039883a 	mov	fp,r2
   1a854:	1809883a 	mov	r4,r3
   1a858:	000509c0 	call	509c <__udivsi3>
   1a85c:	adffffcc 	andi	r23,r21,65535
   1a860:	100b883a 	mov	r5,r2
   1a864:	b809883a 	mov	r4,r23
   1a868:	1023883a 	mov	r17,r2
   1a86c:	00051580 	call	5158 <__mulsi3>
   1a870:	d9400017 	ldw	r5,0(sp)
   1a874:	e008943a 	slli	r4,fp,16
   1a878:	8520983a 	sll	r16,r16,r20
   1a87c:	2806d43a 	srli	r3,r5,16
   1a880:	1906b03a 	or	r3,r3,r4
   1a884:	1880042e 	bgeu	r3,r2,1a898 <__umoddi3+0x374>
   1a888:	1d47883a 	add	r3,r3,r21
   1a88c:	893fffc4 	addi	r4,r17,-1
   1a890:	1d40892e 	bgeu	r3,r21,1aab8 <__umoddi3+0x594>
   1a894:	2023883a 	mov	r17,r4
   1a898:	18b9c83a 	sub	fp,r3,r2
   1a89c:	b00b883a 	mov	r5,r22
   1a8a0:	e009883a 	mov	r4,fp
   1a8a4:	00051000 	call	5100 <__umodsi3>
   1a8a8:	b00b883a 	mov	r5,r22
   1a8ac:	e009883a 	mov	r4,fp
   1a8b0:	d8800215 	stw	r2,8(sp)
   1a8b4:	000509c0 	call	509c <__udivsi3>
   1a8b8:	100b883a 	mov	r5,r2
   1a8bc:	b809883a 	mov	r4,r23
   1a8c0:	102d883a 	mov	r22,r2
   1a8c4:	00051580 	call	5158 <__mulsi3>
   1a8c8:	d9800217 	ldw	r6,8(sp)
   1a8cc:	d8c00017 	ldw	r3,0(sp)
   1a8d0:	300c943a 	slli	r6,r6,16
   1a8d4:	1a3fffcc 	andi	r8,r3,65535
   1a8d8:	4190b03a 	or	r8,r8,r6
   1a8dc:	4080042e 	bgeu	r8,r2,1a8f0 <__umoddi3+0x3cc>
   1a8e0:	4551883a 	add	r8,r8,r21
   1a8e4:	b0ffffc4 	addi	r3,r22,-1
   1a8e8:	45406f2e 	bgeu	r8,r21,1aaa8 <__umoddi3+0x584>
   1a8ec:	182d883a 	mov	r22,r3
   1a8f0:	880e943a 	slli	r7,r17,16
   1a8f4:	9006d43a 	srli	r3,r18,16
   1a8f8:	91bfffcc 	andi	r6,r18,65535
   1a8fc:	3dacb03a 	or	r22,r7,r22
   1a900:	b02ed43a 	srli	r23,r22,16
   1a904:	b5bfffcc 	andi	r22,r22,65535
   1a908:	300b883a 	mov	r5,r6
   1a90c:	b009883a 	mov	r4,r22
   1a910:	40a3c83a 	sub	r17,r8,r2
   1a914:	d8c00115 	stw	r3,4(sp)
   1a918:	d9800215 	stw	r6,8(sp)
   1a91c:	00051580 	call	5158 <__mulsi3>
   1a920:	d9800217 	ldw	r6,8(sp)
   1a924:	b809883a 	mov	r4,r23
   1a928:	1039883a 	mov	fp,r2
   1a92c:	300b883a 	mov	r5,r6
   1a930:	00051580 	call	5158 <__mulsi3>
   1a934:	d8c00117 	ldw	r3,4(sp)
   1a938:	b809883a 	mov	r4,r23
   1a93c:	d8800215 	stw	r2,8(sp)
   1a940:	180b883a 	mov	r5,r3
   1a944:	00051580 	call	5158 <__mulsi3>
   1a948:	d8c00117 	ldw	r3,4(sp)
   1a94c:	b009883a 	mov	r4,r22
   1a950:	102f883a 	mov	r23,r2
   1a954:	180b883a 	mov	r5,r3
   1a958:	00051580 	call	5158 <__mulsi3>
   1a95c:	d9800217 	ldw	r6,8(sp)
   1a960:	e006d43a 	srli	r3,fp,16
   1a964:	1185883a 	add	r2,r2,r6
   1a968:	1885883a 	add	r2,r3,r2
   1a96c:	1180022e 	bgeu	r2,r6,1a978 <__umoddi3+0x454>
   1a970:	00c00074 	movhi	r3,1
   1a974:	b8ef883a 	add	r23,r23,r3
   1a978:	1006d43a 	srli	r3,r2,16
   1a97c:	1004943a 	slli	r2,r2,16
   1a980:	e73fffcc 	andi	fp,fp,65535
   1a984:	1dc7883a 	add	r3,r3,r23
   1a988:	1739883a 	add	fp,r2,fp
   1a98c:	88c03a36 	bltu	r17,r3,1aa78 <__umoddi3+0x554>
   1a990:	88c05126 	beq	r17,r3,1aad8 <__umoddi3+0x5b4>
   1a994:	88c9c83a 	sub	r4,r17,r3
   1a998:	e00f883a 	mov	r7,fp
   1a99c:	81cfc83a 	sub	r7,r16,r7
   1a9a0:	81c7803a 	cmpltu	r3,r16,r7
   1a9a4:	20c7c83a 	sub	r3,r4,r3
   1a9a8:	1cc4983a 	sll	r2,r3,r19
   1a9ac:	3d0ed83a 	srl	r7,r7,r20
   1a9b0:	1d06d83a 	srl	r3,r3,r20
   1a9b4:	11c4b03a 	or	r2,r2,r7
   1a9b8:	003f7c06 	br	1a7ac <__alt_mem_nios_system_shared_memory+0xfffda7ac>
   1a9bc:	9ca6983a 	sll	r19,r19,r18
   1a9c0:	88f8d83a 	srl	fp,r17,r3
   1a9c4:	80c4d83a 	srl	r2,r16,r3
   1a9c8:	982cd43a 	srli	r22,r19,16
   1a9cc:	8ca2983a 	sll	r17,r17,r18
   1a9d0:	e009883a 	mov	r4,fp
   1a9d4:	b00b883a 	mov	r5,r22
   1a9d8:	146ab03a 	or	r21,r2,r17
   1a9dc:	00051000 	call	5100 <__umodsi3>
   1a9e0:	b00b883a 	mov	r5,r22
   1a9e4:	e009883a 	mov	r4,fp
   1a9e8:	1029883a 	mov	r20,r2
   1a9ec:	9dffffcc 	andi	r23,r19,65535
   1a9f0:	000509c0 	call	509c <__udivsi3>
   1a9f4:	b809883a 	mov	r4,r23
   1a9f8:	100b883a 	mov	r5,r2
   1a9fc:	00051580 	call	5158 <__mulsi3>
   1aa00:	a008943a 	slli	r4,r20,16
   1aa04:	a806d43a 	srli	r3,r21,16
   1aa08:	84a8983a 	sll	r20,r16,r18
   1aa0c:	1906b03a 	or	r3,r3,r4
   1aa10:	1880042e 	bgeu	r3,r2,1aa24 <__umoddi3+0x500>
   1aa14:	1cc7883a 	add	r3,r3,r19
   1aa18:	1cc00236 	bltu	r3,r19,1aa24 <__umoddi3+0x500>
   1aa1c:	1880012e 	bgeu	r3,r2,1aa24 <__umoddi3+0x500>
   1aa20:	1cc7883a 	add	r3,r3,r19
   1aa24:	18a3c83a 	sub	r17,r3,r2
   1aa28:	b00b883a 	mov	r5,r22
   1aa2c:	8809883a 	mov	r4,r17
   1aa30:	00051000 	call	5100 <__umodsi3>
   1aa34:	b00b883a 	mov	r5,r22
   1aa38:	8809883a 	mov	r4,r17
   1aa3c:	1021883a 	mov	r16,r2
   1aa40:	000509c0 	call	509c <__udivsi3>
   1aa44:	100b883a 	mov	r5,r2
   1aa48:	b809883a 	mov	r4,r23
   1aa4c:	8020943a 	slli	r16,r16,16
   1aa50:	00051580 	call	5158 <__mulsi3>
   1aa54:	a8ffffcc 	andi	r3,r21,65535
   1aa58:	1c06b03a 	or	r3,r3,r16
   1aa5c:	1880042e 	bgeu	r3,r2,1aa70 <__umoddi3+0x54c>
   1aa60:	1cc7883a 	add	r3,r3,r19
   1aa64:	1cc00236 	bltu	r3,r19,1aa70 <__umoddi3+0x54c>
   1aa68:	1880012e 	bgeu	r3,r2,1aa70 <__umoddi3+0x54c>
   1aa6c:	1cc7883a 	add	r3,r3,r19
   1aa70:	18a3c83a 	sub	r17,r3,r2
   1aa74:	003f2906 	br	1a71c <__alt_mem_nios_system_shared_memory+0xfffda71c>
   1aa78:	e48fc83a 	sub	r7,fp,r18
   1aa7c:	1d49c83a 	sub	r4,r3,r21
   1aa80:	e1f9803a 	cmpltu	fp,fp,r7
   1aa84:	2739c83a 	sub	fp,r4,fp
   1aa88:	8f09c83a 	sub	r4,r17,fp
   1aa8c:	003fc306 	br	1a99c <__alt_mem_nios_system_shared_memory+0xfffda99c>
   1aa90:	01000604 	movi	r4,24
   1aa94:	003ef906 	br	1a67c <__alt_mem_nios_system_shared_memory+0xfffda67c>
   1aa98:	00800604 	movi	r2,24
   1aa9c:	003f1306 	br	1a6ec <__alt_mem_nios_system_shared_memory+0xfffda6ec>
   1aaa0:	01000604 	movi	r4,24
   1aaa4:	003eb606 	br	1a580 <__alt_mem_nios_system_shared_memory+0xfffda580>
   1aaa8:	40bf902e 	bgeu	r8,r2,1a8ec <__alt_mem_nios_system_shared_memory+0xfffda8ec>
   1aaac:	b5bfff84 	addi	r22,r22,-2
   1aab0:	4551883a 	add	r8,r8,r21
   1aab4:	003f8e06 	br	1a8f0 <__alt_mem_nios_system_shared_memory+0xfffda8f0>
   1aab8:	18bf762e 	bgeu	r3,r2,1a894 <__alt_mem_nios_system_shared_memory+0xfffda894>
   1aabc:	8c7fff84 	addi	r17,r17,-2
   1aac0:	1d47883a 	add	r3,r3,r21
   1aac4:	003f7406 	br	1a898 <__alt_mem_nios_system_shared_memory+0xfffda898>
   1aac8:	1cc7883a 	add	r3,r3,r19
   1aacc:	003ecd06 	br	1a604 <__alt_mem_nios_system_shared_memory+0xfffda604>
   1aad0:	8005883a 	mov	r2,r16
   1aad4:	003ef806 	br	1a6b8 <__alt_mem_nios_system_shared_memory+0xfffda6b8>
   1aad8:	873fe736 	bltu	r16,fp,1aa78 <__alt_mem_nios_system_shared_memory+0xfffdaa78>
   1aadc:	e00f883a 	mov	r7,fp
   1aae0:	0009883a 	mov	r4,zero
   1aae4:	003fad06 	br	1a99c <__alt_mem_nios_system_shared_memory+0xfffda99c>

0001aae8 <__fixdfsi>:
   1aae8:	280cd53a 	srli	r6,r5,20
   1aaec:	00c00434 	movhi	r3,16
   1aaf0:	18ffffc4 	addi	r3,r3,-1
   1aaf4:	3181ffcc 	andi	r6,r6,2047
   1aaf8:	01c0ff84 	movi	r7,1022
   1aafc:	28c6703a 	and	r3,r5,r3
   1ab00:	280ad7fa 	srli	r5,r5,31
   1ab04:	3980120e 	bge	r7,r6,1ab50 <__fixdfsi+0x68>
   1ab08:	00810744 	movi	r2,1053
   1ab0c:	11800c16 	blt	r2,r6,1ab40 <__fixdfsi+0x58>
   1ab10:	00810cc4 	movi	r2,1075
   1ab14:	1185c83a 	sub	r2,r2,r6
   1ab18:	01c007c4 	movi	r7,31
   1ab1c:	18c00434 	orhi	r3,r3,16
   1ab20:	38800d16 	blt	r7,r2,1ab58 <__fixdfsi+0x70>
   1ab24:	31befb44 	addi	r6,r6,-1043
   1ab28:	2084d83a 	srl	r2,r4,r2
   1ab2c:	1986983a 	sll	r3,r3,r6
   1ab30:	1884b03a 	or	r2,r3,r2
   1ab34:	28000726 	beq	r5,zero,1ab54 <__fixdfsi+0x6c>
   1ab38:	0085c83a 	sub	r2,zero,r2
   1ab3c:	f800283a 	ret
   1ab40:	00a00034 	movhi	r2,32768
   1ab44:	10bfffc4 	addi	r2,r2,-1
   1ab48:	2885883a 	add	r2,r5,r2
   1ab4c:	f800283a 	ret
   1ab50:	0005883a 	mov	r2,zero
   1ab54:	f800283a 	ret
   1ab58:	008104c4 	movi	r2,1043
   1ab5c:	1185c83a 	sub	r2,r2,r6
   1ab60:	1884d83a 	srl	r2,r3,r2
   1ab64:	003ff306 	br	1ab34 <__alt_mem_nios_system_shared_memory+0xfffdab34>

0001ab68 <__floatunsidf>:
   1ab68:	defffe04 	addi	sp,sp,-8
   1ab6c:	dc000015 	stw	r16,0(sp)
   1ab70:	dfc00115 	stw	ra,4(sp)
   1ab74:	2021883a 	mov	r16,r4
   1ab78:	20002226 	beq	r4,zero,1ac04 <__floatunsidf+0x9c>
   1ab7c:	000917c0 	call	917c <__clzsi2>
   1ab80:	01010784 	movi	r4,1054
   1ab84:	2089c83a 	sub	r4,r4,r2
   1ab88:	01810cc4 	movi	r6,1075
   1ab8c:	310dc83a 	sub	r6,r6,r4
   1ab90:	00c007c4 	movi	r3,31
   1ab94:	1980120e 	bge	r3,r6,1abe0 <__floatunsidf+0x78>
   1ab98:	00c104c4 	movi	r3,1043
   1ab9c:	1907c83a 	sub	r3,r3,r4
   1aba0:	80ca983a 	sll	r5,r16,r3
   1aba4:	00800434 	movhi	r2,16
   1aba8:	10bfffc4 	addi	r2,r2,-1
   1abac:	2101ffcc 	andi	r4,r4,2047
   1abb0:	0021883a 	mov	r16,zero
   1abb4:	288a703a 	and	r5,r5,r2
   1abb8:	2008953a 	slli	r4,r4,20
   1abbc:	00c00434 	movhi	r3,16
   1abc0:	18ffffc4 	addi	r3,r3,-1
   1abc4:	28c6703a 	and	r3,r5,r3
   1abc8:	8005883a 	mov	r2,r16
   1abcc:	1906b03a 	or	r3,r3,r4
   1abd0:	dfc00117 	ldw	ra,4(sp)
   1abd4:	dc000017 	ldw	r16,0(sp)
   1abd8:	dec00204 	addi	sp,sp,8
   1abdc:	f800283a 	ret
   1abe0:	00c002c4 	movi	r3,11
   1abe4:	188bc83a 	sub	r5,r3,r2
   1abe8:	814ad83a 	srl	r5,r16,r5
   1abec:	00c00434 	movhi	r3,16
   1abf0:	18ffffc4 	addi	r3,r3,-1
   1abf4:	81a0983a 	sll	r16,r16,r6
   1abf8:	2101ffcc 	andi	r4,r4,2047
   1abfc:	28ca703a 	and	r5,r5,r3
   1ac00:	003fed06 	br	1abb8 <__alt_mem_nios_system_shared_memory+0xfffdabb8>
   1ac04:	0009883a 	mov	r4,zero
   1ac08:	000b883a 	mov	r5,zero
   1ac0c:	003fea06 	br	1abb8 <__alt_mem_nios_system_shared_memory+0xfffdabb8>

0001ac10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ac10:	defffe04 	addi	sp,sp,-8
   1ac14:	dfc00115 	stw	ra,4(sp)
   1ac18:	df000015 	stw	fp,0(sp)
   1ac1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ac20:	d0a01017 	ldw	r2,-32704(gp)
   1ac24:	10000326 	beq	r2,zero,1ac34 <alt_get_errno+0x24>
   1ac28:	d0a01017 	ldw	r2,-32704(gp)
   1ac2c:	103ee83a 	callr	r2
   1ac30:	00000106 	br	1ac38 <alt_get_errno+0x28>
   1ac34:	d0a70c04 	addi	r2,gp,-25552
}
   1ac38:	e037883a 	mov	sp,fp
   1ac3c:	dfc00117 	ldw	ra,4(sp)
   1ac40:	df000017 	ldw	fp,0(sp)
   1ac44:	dec00204 	addi	sp,sp,8
   1ac48:	f800283a 	ret

0001ac4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1ac4c:	defffb04 	addi	sp,sp,-20
   1ac50:	dfc00415 	stw	ra,16(sp)
   1ac54:	df000315 	stw	fp,12(sp)
   1ac58:	df000304 	addi	fp,sp,12
   1ac5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1ac60:	e0bfff17 	ldw	r2,-4(fp)
   1ac64:	10000816 	blt	r2,zero,1ac88 <close+0x3c>
   1ac68:	01400304 	movi	r5,12
   1ac6c:	e13fff17 	ldw	r4,-4(fp)
   1ac70:	00051580 	call	5158 <__mulsi3>
   1ac74:	1007883a 	mov	r3,r2
   1ac78:	008000b4 	movhi	r2,2
   1ac7c:	10bd9304 	addi	r2,r2,-2484
   1ac80:	1885883a 	add	r2,r3,r2
   1ac84:	00000106 	br	1ac8c <close+0x40>
   1ac88:	0005883a 	mov	r2,zero
   1ac8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1ac90:	e0bffd17 	ldw	r2,-12(fp)
   1ac94:	10001926 	beq	r2,zero,1acfc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1ac98:	e0bffd17 	ldw	r2,-12(fp)
   1ac9c:	10800017 	ldw	r2,0(r2)
   1aca0:	10800417 	ldw	r2,16(r2)
   1aca4:	10000626 	beq	r2,zero,1acc0 <close+0x74>
   1aca8:	e0bffd17 	ldw	r2,-12(fp)
   1acac:	10800017 	ldw	r2,0(r2)
   1acb0:	10800417 	ldw	r2,16(r2)
   1acb4:	e13ffd17 	ldw	r4,-12(fp)
   1acb8:	103ee83a 	callr	r2
   1acbc:	00000106 	br	1acc4 <close+0x78>
   1acc0:	0005883a 	mov	r2,zero
   1acc4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1acc8:	e13fff17 	ldw	r4,-4(fp)
   1accc:	001b71c0 	call	1b71c <alt_release_fd>
    if (rval < 0)
   1acd0:	e0bffe17 	ldw	r2,-8(fp)
   1acd4:	1000070e 	bge	r2,zero,1acf4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   1acd8:	001ac100 	call	1ac10 <alt_get_errno>
   1acdc:	1007883a 	mov	r3,r2
   1ace0:	e0bffe17 	ldw	r2,-8(fp)
   1ace4:	0085c83a 	sub	r2,zero,r2
   1ace8:	18800015 	stw	r2,0(r3)
      return -1;
   1acec:	00bfffc4 	movi	r2,-1
   1acf0:	00000706 	br	1ad10 <close+0xc4>
    }
    return 0;
   1acf4:	0005883a 	mov	r2,zero
   1acf8:	00000506 	br	1ad10 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1acfc:	001ac100 	call	1ac10 <alt_get_errno>
   1ad00:	1007883a 	mov	r3,r2
   1ad04:	00801444 	movi	r2,81
   1ad08:	18800015 	stw	r2,0(r3)
    return -1;
   1ad0c:	00bfffc4 	movi	r2,-1
  }
}
   1ad10:	e037883a 	mov	sp,fp
   1ad14:	dfc00117 	ldw	ra,4(sp)
   1ad18:	df000017 	ldw	fp,0(sp)
   1ad1c:	dec00204 	addi	sp,sp,8
   1ad20:	f800283a 	ret

0001ad24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1ad24:	defffc04 	addi	sp,sp,-16
   1ad28:	df000315 	stw	fp,12(sp)
   1ad2c:	df000304 	addi	fp,sp,12
   1ad30:	e13ffd15 	stw	r4,-12(fp)
   1ad34:	e17ffe15 	stw	r5,-8(fp)
   1ad38:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1ad3c:	e0bfff17 	ldw	r2,-4(fp)
}
   1ad40:	e037883a 	mov	sp,fp
   1ad44:	df000017 	ldw	fp,0(sp)
   1ad48:	dec00104 	addi	sp,sp,4
   1ad4c:	f800283a 	ret

0001ad50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ad50:	defffe04 	addi	sp,sp,-8
   1ad54:	dfc00115 	stw	ra,4(sp)
   1ad58:	df000015 	stw	fp,0(sp)
   1ad5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ad60:	d0a01017 	ldw	r2,-32704(gp)
   1ad64:	10000326 	beq	r2,zero,1ad74 <alt_get_errno+0x24>
   1ad68:	d0a01017 	ldw	r2,-32704(gp)
   1ad6c:	103ee83a 	callr	r2
   1ad70:	00000106 	br	1ad78 <alt_get_errno+0x28>
   1ad74:	d0a70c04 	addi	r2,gp,-25552
}
   1ad78:	e037883a 	mov	sp,fp
   1ad7c:	dfc00117 	ldw	ra,4(sp)
   1ad80:	df000017 	ldw	fp,0(sp)
   1ad84:	dec00204 	addi	sp,sp,8
   1ad88:	f800283a 	ret

0001ad8c <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
   1ad8c:	defff704 	addi	sp,sp,-36
   1ad90:	dfc00615 	stw	ra,24(sp)
   1ad94:	df000515 	stw	fp,20(sp)
   1ad98:	df000504 	addi	fp,sp,20
   1ad9c:	e13ffe15 	stw	r4,-8(fp)
   1ada0:	e17fff15 	stw	r5,-4(fp)
   1ada4:	e1800215 	stw	r6,8(fp)
   1ada8:	e1c00315 	stw	r7,12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1adac:	e0bffe17 	ldw	r2,-8(fp)
   1adb0:	10000816 	blt	r2,zero,1add4 <fcntl+0x48>
   1adb4:	01400304 	movi	r5,12
   1adb8:	e13ffe17 	ldw	r4,-8(fp)
   1adbc:	00051580 	call	5158 <__mulsi3>
   1adc0:	1007883a 	mov	r3,r2
   1adc4:	008000b4 	movhi	r2,2
   1adc8:	10bd9304 	addi	r2,r2,-2484
   1adcc:	1885883a 	add	r2,r3,r2
   1add0:	00000106 	br	1add8 <fcntl+0x4c>
   1add4:	0005883a 	mov	r2,zero
   1add8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1addc:	e0bffb17 	ldw	r2,-20(fp)
   1ade0:	10002a26 	beq	r2,zero,1ae8c <fcntl+0x100>
  {
    switch (cmd)
   1ade4:	e0bfff17 	ldw	r2,-4(fp)
   1ade8:	10c000e0 	cmpeqi	r3,r2,3
   1adec:	1800031e 	bne	r3,zero,1adfc <fcntl+0x70>
   1adf0:	10800120 	cmpeqi	r2,r2,4
   1adf4:	1000071e 	bne	r2,zero,1ae14 <fcntl+0x88>
   1adf8:	00001e06 	br	1ae74 <fcntl+0xe8>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
   1adfc:	e0bffb17 	ldw	r2,-20(fp)
   1ae00:	10c00217 	ldw	r3,8(r2)
   1ae04:	00900034 	movhi	r2,16384
   1ae08:	10bfffc4 	addi	r2,r2,-1
   1ae0c:	1884703a 	and	r2,r3,r2
   1ae10:	00002306 	br	1aea0 <fcntl+0x114>
    case F_SETFL:
      va_start(argp, cmd);
   1ae14:	e0800204 	addi	r2,fp,8
   1ae18:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
   1ae1c:	e0bffd17 	ldw	r2,-12(fp)
   1ae20:	10c00104 	addi	r3,r2,4
   1ae24:	e0fffd15 	stw	r3,-12(fp)
   1ae28:	10800017 	ldw	r2,0(r2)
   1ae2c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
   1ae30:	e0bffb17 	ldw	r2,-20(fp)
   1ae34:	10c00217 	ldw	r3,8(r2)
   1ae38:	00affdc4 	movi	r2,-16393
   1ae3c:	1886703a 	and	r3,r3,r2
   1ae40:	e0bffb17 	ldw	r2,-20(fp)
   1ae44:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
   1ae48:	e0bffb17 	ldw	r2,-20(fp)
   1ae4c:	10800217 	ldw	r2,8(r2)
   1ae50:	1007883a 	mov	r3,r2
   1ae54:	e0bffc17 	ldw	r2,-16(fp)
   1ae58:	1090020c 	andi	r2,r2,16392
   1ae5c:	1884b03a 	or	r2,r3,r2
   1ae60:	1007883a 	mov	r3,r2
   1ae64:	e0bffb17 	ldw	r2,-20(fp)
   1ae68:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
   1ae6c:	0005883a 	mov	r2,zero
   1ae70:	00000b06 	br	1aea0 <fcntl+0x114>
    default:
      ALT_ERRNO = EINVAL;
   1ae74:	001ad500 	call	1ad50 <alt_get_errno>
   1ae78:	1007883a 	mov	r3,r2
   1ae7c:	00800584 	movi	r2,22
   1ae80:	18800015 	stw	r2,0(r3)
      return -1;
   1ae84:	00bfffc4 	movi	r2,-1
   1ae88:	00000506 	br	1aea0 <fcntl+0x114>
    }
  }

  ALT_ERRNO = EBADFD;
   1ae8c:	001ad500 	call	1ad50 <alt_get_errno>
   1ae90:	1007883a 	mov	r3,r2
   1ae94:	00801444 	movi	r2,81
   1ae98:	18800015 	stw	r2,0(r3)
  return -1;
   1ae9c:	00bfffc4 	movi	r2,-1
}
   1aea0:	e037883a 	mov	sp,fp
   1aea4:	dfc00117 	ldw	ra,4(sp)
   1aea8:	df000017 	ldw	fp,0(sp)
   1aeac:	dec00404 	addi	sp,sp,16
   1aeb0:	f800283a 	ret

0001aeb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1aeb4:	defffe04 	addi	sp,sp,-8
   1aeb8:	dfc00115 	stw	ra,4(sp)
   1aebc:	df000015 	stw	fp,0(sp)
   1aec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1aec4:	d0a01017 	ldw	r2,-32704(gp)
   1aec8:	10000326 	beq	r2,zero,1aed8 <alt_get_errno+0x24>
   1aecc:	d0a01017 	ldw	r2,-32704(gp)
   1aed0:	103ee83a 	callr	r2
   1aed4:	00000106 	br	1aedc <alt_get_errno+0x28>
   1aed8:	d0a70c04 	addi	r2,gp,-25552
}
   1aedc:	e037883a 	mov	sp,fp
   1aee0:	dfc00117 	ldw	ra,4(sp)
   1aee4:	df000017 	ldw	fp,0(sp)
   1aee8:	dec00204 	addi	sp,sp,8
   1aeec:	f800283a 	ret

0001aef0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1aef0:	defffb04 	addi	sp,sp,-20
   1aef4:	dfc00415 	stw	ra,16(sp)
   1aef8:	df000315 	stw	fp,12(sp)
   1aefc:	df000304 	addi	fp,sp,12
   1af00:	e13ffe15 	stw	r4,-8(fp)
   1af04:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1af08:	e0bffe17 	ldw	r2,-8(fp)
   1af0c:	10000816 	blt	r2,zero,1af30 <fstat+0x40>
   1af10:	01400304 	movi	r5,12
   1af14:	e13ffe17 	ldw	r4,-8(fp)
   1af18:	00051580 	call	5158 <__mulsi3>
   1af1c:	1007883a 	mov	r3,r2
   1af20:	008000b4 	movhi	r2,2
   1af24:	10bd9304 	addi	r2,r2,-2484
   1af28:	1885883a 	add	r2,r3,r2
   1af2c:	00000106 	br	1af34 <fstat+0x44>
   1af30:	0005883a 	mov	r2,zero
   1af34:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1af38:	e0bffd17 	ldw	r2,-12(fp)
   1af3c:	10001026 	beq	r2,zero,1af80 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1af40:	e0bffd17 	ldw	r2,-12(fp)
   1af44:	10800017 	ldw	r2,0(r2)
   1af48:	10800817 	ldw	r2,32(r2)
   1af4c:	10000726 	beq	r2,zero,1af6c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   1af50:	e0bffd17 	ldw	r2,-12(fp)
   1af54:	10800017 	ldw	r2,0(r2)
   1af58:	10800817 	ldw	r2,32(r2)
   1af5c:	e17fff17 	ldw	r5,-4(fp)
   1af60:	e13ffd17 	ldw	r4,-12(fp)
   1af64:	103ee83a 	callr	r2
   1af68:	00000a06 	br	1af94 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1af6c:	e0bfff17 	ldw	r2,-4(fp)
   1af70:	00c80004 	movi	r3,8192
   1af74:	10c00115 	stw	r3,4(r2)
      return 0;
   1af78:	0005883a 	mov	r2,zero
   1af7c:	00000506 	br	1af94 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1af80:	001aeb40 	call	1aeb4 <alt_get_errno>
   1af84:	1007883a 	mov	r3,r2
   1af88:	00801444 	movi	r2,81
   1af8c:	18800015 	stw	r2,0(r3)
    return -1;
   1af90:	00bfffc4 	movi	r2,-1
  }
}
   1af94:	e037883a 	mov	sp,fp
   1af98:	dfc00117 	ldw	ra,4(sp)
   1af9c:	df000017 	ldw	fp,0(sp)
   1afa0:	dec00204 	addi	sp,sp,8
   1afa4:	f800283a 	ret

0001afa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1afa8:	defffe04 	addi	sp,sp,-8
   1afac:	dfc00115 	stw	ra,4(sp)
   1afb0:	df000015 	stw	fp,0(sp)
   1afb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1afb8:	d0a01017 	ldw	r2,-32704(gp)
   1afbc:	10000326 	beq	r2,zero,1afcc <alt_get_errno+0x24>
   1afc0:	d0a01017 	ldw	r2,-32704(gp)
   1afc4:	103ee83a 	callr	r2
   1afc8:	00000106 	br	1afd0 <alt_get_errno+0x28>
   1afcc:	d0a70c04 	addi	r2,gp,-25552
}
   1afd0:	e037883a 	mov	sp,fp
   1afd4:	dfc00117 	ldw	ra,4(sp)
   1afd8:	df000017 	ldw	fp,0(sp)
   1afdc:	dec00204 	addi	sp,sp,8
   1afe0:	f800283a 	ret

0001afe4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1afe4:	deffed04 	addi	sp,sp,-76
   1afe8:	dfc01215 	stw	ra,72(sp)
   1afec:	df001115 	stw	fp,68(sp)
   1aff0:	df001104 	addi	fp,sp,68
   1aff4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1aff8:	e0bfff17 	ldw	r2,-4(fp)
   1affc:	10000816 	blt	r2,zero,1b020 <isatty+0x3c>
   1b000:	01400304 	movi	r5,12
   1b004:	e13fff17 	ldw	r4,-4(fp)
   1b008:	00051580 	call	5158 <__mulsi3>
   1b00c:	1007883a 	mov	r3,r2
   1b010:	008000b4 	movhi	r2,2
   1b014:	10bd9304 	addi	r2,r2,-2484
   1b018:	1885883a 	add	r2,r3,r2
   1b01c:	00000106 	br	1b024 <isatty+0x40>
   1b020:	0005883a 	mov	r2,zero
   1b024:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1b028:	e0bfef17 	ldw	r2,-68(fp)
   1b02c:	10000e26 	beq	r2,zero,1b068 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1b030:	e0bfef17 	ldw	r2,-68(fp)
   1b034:	10800017 	ldw	r2,0(r2)
   1b038:	10800817 	ldw	r2,32(r2)
   1b03c:	1000021e 	bne	r2,zero,1b048 <isatty+0x64>
    {
      return 1;
   1b040:	00800044 	movi	r2,1
   1b044:	00000d06 	br	1b07c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1b048:	e0bff004 	addi	r2,fp,-64
   1b04c:	100b883a 	mov	r5,r2
   1b050:	e13fff17 	ldw	r4,-4(fp)
   1b054:	001aef00 	call	1aef0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1b058:	e0bff117 	ldw	r2,-60(fp)
   1b05c:	10880020 	cmpeqi	r2,r2,8192
   1b060:	10803fcc 	andi	r2,r2,255
   1b064:	00000506 	br	1b07c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1b068:	001afa80 	call	1afa8 <alt_get_errno>
   1b06c:	1007883a 	mov	r3,r2
   1b070:	00801444 	movi	r2,81
   1b074:	18800015 	stw	r2,0(r3)
    return 0;
   1b078:	0005883a 	mov	r2,zero
  }
}
   1b07c:	e037883a 	mov	sp,fp
   1b080:	dfc00117 	ldw	ra,4(sp)
   1b084:	df000017 	ldw	fp,0(sp)
   1b088:	dec00204 	addi	sp,sp,8
   1b08c:	f800283a 	ret

0001b090 <alt_load_section>:
   1b090:	defffc04 	addi	sp,sp,-16
   1b094:	df000315 	stw	fp,12(sp)
   1b098:	df000304 	addi	fp,sp,12
   1b09c:	e13ffd15 	stw	r4,-12(fp)
   1b0a0:	e17ffe15 	stw	r5,-8(fp)
   1b0a4:	e1bfff15 	stw	r6,-4(fp)
   1b0a8:	e0fffe17 	ldw	r3,-8(fp)
   1b0ac:	e0bffd17 	ldw	r2,-12(fp)
   1b0b0:	18800c26 	beq	r3,r2,1b0e4 <alt_load_section+0x54>
   1b0b4:	00000806 	br	1b0d8 <alt_load_section+0x48>
   1b0b8:	e0bffe17 	ldw	r2,-8(fp)
   1b0bc:	10c00104 	addi	r3,r2,4
   1b0c0:	e0fffe15 	stw	r3,-8(fp)
   1b0c4:	e0fffd17 	ldw	r3,-12(fp)
   1b0c8:	19000104 	addi	r4,r3,4
   1b0cc:	e13ffd15 	stw	r4,-12(fp)
   1b0d0:	18c00017 	ldw	r3,0(r3)
   1b0d4:	10c00015 	stw	r3,0(r2)
   1b0d8:	e0fffe17 	ldw	r3,-8(fp)
   1b0dc:	e0bfff17 	ldw	r2,-4(fp)
   1b0e0:	18bff51e 	bne	r3,r2,1b0b8 <__alt_mem_nios_system_shared_memory+0xfffdb0b8>
   1b0e4:	0001883a 	nop
   1b0e8:	e037883a 	mov	sp,fp
   1b0ec:	df000017 	ldw	fp,0(sp)
   1b0f0:	dec00104 	addi	sp,sp,4
   1b0f4:	f800283a 	ret

0001b0f8 <alt_load>:
   1b0f8:	defffe04 	addi	sp,sp,-8
   1b0fc:	dfc00115 	stw	ra,4(sp)
   1b100:	df000015 	stw	fp,0(sp)
   1b104:	d839883a 	mov	fp,sp
   1b108:	018000b4 	movhi	r6,2
   1b10c:	31825104 	addi	r6,r6,2372
   1b110:	014000b4 	movhi	r5,2
   1b114:	297b6004 	addi	r5,r5,-4736
   1b118:	010000b4 	movhi	r4,2
   1b11c:	21025104 	addi	r4,r4,2372
   1b120:	001b0900 	call	1b090 <alt_load_section>
   1b124:	01800034 	movhi	r6,0
   1b128:	31808c04 	addi	r6,r6,560
   1b12c:	01400034 	movhi	r5,0
   1b130:	29400804 	addi	r5,r5,32
   1b134:	01000034 	movhi	r4,0
   1b138:	21000804 	addi	r4,r4,32
   1b13c:	001b0900 	call	1b090 <alt_load_section>
   1b140:	018000b4 	movhi	r6,2
   1b144:	31bb6004 	addi	r6,r6,-4736
   1b148:	014000b4 	movhi	r5,2
   1b14c:	2977d804 	addi	r5,r5,-8352
   1b150:	010000b4 	movhi	r4,2
   1b154:	2137d804 	addi	r4,r4,-8352
   1b158:	001b0900 	call	1b090 <alt_load_section>
   1b15c:	001d34c0 	call	1d34c <alt_dcache_flush_all>
   1b160:	001d7680 	call	1d768 <alt_icache_flush_all>
   1b164:	0001883a 	nop
   1b168:	e037883a 	mov	sp,fp
   1b16c:	dfc00117 	ldw	ra,4(sp)
   1b170:	df000017 	ldw	fp,0(sp)
   1b174:	dec00204 	addi	sp,sp,8
   1b178:	f800283a 	ret

0001b17c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b17c:	defffe04 	addi	sp,sp,-8
   1b180:	dfc00115 	stw	ra,4(sp)
   1b184:	df000015 	stw	fp,0(sp)
   1b188:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b18c:	d0a01017 	ldw	r2,-32704(gp)
   1b190:	10000326 	beq	r2,zero,1b1a0 <alt_get_errno+0x24>
   1b194:	d0a01017 	ldw	r2,-32704(gp)
   1b198:	103ee83a 	callr	r2
   1b19c:	00000106 	br	1b1a4 <alt_get_errno+0x28>
   1b1a0:	d0a70c04 	addi	r2,gp,-25552
}
   1b1a4:	e037883a 	mov	sp,fp
   1b1a8:	dfc00117 	ldw	ra,4(sp)
   1b1ac:	df000017 	ldw	fp,0(sp)
   1b1b0:	dec00204 	addi	sp,sp,8
   1b1b4:	f800283a 	ret

0001b1b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1b1b8:	defff904 	addi	sp,sp,-28
   1b1bc:	dfc00615 	stw	ra,24(sp)
   1b1c0:	df000515 	stw	fp,20(sp)
   1b1c4:	df000504 	addi	fp,sp,20
   1b1c8:	e13ffd15 	stw	r4,-12(fp)
   1b1cc:	e17ffe15 	stw	r5,-8(fp)
   1b1d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1b1d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b1d8:	e0bffd17 	ldw	r2,-12(fp)
   1b1dc:	10000816 	blt	r2,zero,1b200 <lseek+0x48>
   1b1e0:	01400304 	movi	r5,12
   1b1e4:	e13ffd17 	ldw	r4,-12(fp)
   1b1e8:	00051580 	call	5158 <__mulsi3>
   1b1ec:	1007883a 	mov	r3,r2
   1b1f0:	008000b4 	movhi	r2,2
   1b1f4:	10bd9304 	addi	r2,r2,-2484
   1b1f8:	1885883a 	add	r2,r3,r2
   1b1fc:	00000106 	br	1b204 <lseek+0x4c>
   1b200:	0005883a 	mov	r2,zero
   1b204:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1b208:	e0bffc17 	ldw	r2,-16(fp)
   1b20c:	10001026 	beq	r2,zero,1b250 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1b210:	e0bffc17 	ldw	r2,-16(fp)
   1b214:	10800017 	ldw	r2,0(r2)
   1b218:	10800717 	ldw	r2,28(r2)
   1b21c:	10000926 	beq	r2,zero,1b244 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1b220:	e0bffc17 	ldw	r2,-16(fp)
   1b224:	10800017 	ldw	r2,0(r2)
   1b228:	10800717 	ldw	r2,28(r2)
   1b22c:	e1bfff17 	ldw	r6,-4(fp)
   1b230:	e17ffe17 	ldw	r5,-8(fp)
   1b234:	e13ffc17 	ldw	r4,-16(fp)
   1b238:	103ee83a 	callr	r2
   1b23c:	e0bffb15 	stw	r2,-20(fp)
   1b240:	00000506 	br	1b258 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1b244:	00bfde84 	movi	r2,-134
   1b248:	e0bffb15 	stw	r2,-20(fp)
   1b24c:	00000206 	br	1b258 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   1b250:	00bfebc4 	movi	r2,-81
   1b254:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1b258:	e0bffb17 	ldw	r2,-20(fp)
   1b25c:	1000070e 	bge	r2,zero,1b27c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   1b260:	001b17c0 	call	1b17c <alt_get_errno>
   1b264:	1007883a 	mov	r3,r2
   1b268:	e0bffb17 	ldw	r2,-20(fp)
   1b26c:	0085c83a 	sub	r2,zero,r2
   1b270:	18800015 	stw	r2,0(r3)
    rc = -1;
   1b274:	00bfffc4 	movi	r2,-1
   1b278:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1b27c:	e0bffb17 	ldw	r2,-20(fp)
}
   1b280:	e037883a 	mov	sp,fp
   1b284:	dfc00117 	ldw	ra,4(sp)
   1b288:	df000017 	ldw	fp,0(sp)
   1b28c:	dec00204 	addi	sp,sp,8
   1b290:	f800283a 	ret

0001b294 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1b294:	defffd04 	addi	sp,sp,-12
   1b298:	dfc00215 	stw	ra,8(sp)
   1b29c:	df000115 	stw	fp,4(sp)
   1b2a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1b2a4:	0009883a 	mov	r4,zero
   1b2a8:	001bb940 	call	1bb94 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1b2ac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1b2b0:	001bbcc0 	call	1bbcc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1b2b4:	018000b4 	movhi	r6,2
   1b2b8:	31bb4b04 	addi	r6,r6,-4820
   1b2bc:	014000b4 	movhi	r5,2
   1b2c0:	297b4b04 	addi	r5,r5,-4820
   1b2c4:	010000b4 	movhi	r4,2
   1b2c8:	213b4b04 	addi	r4,r4,-4820
   1b2cc:	001db0c0 	call	1db0c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1b2d0:	001d44c0 	call	1d44c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1b2d4:	010000b4 	movhi	r4,2
   1b2d8:	21352b04 	addi	r4,r4,-11092
   1b2dc:	001dc480 	call	1dc48 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1b2e0:	d0a71317 	ldw	r2,-25524(gp)
   1b2e4:	d0e71417 	ldw	r3,-25520(gp)
   1b2e8:	d1271517 	ldw	r4,-25516(gp)
   1b2ec:	200d883a 	mov	r6,r4
   1b2f0:	180b883a 	mov	r5,r3
   1b2f4:	1009883a 	mov	r4,r2
   1b2f8:	00039480 	call	3948 <main>
   1b2fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   1b300:	01000044 	movi	r4,1
   1b304:	001ac4c0 	call	1ac4c <close>
  exit (result);
   1b308:	e13fff17 	ldw	r4,-4(fp)
   1b30c:	001dc5c0 	call	1dc5c <exit>

0001b310 <__malloc_lock>:
   1b310:	defffe04 	addi	sp,sp,-8
   1b314:	df000115 	stw	fp,4(sp)
   1b318:	df000104 	addi	fp,sp,4
   1b31c:	e13fff15 	stw	r4,-4(fp)
   1b320:	0001883a 	nop
   1b324:	e037883a 	mov	sp,fp
   1b328:	df000017 	ldw	fp,0(sp)
   1b32c:	dec00104 	addi	sp,sp,4
   1b330:	f800283a 	ret

0001b334 <__malloc_unlock>:
   1b334:	defffe04 	addi	sp,sp,-8
   1b338:	df000115 	stw	fp,4(sp)
   1b33c:	df000104 	addi	fp,sp,4
   1b340:	e13fff15 	stw	r4,-4(fp)
   1b344:	0001883a 	nop
   1b348:	e037883a 	mov	sp,fp
   1b34c:	df000017 	ldw	fp,0(sp)
   1b350:	dec00104 	addi	sp,sp,4
   1b354:	f800283a 	ret

0001b358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b358:	defffe04 	addi	sp,sp,-8
   1b35c:	dfc00115 	stw	ra,4(sp)
   1b360:	df000015 	stw	fp,0(sp)
   1b364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b368:	d0a01017 	ldw	r2,-32704(gp)
   1b36c:	10000326 	beq	r2,zero,1b37c <alt_get_errno+0x24>
   1b370:	d0a01017 	ldw	r2,-32704(gp)
   1b374:	103ee83a 	callr	r2
   1b378:	00000106 	br	1b380 <alt_get_errno+0x28>
   1b37c:	d0a70c04 	addi	r2,gp,-25552
}
   1b380:	e037883a 	mov	sp,fp
   1b384:	dfc00117 	ldw	ra,4(sp)
   1b388:	df000017 	ldw	fp,0(sp)
   1b38c:	dec00204 	addi	sp,sp,8
   1b390:	f800283a 	ret

0001b394 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1b394:	defffb04 	addi	sp,sp,-20
   1b398:	dfc00415 	stw	ra,16(sp)
   1b39c:	df000315 	stw	fp,12(sp)
   1b3a0:	dc000215 	stw	r16,8(sp)
   1b3a4:	df000304 	addi	fp,sp,12
   1b3a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1b3ac:	e0bffe17 	ldw	r2,-8(fp)
   1b3b0:	10800217 	ldw	r2,8(r2)
   1b3b4:	10d00034 	orhi	r3,r2,16384
   1b3b8:	e0bffe17 	ldw	r2,-8(fp)
   1b3bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b3c0:	e03ffd15 	stw	zero,-12(fp)
   1b3c4:	00002306 	br	1b454 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b3c8:	040000b4 	movhi	r16,2
   1b3cc:	843d9304 	addi	r16,r16,-2484
   1b3d0:	e0bffd17 	ldw	r2,-12(fp)
   1b3d4:	01400304 	movi	r5,12
   1b3d8:	1009883a 	mov	r4,r2
   1b3dc:	00051580 	call	5158 <__mulsi3>
   1b3e0:	8085883a 	add	r2,r16,r2
   1b3e4:	10c00017 	ldw	r3,0(r2)
   1b3e8:	e0bffe17 	ldw	r2,-8(fp)
   1b3ec:	10800017 	ldw	r2,0(r2)
   1b3f0:	1880151e 	bne	r3,r2,1b448 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b3f4:	040000b4 	movhi	r16,2
   1b3f8:	843d9304 	addi	r16,r16,-2484
   1b3fc:	e0bffd17 	ldw	r2,-12(fp)
   1b400:	01400304 	movi	r5,12
   1b404:	1009883a 	mov	r4,r2
   1b408:	00051580 	call	5158 <__mulsi3>
   1b40c:	8085883a 	add	r2,r16,r2
   1b410:	10800204 	addi	r2,r2,8
   1b414:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1b418:	10000b0e 	bge	r2,zero,1b448 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1b41c:	01400304 	movi	r5,12
   1b420:	e13ffd17 	ldw	r4,-12(fp)
   1b424:	00051580 	call	5158 <__mulsi3>
   1b428:	1007883a 	mov	r3,r2
   1b42c:	008000b4 	movhi	r2,2
   1b430:	10bd9304 	addi	r2,r2,-2484
   1b434:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1b438:	e0bffe17 	ldw	r2,-8(fp)
   1b43c:	18800226 	beq	r3,r2,1b448 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1b440:	00bffcc4 	movi	r2,-13
   1b444:	00000806 	br	1b468 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1b448:	e0bffd17 	ldw	r2,-12(fp)
   1b44c:	10800044 	addi	r2,r2,1
   1b450:	e0bffd15 	stw	r2,-12(fp)
   1b454:	d0a00f17 	ldw	r2,-32708(gp)
   1b458:	1007883a 	mov	r3,r2
   1b45c:	e0bffd17 	ldw	r2,-12(fp)
   1b460:	18bfd92e 	bgeu	r3,r2,1b3c8 <__alt_mem_nios_system_shared_memory+0xfffdb3c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1b464:	0005883a 	mov	r2,zero
}
   1b468:	e6ffff04 	addi	sp,fp,-4
   1b46c:	dfc00217 	ldw	ra,8(sp)
   1b470:	df000117 	ldw	fp,4(sp)
   1b474:	dc000017 	ldw	r16,0(sp)
   1b478:	dec00304 	addi	sp,sp,12
   1b47c:	f800283a 	ret

0001b480 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1b480:	defff604 	addi	sp,sp,-40
   1b484:	dfc00915 	stw	ra,36(sp)
   1b488:	df000815 	stw	fp,32(sp)
   1b48c:	df000804 	addi	fp,sp,32
   1b490:	e13ffd15 	stw	r4,-12(fp)
   1b494:	e17ffe15 	stw	r5,-8(fp)
   1b498:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1b49c:	00bfffc4 	movi	r2,-1
   1b4a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1b4a4:	00bffb44 	movi	r2,-19
   1b4a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1b4ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1b4b0:	d1600d04 	addi	r5,gp,-32716
   1b4b4:	e13ffd17 	ldw	r4,-12(fp)
   1b4b8:	001d50c0 	call	1d50c <alt_find_dev>
   1b4bc:	e0bff815 	stw	r2,-32(fp)
   1b4c0:	e0bff817 	ldw	r2,-32(fp)
   1b4c4:	1000051e 	bne	r2,zero,1b4dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1b4c8:	e13ffd17 	ldw	r4,-12(fp)
   1b4cc:	001d59c0 	call	1d59c <alt_find_file>
   1b4d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1b4d4:	00800044 	movi	r2,1
   1b4d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1b4dc:	e0bff817 	ldw	r2,-32(fp)
   1b4e0:	10002b26 	beq	r2,zero,1b590 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1b4e4:	e13ff817 	ldw	r4,-32(fp)
   1b4e8:	001d6a40 	call	1d6a4 <alt_get_fd>
   1b4ec:	e0bff915 	stw	r2,-28(fp)
   1b4f0:	e0bff917 	ldw	r2,-28(fp)
   1b4f4:	1000030e 	bge	r2,zero,1b504 <open+0x84>
    {
      status = index;
   1b4f8:	e0bff917 	ldw	r2,-28(fp)
   1b4fc:	e0bffa15 	stw	r2,-24(fp)
   1b500:	00002506 	br	1b598 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1b504:	01400304 	movi	r5,12
   1b508:	e13ff917 	ldw	r4,-28(fp)
   1b50c:	00051580 	call	5158 <__mulsi3>
   1b510:	1007883a 	mov	r3,r2
   1b514:	008000b4 	movhi	r2,2
   1b518:	10bd9304 	addi	r2,r2,-2484
   1b51c:	1885883a 	add	r2,r3,r2
   1b520:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1b524:	e0fffe17 	ldw	r3,-8(fp)
   1b528:	00900034 	movhi	r2,16384
   1b52c:	10bfffc4 	addi	r2,r2,-1
   1b530:	1886703a 	and	r3,r3,r2
   1b534:	e0bffc17 	ldw	r2,-16(fp)
   1b538:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1b53c:	e0bffb17 	ldw	r2,-20(fp)
   1b540:	1000051e 	bne	r2,zero,1b558 <open+0xd8>
   1b544:	e13ffc17 	ldw	r4,-16(fp)
   1b548:	001b3940 	call	1b394 <alt_file_locked>
   1b54c:	e0bffa15 	stw	r2,-24(fp)
   1b550:	e0bffa17 	ldw	r2,-24(fp)
   1b554:	10001016 	blt	r2,zero,1b598 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1b558:	e0bff817 	ldw	r2,-32(fp)
   1b55c:	10800317 	ldw	r2,12(r2)
   1b560:	10000826 	beq	r2,zero,1b584 <open+0x104>
   1b564:	e0bff817 	ldw	r2,-32(fp)
   1b568:	10800317 	ldw	r2,12(r2)
   1b56c:	e1ffff17 	ldw	r7,-4(fp)
   1b570:	e1bffe17 	ldw	r6,-8(fp)
   1b574:	e17ffd17 	ldw	r5,-12(fp)
   1b578:	e13ffc17 	ldw	r4,-16(fp)
   1b57c:	103ee83a 	callr	r2
   1b580:	00000106 	br	1b588 <open+0x108>
   1b584:	0005883a 	mov	r2,zero
   1b588:	e0bffa15 	stw	r2,-24(fp)
   1b58c:	00000206 	br	1b598 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1b590:	00bffb44 	movi	r2,-19
   1b594:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1b598:	e0bffa17 	ldw	r2,-24(fp)
   1b59c:	1000090e 	bge	r2,zero,1b5c4 <open+0x144>
  {
    alt_release_fd (index);  
   1b5a0:	e13ff917 	ldw	r4,-28(fp)
   1b5a4:	001b71c0 	call	1b71c <alt_release_fd>
    ALT_ERRNO = -status;
   1b5a8:	001b3580 	call	1b358 <alt_get_errno>
   1b5ac:	1007883a 	mov	r3,r2
   1b5b0:	e0bffa17 	ldw	r2,-24(fp)
   1b5b4:	0085c83a 	sub	r2,zero,r2
   1b5b8:	18800015 	stw	r2,0(r3)
    return -1;
   1b5bc:	00bfffc4 	movi	r2,-1
   1b5c0:	00000106 	br	1b5c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1b5c4:	e0bff917 	ldw	r2,-28(fp)
}
   1b5c8:	e037883a 	mov	sp,fp
   1b5cc:	dfc00117 	ldw	ra,4(sp)
   1b5d0:	df000017 	ldw	fp,0(sp)
   1b5d4:	dec00204 	addi	sp,sp,8
   1b5d8:	f800283a 	ret

0001b5dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b5dc:	defffe04 	addi	sp,sp,-8
   1b5e0:	dfc00115 	stw	ra,4(sp)
   1b5e4:	df000015 	stw	fp,0(sp)
   1b5e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b5ec:	d0a01017 	ldw	r2,-32704(gp)
   1b5f0:	10000326 	beq	r2,zero,1b600 <alt_get_errno+0x24>
   1b5f4:	d0a01017 	ldw	r2,-32704(gp)
   1b5f8:	103ee83a 	callr	r2
   1b5fc:	00000106 	br	1b604 <alt_get_errno+0x28>
   1b600:	d0a70c04 	addi	r2,gp,-25552
}
   1b604:	e037883a 	mov	sp,fp
   1b608:	dfc00117 	ldw	ra,4(sp)
   1b60c:	df000017 	ldw	fp,0(sp)
   1b610:	dec00204 	addi	sp,sp,8
   1b614:	f800283a 	ret

0001b618 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1b618:	defff904 	addi	sp,sp,-28
   1b61c:	dfc00615 	stw	ra,24(sp)
   1b620:	df000515 	stw	fp,20(sp)
   1b624:	df000504 	addi	fp,sp,20
   1b628:	e13ffd15 	stw	r4,-12(fp)
   1b62c:	e17ffe15 	stw	r5,-8(fp)
   1b630:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b634:	e0bffd17 	ldw	r2,-12(fp)
   1b638:	10000816 	blt	r2,zero,1b65c <read+0x44>
   1b63c:	01400304 	movi	r5,12
   1b640:	e13ffd17 	ldw	r4,-12(fp)
   1b644:	00051580 	call	5158 <__mulsi3>
   1b648:	1007883a 	mov	r3,r2
   1b64c:	008000b4 	movhi	r2,2
   1b650:	10bd9304 	addi	r2,r2,-2484
   1b654:	1885883a 	add	r2,r3,r2
   1b658:	00000106 	br	1b660 <read+0x48>
   1b65c:	0005883a 	mov	r2,zero
   1b660:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1b664:	e0bffb17 	ldw	r2,-20(fp)
   1b668:	10002226 	beq	r2,zero,1b6f4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1b66c:	e0bffb17 	ldw	r2,-20(fp)
   1b670:	10800217 	ldw	r2,8(r2)
   1b674:	108000cc 	andi	r2,r2,3
   1b678:	10800060 	cmpeqi	r2,r2,1
   1b67c:	1000181e 	bne	r2,zero,1b6e0 <read+0xc8>
        (fd->dev->read))
   1b680:	e0bffb17 	ldw	r2,-20(fp)
   1b684:	10800017 	ldw	r2,0(r2)
   1b688:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1b68c:	10001426 	beq	r2,zero,1b6e0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1b690:	e0bffb17 	ldw	r2,-20(fp)
   1b694:	10800017 	ldw	r2,0(r2)
   1b698:	10800517 	ldw	r2,20(r2)
   1b69c:	e0ffff17 	ldw	r3,-4(fp)
   1b6a0:	180d883a 	mov	r6,r3
   1b6a4:	e17ffe17 	ldw	r5,-8(fp)
   1b6a8:	e13ffb17 	ldw	r4,-20(fp)
   1b6ac:	103ee83a 	callr	r2
   1b6b0:	e0bffc15 	stw	r2,-16(fp)
   1b6b4:	e0bffc17 	ldw	r2,-16(fp)
   1b6b8:	1000070e 	bge	r2,zero,1b6d8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1b6bc:	001b5dc0 	call	1b5dc <alt_get_errno>
   1b6c0:	1007883a 	mov	r3,r2
   1b6c4:	e0bffc17 	ldw	r2,-16(fp)
   1b6c8:	0085c83a 	sub	r2,zero,r2
   1b6cc:	18800015 	stw	r2,0(r3)
          return -1;
   1b6d0:	00bfffc4 	movi	r2,-1
   1b6d4:	00000c06 	br	1b708 <read+0xf0>
        }
        return rval;
   1b6d8:	e0bffc17 	ldw	r2,-16(fp)
   1b6dc:	00000a06 	br	1b708 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1b6e0:	001b5dc0 	call	1b5dc <alt_get_errno>
   1b6e4:	1007883a 	mov	r3,r2
   1b6e8:	00800344 	movi	r2,13
   1b6ec:	18800015 	stw	r2,0(r3)
   1b6f0:	00000406 	br	1b704 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1b6f4:	001b5dc0 	call	1b5dc <alt_get_errno>
   1b6f8:	1007883a 	mov	r3,r2
   1b6fc:	00801444 	movi	r2,81
   1b700:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1b704:	00bfffc4 	movi	r2,-1
}
   1b708:	e037883a 	mov	sp,fp
   1b70c:	dfc00117 	ldw	ra,4(sp)
   1b710:	df000017 	ldw	fp,0(sp)
   1b714:	dec00204 	addi	sp,sp,8
   1b718:	f800283a 	ret

0001b71c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1b71c:	defffc04 	addi	sp,sp,-16
   1b720:	dfc00315 	stw	ra,12(sp)
   1b724:	df000215 	stw	fp,8(sp)
   1b728:	dc000115 	stw	r16,4(sp)
   1b72c:	df000204 	addi	fp,sp,8
   1b730:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   1b734:	e0bffe17 	ldw	r2,-8(fp)
   1b738:	108000d0 	cmplti	r2,r2,3
   1b73c:	1000111e 	bne	r2,zero,1b784 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   1b740:	040000b4 	movhi	r16,2
   1b744:	843d9304 	addi	r16,r16,-2484
   1b748:	e0bffe17 	ldw	r2,-8(fp)
   1b74c:	01400304 	movi	r5,12
   1b750:	1009883a 	mov	r4,r2
   1b754:	00051580 	call	5158 <__mulsi3>
   1b758:	8085883a 	add	r2,r16,r2
   1b75c:	10800204 	addi	r2,r2,8
   1b760:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1b764:	040000b4 	movhi	r16,2
   1b768:	843d9304 	addi	r16,r16,-2484
   1b76c:	e0bffe17 	ldw	r2,-8(fp)
   1b770:	01400304 	movi	r5,12
   1b774:	1009883a 	mov	r4,r2
   1b778:	00051580 	call	5158 <__mulsi3>
   1b77c:	8085883a 	add	r2,r16,r2
   1b780:	10000015 	stw	zero,0(r2)
  }
}
   1b784:	0001883a 	nop
   1b788:	e6ffff04 	addi	sp,fp,-4
   1b78c:	dfc00217 	ldw	ra,8(sp)
   1b790:	df000117 	ldw	fp,4(sp)
   1b794:	dc000017 	ldw	r16,0(sp)
   1b798:	dec00304 	addi	sp,sp,12
   1b79c:	f800283a 	ret

0001b7a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1b7a0:	defff904 	addi	sp,sp,-28
   1b7a4:	df000615 	stw	fp,24(sp)
   1b7a8:	df000604 	addi	fp,sp,24
   1b7ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b7b0:	0005303a 	rdctl	r2,status
   1b7b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b7b8:	e0fffe17 	ldw	r3,-8(fp)
   1b7bc:	00bfff84 	movi	r2,-2
   1b7c0:	1884703a 	and	r2,r3,r2
   1b7c4:	1001703a 	wrctl	status,r2
  
  return context;
   1b7c8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1b7cc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1b7d0:	d0a01117 	ldw	r2,-32700(gp)
   1b7d4:	10c000c4 	addi	r3,r2,3
   1b7d8:	00bfff04 	movi	r2,-4
   1b7dc:	1884703a 	and	r2,r3,r2
   1b7e0:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1b7e4:	d0e01117 	ldw	r3,-32700(gp)
   1b7e8:	e0bfff17 	ldw	r2,-4(fp)
   1b7ec:	1887883a 	add	r3,r3,r2
   1b7f0:	008000f4 	movhi	r2,3
   1b7f4:	10afc804 	addi	r2,r2,-16608
   1b7f8:	10c0062e 	bgeu	r2,r3,1b814 <sbrk+0x74>
   1b7fc:	e0bffb17 	ldw	r2,-20(fp)
   1b800:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b804:	e0bffa17 	ldw	r2,-24(fp)
   1b808:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1b80c:	00bfffc4 	movi	r2,-1
   1b810:	00000b06 	br	1b840 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1b814:	d0a01117 	ldw	r2,-32700(gp)
   1b818:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1b81c:	d0e01117 	ldw	r3,-32700(gp)
   1b820:	e0bfff17 	ldw	r2,-4(fp)
   1b824:	1885883a 	add	r2,r3,r2
   1b828:	d0a01115 	stw	r2,-32700(gp)
   1b82c:	e0bffb17 	ldw	r2,-20(fp)
   1b830:	e0bffc15 	stw	r2,-16(fp)
   1b834:	e0bffc17 	ldw	r2,-16(fp)
   1b838:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1b83c:	e0bffd17 	ldw	r2,-12(fp)
} 
   1b840:	e037883a 	mov	sp,fp
   1b844:	df000017 	ldw	fp,0(sp)
   1b848:	dec00104 	addi	sp,sp,4
   1b84c:	f800283a 	ret

0001b850 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1b850:	defffa04 	addi	sp,sp,-24
   1b854:	df000515 	stw	fp,20(sp)
   1b858:	df000504 	addi	fp,sp,20
   1b85c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b860:	0005303a 	rdctl	r2,status
   1b864:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b868:	e0fffc17 	ldw	r3,-16(fp)
   1b86c:	00bfff84 	movi	r2,-2
   1b870:	1884703a 	and	r2,r3,r2
   1b874:	1001703a 	wrctl	status,r2
  
  return context;
   1b878:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1b87c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1b880:	e0bfff17 	ldw	r2,-4(fp)
   1b884:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1b888:	e0bffd17 	ldw	r2,-12(fp)
   1b88c:	10800017 	ldw	r2,0(r2)
   1b890:	e0fffd17 	ldw	r3,-12(fp)
   1b894:	18c00117 	ldw	r3,4(r3)
   1b898:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1b89c:	e0bffd17 	ldw	r2,-12(fp)
   1b8a0:	10800117 	ldw	r2,4(r2)
   1b8a4:	e0fffd17 	ldw	r3,-12(fp)
   1b8a8:	18c00017 	ldw	r3,0(r3)
   1b8ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1b8b0:	e0bffd17 	ldw	r2,-12(fp)
   1b8b4:	e0fffd17 	ldw	r3,-12(fp)
   1b8b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1b8bc:	e0bffd17 	ldw	r2,-12(fp)
   1b8c0:	e0fffd17 	ldw	r3,-12(fp)
   1b8c4:	10c00015 	stw	r3,0(r2)
   1b8c8:	e0bffb17 	ldw	r2,-20(fp)
   1b8cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b8d0:	e0bffe17 	ldw	r2,-8(fp)
   1b8d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1b8d8:	0001883a 	nop
   1b8dc:	e037883a 	mov	sp,fp
   1b8e0:	df000017 	ldw	fp,0(sp)
   1b8e4:	dec00104 	addi	sp,sp,4
   1b8e8:	f800283a 	ret

0001b8ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1b8ec:	defffb04 	addi	sp,sp,-20
   1b8f0:	dfc00415 	stw	ra,16(sp)
   1b8f4:	df000315 	stw	fp,12(sp)
   1b8f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1b8fc:	d0a01217 	ldw	r2,-32696(gp)
   1b900:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1b904:	d0a71717 	ldw	r2,-25508(gp)
   1b908:	10800044 	addi	r2,r2,1
   1b90c:	d0a71715 	stw	r2,-25508(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1b910:	00002e06 	br	1b9cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1b914:	e0bffd17 	ldw	r2,-12(fp)
   1b918:	10800017 	ldw	r2,0(r2)
   1b91c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1b920:	e0bffd17 	ldw	r2,-12(fp)
   1b924:	10800403 	ldbu	r2,16(r2)
   1b928:	10803fcc 	andi	r2,r2,255
   1b92c:	10000426 	beq	r2,zero,1b940 <alt_tick+0x54>
   1b930:	d0a71717 	ldw	r2,-25508(gp)
   1b934:	1000021e 	bne	r2,zero,1b940 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1b938:	e0bffd17 	ldw	r2,-12(fp)
   1b93c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1b940:	e0bffd17 	ldw	r2,-12(fp)
   1b944:	10800217 	ldw	r2,8(r2)
   1b948:	d0e71717 	ldw	r3,-25508(gp)
   1b94c:	18801d36 	bltu	r3,r2,1b9c4 <alt_tick+0xd8>
   1b950:	e0bffd17 	ldw	r2,-12(fp)
   1b954:	10800403 	ldbu	r2,16(r2)
   1b958:	10803fcc 	andi	r2,r2,255
   1b95c:	1000191e 	bne	r2,zero,1b9c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1b960:	e0bffd17 	ldw	r2,-12(fp)
   1b964:	10800317 	ldw	r2,12(r2)
   1b968:	e0fffd17 	ldw	r3,-12(fp)
   1b96c:	18c00517 	ldw	r3,20(r3)
   1b970:	1809883a 	mov	r4,r3
   1b974:	103ee83a 	callr	r2
   1b978:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1b97c:	e0bfff17 	ldw	r2,-4(fp)
   1b980:	1000031e 	bne	r2,zero,1b990 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1b984:	e13ffd17 	ldw	r4,-12(fp)
   1b988:	001b8500 	call	1b850 <alt_alarm_stop>
   1b98c:	00000d06 	br	1b9c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1b990:	e0bffd17 	ldw	r2,-12(fp)
   1b994:	10c00217 	ldw	r3,8(r2)
   1b998:	e0bfff17 	ldw	r2,-4(fp)
   1b99c:	1887883a 	add	r3,r3,r2
   1b9a0:	e0bffd17 	ldw	r2,-12(fp)
   1b9a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1b9a8:	e0bffd17 	ldw	r2,-12(fp)
   1b9ac:	10c00217 	ldw	r3,8(r2)
   1b9b0:	d0a71717 	ldw	r2,-25508(gp)
   1b9b4:	1880032e 	bgeu	r3,r2,1b9c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1b9b8:	e0bffd17 	ldw	r2,-12(fp)
   1b9bc:	00c00044 	movi	r3,1
   1b9c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1b9c4:	e0bffe17 	ldw	r2,-8(fp)
   1b9c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1b9cc:	e0fffd17 	ldw	r3,-12(fp)
   1b9d0:	d0a01204 	addi	r2,gp,-32696
   1b9d4:	18bfcf1e 	bne	r3,r2,1b914 <__alt_mem_nios_system_shared_memory+0xfffdb914>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1b9d8:	0001883a 	nop
}
   1b9dc:	0001883a 	nop
   1b9e0:	e037883a 	mov	sp,fp
   1b9e4:	dfc00117 	ldw	ra,4(sp)
   1b9e8:	df000017 	ldw	fp,0(sp)
   1b9ec:	dec00204 	addi	sp,sp,8
   1b9f0:	f800283a 	ret

0001b9f4 <usleep>:
   1b9f4:	defffd04 	addi	sp,sp,-12
   1b9f8:	dfc00215 	stw	ra,8(sp)
   1b9fc:	df000115 	stw	fp,4(sp)
   1ba00:	df000104 	addi	fp,sp,4
   1ba04:	e13fff15 	stw	r4,-4(fp)
   1ba08:	e13fff17 	ldw	r4,-4(fp)
   1ba0c:	001d1f40 	call	1d1f4 <alt_busy_sleep>
   1ba10:	e037883a 	mov	sp,fp
   1ba14:	dfc00117 	ldw	ra,4(sp)
   1ba18:	df000017 	ldw	fp,0(sp)
   1ba1c:	dec00204 	addi	sp,sp,8
   1ba20:	f800283a 	ret

0001ba24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ba24:	defffe04 	addi	sp,sp,-8
   1ba28:	dfc00115 	stw	ra,4(sp)
   1ba2c:	df000015 	stw	fp,0(sp)
   1ba30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ba34:	d0a01017 	ldw	r2,-32704(gp)
   1ba38:	10000326 	beq	r2,zero,1ba48 <alt_get_errno+0x24>
   1ba3c:	d0a01017 	ldw	r2,-32704(gp)
   1ba40:	103ee83a 	callr	r2
   1ba44:	00000106 	br	1ba4c <alt_get_errno+0x28>
   1ba48:	d0a70c04 	addi	r2,gp,-25552
}
   1ba4c:	e037883a 	mov	sp,fp
   1ba50:	dfc00117 	ldw	ra,4(sp)
   1ba54:	df000017 	ldw	fp,0(sp)
   1ba58:	dec00204 	addi	sp,sp,8
   1ba5c:	f800283a 	ret

0001ba60 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1ba60:	defff904 	addi	sp,sp,-28
   1ba64:	dfc00615 	stw	ra,24(sp)
   1ba68:	df000515 	stw	fp,20(sp)
   1ba6c:	df000504 	addi	fp,sp,20
   1ba70:	e13ffd15 	stw	r4,-12(fp)
   1ba74:	e17ffe15 	stw	r5,-8(fp)
   1ba78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1ba7c:	e0bffd17 	ldw	r2,-12(fp)
   1ba80:	10000816 	blt	r2,zero,1baa4 <write+0x44>
   1ba84:	01400304 	movi	r5,12
   1ba88:	e13ffd17 	ldw	r4,-12(fp)
   1ba8c:	00051580 	call	5158 <__mulsi3>
   1ba90:	1007883a 	mov	r3,r2
   1ba94:	008000b4 	movhi	r2,2
   1ba98:	10bd9304 	addi	r2,r2,-2484
   1ba9c:	1885883a 	add	r2,r3,r2
   1baa0:	00000106 	br	1baa8 <write+0x48>
   1baa4:	0005883a 	mov	r2,zero
   1baa8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1baac:	e0bffb17 	ldw	r2,-20(fp)
   1bab0:	10002126 	beq	r2,zero,1bb38 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1bab4:	e0bffb17 	ldw	r2,-20(fp)
   1bab8:	10800217 	ldw	r2,8(r2)
   1babc:	108000cc 	andi	r2,r2,3
   1bac0:	10001826 	beq	r2,zero,1bb24 <write+0xc4>
   1bac4:	e0bffb17 	ldw	r2,-20(fp)
   1bac8:	10800017 	ldw	r2,0(r2)
   1bacc:	10800617 	ldw	r2,24(r2)
   1bad0:	10001426 	beq	r2,zero,1bb24 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1bad4:	e0bffb17 	ldw	r2,-20(fp)
   1bad8:	10800017 	ldw	r2,0(r2)
   1badc:	10800617 	ldw	r2,24(r2)
   1bae0:	e0ffff17 	ldw	r3,-4(fp)
   1bae4:	180d883a 	mov	r6,r3
   1bae8:	e17ffe17 	ldw	r5,-8(fp)
   1baec:	e13ffb17 	ldw	r4,-20(fp)
   1baf0:	103ee83a 	callr	r2
   1baf4:	e0bffc15 	stw	r2,-16(fp)
   1baf8:	e0bffc17 	ldw	r2,-16(fp)
   1bafc:	1000070e 	bge	r2,zero,1bb1c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   1bb00:	001ba240 	call	1ba24 <alt_get_errno>
   1bb04:	1007883a 	mov	r3,r2
   1bb08:	e0bffc17 	ldw	r2,-16(fp)
   1bb0c:	0085c83a 	sub	r2,zero,r2
   1bb10:	18800015 	stw	r2,0(r3)
        return -1;
   1bb14:	00bfffc4 	movi	r2,-1
   1bb18:	00000c06 	br	1bb4c <write+0xec>
      }
      return rval;
   1bb1c:	e0bffc17 	ldw	r2,-16(fp)
   1bb20:	00000a06 	br	1bb4c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1bb24:	001ba240 	call	1ba24 <alt_get_errno>
   1bb28:	1007883a 	mov	r3,r2
   1bb2c:	00800344 	movi	r2,13
   1bb30:	18800015 	stw	r2,0(r3)
   1bb34:	00000406 	br	1bb48 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1bb38:	001ba240 	call	1ba24 <alt_get_errno>
   1bb3c:	1007883a 	mov	r3,r2
   1bb40:	00801444 	movi	r2,81
   1bb44:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1bb48:	00bfffc4 	movi	r2,-1
}
   1bb4c:	e037883a 	mov	sp,fp
   1bb50:	dfc00117 	ldw	ra,4(sp)
   1bb54:	df000017 	ldw	fp,0(sp)
   1bb58:	dec00204 	addi	sp,sp,8
   1bb5c:	f800283a 	ret

0001bb60 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1bb60:	defffd04 	addi	sp,sp,-12
   1bb64:	dfc00215 	stw	ra,8(sp)
   1bb68:	df000115 	stw	fp,4(sp)
   1bb6c:	df000104 	addi	fp,sp,4
   1bb70:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1bb74:	d1600d04 	addi	r5,gp,-32716
   1bb78:	e13fff17 	ldw	r4,-4(fp)
   1bb7c:	001d3a80 	call	1d3a8 <alt_dev_llist_insert>
}
   1bb80:	e037883a 	mov	sp,fp
   1bb84:	dfc00117 	ldw	ra,4(sp)
   1bb88:	df000017 	ldw	fp,0(sp)
   1bb8c:	dec00204 	addi	sp,sp,8
   1bb90:	f800283a 	ret

0001bb94 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1bb94:	defffd04 	addi	sp,sp,-12
   1bb98:	dfc00215 	stw	ra,8(sp)
   1bb9c:	df000115 	stw	fp,4(sp)
   1bba0:	df000104 	addi	fp,sp,4
   1bba4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_SYSTEM_NIOS2_GEN2, nios_system_nios2_gen2);
   1bba8:	001db880 	call	1db88 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1bbac:	00800044 	movi	r2,1
   1bbb0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1bbb4:	0001883a 	nop
   1bbb8:	e037883a 	mov	sp,fp
   1bbbc:	dfc00117 	ldw	ra,4(sp)
   1bbc0:	df000017 	ldw	fp,0(sp)
   1bbc4:	dec00204 	addi	sp,sp,8
   1bbc8:	f800283a 	ret

0001bbcc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1bbcc:	defffe04 	addi	sp,sp,-8
   1bbd0:	dfc00115 	stw	ra,4(sp)
   1bbd4:	df000015 	stw	fp,0(sp)
   1bbd8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( NIOS_SYSTEM_TIMER, nios_system_timer);
   1bbdc:	01c0fa04 	movi	r7,1000
   1bbe0:	01800104 	movi	r6,4
   1bbe4:	000b883a 	mov	r5,zero
   1bbe8:	01000134 	movhi	r4,4
   1bbec:	21040804 	addi	r4,r4,4128
   1bbf0:	001c7740 	call	1c774 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS_SYSTEM_JTAG_UART, nios_system_jtag_uart);
   1bbf4:	018000c4 	movi	r6,3
   1bbf8:	000b883a 	mov	r5,zero
   1bbfc:	010000b4 	movhi	r4,2
   1bc00:	213dfd04 	addi	r4,r4,-2060
   1bc04:	001bdb40 	call	1bdb4 <altera_avalon_jtag_uart_init>
   1bc08:	010000b4 	movhi	r4,2
   1bc0c:	213df304 	addi	r4,r4,-2100
   1bc10:	001bb600 	call	1bb60 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( NIOS_SYSTEM_SYSID_QSYS, nios_system_sysid_qsys);
   1bc14:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( NIOS_SYSTEM_WIFI_UART0, nios_system_wifi_uart0);
   1bc18:	018001c4 	movi	r6,7
   1bc1c:	000b883a 	mov	r5,zero
   1bc20:	010000b4 	movhi	r4,2
   1bc24:	21021504 	addi	r4,r4,2132
   1bc28:	001c9000 	call	1c900 <altera_avalon_uart_init>
   1bc2c:	010000b4 	movhi	r4,2
   1bc30:	21020b04 	addi	r4,r4,2092
   1bc34:	001bb600 	call	1bb60 <alt_dev_reg>
}
   1bc38:	0001883a 	nop
   1bc3c:	e037883a 	mov	sp,fp
   1bc40:	dfc00117 	ldw	ra,4(sp)
   1bc44:	df000017 	ldw	fp,0(sp)
   1bc48:	dec00204 	addi	sp,sp,8
   1bc4c:	f800283a 	ret

0001bc50 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1bc50:	defffa04 	addi	sp,sp,-24
   1bc54:	dfc00515 	stw	ra,20(sp)
   1bc58:	df000415 	stw	fp,16(sp)
   1bc5c:	df000404 	addi	fp,sp,16
   1bc60:	e13ffd15 	stw	r4,-12(fp)
   1bc64:	e17ffe15 	stw	r5,-8(fp)
   1bc68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bc6c:	e0bffd17 	ldw	r2,-12(fp)
   1bc70:	10800017 	ldw	r2,0(r2)
   1bc74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1bc78:	e0bffc17 	ldw	r2,-16(fp)
   1bc7c:	10c00a04 	addi	r3,r2,40
   1bc80:	e0bffd17 	ldw	r2,-12(fp)
   1bc84:	10800217 	ldw	r2,8(r2)
   1bc88:	100f883a 	mov	r7,r2
   1bc8c:	e1bfff17 	ldw	r6,-4(fp)
   1bc90:	e17ffe17 	ldw	r5,-8(fp)
   1bc94:	1809883a 	mov	r4,r3
   1bc98:	001c2780 	call	1c278 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1bc9c:	e037883a 	mov	sp,fp
   1bca0:	dfc00117 	ldw	ra,4(sp)
   1bca4:	df000017 	ldw	fp,0(sp)
   1bca8:	dec00204 	addi	sp,sp,8
   1bcac:	f800283a 	ret

0001bcb0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1bcb0:	defffa04 	addi	sp,sp,-24
   1bcb4:	dfc00515 	stw	ra,20(sp)
   1bcb8:	df000415 	stw	fp,16(sp)
   1bcbc:	df000404 	addi	fp,sp,16
   1bcc0:	e13ffd15 	stw	r4,-12(fp)
   1bcc4:	e17ffe15 	stw	r5,-8(fp)
   1bcc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bccc:	e0bffd17 	ldw	r2,-12(fp)
   1bcd0:	10800017 	ldw	r2,0(r2)
   1bcd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1bcd8:	e0bffc17 	ldw	r2,-16(fp)
   1bcdc:	10c00a04 	addi	r3,r2,40
   1bce0:	e0bffd17 	ldw	r2,-12(fp)
   1bce4:	10800217 	ldw	r2,8(r2)
   1bce8:	100f883a 	mov	r7,r2
   1bcec:	e1bfff17 	ldw	r6,-4(fp)
   1bcf0:	e17ffe17 	ldw	r5,-8(fp)
   1bcf4:	1809883a 	mov	r4,r3
   1bcf8:	001c4940 	call	1c494 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1bcfc:	e037883a 	mov	sp,fp
   1bd00:	dfc00117 	ldw	ra,4(sp)
   1bd04:	df000017 	ldw	fp,0(sp)
   1bd08:	dec00204 	addi	sp,sp,8
   1bd0c:	f800283a 	ret

0001bd10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1bd10:	defffc04 	addi	sp,sp,-16
   1bd14:	dfc00315 	stw	ra,12(sp)
   1bd18:	df000215 	stw	fp,8(sp)
   1bd1c:	df000204 	addi	fp,sp,8
   1bd20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bd24:	e0bfff17 	ldw	r2,-4(fp)
   1bd28:	10800017 	ldw	r2,0(r2)
   1bd2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1bd30:	e0bffe17 	ldw	r2,-8(fp)
   1bd34:	10c00a04 	addi	r3,r2,40
   1bd38:	e0bfff17 	ldw	r2,-4(fp)
   1bd3c:	10800217 	ldw	r2,8(r2)
   1bd40:	100b883a 	mov	r5,r2
   1bd44:	1809883a 	mov	r4,r3
   1bd48:	001c1200 	call	1c120 <altera_avalon_jtag_uart_close>
}
   1bd4c:	e037883a 	mov	sp,fp
   1bd50:	dfc00117 	ldw	ra,4(sp)
   1bd54:	df000017 	ldw	fp,0(sp)
   1bd58:	dec00204 	addi	sp,sp,8
   1bd5c:	f800283a 	ret

0001bd60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1bd60:	defffa04 	addi	sp,sp,-24
   1bd64:	dfc00515 	stw	ra,20(sp)
   1bd68:	df000415 	stw	fp,16(sp)
   1bd6c:	df000404 	addi	fp,sp,16
   1bd70:	e13ffd15 	stw	r4,-12(fp)
   1bd74:	e17ffe15 	stw	r5,-8(fp)
   1bd78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1bd7c:	e0bffd17 	ldw	r2,-12(fp)
   1bd80:	10800017 	ldw	r2,0(r2)
   1bd84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1bd88:	e0bffc17 	ldw	r2,-16(fp)
   1bd8c:	10800a04 	addi	r2,r2,40
   1bd90:	e1bfff17 	ldw	r6,-4(fp)
   1bd94:	e17ffe17 	ldw	r5,-8(fp)
   1bd98:	1009883a 	mov	r4,r2
   1bd9c:	001c1880 	call	1c188 <altera_avalon_jtag_uart_ioctl>
}
   1bda0:	e037883a 	mov	sp,fp
   1bda4:	dfc00117 	ldw	ra,4(sp)
   1bda8:	df000017 	ldw	fp,0(sp)
   1bdac:	dec00204 	addi	sp,sp,8
   1bdb0:	f800283a 	ret

0001bdb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1bdb4:	defffa04 	addi	sp,sp,-24
   1bdb8:	dfc00515 	stw	ra,20(sp)
   1bdbc:	df000415 	stw	fp,16(sp)
   1bdc0:	df000404 	addi	fp,sp,16
   1bdc4:	e13ffd15 	stw	r4,-12(fp)
   1bdc8:	e17ffe15 	stw	r5,-8(fp)
   1bdcc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1bdd0:	e0bffd17 	ldw	r2,-12(fp)
   1bdd4:	00c00044 	movi	r3,1
   1bdd8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1bddc:	e0bffd17 	ldw	r2,-12(fp)
   1bde0:	10800017 	ldw	r2,0(r2)
   1bde4:	10800104 	addi	r2,r2,4
   1bde8:	1007883a 	mov	r3,r2
   1bdec:	e0bffd17 	ldw	r2,-12(fp)
   1bdf0:	10800817 	ldw	r2,32(r2)
   1bdf4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   1bdf8:	e0bffe17 	ldw	r2,-8(fp)
   1bdfc:	e0ffff17 	ldw	r3,-4(fp)
   1be00:	d8000015 	stw	zero,0(sp)
   1be04:	e1fffd17 	ldw	r7,-12(fp)
   1be08:	018000b4 	movhi	r6,2
   1be0c:	31af9d04 	addi	r6,r6,-16780
   1be10:	180b883a 	mov	r5,r3
   1be14:	1009883a 	mov	r4,r2
   1be18:	001d7880 	call	1d788 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1be1c:	e0bffd17 	ldw	r2,-12(fp)
   1be20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1be24:	e0bffd17 	ldw	r2,-12(fp)
   1be28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1be2c:	d0e71617 	ldw	r3,-25512(gp)
   1be30:	e1fffd17 	ldw	r7,-12(fp)
   1be34:	018000b4 	movhi	r6,2
   1be38:	31b02004 	addi	r6,r6,-16256
   1be3c:	180b883a 	mov	r5,r3
   1be40:	1009883a 	mov	r4,r2
   1be44:	001d0c80 	call	1d0c8 <alt_alarm_start>
   1be48:	1000040e 	bge	r2,zero,1be5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1be4c:	e0fffd17 	ldw	r3,-12(fp)
   1be50:	00a00034 	movhi	r2,32768
   1be54:	10bfffc4 	addi	r2,r2,-1
   1be58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1be5c:	0001883a 	nop
   1be60:	e037883a 	mov	sp,fp
   1be64:	dfc00117 	ldw	ra,4(sp)
   1be68:	df000017 	ldw	fp,0(sp)
   1be6c:	dec00204 	addi	sp,sp,8
   1be70:	f800283a 	ret

0001be74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1be74:	defff804 	addi	sp,sp,-32
   1be78:	df000715 	stw	fp,28(sp)
   1be7c:	df000704 	addi	fp,sp,28
   1be80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1be84:	e0bfff17 	ldw	r2,-4(fp)
   1be88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1be8c:	e0bffb17 	ldw	r2,-20(fp)
   1be90:	10800017 	ldw	r2,0(r2)
   1be94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1be98:	e0bffc17 	ldw	r2,-16(fp)
   1be9c:	10800104 	addi	r2,r2,4
   1bea0:	10800037 	ldwio	r2,0(r2)
   1bea4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1bea8:	e0bffd17 	ldw	r2,-12(fp)
   1beac:	1080c00c 	andi	r2,r2,768
   1beb0:	10006d26 	beq	r2,zero,1c068 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1beb4:	e0bffd17 	ldw	r2,-12(fp)
   1beb8:	1080400c 	andi	r2,r2,256
   1bebc:	10003526 	beq	r2,zero,1bf94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1bec0:	00800074 	movhi	r2,1
   1bec4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bec8:	e0bffb17 	ldw	r2,-20(fp)
   1becc:	10800a17 	ldw	r2,40(r2)
   1bed0:	10800044 	addi	r2,r2,1
   1bed4:	1081ffcc 	andi	r2,r2,2047
   1bed8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   1bedc:	e0bffb17 	ldw	r2,-20(fp)
   1bee0:	10c00b17 	ldw	r3,44(r2)
   1bee4:	e0bffe17 	ldw	r2,-8(fp)
   1bee8:	18801526 	beq	r3,r2,1bf40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1beec:	e0bffc17 	ldw	r2,-16(fp)
   1bef0:	10800037 	ldwio	r2,0(r2)
   1bef4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1bef8:	e0bff917 	ldw	r2,-28(fp)
   1befc:	10a0000c 	andi	r2,r2,32768
   1bf00:	10001126 	beq	r2,zero,1bf48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1bf04:	e0bffb17 	ldw	r2,-20(fp)
   1bf08:	10800a17 	ldw	r2,40(r2)
   1bf0c:	e0fff917 	ldw	r3,-28(fp)
   1bf10:	1809883a 	mov	r4,r3
   1bf14:	e0fffb17 	ldw	r3,-20(fp)
   1bf18:	1885883a 	add	r2,r3,r2
   1bf1c:	10800e04 	addi	r2,r2,56
   1bf20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bf24:	e0bffb17 	ldw	r2,-20(fp)
   1bf28:	10800a17 	ldw	r2,40(r2)
   1bf2c:	10800044 	addi	r2,r2,1
   1bf30:	10c1ffcc 	andi	r3,r2,2047
   1bf34:	e0bffb17 	ldw	r2,-20(fp)
   1bf38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1bf3c:	003fe206 	br	1bec8 <__alt_mem_nios_system_shared_memory+0xfffdbec8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1bf40:	0001883a 	nop
   1bf44:	00000106 	br	1bf4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1bf48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1bf4c:	e0bff917 	ldw	r2,-28(fp)
   1bf50:	10bfffec 	andhi	r2,r2,65535
   1bf54:	10000f26 	beq	r2,zero,1bf94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1bf58:	e0bffb17 	ldw	r2,-20(fp)
   1bf5c:	10c00817 	ldw	r3,32(r2)
   1bf60:	00bfff84 	movi	r2,-2
   1bf64:	1886703a 	and	r3,r3,r2
   1bf68:	e0bffb17 	ldw	r2,-20(fp)
   1bf6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1bf70:	e0bffc17 	ldw	r2,-16(fp)
   1bf74:	10800104 	addi	r2,r2,4
   1bf78:	1007883a 	mov	r3,r2
   1bf7c:	e0bffb17 	ldw	r2,-20(fp)
   1bf80:	10800817 	ldw	r2,32(r2)
   1bf84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1bf88:	e0bffc17 	ldw	r2,-16(fp)
   1bf8c:	10800104 	addi	r2,r2,4
   1bf90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1bf94:	e0bffd17 	ldw	r2,-12(fp)
   1bf98:	1080800c 	andi	r2,r2,512
   1bf9c:	103fbe26 	beq	r2,zero,1be98 <__alt_mem_nios_system_shared_memory+0xfffdbe98>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1bfa0:	e0bffd17 	ldw	r2,-12(fp)
   1bfa4:	1004d43a 	srli	r2,r2,16
   1bfa8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1bfac:	00001406 	br	1c000 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1bfb0:	e0bffc17 	ldw	r2,-16(fp)
   1bfb4:	e0fffb17 	ldw	r3,-20(fp)
   1bfb8:	18c00d17 	ldw	r3,52(r3)
   1bfbc:	e13ffb17 	ldw	r4,-20(fp)
   1bfc0:	20c7883a 	add	r3,r4,r3
   1bfc4:	18c20e04 	addi	r3,r3,2104
   1bfc8:	18c00003 	ldbu	r3,0(r3)
   1bfcc:	18c03fcc 	andi	r3,r3,255
   1bfd0:	18c0201c 	xori	r3,r3,128
   1bfd4:	18ffe004 	addi	r3,r3,-128
   1bfd8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bfdc:	e0bffb17 	ldw	r2,-20(fp)
   1bfe0:	10800d17 	ldw	r2,52(r2)
   1bfe4:	10800044 	addi	r2,r2,1
   1bfe8:	10c1ffcc 	andi	r3,r2,2047
   1bfec:	e0bffb17 	ldw	r2,-20(fp)
   1bff0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   1bff4:	e0bffa17 	ldw	r2,-24(fp)
   1bff8:	10bfffc4 	addi	r2,r2,-1
   1bffc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c000:	e0bffa17 	ldw	r2,-24(fp)
   1c004:	10000526 	beq	r2,zero,1c01c <altera_avalon_jtag_uart_irq+0x1a8>
   1c008:	e0bffb17 	ldw	r2,-20(fp)
   1c00c:	10c00d17 	ldw	r3,52(r2)
   1c010:	e0bffb17 	ldw	r2,-20(fp)
   1c014:	10800c17 	ldw	r2,48(r2)
   1c018:	18bfe51e 	bne	r3,r2,1bfb0 <__alt_mem_nios_system_shared_memory+0xfffdbfb0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1c01c:	e0bffa17 	ldw	r2,-24(fp)
   1c020:	103f9d26 	beq	r2,zero,1be98 <__alt_mem_nios_system_shared_memory+0xfffdbe98>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c024:	e0bffb17 	ldw	r2,-20(fp)
   1c028:	10c00817 	ldw	r3,32(r2)
   1c02c:	00bfff44 	movi	r2,-3
   1c030:	1886703a 	and	r3,r3,r2
   1c034:	e0bffb17 	ldw	r2,-20(fp)
   1c038:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c03c:	e0bffb17 	ldw	r2,-20(fp)
   1c040:	10800017 	ldw	r2,0(r2)
   1c044:	10800104 	addi	r2,r2,4
   1c048:	1007883a 	mov	r3,r2
   1c04c:	e0bffb17 	ldw	r2,-20(fp)
   1c050:	10800817 	ldw	r2,32(r2)
   1c054:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c058:	e0bffc17 	ldw	r2,-16(fp)
   1c05c:	10800104 	addi	r2,r2,4
   1c060:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1c064:	003f8c06 	br	1be98 <__alt_mem_nios_system_shared_memory+0xfffdbe98>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1c068:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1c06c:	0001883a 	nop
   1c070:	e037883a 	mov	sp,fp
   1c074:	df000017 	ldw	fp,0(sp)
   1c078:	dec00104 	addi	sp,sp,4
   1c07c:	f800283a 	ret

0001c080 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1c080:	defff804 	addi	sp,sp,-32
   1c084:	df000715 	stw	fp,28(sp)
   1c088:	df000704 	addi	fp,sp,28
   1c08c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1c090:	e0bffb17 	ldw	r2,-20(fp)
   1c094:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1c098:	e0bff917 	ldw	r2,-28(fp)
   1c09c:	10800017 	ldw	r2,0(r2)
   1c0a0:	10800104 	addi	r2,r2,4
   1c0a4:	10800037 	ldwio	r2,0(r2)
   1c0a8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1c0ac:	e0bffa17 	ldw	r2,-24(fp)
   1c0b0:	1081000c 	andi	r2,r2,1024
   1c0b4:	10000b26 	beq	r2,zero,1c0e4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1c0b8:	e0bff917 	ldw	r2,-28(fp)
   1c0bc:	10800017 	ldw	r2,0(r2)
   1c0c0:	10800104 	addi	r2,r2,4
   1c0c4:	1007883a 	mov	r3,r2
   1c0c8:	e0bff917 	ldw	r2,-28(fp)
   1c0cc:	10800817 	ldw	r2,32(r2)
   1c0d0:	10810014 	ori	r2,r2,1024
   1c0d4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1c0d8:	e0bff917 	ldw	r2,-28(fp)
   1c0dc:	10000915 	stw	zero,36(r2)
   1c0e0:	00000a06 	br	1c10c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1c0e4:	e0bff917 	ldw	r2,-28(fp)
   1c0e8:	10c00917 	ldw	r3,36(r2)
   1c0ec:	00a00034 	movhi	r2,32768
   1c0f0:	10bfff04 	addi	r2,r2,-4
   1c0f4:	10c00536 	bltu	r2,r3,1c10c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   1c0f8:	e0bff917 	ldw	r2,-28(fp)
   1c0fc:	10800917 	ldw	r2,36(r2)
   1c100:	10c00044 	addi	r3,r2,1
   1c104:	e0bff917 	ldw	r2,-28(fp)
   1c108:	10c00915 	stw	r3,36(r2)
   1c10c:	d0a71617 	ldw	r2,-25512(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1c110:	e037883a 	mov	sp,fp
   1c114:	df000017 	ldw	fp,0(sp)
   1c118:	dec00104 	addi	sp,sp,4
   1c11c:	f800283a 	ret

0001c120 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1c120:	defffd04 	addi	sp,sp,-12
   1c124:	df000215 	stw	fp,8(sp)
   1c128:	df000204 	addi	fp,sp,8
   1c12c:	e13ffe15 	stw	r4,-8(fp)
   1c130:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c134:	00000506 	br	1c14c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1c138:	e0bfff17 	ldw	r2,-4(fp)
   1c13c:	1090000c 	andi	r2,r2,16384
   1c140:	10000226 	beq	r2,zero,1c14c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1c144:	00bffd44 	movi	r2,-11
   1c148:	00000b06 	br	1c178 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c14c:	e0bffe17 	ldw	r2,-8(fp)
   1c150:	10c00d17 	ldw	r3,52(r2)
   1c154:	e0bffe17 	ldw	r2,-8(fp)
   1c158:	10800c17 	ldw	r2,48(r2)
   1c15c:	18800526 	beq	r3,r2,1c174 <altera_avalon_jtag_uart_close+0x54>
   1c160:	e0bffe17 	ldw	r2,-8(fp)
   1c164:	10c00917 	ldw	r3,36(r2)
   1c168:	e0bffe17 	ldw	r2,-8(fp)
   1c16c:	10800117 	ldw	r2,4(r2)
   1c170:	18bff136 	bltu	r3,r2,1c138 <__alt_mem_nios_system_shared_memory+0xfffdc138>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1c174:	0005883a 	mov	r2,zero
}
   1c178:	e037883a 	mov	sp,fp
   1c17c:	df000017 	ldw	fp,0(sp)
   1c180:	dec00104 	addi	sp,sp,4
   1c184:	f800283a 	ret

0001c188 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1c188:	defffa04 	addi	sp,sp,-24
   1c18c:	df000515 	stw	fp,20(sp)
   1c190:	df000504 	addi	fp,sp,20
   1c194:	e13ffd15 	stw	r4,-12(fp)
   1c198:	e17ffe15 	stw	r5,-8(fp)
   1c19c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1c1a0:	00bff9c4 	movi	r2,-25
   1c1a4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1c1a8:	e0bffe17 	ldw	r2,-8(fp)
   1c1ac:	10da8060 	cmpeqi	r3,r2,27137
   1c1b0:	1800031e 	bne	r3,zero,1c1c0 <altera_avalon_jtag_uart_ioctl+0x38>
   1c1b4:	109a80a0 	cmpeqi	r2,r2,27138
   1c1b8:	1000181e 	bne	r2,zero,1c21c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1c1bc:	00002906 	br	1c264 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1c1c0:	e0bffd17 	ldw	r2,-12(fp)
   1c1c4:	10c00117 	ldw	r3,4(r2)
   1c1c8:	00a00034 	movhi	r2,32768
   1c1cc:	10bfffc4 	addi	r2,r2,-1
   1c1d0:	18802126 	beq	r3,r2,1c258 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1c1d4:	e0bfff17 	ldw	r2,-4(fp)
   1c1d8:	10800017 	ldw	r2,0(r2)
   1c1dc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1c1e0:	e0bffc17 	ldw	r2,-16(fp)
   1c1e4:	10800090 	cmplti	r2,r2,2
   1c1e8:	1000061e 	bne	r2,zero,1c204 <altera_avalon_jtag_uart_ioctl+0x7c>
   1c1ec:	e0fffc17 	ldw	r3,-16(fp)
   1c1f0:	00a00034 	movhi	r2,32768
   1c1f4:	10bfffc4 	addi	r2,r2,-1
   1c1f8:	18800226 	beq	r3,r2,1c204 <altera_avalon_jtag_uart_ioctl+0x7c>
   1c1fc:	e0bffc17 	ldw	r2,-16(fp)
   1c200:	00000206 	br	1c20c <altera_avalon_jtag_uart_ioctl+0x84>
   1c204:	00a00034 	movhi	r2,32768
   1c208:	10bfff84 	addi	r2,r2,-2
   1c20c:	e0fffd17 	ldw	r3,-12(fp)
   1c210:	18800115 	stw	r2,4(r3)
      rc = 0;
   1c214:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c218:	00000f06 	br	1c258 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1c21c:	e0bffd17 	ldw	r2,-12(fp)
   1c220:	10c00117 	ldw	r3,4(r2)
   1c224:	00a00034 	movhi	r2,32768
   1c228:	10bfffc4 	addi	r2,r2,-1
   1c22c:	18800c26 	beq	r3,r2,1c260 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1c230:	e0bffd17 	ldw	r2,-12(fp)
   1c234:	10c00917 	ldw	r3,36(r2)
   1c238:	e0bffd17 	ldw	r2,-12(fp)
   1c23c:	10800117 	ldw	r2,4(r2)
   1c240:	1885803a 	cmpltu	r2,r3,r2
   1c244:	10c03fcc 	andi	r3,r2,255
   1c248:	e0bfff17 	ldw	r2,-4(fp)
   1c24c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1c250:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c254:	00000206 	br	1c260 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1c258:	0001883a 	nop
   1c25c:	00000106 	br	1c264 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1c260:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1c264:	e0bffb17 	ldw	r2,-20(fp)
}
   1c268:	e037883a 	mov	sp,fp
   1c26c:	df000017 	ldw	fp,0(sp)
   1c270:	dec00104 	addi	sp,sp,4
   1c274:	f800283a 	ret

0001c278 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1c278:	defff304 	addi	sp,sp,-52
   1c27c:	dfc00c15 	stw	ra,48(sp)
   1c280:	df000b15 	stw	fp,44(sp)
   1c284:	df000b04 	addi	fp,sp,44
   1c288:	e13ffc15 	stw	r4,-16(fp)
   1c28c:	e17ffd15 	stw	r5,-12(fp)
   1c290:	e1bffe15 	stw	r6,-8(fp)
   1c294:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1c298:	e0bffd17 	ldw	r2,-12(fp)
   1c29c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1c2a0:	00004706 	br	1c3c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1c2a4:	e0bffc17 	ldw	r2,-16(fp)
   1c2a8:	10800a17 	ldw	r2,40(r2)
   1c2ac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   1c2b0:	e0bffc17 	ldw	r2,-16(fp)
   1c2b4:	10800b17 	ldw	r2,44(r2)
   1c2b8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1c2bc:	e0fff717 	ldw	r3,-36(fp)
   1c2c0:	e0bff817 	ldw	r2,-32(fp)
   1c2c4:	18800536 	bltu	r3,r2,1c2dc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   1c2c8:	e0fff717 	ldw	r3,-36(fp)
   1c2cc:	e0bff817 	ldw	r2,-32(fp)
   1c2d0:	1885c83a 	sub	r2,r3,r2
   1c2d4:	e0bff615 	stw	r2,-40(fp)
   1c2d8:	00000406 	br	1c2ec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1c2dc:	00c20004 	movi	r3,2048
   1c2e0:	e0bff817 	ldw	r2,-32(fp)
   1c2e4:	1885c83a 	sub	r2,r3,r2
   1c2e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1c2ec:	e0bff617 	ldw	r2,-40(fp)
   1c2f0:	10001e26 	beq	r2,zero,1c36c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   1c2f4:	e0fffe17 	ldw	r3,-8(fp)
   1c2f8:	e0bff617 	ldw	r2,-40(fp)
   1c2fc:	1880022e 	bgeu	r3,r2,1c308 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   1c300:	e0bffe17 	ldw	r2,-8(fp)
   1c304:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1c308:	e0bffc17 	ldw	r2,-16(fp)
   1c30c:	10c00e04 	addi	r3,r2,56
   1c310:	e0bff817 	ldw	r2,-32(fp)
   1c314:	1885883a 	add	r2,r3,r2
   1c318:	e1bff617 	ldw	r6,-40(fp)
   1c31c:	100b883a 	mov	r5,r2
   1c320:	e13ff517 	ldw	r4,-44(fp)
   1c324:	000b0ac0 	call	b0ac <memcpy>
      ptr   += n;
   1c328:	e0fff517 	ldw	r3,-44(fp)
   1c32c:	e0bff617 	ldw	r2,-40(fp)
   1c330:	1885883a 	add	r2,r3,r2
   1c334:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   1c338:	e0fffe17 	ldw	r3,-8(fp)
   1c33c:	e0bff617 	ldw	r2,-40(fp)
   1c340:	1885c83a 	sub	r2,r3,r2
   1c344:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c348:	e0fff817 	ldw	r3,-32(fp)
   1c34c:	e0bff617 	ldw	r2,-40(fp)
   1c350:	1885883a 	add	r2,r3,r2
   1c354:	10c1ffcc 	andi	r3,r2,2047
   1c358:	e0bffc17 	ldw	r2,-16(fp)
   1c35c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   1c360:	e0bffe17 	ldw	r2,-8(fp)
   1c364:	00bfcf16 	blt	zero,r2,1c2a4 <__alt_mem_nios_system_shared_memory+0xfffdc2a4>
   1c368:	00000106 	br	1c370 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1c36c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1c370:	e0fff517 	ldw	r3,-44(fp)
   1c374:	e0bffd17 	ldw	r2,-12(fp)
   1c378:	1880141e 	bne	r3,r2,1c3cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1c37c:	e0bfff17 	ldw	r2,-4(fp)
   1c380:	1090000c 	andi	r2,r2,16384
   1c384:	1000131e 	bne	r2,zero,1c3d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1c388:	0001883a 	nop
   1c38c:	e0bffc17 	ldw	r2,-16(fp)
   1c390:	10c00a17 	ldw	r3,40(r2)
   1c394:	e0bff717 	ldw	r2,-36(fp)
   1c398:	1880051e 	bne	r3,r2,1c3b0 <altera_avalon_jtag_uart_read+0x138>
   1c39c:	e0bffc17 	ldw	r2,-16(fp)
   1c3a0:	10c00917 	ldw	r3,36(r2)
   1c3a4:	e0bffc17 	ldw	r2,-16(fp)
   1c3a8:	10800117 	ldw	r2,4(r2)
   1c3ac:	18bff736 	bltu	r3,r2,1c38c <__alt_mem_nios_system_shared_memory+0xfffdc38c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1c3b0:	e0bffc17 	ldw	r2,-16(fp)
   1c3b4:	10c00a17 	ldw	r3,40(r2)
   1c3b8:	e0bff717 	ldw	r2,-36(fp)
   1c3bc:	18800726 	beq	r3,r2,1c3dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1c3c0:	e0bffe17 	ldw	r2,-8(fp)
   1c3c4:	00bfb716 	blt	zero,r2,1c2a4 <__alt_mem_nios_system_shared_memory+0xfffdc2a4>
   1c3c8:	00000506 	br	1c3e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1c3cc:	0001883a 	nop
   1c3d0:	00000306 	br	1c3e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1c3d4:	0001883a 	nop
   1c3d8:	00000106 	br	1c3e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1c3dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   1c3e0:	e0fff517 	ldw	r3,-44(fp)
   1c3e4:	e0bffd17 	ldw	r2,-12(fp)
   1c3e8:	18801826 	beq	r3,r2,1c44c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c3ec:	0005303a 	rdctl	r2,status
   1c3f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c3f4:	e0fffb17 	ldw	r3,-20(fp)
   1c3f8:	00bfff84 	movi	r2,-2
   1c3fc:	1884703a 	and	r2,r3,r2
   1c400:	1001703a 	wrctl	status,r2
  
  return context;
   1c404:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1c408:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c40c:	e0bffc17 	ldw	r2,-16(fp)
   1c410:	10800817 	ldw	r2,32(r2)
   1c414:	10c00054 	ori	r3,r2,1
   1c418:	e0bffc17 	ldw	r2,-16(fp)
   1c41c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c420:	e0bffc17 	ldw	r2,-16(fp)
   1c424:	10800017 	ldw	r2,0(r2)
   1c428:	10800104 	addi	r2,r2,4
   1c42c:	1007883a 	mov	r3,r2
   1c430:	e0bffc17 	ldw	r2,-16(fp)
   1c434:	10800817 	ldw	r2,32(r2)
   1c438:	18800035 	stwio	r2,0(r3)
   1c43c:	e0bffa17 	ldw	r2,-24(fp)
   1c440:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c444:	e0bff917 	ldw	r2,-28(fp)
   1c448:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1c44c:	e0fff517 	ldw	r3,-44(fp)
   1c450:	e0bffd17 	ldw	r2,-12(fp)
   1c454:	18800426 	beq	r3,r2,1c468 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   1c458:	e0fff517 	ldw	r3,-44(fp)
   1c45c:	e0bffd17 	ldw	r2,-12(fp)
   1c460:	1885c83a 	sub	r2,r3,r2
   1c464:	00000606 	br	1c480 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   1c468:	e0bfff17 	ldw	r2,-4(fp)
   1c46c:	1090000c 	andi	r2,r2,16384
   1c470:	10000226 	beq	r2,zero,1c47c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1c474:	00bffd44 	movi	r2,-11
   1c478:	00000106 	br	1c480 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1c47c:	00bffec4 	movi	r2,-5
}
   1c480:	e037883a 	mov	sp,fp
   1c484:	dfc00117 	ldw	ra,4(sp)
   1c488:	df000017 	ldw	fp,0(sp)
   1c48c:	dec00204 	addi	sp,sp,8
   1c490:	f800283a 	ret

0001c494 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1c494:	defff304 	addi	sp,sp,-52
   1c498:	dfc00c15 	stw	ra,48(sp)
   1c49c:	df000b15 	stw	fp,44(sp)
   1c4a0:	df000b04 	addi	fp,sp,44
   1c4a4:	e13ffc15 	stw	r4,-16(fp)
   1c4a8:	e17ffd15 	stw	r5,-12(fp)
   1c4ac:	e1bffe15 	stw	r6,-8(fp)
   1c4b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1c4b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1c4b8:	e0bffd17 	ldw	r2,-12(fp)
   1c4bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c4c0:	00003706 	br	1c5a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1c4c4:	e0bffc17 	ldw	r2,-16(fp)
   1c4c8:	10800c17 	ldw	r2,48(r2)
   1c4cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   1c4d0:	e0bffc17 	ldw	r2,-16(fp)
   1c4d4:	10800d17 	ldw	r2,52(r2)
   1c4d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   1c4dc:	e0fff917 	ldw	r3,-28(fp)
   1c4e0:	e0bff517 	ldw	r2,-44(fp)
   1c4e4:	1880062e 	bgeu	r3,r2,1c500 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   1c4e8:	e0fff517 	ldw	r3,-44(fp)
   1c4ec:	e0bff917 	ldw	r2,-28(fp)
   1c4f0:	1885c83a 	sub	r2,r3,r2
   1c4f4:	10bfffc4 	addi	r2,r2,-1
   1c4f8:	e0bff615 	stw	r2,-40(fp)
   1c4fc:	00000b06 	br	1c52c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   1c500:	e0bff517 	ldw	r2,-44(fp)
   1c504:	10000526 	beq	r2,zero,1c51c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1c508:	00c20004 	movi	r3,2048
   1c50c:	e0bff917 	ldw	r2,-28(fp)
   1c510:	1885c83a 	sub	r2,r3,r2
   1c514:	e0bff615 	stw	r2,-40(fp)
   1c518:	00000406 	br	1c52c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1c51c:	00c1ffc4 	movi	r3,2047
   1c520:	e0bff917 	ldw	r2,-28(fp)
   1c524:	1885c83a 	sub	r2,r3,r2
   1c528:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   1c52c:	e0bff617 	ldw	r2,-40(fp)
   1c530:	10001e26 	beq	r2,zero,1c5ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1c534:	e0fffe17 	ldw	r3,-8(fp)
   1c538:	e0bff617 	ldw	r2,-40(fp)
   1c53c:	1880022e 	bgeu	r3,r2,1c548 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   1c540:	e0bffe17 	ldw	r2,-8(fp)
   1c544:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1c548:	e0bffc17 	ldw	r2,-16(fp)
   1c54c:	10c20e04 	addi	r3,r2,2104
   1c550:	e0bff917 	ldw	r2,-28(fp)
   1c554:	1885883a 	add	r2,r3,r2
   1c558:	e1bff617 	ldw	r6,-40(fp)
   1c55c:	e17ffd17 	ldw	r5,-12(fp)
   1c560:	1009883a 	mov	r4,r2
   1c564:	000b0ac0 	call	b0ac <memcpy>
      ptr   += n;
   1c568:	e0fffd17 	ldw	r3,-12(fp)
   1c56c:	e0bff617 	ldw	r2,-40(fp)
   1c570:	1885883a 	add	r2,r3,r2
   1c574:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1c578:	e0fffe17 	ldw	r3,-8(fp)
   1c57c:	e0bff617 	ldw	r2,-40(fp)
   1c580:	1885c83a 	sub	r2,r3,r2
   1c584:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c588:	e0fff917 	ldw	r3,-28(fp)
   1c58c:	e0bff617 	ldw	r2,-40(fp)
   1c590:	1885883a 	add	r2,r3,r2
   1c594:	10c1ffcc 	andi	r3,r2,2047
   1c598:	e0bffc17 	ldw	r2,-16(fp)
   1c59c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c5a0:	e0bffe17 	ldw	r2,-8(fp)
   1c5a4:	00bfc716 	blt	zero,r2,1c4c4 <__alt_mem_nios_system_shared_memory+0xfffdc4c4>
   1c5a8:	00000106 	br	1c5b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1c5ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c5b0:	0005303a 	rdctl	r2,status
   1c5b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c5b8:	e0fffb17 	ldw	r3,-20(fp)
   1c5bc:	00bfff84 	movi	r2,-2
   1c5c0:	1884703a 	and	r2,r3,r2
   1c5c4:	1001703a 	wrctl	status,r2
  
  return context;
   1c5c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1c5cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c5d0:	e0bffc17 	ldw	r2,-16(fp)
   1c5d4:	10800817 	ldw	r2,32(r2)
   1c5d8:	10c00094 	ori	r3,r2,2
   1c5dc:	e0bffc17 	ldw	r2,-16(fp)
   1c5e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c5e4:	e0bffc17 	ldw	r2,-16(fp)
   1c5e8:	10800017 	ldw	r2,0(r2)
   1c5ec:	10800104 	addi	r2,r2,4
   1c5f0:	1007883a 	mov	r3,r2
   1c5f4:	e0bffc17 	ldw	r2,-16(fp)
   1c5f8:	10800817 	ldw	r2,32(r2)
   1c5fc:	18800035 	stwio	r2,0(r3)
   1c600:	e0bffa17 	ldw	r2,-24(fp)
   1c604:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c608:	e0bff817 	ldw	r2,-32(fp)
   1c60c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1c610:	e0bffe17 	ldw	r2,-8(fp)
   1c614:	0080100e 	bge	zero,r2,1c658 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   1c618:	e0bfff17 	ldw	r2,-4(fp)
   1c61c:	1090000c 	andi	r2,r2,16384
   1c620:	1000101e 	bne	r2,zero,1c664 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1c624:	0001883a 	nop
   1c628:	e0bffc17 	ldw	r2,-16(fp)
   1c62c:	10c00d17 	ldw	r3,52(r2)
   1c630:	e0bff517 	ldw	r2,-44(fp)
   1c634:	1880051e 	bne	r3,r2,1c64c <altera_avalon_jtag_uart_write+0x1b8>
   1c638:	e0bffc17 	ldw	r2,-16(fp)
   1c63c:	10c00917 	ldw	r3,36(r2)
   1c640:	e0bffc17 	ldw	r2,-16(fp)
   1c644:	10800117 	ldw	r2,4(r2)
   1c648:	18bff736 	bltu	r3,r2,1c628 <__alt_mem_nios_system_shared_memory+0xfffdc628>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1c64c:	e0bffc17 	ldw	r2,-16(fp)
   1c650:	10800917 	ldw	r2,36(r2)
   1c654:	1000051e 	bne	r2,zero,1c66c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   1c658:	e0bffe17 	ldw	r2,-8(fp)
   1c65c:	00bfd016 	blt	zero,r2,1c5a0 <__alt_mem_nios_system_shared_memory+0xfffdc5a0>
   1c660:	00000306 	br	1c670 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1c664:	0001883a 	nop
   1c668:	00000106 	br	1c670 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1c66c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   1c670:	e0fffd17 	ldw	r3,-12(fp)
   1c674:	e0bff717 	ldw	r2,-36(fp)
   1c678:	18800426 	beq	r3,r2,1c68c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1c67c:	e0fffd17 	ldw	r3,-12(fp)
   1c680:	e0bff717 	ldw	r2,-36(fp)
   1c684:	1885c83a 	sub	r2,r3,r2
   1c688:	00001706 	br	1c6e8 <altera_avalon_jtag_uart_write+0x254>
  else if (flags & O_NONBLOCK)
   1c68c:	e0bfff17 	ldw	r2,-4(fp)
   1c690:	1090000c 	andi	r2,r2,16384
   1c694:	10000226 	beq	r2,zero,1c6a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   1c698:	00bffd44 	movi	r2,-11
   1c69c:	00001206 	br	1c6e8 <altera_avalon_jtag_uart_write+0x254>
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
  else if (sp->host_inactive >= sp->timeout) {
   1c6a0:	e0bffc17 	ldw	r2,-16(fp)
   1c6a4:	10c00917 	ldw	r3,36(r2)
   1c6a8:	e0bffc17 	ldw	r2,-16(fp)
   1c6ac:	10800117 	ldw	r2,4(r2)
   1c6b0:	18800c36 	bltu	r3,r2,1c6e4 <altera_avalon_jtag_uart_write+0x250>
    /* 
     * Reset the software FIFO, hardware FIFO could not be reset.
     * Just throw away characters without reporting error. 
     */
    sp->tx_out = sp->tx_in = 0;
   1c6b4:	e0bffc17 	ldw	r2,-16(fp)
   1c6b8:	10000c15 	stw	zero,48(r2)
   1c6bc:	e0bffc17 	ldw	r2,-16(fp)
   1c6c0:	10c00c17 	ldw	r3,48(r2)
   1c6c4:	e0bffc17 	ldw	r2,-16(fp)
   1c6c8:	10c00d15 	stw	r3,52(r2)
    return ptr - start + count;
   1c6cc:	e0fffd17 	ldw	r3,-12(fp)
   1c6d0:	e0bff717 	ldw	r2,-36(fp)
   1c6d4:	1887c83a 	sub	r3,r3,r2
   1c6d8:	e0bffe17 	ldw	r2,-8(fp)
   1c6dc:	1885883a 	add	r2,r3,r2
   1c6e0:	00000106 	br	1c6e8 <altera_avalon_jtag_uart_write+0x254>
  }
#endif
  else
    return -EIO; /* Host not connected */
   1c6e4:	00bffec4 	movi	r2,-5
}
   1c6e8:	e037883a 	mov	sp,fp
   1c6ec:	dfc00117 	ldw	ra,4(sp)
   1c6f0:	df000017 	ldw	fp,0(sp)
   1c6f4:	dec00204 	addi	sp,sp,8
   1c6f8:	f800283a 	ret

0001c6fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1c6fc:	defffa04 	addi	sp,sp,-24
   1c700:	dfc00515 	stw	ra,20(sp)
   1c704:	df000415 	stw	fp,16(sp)
   1c708:	df000404 	addi	fp,sp,16
   1c70c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1c710:	0007883a 	mov	r3,zero
   1c714:	e0bfff17 	ldw	r2,-4(fp)
   1c718:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1c71c:	e0bfff17 	ldw	r2,-4(fp)
   1c720:	10800104 	addi	r2,r2,4
   1c724:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c728:	0005303a 	rdctl	r2,status
   1c72c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c730:	e0fffd17 	ldw	r3,-12(fp)
   1c734:	00bfff84 	movi	r2,-2
   1c738:	1884703a 	and	r2,r3,r2
   1c73c:	1001703a 	wrctl	status,r2
  
  return context;
   1c740:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1c744:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1c748:	001b8ec0 	call	1b8ec <alt_tick>
   1c74c:	e0bffc17 	ldw	r2,-16(fp)
   1c750:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c754:	e0bffe17 	ldw	r2,-8(fp)
   1c758:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1c75c:	0001883a 	nop
   1c760:	e037883a 	mov	sp,fp
   1c764:	dfc00117 	ldw	ra,4(sp)
   1c768:	df000017 	ldw	fp,0(sp)
   1c76c:	dec00204 	addi	sp,sp,8
   1c770:	f800283a 	ret

0001c774 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1c774:	defff804 	addi	sp,sp,-32
   1c778:	dfc00715 	stw	ra,28(sp)
   1c77c:	df000615 	stw	fp,24(sp)
   1c780:	df000604 	addi	fp,sp,24
   1c784:	e13ffc15 	stw	r4,-16(fp)
   1c788:	e17ffd15 	stw	r5,-12(fp)
   1c78c:	e1bffe15 	stw	r6,-8(fp)
   1c790:	e1ffff15 	stw	r7,-4(fp)
   1c794:	e0bfff17 	ldw	r2,-4(fp)
   1c798:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1c79c:	d0a71617 	ldw	r2,-25512(gp)
   1c7a0:	1000021e 	bne	r2,zero,1c7ac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1c7a4:	e0bffb17 	ldw	r2,-20(fp)
   1c7a8:	d0a71615 	stw	r2,-25512(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1c7ac:	e0bffc17 	ldw	r2,-16(fp)
   1c7b0:	10800104 	addi	r2,r2,4
   1c7b4:	00c001c4 	movi	r3,7
   1c7b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1c7bc:	d8000015 	stw	zero,0(sp)
   1c7c0:	e1fffc17 	ldw	r7,-16(fp)
   1c7c4:	018000b4 	movhi	r6,2
   1c7c8:	31b1bf04 	addi	r6,r6,-14596
   1c7cc:	e17ffe17 	ldw	r5,-8(fp)
   1c7d0:	e13ffd17 	ldw	r4,-12(fp)
   1c7d4:	001d7880 	call	1d788 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1c7d8:	0001883a 	nop
   1c7dc:	e037883a 	mov	sp,fp
   1c7e0:	dfc00117 	ldw	ra,4(sp)
   1c7e4:	df000017 	ldw	fp,0(sp)
   1c7e8:	dec00204 	addi	sp,sp,8
   1c7ec:	f800283a 	ret

0001c7f0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1c7f0:	defffa04 	addi	sp,sp,-24
   1c7f4:	dfc00515 	stw	ra,20(sp)
   1c7f8:	df000415 	stw	fp,16(sp)
   1c7fc:	df000404 	addi	fp,sp,16
   1c800:	e13ffd15 	stw	r4,-12(fp)
   1c804:	e17ffe15 	stw	r5,-8(fp)
   1c808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1c80c:	e0bffd17 	ldw	r2,-12(fp)
   1c810:	10800017 	ldw	r2,0(r2)
   1c814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   1c818:	e0bffc17 	ldw	r2,-16(fp)
   1c81c:	10c00a04 	addi	r3,r2,40
   1c820:	e0bffd17 	ldw	r2,-12(fp)
   1c824:	10800217 	ldw	r2,8(r2)
   1c828:	100f883a 	mov	r7,r2
   1c82c:	e1bfff17 	ldw	r6,-4(fp)
   1c830:	e17ffe17 	ldw	r5,-8(fp)
   1c834:	1809883a 	mov	r4,r3
   1c838:	001cd040 	call	1cd04 <altera_avalon_uart_read>
      fd->fd_flags);
}
   1c83c:	e037883a 	mov	sp,fp
   1c840:	dfc00117 	ldw	ra,4(sp)
   1c844:	df000017 	ldw	fp,0(sp)
   1c848:	dec00204 	addi	sp,sp,8
   1c84c:	f800283a 	ret

0001c850 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1c850:	defffa04 	addi	sp,sp,-24
   1c854:	dfc00515 	stw	ra,20(sp)
   1c858:	df000415 	stw	fp,16(sp)
   1c85c:	df000404 	addi	fp,sp,16
   1c860:	e13ffd15 	stw	r4,-12(fp)
   1c864:	e17ffe15 	stw	r5,-8(fp)
   1c868:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1c86c:	e0bffd17 	ldw	r2,-12(fp)
   1c870:	10800017 	ldw	r2,0(r2)
   1c874:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   1c878:	e0bffc17 	ldw	r2,-16(fp)
   1c87c:	10c00a04 	addi	r3,r2,40
   1c880:	e0bffd17 	ldw	r2,-12(fp)
   1c884:	10800217 	ldw	r2,8(r2)
   1c888:	100f883a 	mov	r7,r2
   1c88c:	e1bfff17 	ldw	r6,-4(fp)
   1c890:	e17ffe17 	ldw	r5,-8(fp)
   1c894:	1809883a 	mov	r4,r3
   1c898:	001cf1c0 	call	1cf1c <altera_avalon_uart_write>
      fd->fd_flags);
}
   1c89c:	e037883a 	mov	sp,fp
   1c8a0:	dfc00117 	ldw	ra,4(sp)
   1c8a4:	df000017 	ldw	fp,0(sp)
   1c8a8:	dec00204 	addi	sp,sp,8
   1c8ac:	f800283a 	ret

0001c8b0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   1c8b0:	defffc04 	addi	sp,sp,-16
   1c8b4:	dfc00315 	stw	ra,12(sp)
   1c8b8:	df000215 	stw	fp,8(sp)
   1c8bc:	df000204 	addi	fp,sp,8
   1c8c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   1c8c4:	e0bfff17 	ldw	r2,-4(fp)
   1c8c8:	10800017 	ldw	r2,0(r2)
   1c8cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   1c8d0:	e0bffe17 	ldw	r2,-8(fp)
   1c8d4:	10c00a04 	addi	r3,r2,40
   1c8d8:	e0bfff17 	ldw	r2,-4(fp)
   1c8dc:	10800217 	ldw	r2,8(r2)
   1c8e0:	100b883a 	mov	r5,r2
   1c8e4:	1809883a 	mov	r4,r3
   1c8e8:	001cc740 	call	1cc74 <altera_avalon_uart_close>
}
   1c8ec:	e037883a 	mov	sp,fp
   1c8f0:	dfc00117 	ldw	ra,4(sp)
   1c8f4:	df000017 	ldw	fp,0(sp)
   1c8f8:	dec00204 	addi	sp,sp,8
   1c8fc:	f800283a 	ret

0001c900 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   1c900:	defff804 	addi	sp,sp,-32
   1c904:	dfc00715 	stw	ra,28(sp)
   1c908:	df000615 	stw	fp,24(sp)
   1c90c:	df000604 	addi	fp,sp,24
   1c910:	e13ffd15 	stw	r4,-12(fp)
   1c914:	e17ffe15 	stw	r5,-8(fp)
   1c918:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   1c91c:	e0bffd17 	ldw	r2,-12(fp)
   1c920:	10800017 	ldw	r2,0(r2)
   1c924:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   1c928:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1c92c:	1000041e 	bne	r2,zero,1c940 <altera_avalon_uart_init+0x40>
   1c930:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1c934:	1000021e 	bne	r2,zero,1c940 <altera_avalon_uart_init+0x40>
   1c938:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   1c93c:	10000226 	beq	r2,zero,1c948 <altera_avalon_uart_init+0x48>
   1c940:	00800044 	movi	r2,1
   1c944:	00000106 	br	1c94c <altera_avalon_uart_init+0x4c>
   1c948:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   1c94c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   1c950:	e0bffc17 	ldw	r2,-16(fp)
   1c954:	10000f1e 	bne	r2,zero,1c994 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   1c958:	e0bffd17 	ldw	r2,-12(fp)
   1c95c:	00c32004 	movi	r3,3200
   1c960:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   1c964:	e0bffb17 	ldw	r2,-20(fp)
   1c968:	10800304 	addi	r2,r2,12
   1c96c:	e0fffd17 	ldw	r3,-12(fp)
   1c970:	18c00117 	ldw	r3,4(r3)
   1c974:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   1c978:	d8000015 	stw	zero,0(sp)
   1c97c:	e1fffd17 	ldw	r7,-12(fp)
   1c980:	018000b4 	movhi	r6,2
   1c984:	31b26b04 	addi	r6,r6,-13908
   1c988:	e17fff17 	ldw	r5,-4(fp)
   1c98c:	e13ffe17 	ldw	r4,-8(fp)
   1c990:	001d7880 	call	1d788 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   1c994:	0001883a 	nop
   1c998:	e037883a 	mov	sp,fp
   1c99c:	dfc00117 	ldw	ra,4(sp)
   1c9a0:	df000017 	ldw	fp,0(sp)
   1c9a4:	dec00204 	addi	sp,sp,8
   1c9a8:	f800283a 	ret

0001c9ac <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   1c9ac:	defffa04 	addi	sp,sp,-24
   1c9b0:	dfc00515 	stw	ra,20(sp)
   1c9b4:	df000415 	stw	fp,16(sp)
   1c9b8:	df000404 	addi	fp,sp,16
   1c9bc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   1c9c0:	e0bfff17 	ldw	r2,-4(fp)
   1c9c4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   1c9c8:	e0bffc17 	ldw	r2,-16(fp)
   1c9cc:	10800017 	ldw	r2,0(r2)
   1c9d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   1c9d4:	e0bffd17 	ldw	r2,-12(fp)
   1c9d8:	10800204 	addi	r2,r2,8
   1c9dc:	10800037 	ldwio	r2,0(r2)
   1c9e0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   1c9e4:	e0bffd17 	ldw	r2,-12(fp)
   1c9e8:	10800204 	addi	r2,r2,8
   1c9ec:	0007883a 	mov	r3,zero
   1c9f0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   1c9f4:	e0bffd17 	ldw	r2,-12(fp)
   1c9f8:	10800204 	addi	r2,r2,8
   1c9fc:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   1ca00:	e0bffe17 	ldw	r2,-8(fp)
   1ca04:	1080200c 	andi	r2,r2,128
   1ca08:	10000326 	beq	r2,zero,1ca18 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   1ca0c:	e17ffe17 	ldw	r5,-8(fp)
   1ca10:	e13ffc17 	ldw	r4,-16(fp)
   1ca14:	001ca480 	call	1ca48 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   1ca18:	e0bffe17 	ldw	r2,-8(fp)
   1ca1c:	1081100c 	andi	r2,r2,1088
   1ca20:	10000326 	beq	r2,zero,1ca30 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   1ca24:	e17ffe17 	ldw	r5,-8(fp)
   1ca28:	e13ffc17 	ldw	r4,-16(fp)
   1ca2c:	001cb2c0 	call	1cb2c <altera_avalon_uart_txirq>
  }
  

}
   1ca30:	0001883a 	nop
   1ca34:	e037883a 	mov	sp,fp
   1ca38:	dfc00117 	ldw	ra,4(sp)
   1ca3c:	df000017 	ldw	fp,0(sp)
   1ca40:	dec00204 	addi	sp,sp,8
   1ca44:	f800283a 	ret

0001ca48 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   1ca48:	defffc04 	addi	sp,sp,-16
   1ca4c:	df000315 	stw	fp,12(sp)
   1ca50:	df000304 	addi	fp,sp,12
   1ca54:	e13ffe15 	stw	r4,-8(fp)
   1ca58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   1ca5c:	e0bfff17 	ldw	r2,-4(fp)
   1ca60:	108000cc 	andi	r2,r2,3
   1ca64:	10002c1e 	bne	r2,zero,1cb18 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   1ca68:	e0bffe17 	ldw	r2,-8(fp)
   1ca6c:	10800317 	ldw	r2,12(r2)
   1ca70:	e0bffe17 	ldw	r2,-8(fp)
   1ca74:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1ca78:	e0bffe17 	ldw	r2,-8(fp)
   1ca7c:	10800317 	ldw	r2,12(r2)
   1ca80:	10800044 	addi	r2,r2,1
   1ca84:	10800fcc 	andi	r2,r2,63
   1ca88:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   1ca8c:	e0bffe17 	ldw	r2,-8(fp)
   1ca90:	10800317 	ldw	r2,12(r2)
   1ca94:	e0fffe17 	ldw	r3,-8(fp)
   1ca98:	18c00017 	ldw	r3,0(r3)
   1ca9c:	18c00037 	ldwio	r3,0(r3)
   1caa0:	1809883a 	mov	r4,r3
   1caa4:	e0fffe17 	ldw	r3,-8(fp)
   1caa8:	1885883a 	add	r2,r3,r2
   1caac:	10800704 	addi	r2,r2,28
   1cab0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   1cab4:	e0bffe17 	ldw	r2,-8(fp)
   1cab8:	e0fffd17 	ldw	r3,-12(fp)
   1cabc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1cac0:	e0bffe17 	ldw	r2,-8(fp)
   1cac4:	10800317 	ldw	r2,12(r2)
   1cac8:	10800044 	addi	r2,r2,1
   1cacc:	10800fcc 	andi	r2,r2,63
   1cad0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   1cad4:	e0bffe17 	ldw	r2,-8(fp)
   1cad8:	10c00217 	ldw	r3,8(r2)
   1cadc:	e0bffd17 	ldw	r2,-12(fp)
   1cae0:	18800e1e 	bne	r3,r2,1cb1c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1cae4:	e0bffe17 	ldw	r2,-8(fp)
   1cae8:	10c00117 	ldw	r3,4(r2)
   1caec:	00bfdfc4 	movi	r2,-129
   1caf0:	1886703a 	and	r3,r3,r2
   1caf4:	e0bffe17 	ldw	r2,-8(fp)
   1caf8:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   1cafc:	e0bffe17 	ldw	r2,-8(fp)
   1cb00:	10800017 	ldw	r2,0(r2)
   1cb04:	10800304 	addi	r2,r2,12
   1cb08:	e0fffe17 	ldw	r3,-8(fp)
   1cb0c:	18c00117 	ldw	r3,4(r3)
   1cb10:	10c00035 	stwio	r3,0(r2)
   1cb14:	00000106 	br	1cb1c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   1cb18:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   1cb1c:	e037883a 	mov	sp,fp
   1cb20:	df000017 	ldw	fp,0(sp)
   1cb24:	dec00104 	addi	sp,sp,4
   1cb28:	f800283a 	ret

0001cb2c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   1cb2c:	defffb04 	addi	sp,sp,-20
   1cb30:	df000415 	stw	fp,16(sp)
   1cb34:	df000404 	addi	fp,sp,16
   1cb38:	e13ffc15 	stw	r4,-16(fp)
   1cb3c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   1cb40:	e0bffc17 	ldw	r2,-16(fp)
   1cb44:	10c00417 	ldw	r3,16(r2)
   1cb48:	e0bffc17 	ldw	r2,-16(fp)
   1cb4c:	10800517 	ldw	r2,20(r2)
   1cb50:	18803226 	beq	r3,r2,1cc1c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1cb54:	e0bffc17 	ldw	r2,-16(fp)
   1cb58:	10800617 	ldw	r2,24(r2)
   1cb5c:	1080008c 	andi	r2,r2,2
   1cb60:	10000326 	beq	r2,zero,1cb70 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1cb64:	e0bffd17 	ldw	r2,-12(fp)
   1cb68:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   1cb6c:	10001d26 	beq	r2,zero,1cbe4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   1cb70:	e0bffc17 	ldw	r2,-16(fp)
   1cb74:	10800417 	ldw	r2,16(r2)
   1cb78:	e0bffc17 	ldw	r2,-16(fp)
   1cb7c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   1cb80:	e0bffc17 	ldw	r2,-16(fp)
   1cb84:	10800017 	ldw	r2,0(r2)
   1cb88:	10800104 	addi	r2,r2,4
   1cb8c:	e0fffc17 	ldw	r3,-16(fp)
   1cb90:	18c00417 	ldw	r3,16(r3)
   1cb94:	e13ffc17 	ldw	r4,-16(fp)
   1cb98:	20c7883a 	add	r3,r4,r3
   1cb9c:	18c01704 	addi	r3,r3,92
   1cba0:	18c00003 	ldbu	r3,0(r3)
   1cba4:	18c03fcc 	andi	r3,r3,255
   1cba8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   1cbac:	e0bffc17 	ldw	r2,-16(fp)
   1cbb0:	10800417 	ldw	r2,16(r2)
   1cbb4:	10800044 	addi	r2,r2,1
   1cbb8:	e0fffc17 	ldw	r3,-16(fp)
   1cbbc:	18800415 	stw	r2,16(r3)
   1cbc0:	10c00fcc 	andi	r3,r2,63
   1cbc4:	e0bffc17 	ldw	r2,-16(fp)
   1cbc8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1cbcc:	e0bffc17 	ldw	r2,-16(fp)
   1cbd0:	10800117 	ldw	r2,4(r2)
   1cbd4:	10c01014 	ori	r3,r2,64
   1cbd8:	e0bffc17 	ldw	r2,-16(fp)
   1cbdc:	10c00115 	stw	r3,4(r2)
   1cbe0:	00000e06 	br	1cc1c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   1cbe4:	e0bffc17 	ldw	r2,-16(fp)
   1cbe8:	10800017 	ldw	r2,0(r2)
   1cbec:	10800204 	addi	r2,r2,8
   1cbf0:	10800037 	ldwio	r2,0(r2)
   1cbf4:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   1cbf8:	e0bffd17 	ldw	r2,-12(fp)
   1cbfc:	1082000c 	andi	r2,r2,2048
   1cc00:	1000061e 	bne	r2,zero,1cc1c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   1cc04:	e0bffc17 	ldw	r2,-16(fp)
   1cc08:	10c00117 	ldw	r3,4(r2)
   1cc0c:	00bfefc4 	movi	r2,-65
   1cc10:	1886703a 	and	r3,r3,r2
   1cc14:	e0bffc17 	ldw	r2,-16(fp)
   1cc18:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   1cc1c:	e0bffc17 	ldw	r2,-16(fp)
   1cc20:	10c00417 	ldw	r3,16(r2)
   1cc24:	e0bffc17 	ldw	r2,-16(fp)
   1cc28:	10800517 	ldw	r2,20(r2)
   1cc2c:	1880061e 	bne	r3,r2,1cc48 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1cc30:	e0bffc17 	ldw	r2,-16(fp)
   1cc34:	10c00117 	ldw	r3,4(r2)
   1cc38:	00beefc4 	movi	r2,-1089
   1cc3c:	1886703a 	and	r3,r3,r2
   1cc40:	e0bffc17 	ldw	r2,-16(fp)
   1cc44:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1cc48:	e0bffc17 	ldw	r2,-16(fp)
   1cc4c:	10800017 	ldw	r2,0(r2)
   1cc50:	10800304 	addi	r2,r2,12
   1cc54:	e0fffc17 	ldw	r3,-16(fp)
   1cc58:	18c00117 	ldw	r3,4(r3)
   1cc5c:	10c00035 	stwio	r3,0(r2)
}
   1cc60:	0001883a 	nop
   1cc64:	e037883a 	mov	sp,fp
   1cc68:	df000017 	ldw	fp,0(sp)
   1cc6c:	dec00104 	addi	sp,sp,4
   1cc70:	f800283a 	ret

0001cc74 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   1cc74:	defffd04 	addi	sp,sp,-12
   1cc78:	df000215 	stw	fp,8(sp)
   1cc7c:	df000204 	addi	fp,sp,8
   1cc80:	e13ffe15 	stw	r4,-8(fp)
   1cc84:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   1cc88:	00000506 	br	1cca0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1cc8c:	e0bfff17 	ldw	r2,-4(fp)
   1cc90:	1090000c 	andi	r2,r2,16384
   1cc94:	10000226 	beq	r2,zero,1cca0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1cc98:	00bffd44 	movi	r2,-11
   1cc9c:	00000606 	br	1ccb8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   1cca0:	e0bffe17 	ldw	r2,-8(fp)
   1cca4:	10c00417 	ldw	r3,16(r2)
   1cca8:	e0bffe17 	ldw	r2,-8(fp)
   1ccac:	10800517 	ldw	r2,20(r2)
   1ccb0:	18bff61e 	bne	r3,r2,1cc8c <__alt_mem_nios_system_shared_memory+0xfffdcc8c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1ccb4:	0005883a 	mov	r2,zero
}
   1ccb8:	e037883a 	mov	sp,fp
   1ccbc:	df000017 	ldw	fp,0(sp)
   1ccc0:	dec00104 	addi	sp,sp,4
   1ccc4:	f800283a 	ret

0001ccc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ccc8:	defffe04 	addi	sp,sp,-8
   1cccc:	dfc00115 	stw	ra,4(sp)
   1ccd0:	df000015 	stw	fp,0(sp)
   1ccd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ccd8:	d0a01017 	ldw	r2,-32704(gp)
   1ccdc:	10000326 	beq	r2,zero,1ccec <alt_get_errno+0x24>
   1cce0:	d0a01017 	ldw	r2,-32704(gp)
   1cce4:	103ee83a 	callr	r2
   1cce8:	00000106 	br	1ccf0 <alt_get_errno+0x28>
   1ccec:	d0a70c04 	addi	r2,gp,-25552
}
   1ccf0:	e037883a 	mov	sp,fp
   1ccf4:	dfc00117 	ldw	ra,4(sp)
   1ccf8:	df000017 	ldw	fp,0(sp)
   1ccfc:	dec00204 	addi	sp,sp,8
   1cd00:	f800283a 	ret

0001cd04 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   1cd04:	defff204 	addi	sp,sp,-56
   1cd08:	dfc00d15 	stw	ra,52(sp)
   1cd0c:	df000c15 	stw	fp,48(sp)
   1cd10:	df000c04 	addi	fp,sp,48
   1cd14:	e13ffc15 	stw	r4,-16(fp)
   1cd18:	e17ffd15 	stw	r5,-12(fp)
   1cd1c:	e1bffe15 	stw	r6,-8(fp)
   1cd20:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   1cd24:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   1cd28:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   1cd2c:	e0bfff17 	ldw	r2,-4(fp)
   1cd30:	1090000c 	andi	r2,r2,16384
   1cd34:	1005003a 	cmpeq	r2,r2,zero
   1cd38:	10803fcc 	andi	r2,r2,255
   1cd3c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   1cd40:	00001306 	br	1cd90 <altera_avalon_uart_read+0x8c>
    {
      count++;
   1cd44:	e0bff517 	ldw	r2,-44(fp)
   1cd48:	10800044 	addi	r2,r2,1
   1cd4c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   1cd50:	e0bffd17 	ldw	r2,-12(fp)
   1cd54:	10c00044 	addi	r3,r2,1
   1cd58:	e0fffd15 	stw	r3,-12(fp)
   1cd5c:	e0fffc17 	ldw	r3,-16(fp)
   1cd60:	18c00217 	ldw	r3,8(r3)
   1cd64:	e13ffc17 	ldw	r4,-16(fp)
   1cd68:	20c7883a 	add	r3,r4,r3
   1cd6c:	18c00704 	addi	r3,r3,28
   1cd70:	18c00003 	ldbu	r3,0(r3)
   1cd74:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   1cd78:	e0bffc17 	ldw	r2,-16(fp)
   1cd7c:	10800217 	ldw	r2,8(r2)
   1cd80:	10800044 	addi	r2,r2,1
   1cd84:	10c00fcc 	andi	r3,r2,63
   1cd88:	e0bffc17 	ldw	r2,-16(fp)
   1cd8c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   1cd90:	e0fff517 	ldw	r3,-44(fp)
   1cd94:	e0bffe17 	ldw	r2,-8(fp)
   1cd98:	1880050e 	bge	r3,r2,1cdb0 <altera_avalon_uart_read+0xac>
   1cd9c:	e0bffc17 	ldw	r2,-16(fp)
   1cda0:	10c00217 	ldw	r3,8(r2)
   1cda4:	e0bffc17 	ldw	r2,-16(fp)
   1cda8:	10800317 	ldw	r2,12(r2)
   1cdac:	18bfe51e 	bne	r3,r2,1cd44 <__alt_mem_nios_system_shared_memory+0xfffdcd44>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   1cdb0:	e0bff517 	ldw	r2,-44(fp)
   1cdb4:	1000251e 	bne	r2,zero,1ce4c <altera_avalon_uart_read+0x148>
   1cdb8:	e0bffc17 	ldw	r2,-16(fp)
   1cdbc:	10c00217 	ldw	r3,8(r2)
   1cdc0:	e0bffc17 	ldw	r2,-16(fp)
   1cdc4:	10800317 	ldw	r2,12(r2)
   1cdc8:	1880201e 	bne	r3,r2,1ce4c <altera_avalon_uart_read+0x148>
    {
      if (!block)
   1cdcc:	e0bff617 	ldw	r2,-40(fp)
   1cdd0:	1000071e 	bne	r2,zero,1cdf0 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   1cdd4:	001ccc80 	call	1ccc8 <alt_get_errno>
   1cdd8:	1007883a 	mov	r3,r2
   1cddc:	008002c4 	movi	r2,11
   1cde0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   1cde4:	00800044 	movi	r2,1
   1cde8:	e0bff405 	stb	r2,-48(fp)
        break;
   1cdec:	00001b06 	br	1ce5c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cdf0:	0005303a 	rdctl	r2,status
   1cdf4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cdf8:	e0fff917 	ldw	r3,-28(fp)
   1cdfc:	00bfff84 	movi	r2,-2
   1ce00:	1884703a 	and	r2,r3,r2
   1ce04:	1001703a 	wrctl	status,r2
  
  return context;
   1ce08:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   1ce0c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1ce10:	e0bffc17 	ldw	r2,-16(fp)
   1ce14:	10800117 	ldw	r2,4(r2)
   1ce18:	10c02014 	ori	r3,r2,128
   1ce1c:	e0bffc17 	ldw	r2,-16(fp)
   1ce20:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1ce24:	e0bffc17 	ldw	r2,-16(fp)
   1ce28:	10800017 	ldw	r2,0(r2)
   1ce2c:	10800304 	addi	r2,r2,12
   1ce30:	e0fffc17 	ldw	r3,-16(fp)
   1ce34:	18c00117 	ldw	r3,4(r3)
   1ce38:	10c00035 	stwio	r3,0(r2)
   1ce3c:	e0bff817 	ldw	r2,-32(fp)
   1ce40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ce44:	e0bffa17 	ldw	r2,-24(fp)
   1ce48:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   1ce4c:	e0bff517 	ldw	r2,-44(fp)
   1ce50:	1000021e 	bne	r2,zero,1ce5c <altera_avalon_uart_read+0x158>
   1ce54:	e0bffe17 	ldw	r2,-8(fp)
   1ce58:	103fcd1e 	bne	r2,zero,1cd90 <__alt_mem_nios_system_shared_memory+0xfffdcd90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ce5c:	0005303a 	rdctl	r2,status
   1ce60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ce64:	e0fffb17 	ldw	r3,-20(fp)
   1ce68:	00bfff84 	movi	r2,-2
   1ce6c:	1884703a 	and	r2,r3,r2
   1ce70:	1001703a 	wrctl	status,r2
  
  return context;
   1ce74:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   1ce78:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   1ce7c:	e0bffc17 	ldw	r2,-16(fp)
   1ce80:	10800117 	ldw	r2,4(r2)
   1ce84:	10c02014 	ori	r3,r2,128
   1ce88:	e0bffc17 	ldw	r2,-16(fp)
   1ce8c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1ce90:	e0bffc17 	ldw	r2,-16(fp)
   1ce94:	10800017 	ldw	r2,0(r2)
   1ce98:	10800304 	addi	r2,r2,12
   1ce9c:	e0fffc17 	ldw	r3,-16(fp)
   1cea0:	18c00117 	ldw	r3,4(r3)
   1cea4:	10c00035 	stwio	r3,0(r2)
   1cea8:	e0bff817 	ldw	r2,-32(fp)
   1ceac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ceb0:	e0bff717 	ldw	r2,-36(fp)
   1ceb4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   1ceb8:	e0bff403 	ldbu	r2,-48(fp)
   1cebc:	10000226 	beq	r2,zero,1cec8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   1cec0:	00bffd44 	movi	r2,-11
   1cec4:	00000106 	br	1cecc <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   1cec8:	e0bff517 	ldw	r2,-44(fp)
  }
}
   1cecc:	e037883a 	mov	sp,fp
   1ced0:	dfc00117 	ldw	ra,4(sp)
   1ced4:	df000017 	ldw	fp,0(sp)
   1ced8:	dec00204 	addi	sp,sp,8
   1cedc:	f800283a 	ret

0001cee0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1cee0:	defffe04 	addi	sp,sp,-8
   1cee4:	dfc00115 	stw	ra,4(sp)
   1cee8:	df000015 	stw	fp,0(sp)
   1ceec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1cef0:	d0a01017 	ldw	r2,-32704(gp)
   1cef4:	10000326 	beq	r2,zero,1cf04 <alt_get_errno+0x24>
   1cef8:	d0a01017 	ldw	r2,-32704(gp)
   1cefc:	103ee83a 	callr	r2
   1cf00:	00000106 	br	1cf08 <alt_get_errno+0x28>
   1cf04:	d0a70c04 	addi	r2,gp,-25552
}
   1cf08:	e037883a 	mov	sp,fp
   1cf0c:	dfc00117 	ldw	ra,4(sp)
   1cf10:	df000017 	ldw	fp,0(sp)
   1cf14:	dec00204 	addi	sp,sp,8
   1cf18:	f800283a 	ret

0001cf1c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   1cf1c:	defff204 	addi	sp,sp,-56
   1cf20:	dfc00d15 	stw	ra,52(sp)
   1cf24:	df000c15 	stw	fp,48(sp)
   1cf28:	df000c04 	addi	fp,sp,48
   1cf2c:	e13ffc15 	stw	r4,-16(fp)
   1cf30:	e17ffd15 	stw	r5,-12(fp)
   1cf34:	e1bffe15 	stw	r6,-8(fp)
   1cf38:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   1cf3c:	e0bffe17 	ldw	r2,-8(fp)
   1cf40:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   1cf44:	e0bfff17 	ldw	r2,-4(fp)
   1cf48:	1090000c 	andi	r2,r2,16384
   1cf4c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1cf50:	00003c06 	br	1d044 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   1cf54:	e0bffc17 	ldw	r2,-16(fp)
   1cf58:	10800517 	ldw	r2,20(r2)
   1cf5c:	10800044 	addi	r2,r2,1
   1cf60:	10800fcc 	andi	r2,r2,63
   1cf64:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   1cf68:	e0bffc17 	ldw	r2,-16(fp)
   1cf6c:	10c00417 	ldw	r3,16(r2)
   1cf70:	e0bff717 	ldw	r2,-36(fp)
   1cf74:	1880221e 	bne	r3,r2,1d000 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   1cf78:	e0bff517 	ldw	r2,-44(fp)
   1cf7c:	10000526 	beq	r2,zero,1cf94 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   1cf80:	001cee00 	call	1cee0 <alt_get_errno>
   1cf84:	1007883a 	mov	r3,r2
   1cf88:	008002c4 	movi	r2,11
   1cf8c:	18800015 	stw	r2,0(r3)
        break;
   1cf90:	00002e06 	br	1d04c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cf94:	0005303a 	rdctl	r2,status
   1cf98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cf9c:	e0fff917 	ldw	r3,-28(fp)
   1cfa0:	00bfff84 	movi	r2,-2
   1cfa4:	1884703a 	and	r2,r3,r2
   1cfa8:	1001703a 	wrctl	status,r2
  
  return context;
   1cfac:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   1cfb0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1cfb4:	e0bffc17 	ldw	r2,-16(fp)
   1cfb8:	10800117 	ldw	r2,4(r2)
   1cfbc:	10c11014 	ori	r3,r2,1088
   1cfc0:	e0bffc17 	ldw	r2,-16(fp)
   1cfc4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1cfc8:	e0bffc17 	ldw	r2,-16(fp)
   1cfcc:	10800017 	ldw	r2,0(r2)
   1cfd0:	10800304 	addi	r2,r2,12
   1cfd4:	e0fffc17 	ldw	r3,-16(fp)
   1cfd8:	18c00117 	ldw	r3,4(r3)
   1cfdc:	10c00035 	stwio	r3,0(r2)
   1cfe0:	e0bff817 	ldw	r2,-32(fp)
   1cfe4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cfe8:	e0bff617 	ldw	r2,-40(fp)
   1cfec:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   1cff0:	e0bffc17 	ldw	r2,-16(fp)
   1cff4:	10c00417 	ldw	r3,16(r2)
   1cff8:	e0bff717 	ldw	r2,-36(fp)
   1cffc:	18bffc26 	beq	r3,r2,1cff0 <__alt_mem_nios_system_shared_memory+0xfffdcff0>
      }
    }

    count--;
   1d000:	e0bff417 	ldw	r2,-48(fp)
   1d004:	10bfffc4 	addi	r2,r2,-1
   1d008:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   1d00c:	e0bffc17 	ldw	r2,-16(fp)
   1d010:	10c00517 	ldw	r3,20(r2)
   1d014:	e0bffd17 	ldw	r2,-12(fp)
   1d018:	11000044 	addi	r4,r2,1
   1d01c:	e13ffd15 	stw	r4,-12(fp)
   1d020:	10800003 	ldbu	r2,0(r2)
   1d024:	1009883a 	mov	r4,r2
   1d028:	e0bffc17 	ldw	r2,-16(fp)
   1d02c:	10c5883a 	add	r2,r2,r3
   1d030:	10801704 	addi	r2,r2,92
   1d034:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   1d038:	e0bffc17 	ldw	r2,-16(fp)
   1d03c:	e0fff717 	ldw	r3,-36(fp)
   1d040:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   1d044:	e0bff417 	ldw	r2,-48(fp)
   1d048:	103fc21e 	bne	r2,zero,1cf54 <__alt_mem_nios_system_shared_memory+0xfffdcf54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d04c:	0005303a 	rdctl	r2,status
   1d050:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d054:	e0fffb17 	ldw	r3,-20(fp)
   1d058:	00bfff84 	movi	r2,-2
   1d05c:	1884703a 	and	r2,r3,r2
   1d060:	1001703a 	wrctl	status,r2
  
  return context;
   1d064:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   1d068:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   1d06c:	e0bffc17 	ldw	r2,-16(fp)
   1d070:	10800117 	ldw	r2,4(r2)
   1d074:	10c11014 	ori	r3,r2,1088
   1d078:	e0bffc17 	ldw	r2,-16(fp)
   1d07c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   1d080:	e0bffc17 	ldw	r2,-16(fp)
   1d084:	10800017 	ldw	r2,0(r2)
   1d088:	10800304 	addi	r2,r2,12
   1d08c:	e0fffc17 	ldw	r3,-16(fp)
   1d090:	18c00117 	ldw	r3,4(r3)
   1d094:	10c00035 	stwio	r3,0(r2)
   1d098:	e0bff817 	ldw	r2,-32(fp)
   1d09c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d0a0:	e0bffa17 	ldw	r2,-24(fp)
   1d0a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   1d0a8:	e0fffe17 	ldw	r3,-8(fp)
   1d0ac:	e0bff417 	ldw	r2,-48(fp)
   1d0b0:	1885c83a 	sub	r2,r3,r2
}
   1d0b4:	e037883a 	mov	sp,fp
   1d0b8:	dfc00117 	ldw	ra,4(sp)
   1d0bc:	df000017 	ldw	fp,0(sp)
   1d0c0:	dec00204 	addi	sp,sp,8
   1d0c4:	f800283a 	ret

0001d0c8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1d0c8:	defff504 	addi	sp,sp,-44
   1d0cc:	df000a15 	stw	fp,40(sp)
   1d0d0:	df000a04 	addi	fp,sp,40
   1d0d4:	e13ffc15 	stw	r4,-16(fp)
   1d0d8:	e17ffd15 	stw	r5,-12(fp)
   1d0dc:	e1bffe15 	stw	r6,-8(fp)
   1d0e0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1d0e4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1d0e8:	d0a71617 	ldw	r2,-25512(gp)
  
  if (alt_ticks_per_second ())
   1d0ec:	10003c26 	beq	r2,zero,1d1e0 <alt_alarm_start+0x118>
  {
    if (alarm)
   1d0f0:	e0bffc17 	ldw	r2,-16(fp)
   1d0f4:	10003826 	beq	r2,zero,1d1d8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1d0f8:	e0bffc17 	ldw	r2,-16(fp)
   1d0fc:	e0fffe17 	ldw	r3,-8(fp)
   1d100:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1d104:	e0bffc17 	ldw	r2,-16(fp)
   1d108:	e0ffff17 	ldw	r3,-4(fp)
   1d10c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d110:	0005303a 	rdctl	r2,status
   1d114:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d118:	e0fff917 	ldw	r3,-28(fp)
   1d11c:	00bfff84 	movi	r2,-2
   1d120:	1884703a 	and	r2,r3,r2
   1d124:	1001703a 	wrctl	status,r2
  
  return context;
   1d128:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1d12c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1d130:	d0a71717 	ldw	r2,-25508(gp)
      
      current_nticks = alt_nticks();
   1d134:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1d138:	e0fffd17 	ldw	r3,-12(fp)
   1d13c:	e0bff617 	ldw	r2,-40(fp)
   1d140:	1885883a 	add	r2,r3,r2
   1d144:	10c00044 	addi	r3,r2,1
   1d148:	e0bffc17 	ldw	r2,-16(fp)
   1d14c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1d150:	e0bffc17 	ldw	r2,-16(fp)
   1d154:	10c00217 	ldw	r3,8(r2)
   1d158:	e0bff617 	ldw	r2,-40(fp)
   1d15c:	1880042e 	bgeu	r3,r2,1d170 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1d160:	e0bffc17 	ldw	r2,-16(fp)
   1d164:	00c00044 	movi	r3,1
   1d168:	10c00405 	stb	r3,16(r2)
   1d16c:	00000206 	br	1d178 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1d170:	e0bffc17 	ldw	r2,-16(fp)
   1d174:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1d178:	e0bffc17 	ldw	r2,-16(fp)
   1d17c:	d0e01204 	addi	r3,gp,-32696
   1d180:	e0fffa15 	stw	r3,-24(fp)
   1d184:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1d188:	e0bffb17 	ldw	r2,-20(fp)
   1d18c:	e0fffa17 	ldw	r3,-24(fp)
   1d190:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1d194:	e0bffa17 	ldw	r2,-24(fp)
   1d198:	10c00017 	ldw	r3,0(r2)
   1d19c:	e0bffb17 	ldw	r2,-20(fp)
   1d1a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1d1a4:	e0bffa17 	ldw	r2,-24(fp)
   1d1a8:	10800017 	ldw	r2,0(r2)
   1d1ac:	e0fffb17 	ldw	r3,-20(fp)
   1d1b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1d1b4:	e0bffa17 	ldw	r2,-24(fp)
   1d1b8:	e0fffb17 	ldw	r3,-20(fp)
   1d1bc:	10c00015 	stw	r3,0(r2)
   1d1c0:	e0bff817 	ldw	r2,-32(fp)
   1d1c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d1c8:	e0bff717 	ldw	r2,-36(fp)
   1d1cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1d1d0:	0005883a 	mov	r2,zero
   1d1d4:	00000306 	br	1d1e4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1d1d8:	00bffa84 	movi	r2,-22
   1d1dc:	00000106 	br	1d1e4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1d1e0:	00bfde84 	movi	r2,-134
  }
}
   1d1e4:	e037883a 	mov	sp,fp
   1d1e8:	df000017 	ldw	fp,0(sp)
   1d1ec:	dec00104 	addi	sp,sp,4
   1d1f0:	f800283a 	ret

0001d1f4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1d1f4:	defffa04 	addi	sp,sp,-24
   1d1f8:	dfc00515 	stw	ra,20(sp)
   1d1fc:	df000415 	stw	fp,16(sp)
   1d200:	df000404 	addi	fp,sp,16
   1d204:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   1d208:	00800244 	movi	r2,9
   1d20c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   1d210:	014003f4 	movhi	r5,15
   1d214:	29509004 	addi	r5,r5,16960
   1d218:	e13ffd17 	ldw	r4,-12(fp)
   1d21c:	00051580 	call	5158 <__mulsi3>
   1d220:	100b883a 	mov	r5,r2
   1d224:	0100bef4 	movhi	r4,763
   1d228:	213c2004 	addi	r4,r4,-3968
   1d22c:	000509c0 	call	509c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1d230:	100b883a 	mov	r5,r2
   1d234:	01200034 	movhi	r4,32768
   1d238:	213fffc4 	addi	r4,r4,-1
   1d23c:	000509c0 	call	509c <__udivsi3>
   1d240:	100b883a 	mov	r5,r2
   1d244:	e13fff17 	ldw	r4,-4(fp)
   1d248:	000509c0 	call	509c <__udivsi3>
   1d24c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1d250:	e0bffe17 	ldw	r2,-8(fp)
   1d254:	10002a26 	beq	r2,zero,1d300 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   1d258:	e03ffc15 	stw	zero,-16(fp)
   1d25c:	00001706 	br	1d2bc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1d260:	00a00034 	movhi	r2,32768
   1d264:	10bfffc4 	addi	r2,r2,-1
   1d268:	10bfffc4 	addi	r2,r2,-1
   1d26c:	103ffe1e 	bne	r2,zero,1d268 <__alt_mem_nios_system_shared_memory+0xfffdd268>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   1d270:	014003f4 	movhi	r5,15
   1d274:	29509004 	addi	r5,r5,16960
   1d278:	e13ffd17 	ldw	r4,-12(fp)
   1d27c:	00051580 	call	5158 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   1d280:	100b883a 	mov	r5,r2
   1d284:	0100bef4 	movhi	r4,763
   1d288:	213c2004 	addi	r4,r4,-3968
   1d28c:	000509c0 	call	509c <__udivsi3>
   1d290:	100b883a 	mov	r5,r2
   1d294:	01200034 	movhi	r4,32768
   1d298:	213fffc4 	addi	r4,r4,-1
   1d29c:	000509c0 	call	509c <__udivsi3>
   1d2a0:	1007883a 	mov	r3,r2
   1d2a4:	e0bfff17 	ldw	r2,-4(fp)
   1d2a8:	10c5c83a 	sub	r2,r2,r3
   1d2ac:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1d2b0:	e0bffc17 	ldw	r2,-16(fp)
   1d2b4:	10800044 	addi	r2,r2,1
   1d2b8:	e0bffc15 	stw	r2,-16(fp)
   1d2bc:	e0fffc17 	ldw	r3,-16(fp)
   1d2c0:	e0bffe17 	ldw	r2,-8(fp)
   1d2c4:	18bfe616 	blt	r3,r2,1d260 <__alt_mem_nios_system_shared_memory+0xfffdd260>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1d2c8:	014003f4 	movhi	r5,15
   1d2cc:	29509004 	addi	r5,r5,16960
   1d2d0:	e13ffd17 	ldw	r4,-12(fp)
   1d2d4:	00051580 	call	5158 <__mulsi3>
   1d2d8:	100b883a 	mov	r5,r2
   1d2dc:	0100bef4 	movhi	r4,763
   1d2e0:	213c2004 	addi	r4,r4,-3968
   1d2e4:	000509c0 	call	509c <__udivsi3>
   1d2e8:	e17fff17 	ldw	r5,-4(fp)
   1d2ec:	1009883a 	mov	r4,r2
   1d2f0:	00051580 	call	5158 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1d2f4:	10bfffc4 	addi	r2,r2,-1
   1d2f8:	103ffe1e 	bne	r2,zero,1d2f4 <__alt_mem_nios_system_shared_memory+0xfffdd2f4>
   1d2fc:	00000d06 	br	1d334 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   1d300:	014003f4 	movhi	r5,15
   1d304:	29509004 	addi	r5,r5,16960
   1d308:	e13ffd17 	ldw	r4,-12(fp)
   1d30c:	00051580 	call	5158 <__mulsi3>
   1d310:	100b883a 	mov	r5,r2
   1d314:	0100bef4 	movhi	r4,763
   1d318:	213c2004 	addi	r4,r4,-3968
   1d31c:	000509c0 	call	509c <__udivsi3>
   1d320:	e17fff17 	ldw	r5,-4(fp)
   1d324:	1009883a 	mov	r4,r2
   1d328:	00051580 	call	5158 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1d32c:	10bfffc4 	addi	r2,r2,-1
   1d330:	00bffe16 	blt	zero,r2,1d32c <__alt_mem_nios_system_shared_memory+0xfffdd32c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1d334:	0005883a 	mov	r2,zero
}
   1d338:	e037883a 	mov	sp,fp
   1d33c:	dfc00117 	ldw	ra,4(sp)
   1d340:	df000017 	ldw	fp,0(sp)
   1d344:	dec00204 	addi	sp,sp,8
   1d348:	f800283a 	ret

0001d34c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1d34c:	deffff04 	addi	sp,sp,-4
   1d350:	df000015 	stw	fp,0(sp)
   1d354:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1d358:	0001883a 	nop
   1d35c:	e037883a 	mov	sp,fp
   1d360:	df000017 	ldw	fp,0(sp)
   1d364:	dec00104 	addi	sp,sp,4
   1d368:	f800283a 	ret

0001d36c <alt_get_errno>:
   1d36c:	defffe04 	addi	sp,sp,-8
   1d370:	dfc00115 	stw	ra,4(sp)
   1d374:	df000015 	stw	fp,0(sp)
   1d378:	d839883a 	mov	fp,sp
   1d37c:	d0a01017 	ldw	r2,-32704(gp)
   1d380:	10000326 	beq	r2,zero,1d390 <alt_get_errno+0x24>
   1d384:	d0a01017 	ldw	r2,-32704(gp)
   1d388:	103ee83a 	callr	r2
   1d38c:	00000106 	br	1d394 <alt_get_errno+0x28>
   1d390:	d0a70c04 	addi	r2,gp,-25552
   1d394:	e037883a 	mov	sp,fp
   1d398:	dfc00117 	ldw	ra,4(sp)
   1d39c:	df000017 	ldw	fp,0(sp)
   1d3a0:	dec00204 	addi	sp,sp,8
   1d3a4:	f800283a 	ret

0001d3a8 <alt_dev_llist_insert>:
   1d3a8:	defffa04 	addi	sp,sp,-24
   1d3ac:	dfc00515 	stw	ra,20(sp)
   1d3b0:	df000415 	stw	fp,16(sp)
   1d3b4:	df000404 	addi	fp,sp,16
   1d3b8:	e13ffe15 	stw	r4,-8(fp)
   1d3bc:	e17fff15 	stw	r5,-4(fp)
   1d3c0:	e0bffe17 	ldw	r2,-8(fp)
   1d3c4:	10000326 	beq	r2,zero,1d3d4 <alt_dev_llist_insert+0x2c>
   1d3c8:	e0bffe17 	ldw	r2,-8(fp)
   1d3cc:	10800217 	ldw	r2,8(r2)
   1d3d0:	1000061e 	bne	r2,zero,1d3ec <alt_dev_llist_insert+0x44>
   1d3d4:	001d36c0 	call	1d36c <alt_get_errno>
   1d3d8:	1007883a 	mov	r3,r2
   1d3dc:	00800584 	movi	r2,22
   1d3e0:	18800015 	stw	r2,0(r3)
   1d3e4:	00bffa84 	movi	r2,-22
   1d3e8:	00001306 	br	1d438 <alt_dev_llist_insert+0x90>
   1d3ec:	e0bffe17 	ldw	r2,-8(fp)
   1d3f0:	e0ffff17 	ldw	r3,-4(fp)
   1d3f4:	e0fffc15 	stw	r3,-16(fp)
   1d3f8:	e0bffd15 	stw	r2,-12(fp)
   1d3fc:	e0bffd17 	ldw	r2,-12(fp)
   1d400:	e0fffc17 	ldw	r3,-16(fp)
   1d404:	10c00115 	stw	r3,4(r2)
   1d408:	e0bffc17 	ldw	r2,-16(fp)
   1d40c:	10c00017 	ldw	r3,0(r2)
   1d410:	e0bffd17 	ldw	r2,-12(fp)
   1d414:	10c00015 	stw	r3,0(r2)
   1d418:	e0bffc17 	ldw	r2,-16(fp)
   1d41c:	10800017 	ldw	r2,0(r2)
   1d420:	e0fffd17 	ldw	r3,-12(fp)
   1d424:	10c00115 	stw	r3,4(r2)
   1d428:	e0bffc17 	ldw	r2,-16(fp)
   1d42c:	e0fffd17 	ldw	r3,-12(fp)
   1d430:	10c00015 	stw	r3,0(r2)
   1d434:	0005883a 	mov	r2,zero
   1d438:	e037883a 	mov	sp,fp
   1d43c:	dfc00117 	ldw	ra,4(sp)
   1d440:	df000017 	ldw	fp,0(sp)
   1d444:	dec00204 	addi	sp,sp,8
   1d448:	f800283a 	ret

0001d44c <_do_ctors>:
   1d44c:	defffd04 	addi	sp,sp,-12
   1d450:	dfc00215 	stw	ra,8(sp)
   1d454:	df000115 	stw	fp,4(sp)
   1d458:	df000104 	addi	fp,sp,4
   1d45c:	008000b4 	movhi	r2,2
   1d460:	10b7d704 	addi	r2,r2,-8356
   1d464:	e0bfff15 	stw	r2,-4(fp)
   1d468:	00000606 	br	1d484 <_do_ctors+0x38>
   1d46c:	e0bfff17 	ldw	r2,-4(fp)
   1d470:	10800017 	ldw	r2,0(r2)
   1d474:	103ee83a 	callr	r2
   1d478:	e0bfff17 	ldw	r2,-4(fp)
   1d47c:	10bfff04 	addi	r2,r2,-4
   1d480:	e0bfff15 	stw	r2,-4(fp)
   1d484:	e0ffff17 	ldw	r3,-4(fp)
   1d488:	008000b4 	movhi	r2,2
   1d48c:	10b7d804 	addi	r2,r2,-8352
   1d490:	18bff62e 	bgeu	r3,r2,1d46c <__alt_mem_nios_system_shared_memory+0xfffdd46c>
   1d494:	0001883a 	nop
   1d498:	e037883a 	mov	sp,fp
   1d49c:	dfc00117 	ldw	ra,4(sp)
   1d4a0:	df000017 	ldw	fp,0(sp)
   1d4a4:	dec00204 	addi	sp,sp,8
   1d4a8:	f800283a 	ret

0001d4ac <_do_dtors>:
   1d4ac:	defffd04 	addi	sp,sp,-12
   1d4b0:	dfc00215 	stw	ra,8(sp)
   1d4b4:	df000115 	stw	fp,4(sp)
   1d4b8:	df000104 	addi	fp,sp,4
   1d4bc:	008000b4 	movhi	r2,2
   1d4c0:	10b7d704 	addi	r2,r2,-8356
   1d4c4:	e0bfff15 	stw	r2,-4(fp)
   1d4c8:	00000606 	br	1d4e4 <_do_dtors+0x38>
   1d4cc:	e0bfff17 	ldw	r2,-4(fp)
   1d4d0:	10800017 	ldw	r2,0(r2)
   1d4d4:	103ee83a 	callr	r2
   1d4d8:	e0bfff17 	ldw	r2,-4(fp)
   1d4dc:	10bfff04 	addi	r2,r2,-4
   1d4e0:	e0bfff15 	stw	r2,-4(fp)
   1d4e4:	e0ffff17 	ldw	r3,-4(fp)
   1d4e8:	008000b4 	movhi	r2,2
   1d4ec:	10b7d804 	addi	r2,r2,-8352
   1d4f0:	18bff62e 	bgeu	r3,r2,1d4cc <__alt_mem_nios_system_shared_memory+0xfffdd4cc>
   1d4f4:	0001883a 	nop
   1d4f8:	e037883a 	mov	sp,fp
   1d4fc:	dfc00117 	ldw	ra,4(sp)
   1d500:	df000017 	ldw	fp,0(sp)
   1d504:	dec00204 	addi	sp,sp,8
   1d508:	f800283a 	ret

0001d50c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1d50c:	defffa04 	addi	sp,sp,-24
   1d510:	dfc00515 	stw	ra,20(sp)
   1d514:	df000415 	stw	fp,16(sp)
   1d518:	df000404 	addi	fp,sp,16
   1d51c:	e13ffe15 	stw	r4,-8(fp)
   1d520:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1d524:	e0bfff17 	ldw	r2,-4(fp)
   1d528:	10800017 	ldw	r2,0(r2)
   1d52c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1d530:	e13ffe17 	ldw	r4,-8(fp)
   1d534:	000ba8c0 	call	ba8c <strlen>
   1d538:	10800044 	addi	r2,r2,1
   1d53c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d540:	00000d06 	br	1d578 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1d544:	e0bffc17 	ldw	r2,-16(fp)
   1d548:	10800217 	ldw	r2,8(r2)
   1d54c:	e0fffd17 	ldw	r3,-12(fp)
   1d550:	180d883a 	mov	r6,r3
   1d554:	e17ffe17 	ldw	r5,-8(fp)
   1d558:	1009883a 	mov	r4,r2
   1d55c:	0014fc40 	call	14fc4 <memcmp>
   1d560:	1000021e 	bne	r2,zero,1d56c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1d564:	e0bffc17 	ldw	r2,-16(fp)
   1d568:	00000706 	br	1d588 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1d56c:	e0bffc17 	ldw	r2,-16(fp)
   1d570:	10800017 	ldw	r2,0(r2)
   1d574:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1d578:	e0fffc17 	ldw	r3,-16(fp)
   1d57c:	e0bfff17 	ldw	r2,-4(fp)
   1d580:	18bff01e 	bne	r3,r2,1d544 <__alt_mem_nios_system_shared_memory+0xfffdd544>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1d584:	0005883a 	mov	r2,zero
}
   1d588:	e037883a 	mov	sp,fp
   1d58c:	dfc00117 	ldw	ra,4(sp)
   1d590:	df000017 	ldw	fp,0(sp)
   1d594:	dec00204 	addi	sp,sp,8
   1d598:	f800283a 	ret

0001d59c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1d59c:	defffb04 	addi	sp,sp,-20
   1d5a0:	dfc00415 	stw	ra,16(sp)
   1d5a4:	df000315 	stw	fp,12(sp)
   1d5a8:	df000304 	addi	fp,sp,12
   1d5ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1d5b0:	d0a00b17 	ldw	r2,-32724(gp)
   1d5b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d5b8:	00003106 	br	1d680 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1d5bc:	e0bffd17 	ldw	r2,-12(fp)
   1d5c0:	10800217 	ldw	r2,8(r2)
   1d5c4:	1009883a 	mov	r4,r2
   1d5c8:	000ba8c0 	call	ba8c <strlen>
   1d5cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1d5d0:	e0bffd17 	ldw	r2,-12(fp)
   1d5d4:	10c00217 	ldw	r3,8(r2)
   1d5d8:	e0bffe17 	ldw	r2,-8(fp)
   1d5dc:	10bfffc4 	addi	r2,r2,-1
   1d5e0:	1885883a 	add	r2,r3,r2
   1d5e4:	10800003 	ldbu	r2,0(r2)
   1d5e8:	10803fcc 	andi	r2,r2,255
   1d5ec:	1080201c 	xori	r2,r2,128
   1d5f0:	10bfe004 	addi	r2,r2,-128
   1d5f4:	10800bd8 	cmpnei	r2,r2,47
   1d5f8:	1000031e 	bne	r2,zero,1d608 <alt_find_file+0x6c>
    {
      len -= 1;
   1d5fc:	e0bffe17 	ldw	r2,-8(fp)
   1d600:	10bfffc4 	addi	r2,r2,-1
   1d604:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1d608:	e0bffe17 	ldw	r2,-8(fp)
   1d60c:	e0ffff17 	ldw	r3,-4(fp)
   1d610:	1885883a 	add	r2,r3,r2
   1d614:	10800003 	ldbu	r2,0(r2)
   1d618:	10803fcc 	andi	r2,r2,255
   1d61c:	1080201c 	xori	r2,r2,128
   1d620:	10bfe004 	addi	r2,r2,-128
   1d624:	10800be0 	cmpeqi	r2,r2,47
   1d628:	1000081e 	bne	r2,zero,1d64c <alt_find_file+0xb0>
   1d62c:	e0bffe17 	ldw	r2,-8(fp)
   1d630:	e0ffff17 	ldw	r3,-4(fp)
   1d634:	1885883a 	add	r2,r3,r2
   1d638:	10800003 	ldbu	r2,0(r2)
   1d63c:	10803fcc 	andi	r2,r2,255
   1d640:	1080201c 	xori	r2,r2,128
   1d644:	10bfe004 	addi	r2,r2,-128
   1d648:	10000a1e 	bne	r2,zero,1d674 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1d64c:	e0bffd17 	ldw	r2,-12(fp)
   1d650:	10800217 	ldw	r2,8(r2)
   1d654:	e0fffe17 	ldw	r3,-8(fp)
   1d658:	180d883a 	mov	r6,r3
   1d65c:	e17fff17 	ldw	r5,-4(fp)
   1d660:	1009883a 	mov	r4,r2
   1d664:	0014fc40 	call	14fc4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1d668:	1000021e 	bne	r2,zero,1d674 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1d66c:	e0bffd17 	ldw	r2,-12(fp)
   1d670:	00000706 	br	1d690 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1d674:	e0bffd17 	ldw	r2,-12(fp)
   1d678:	10800017 	ldw	r2,0(r2)
   1d67c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1d680:	e0fffd17 	ldw	r3,-12(fp)
   1d684:	d0a00b04 	addi	r2,gp,-32724
   1d688:	18bfcc1e 	bne	r3,r2,1d5bc <__alt_mem_nios_system_shared_memory+0xfffdd5bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1d68c:	0005883a 	mov	r2,zero
}
   1d690:	e037883a 	mov	sp,fp
   1d694:	dfc00117 	ldw	ra,4(sp)
   1d698:	df000017 	ldw	fp,0(sp)
   1d69c:	dec00204 	addi	sp,sp,8
   1d6a0:	f800283a 	ret

0001d6a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1d6a4:	defffa04 	addi	sp,sp,-24
   1d6a8:	dfc00515 	stw	ra,20(sp)
   1d6ac:	df000415 	stw	fp,16(sp)
   1d6b0:	dc000315 	stw	r16,12(sp)
   1d6b4:	df000404 	addi	fp,sp,16
   1d6b8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1d6bc:	00bffa04 	movi	r2,-24
   1d6c0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1d6c4:	e03ffc15 	stw	zero,-16(fp)
   1d6c8:	00001d06 	br	1d740 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   1d6cc:	040000b4 	movhi	r16,2
   1d6d0:	843d9304 	addi	r16,r16,-2484
   1d6d4:	e0bffc17 	ldw	r2,-16(fp)
   1d6d8:	01400304 	movi	r5,12
   1d6dc:	1009883a 	mov	r4,r2
   1d6e0:	00051580 	call	5158 <__mulsi3>
   1d6e4:	8085883a 	add	r2,r16,r2
   1d6e8:	10800017 	ldw	r2,0(r2)
   1d6ec:	1000111e 	bne	r2,zero,1d734 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1d6f0:	040000b4 	movhi	r16,2
   1d6f4:	843d9304 	addi	r16,r16,-2484
   1d6f8:	e0bffc17 	ldw	r2,-16(fp)
   1d6fc:	01400304 	movi	r5,12
   1d700:	1009883a 	mov	r4,r2
   1d704:	00051580 	call	5158 <__mulsi3>
   1d708:	8085883a 	add	r2,r16,r2
   1d70c:	e0fffe17 	ldw	r3,-8(fp)
   1d710:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1d714:	d0e00f17 	ldw	r3,-32708(gp)
   1d718:	e0bffc17 	ldw	r2,-16(fp)
   1d71c:	1880020e 	bge	r3,r2,1d728 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1d720:	e0bffc17 	ldw	r2,-16(fp)
   1d724:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
   1d728:	e0bffc17 	ldw	r2,-16(fp)
   1d72c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1d730:	00000606 	br	1d74c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1d734:	e0bffc17 	ldw	r2,-16(fp)
   1d738:	10800044 	addi	r2,r2,1
   1d73c:	e0bffc15 	stw	r2,-16(fp)
   1d740:	e0bffc17 	ldw	r2,-16(fp)
   1d744:	10800810 	cmplti	r2,r2,32
   1d748:	103fe01e 	bne	r2,zero,1d6cc <__alt_mem_nios_system_shared_memory+0xfffdd6cc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   1d74c:	e0bffd17 	ldw	r2,-12(fp)
}
   1d750:	e6ffff04 	addi	sp,fp,-4
   1d754:	dfc00217 	ldw	ra,8(sp)
   1d758:	df000117 	ldw	fp,4(sp)
   1d75c:	dc000017 	ldw	r16,0(sp)
   1d760:	dec00304 	addi	sp,sp,12
   1d764:	f800283a 	ret

0001d768 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1d768:	deffff04 	addi	sp,sp,-4
   1d76c:	df000015 	stw	fp,0(sp)
   1d770:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   1d774:	0001883a 	nop
   1d778:	e037883a 	mov	sp,fp
   1d77c:	df000017 	ldw	fp,0(sp)
   1d780:	dec00104 	addi	sp,sp,4
   1d784:	f800283a 	ret

0001d788 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1d788:	defff904 	addi	sp,sp,-28
   1d78c:	dfc00615 	stw	ra,24(sp)
   1d790:	df000515 	stw	fp,20(sp)
   1d794:	df000504 	addi	fp,sp,20
   1d798:	e13ffc15 	stw	r4,-16(fp)
   1d79c:	e17ffd15 	stw	r5,-12(fp)
   1d7a0:	e1bffe15 	stw	r6,-8(fp)
   1d7a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   1d7a8:	e0800217 	ldw	r2,8(fp)
   1d7ac:	d8800015 	stw	r2,0(sp)
   1d7b0:	e1ffff17 	ldw	r7,-4(fp)
   1d7b4:	e1bffe17 	ldw	r6,-8(fp)
   1d7b8:	e17ffd17 	ldw	r5,-12(fp)
   1d7bc:	e13ffc17 	ldw	r4,-16(fp)
   1d7c0:	001d9380 	call	1d938 <alt_iic_isr_register>
}  
   1d7c4:	e037883a 	mov	sp,fp
   1d7c8:	dfc00117 	ldw	ra,4(sp)
   1d7cc:	df000017 	ldw	fp,0(sp)
   1d7d0:	dec00204 	addi	sp,sp,8
   1d7d4:	f800283a 	ret

0001d7d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1d7d8:	defff904 	addi	sp,sp,-28
   1d7dc:	df000615 	stw	fp,24(sp)
   1d7e0:	df000604 	addi	fp,sp,24
   1d7e4:	e13ffe15 	stw	r4,-8(fp)
   1d7e8:	e17fff15 	stw	r5,-4(fp)
   1d7ec:	e0bfff17 	ldw	r2,-4(fp)
   1d7f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d7f4:	0005303a 	rdctl	r2,status
   1d7f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d7fc:	e0fffb17 	ldw	r3,-20(fp)
   1d800:	00bfff84 	movi	r2,-2
   1d804:	1884703a 	and	r2,r3,r2
   1d808:	1001703a 	wrctl	status,r2
  
  return context;
   1d80c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1d810:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   1d814:	00c00044 	movi	r3,1
   1d818:	e0bffa17 	ldw	r2,-24(fp)
   1d81c:	1884983a 	sll	r2,r3,r2
   1d820:	1007883a 	mov	r3,r2
   1d824:	d0a71817 	ldw	r2,-25504(gp)
   1d828:	1884b03a 	or	r2,r3,r2
   1d82c:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1d830:	d0a71817 	ldw	r2,-25504(gp)
   1d834:	100170fa 	wrctl	ienable,r2
   1d838:	e0bffc17 	ldw	r2,-16(fp)
   1d83c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d840:	e0bffd17 	ldw	r2,-12(fp)
   1d844:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1d848:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   1d84c:	0001883a 	nop
}
   1d850:	e037883a 	mov	sp,fp
   1d854:	df000017 	ldw	fp,0(sp)
   1d858:	dec00104 	addi	sp,sp,4
   1d85c:	f800283a 	ret

0001d860 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1d860:	defff904 	addi	sp,sp,-28
   1d864:	df000615 	stw	fp,24(sp)
   1d868:	df000604 	addi	fp,sp,24
   1d86c:	e13ffe15 	stw	r4,-8(fp)
   1d870:	e17fff15 	stw	r5,-4(fp)
   1d874:	e0bfff17 	ldw	r2,-4(fp)
   1d878:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d87c:	0005303a 	rdctl	r2,status
   1d880:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d884:	e0fffb17 	ldw	r3,-20(fp)
   1d888:	00bfff84 	movi	r2,-2
   1d88c:	1884703a 	and	r2,r3,r2
   1d890:	1001703a 	wrctl	status,r2
  
  return context;
   1d894:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1d898:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   1d89c:	00c00044 	movi	r3,1
   1d8a0:	e0bffa17 	ldw	r2,-24(fp)
   1d8a4:	1884983a 	sll	r2,r3,r2
   1d8a8:	0084303a 	nor	r2,zero,r2
   1d8ac:	1007883a 	mov	r3,r2
   1d8b0:	d0a71817 	ldw	r2,-25504(gp)
   1d8b4:	1884703a 	and	r2,r3,r2
   1d8b8:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1d8bc:	d0a71817 	ldw	r2,-25504(gp)
   1d8c0:	100170fa 	wrctl	ienable,r2
   1d8c4:	e0bffc17 	ldw	r2,-16(fp)
   1d8c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d8cc:	e0bffd17 	ldw	r2,-12(fp)
   1d8d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1d8d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1d8d8:	0001883a 	nop
}
   1d8dc:	e037883a 	mov	sp,fp
   1d8e0:	df000017 	ldw	fp,0(sp)
   1d8e4:	dec00104 	addi	sp,sp,4
   1d8e8:	f800283a 	ret

0001d8ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1d8ec:	defffc04 	addi	sp,sp,-16
   1d8f0:	df000315 	stw	fp,12(sp)
   1d8f4:	df000304 	addi	fp,sp,12
   1d8f8:	e13ffe15 	stw	r4,-8(fp)
   1d8fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1d900:	000530fa 	rdctl	r2,ienable
   1d904:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1d908:	00c00044 	movi	r3,1
   1d90c:	e0bfff17 	ldw	r2,-4(fp)
   1d910:	1884983a 	sll	r2,r3,r2
   1d914:	1007883a 	mov	r3,r2
   1d918:	e0bffd17 	ldw	r2,-12(fp)
   1d91c:	1884703a 	and	r2,r3,r2
   1d920:	1004c03a 	cmpne	r2,r2,zero
   1d924:	10803fcc 	andi	r2,r2,255
}
   1d928:	e037883a 	mov	sp,fp
   1d92c:	df000017 	ldw	fp,0(sp)
   1d930:	dec00104 	addi	sp,sp,4
   1d934:	f800283a 	ret

0001d938 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1d938:	defff504 	addi	sp,sp,-44
   1d93c:	dfc00a15 	stw	ra,40(sp)
   1d940:	df000915 	stw	fp,36(sp)
   1d944:	df000904 	addi	fp,sp,36
   1d948:	e13ffc15 	stw	r4,-16(fp)
   1d94c:	e17ffd15 	stw	r5,-12(fp)
   1d950:	e1bffe15 	stw	r6,-8(fp)
   1d954:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1d958:	00bffa84 	movi	r2,-22
   1d95c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1d960:	e0bffd17 	ldw	r2,-12(fp)
   1d964:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1d968:	e0bff817 	ldw	r2,-32(fp)
   1d96c:	10800808 	cmpgei	r2,r2,32
   1d970:	1000271e 	bne	r2,zero,1da10 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d974:	0005303a 	rdctl	r2,status
   1d978:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d97c:	e0fffb17 	ldw	r3,-20(fp)
   1d980:	00bfff84 	movi	r2,-2
   1d984:	1884703a 	and	r2,r3,r2
   1d988:	1001703a 	wrctl	status,r2
  
  return context;
   1d98c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1d990:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   1d994:	008000b4 	movhi	r2,2
   1d998:	10898f04 	addi	r2,r2,9788
   1d99c:	e0fff817 	ldw	r3,-32(fp)
   1d9a0:	180690fa 	slli	r3,r3,3
   1d9a4:	10c5883a 	add	r2,r2,r3
   1d9a8:	e0fffe17 	ldw	r3,-8(fp)
   1d9ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1d9b0:	008000b4 	movhi	r2,2
   1d9b4:	10898f04 	addi	r2,r2,9788
   1d9b8:	e0fff817 	ldw	r3,-32(fp)
   1d9bc:	180690fa 	slli	r3,r3,3
   1d9c0:	10c5883a 	add	r2,r2,r3
   1d9c4:	10800104 	addi	r2,r2,4
   1d9c8:	e0ffff17 	ldw	r3,-4(fp)
   1d9cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1d9d0:	e0bffe17 	ldw	r2,-8(fp)
   1d9d4:	10000526 	beq	r2,zero,1d9ec <alt_iic_isr_register+0xb4>
   1d9d8:	e0bff817 	ldw	r2,-32(fp)
   1d9dc:	100b883a 	mov	r5,r2
   1d9e0:	e13ffc17 	ldw	r4,-16(fp)
   1d9e4:	001d7d80 	call	1d7d8 <alt_ic_irq_enable>
   1d9e8:	00000406 	br	1d9fc <alt_iic_isr_register+0xc4>
   1d9ec:	e0bff817 	ldw	r2,-32(fp)
   1d9f0:	100b883a 	mov	r5,r2
   1d9f4:	e13ffc17 	ldw	r4,-16(fp)
   1d9f8:	001d8600 	call	1d860 <alt_ic_irq_disable>
   1d9fc:	e0bff715 	stw	r2,-36(fp)
   1da00:	e0bffa17 	ldw	r2,-24(fp)
   1da04:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da08:	e0bff917 	ldw	r2,-28(fp)
   1da0c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   1da10:	e0bff717 	ldw	r2,-36(fp)
}
   1da14:	e037883a 	mov	sp,fp
   1da18:	dfc00117 	ldw	ra,4(sp)
   1da1c:	df000017 	ldw	fp,0(sp)
   1da20:	dec00204 	addi	sp,sp,8
   1da24:	f800283a 	ret

0001da28 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1da28:	defff804 	addi	sp,sp,-32
   1da2c:	dfc00715 	stw	ra,28(sp)
   1da30:	df000615 	stw	fp,24(sp)
   1da34:	dc000515 	stw	r16,20(sp)
   1da38:	df000604 	addi	fp,sp,24
   1da3c:	e13ffb15 	stw	r4,-20(fp)
   1da40:	e17ffc15 	stw	r5,-16(fp)
   1da44:	e1bffd15 	stw	r6,-12(fp)
   1da48:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   1da4c:	e1bffe17 	ldw	r6,-8(fp)
   1da50:	e17ffd17 	ldw	r5,-12(fp)
   1da54:	e13ffc17 	ldw	r4,-16(fp)
   1da58:	001b4800 	call	1b480 <open>
   1da5c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   1da60:	e0bffa17 	ldw	r2,-24(fp)
   1da64:	10002216 	blt	r2,zero,1daf0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1da68:	040000b4 	movhi	r16,2
   1da6c:	843d9304 	addi	r16,r16,-2484
   1da70:	e0bffa17 	ldw	r2,-24(fp)
   1da74:	01400304 	movi	r5,12
   1da78:	1009883a 	mov	r4,r2
   1da7c:	00051580 	call	5158 <__mulsi3>
   1da80:	8085883a 	add	r2,r16,r2
   1da84:	10c00017 	ldw	r3,0(r2)
   1da88:	e0bffb17 	ldw	r2,-20(fp)
   1da8c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1da90:	040000b4 	movhi	r16,2
   1da94:	843d9304 	addi	r16,r16,-2484
   1da98:	e0bffa17 	ldw	r2,-24(fp)
   1da9c:	01400304 	movi	r5,12
   1daa0:	1009883a 	mov	r4,r2
   1daa4:	00051580 	call	5158 <__mulsi3>
   1daa8:	8085883a 	add	r2,r16,r2
   1daac:	10800104 	addi	r2,r2,4
   1dab0:	10c00017 	ldw	r3,0(r2)
   1dab4:	e0bffb17 	ldw	r2,-20(fp)
   1dab8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1dabc:	040000b4 	movhi	r16,2
   1dac0:	843d9304 	addi	r16,r16,-2484
   1dac4:	e0bffa17 	ldw	r2,-24(fp)
   1dac8:	01400304 	movi	r5,12
   1dacc:	1009883a 	mov	r4,r2
   1dad0:	00051580 	call	5158 <__mulsi3>
   1dad4:	8085883a 	add	r2,r16,r2
   1dad8:	10800204 	addi	r2,r2,8
   1dadc:	10c00017 	ldw	r3,0(r2)
   1dae0:	e0bffb17 	ldw	r2,-20(fp)
   1dae4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1dae8:	e13ffa17 	ldw	r4,-24(fp)
   1daec:	001b71c0 	call	1b71c <alt_release_fd>
  }
} 
   1daf0:	0001883a 	nop
   1daf4:	e6ffff04 	addi	sp,fp,-4
   1daf8:	dfc00217 	ldw	ra,8(sp)
   1dafc:	df000117 	ldw	fp,4(sp)
   1db00:	dc000017 	ldw	r16,0(sp)
   1db04:	dec00304 	addi	sp,sp,12
   1db08:	f800283a 	ret

0001db0c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1db0c:	defffb04 	addi	sp,sp,-20
   1db10:	dfc00415 	stw	ra,16(sp)
   1db14:	df000315 	stw	fp,12(sp)
   1db18:	df000304 	addi	fp,sp,12
   1db1c:	e13ffd15 	stw	r4,-12(fp)
   1db20:	e17ffe15 	stw	r5,-8(fp)
   1db24:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1db28:	01c07fc4 	movi	r7,511
   1db2c:	01800044 	movi	r6,1
   1db30:	e17ffd17 	ldw	r5,-12(fp)
   1db34:	010000b4 	movhi	r4,2
   1db38:	213d9604 	addi	r4,r4,-2472
   1db3c:	001da280 	call	1da28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1db40:	01c07fc4 	movi	r7,511
   1db44:	000d883a 	mov	r6,zero
   1db48:	e17ffe17 	ldw	r5,-8(fp)
   1db4c:	010000b4 	movhi	r4,2
   1db50:	213d9304 	addi	r4,r4,-2484
   1db54:	001da280 	call	1da28 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1db58:	01c07fc4 	movi	r7,511
   1db5c:	01800044 	movi	r6,1
   1db60:	e17fff17 	ldw	r5,-4(fp)
   1db64:	010000b4 	movhi	r4,2
   1db68:	213d9904 	addi	r4,r4,-2460
   1db6c:	001da280 	call	1da28 <alt_open_fd>
}  
   1db70:	0001883a 	nop
   1db74:	e037883a 	mov	sp,fp
   1db78:	dfc00117 	ldw	ra,4(sp)
   1db7c:	df000017 	ldw	fp,0(sp)
   1db80:	dec00204 	addi	sp,sp,8
   1db84:	f800283a 	ret

0001db88 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1db88:	deffff04 	addi	sp,sp,-4
   1db8c:	df000015 	stw	fp,0(sp)
   1db90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1db94:	000170fa 	wrctl	ienable,zero
}
   1db98:	0001883a 	nop
   1db9c:	e037883a 	mov	sp,fp
   1dba0:	df000017 	ldw	fp,0(sp)
   1dba4:	dec00104 	addi	sp,sp,4
   1dba8:	f800283a 	ret

0001dbac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1dbac:	defffe04 	addi	sp,sp,-8
   1dbb0:	df000115 	stw	fp,4(sp)
   1dbb4:	df000104 	addi	fp,sp,4
   1dbb8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1dbbc:	e0bfff17 	ldw	r2,-4(fp)
   1dbc0:	10bffe84 	addi	r2,r2,-6
   1dbc4:	10c00428 	cmpgeui	r3,r2,16
   1dbc8:	18001a1e 	bne	r3,zero,1dc34 <alt_exception_cause_generated_bad_addr+0x88>
   1dbcc:	100690ba 	slli	r3,r2,2
   1dbd0:	008000b4 	movhi	r2,2
   1dbd4:	10b6f904 	addi	r2,r2,-9244
   1dbd8:	1885883a 	add	r2,r3,r2
   1dbdc:	10800017 	ldw	r2,0(r2)
   1dbe0:	1000683a 	jmp	r2
   1dbe4:	0001dc24 	muli	zero,zero,1904
   1dbe8:	0001dc24 	muli	zero,zero,1904
   1dbec:	0001dc34 	movhi	zero,1904
   1dbf0:	0001dc34 	movhi	zero,1904
   1dbf4:	0001dc34 	movhi	zero,1904
   1dbf8:	0001dc24 	muli	zero,zero,1904
   1dbfc:	0001dc2c 	andhi	zero,zero,1904
   1dc00:	0001dc34 	movhi	zero,1904
   1dc04:	0001dc24 	muli	zero,zero,1904
   1dc08:	0001dc24 	muli	zero,zero,1904
   1dc0c:	0001dc34 	movhi	zero,1904
   1dc10:	0001dc24 	muli	zero,zero,1904
   1dc14:	0001dc2c 	andhi	zero,zero,1904
   1dc18:	0001dc34 	movhi	zero,1904
   1dc1c:	0001dc34 	movhi	zero,1904
   1dc20:	0001dc24 	muli	zero,zero,1904
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1dc24:	00800044 	movi	r2,1
   1dc28:	00000306 	br	1dc38 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1dc2c:	0005883a 	mov	r2,zero
   1dc30:	00000106 	br	1dc38 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1dc34:	0005883a 	mov	r2,zero
  }
}
   1dc38:	e037883a 	mov	sp,fp
   1dc3c:	df000017 	ldw	fp,0(sp)
   1dc40:	dec00104 	addi	sp,sp,4
   1dc44:	f800283a 	ret

0001dc48 <atexit>:
   1dc48:	200b883a 	mov	r5,r4
   1dc4c:	000f883a 	mov	r7,zero
   1dc50:	000d883a 	mov	r6,zero
   1dc54:	0009883a 	mov	r4,zero
   1dc58:	001dc941 	jmpi	1dc94 <__register_exitproc>

0001dc5c <exit>:
   1dc5c:	defffe04 	addi	sp,sp,-8
   1dc60:	000b883a 	mov	r5,zero
   1dc64:	dc000015 	stw	r16,0(sp)
   1dc68:	dfc00115 	stw	ra,4(sp)
   1dc6c:	2021883a 	mov	r16,r4
   1dc70:	001ddac0 	call	1ddac <__call_exitprocs>
   1dc74:	008000b4 	movhi	r2,2
   1dc78:	10824104 	addi	r2,r2,2308
   1dc7c:	11000017 	ldw	r4,0(r2)
   1dc80:	20800f17 	ldw	r2,60(r4)
   1dc84:	10000126 	beq	r2,zero,1dc8c <exit+0x30>
   1dc88:	103ee83a 	callr	r2
   1dc8c:	8009883a 	mov	r4,r16
   1dc90:	001df2c0 	call	1df2c <_exit>

0001dc94 <__register_exitproc>:
   1dc94:	defffa04 	addi	sp,sp,-24
   1dc98:	dc000315 	stw	r16,12(sp)
   1dc9c:	040000b4 	movhi	r16,2
   1dca0:	84024104 	addi	r16,r16,2308
   1dca4:	80c00017 	ldw	r3,0(r16)
   1dca8:	dc400415 	stw	r17,16(sp)
   1dcac:	dfc00515 	stw	ra,20(sp)
   1dcb0:	18805217 	ldw	r2,328(r3)
   1dcb4:	2023883a 	mov	r17,r4
   1dcb8:	10003726 	beq	r2,zero,1dd98 <__register_exitproc+0x104>
   1dcbc:	10c00117 	ldw	r3,4(r2)
   1dcc0:	010007c4 	movi	r4,31
   1dcc4:	20c00e16 	blt	r4,r3,1dd00 <__register_exitproc+0x6c>
   1dcc8:	1a000044 	addi	r8,r3,1
   1dccc:	8800221e 	bne	r17,zero,1dd58 <__register_exitproc+0xc4>
   1dcd0:	18c00084 	addi	r3,r3,2
   1dcd4:	18c7883a 	add	r3,r3,r3
   1dcd8:	18c7883a 	add	r3,r3,r3
   1dcdc:	12000115 	stw	r8,4(r2)
   1dce0:	10c7883a 	add	r3,r2,r3
   1dce4:	19400015 	stw	r5,0(r3)
   1dce8:	0005883a 	mov	r2,zero
   1dcec:	dfc00517 	ldw	ra,20(sp)
   1dcf0:	dc400417 	ldw	r17,16(sp)
   1dcf4:	dc000317 	ldw	r16,12(sp)
   1dcf8:	dec00604 	addi	sp,sp,24
   1dcfc:	f800283a 	ret
   1dd00:	00800034 	movhi	r2,0
   1dd04:	10800004 	addi	r2,r2,0
   1dd08:	10002626 	beq	r2,zero,1dda4 <__register_exitproc+0x110>
   1dd0c:	01006404 	movi	r4,400
   1dd10:	d9400015 	stw	r5,0(sp)
   1dd14:	d9800115 	stw	r6,4(sp)
   1dd18:	d9c00215 	stw	r7,8(sp)
   1dd1c:	00000000 	call	0 <__reset>
   1dd20:	d9400017 	ldw	r5,0(sp)
   1dd24:	d9800117 	ldw	r6,4(sp)
   1dd28:	d9c00217 	ldw	r7,8(sp)
   1dd2c:	10001d26 	beq	r2,zero,1dda4 <__register_exitproc+0x110>
   1dd30:	81000017 	ldw	r4,0(r16)
   1dd34:	10000115 	stw	zero,4(r2)
   1dd38:	02000044 	movi	r8,1
   1dd3c:	22405217 	ldw	r9,328(r4)
   1dd40:	0007883a 	mov	r3,zero
   1dd44:	12400015 	stw	r9,0(r2)
   1dd48:	20805215 	stw	r2,328(r4)
   1dd4c:	10006215 	stw	zero,392(r2)
   1dd50:	10006315 	stw	zero,396(r2)
   1dd54:	883fde26 	beq	r17,zero,1dcd0 <__alt_mem_nios_system_shared_memory+0xfffddcd0>
   1dd58:	18c9883a 	add	r4,r3,r3
   1dd5c:	2109883a 	add	r4,r4,r4
   1dd60:	1109883a 	add	r4,r2,r4
   1dd64:	21802215 	stw	r6,136(r4)
   1dd68:	01800044 	movi	r6,1
   1dd6c:	12406217 	ldw	r9,392(r2)
   1dd70:	30cc983a 	sll	r6,r6,r3
   1dd74:	4992b03a 	or	r9,r9,r6
   1dd78:	12406215 	stw	r9,392(r2)
   1dd7c:	21c04215 	stw	r7,264(r4)
   1dd80:	01000084 	movi	r4,2
   1dd84:	893fd21e 	bne	r17,r4,1dcd0 <__alt_mem_nios_system_shared_memory+0xfffddcd0>
   1dd88:	11006317 	ldw	r4,396(r2)
   1dd8c:	218cb03a 	or	r6,r4,r6
   1dd90:	11806315 	stw	r6,396(r2)
   1dd94:	003fce06 	br	1dcd0 <__alt_mem_nios_system_shared_memory+0xfffddcd0>
   1dd98:	18805304 	addi	r2,r3,332
   1dd9c:	18805215 	stw	r2,328(r3)
   1dda0:	003fc606 	br	1dcbc <__alt_mem_nios_system_shared_memory+0xfffddcbc>
   1dda4:	00bfffc4 	movi	r2,-1
   1dda8:	003fd006 	br	1dcec <__alt_mem_nios_system_shared_memory+0xfffddcec>

0001ddac <__call_exitprocs>:
   1ddac:	defff504 	addi	sp,sp,-44
   1ddb0:	df000915 	stw	fp,36(sp)
   1ddb4:	dd400615 	stw	r21,24(sp)
   1ddb8:	dc800315 	stw	r18,12(sp)
   1ddbc:	dfc00a15 	stw	ra,40(sp)
   1ddc0:	ddc00815 	stw	r23,32(sp)
   1ddc4:	dd800715 	stw	r22,28(sp)
   1ddc8:	dd000515 	stw	r20,20(sp)
   1ddcc:	dcc00415 	stw	r19,16(sp)
   1ddd0:	dc400215 	stw	r17,8(sp)
   1ddd4:	dc000115 	stw	r16,4(sp)
   1ddd8:	d9000015 	stw	r4,0(sp)
   1dddc:	2839883a 	mov	fp,r5
   1dde0:	04800044 	movi	r18,1
   1dde4:	057fffc4 	movi	r21,-1
   1dde8:	008000b4 	movhi	r2,2
   1ddec:	10824104 	addi	r2,r2,2308
   1ddf0:	12000017 	ldw	r8,0(r2)
   1ddf4:	45005217 	ldw	r20,328(r8)
   1ddf8:	44c05204 	addi	r19,r8,328
   1ddfc:	a0001c26 	beq	r20,zero,1de70 <__call_exitprocs+0xc4>
   1de00:	a0800117 	ldw	r2,4(r20)
   1de04:	15ffffc4 	addi	r23,r2,-1
   1de08:	b8000d16 	blt	r23,zero,1de40 <__call_exitprocs+0x94>
   1de0c:	14000044 	addi	r16,r2,1
   1de10:	8421883a 	add	r16,r16,r16
   1de14:	8421883a 	add	r16,r16,r16
   1de18:	84402004 	addi	r17,r16,128
   1de1c:	a463883a 	add	r17,r20,r17
   1de20:	a421883a 	add	r16,r20,r16
   1de24:	e0001e26 	beq	fp,zero,1dea0 <__call_exitprocs+0xf4>
   1de28:	80804017 	ldw	r2,256(r16)
   1de2c:	e0801c26 	beq	fp,r2,1dea0 <__call_exitprocs+0xf4>
   1de30:	bdffffc4 	addi	r23,r23,-1
   1de34:	843fff04 	addi	r16,r16,-4
   1de38:	8c7fff04 	addi	r17,r17,-4
   1de3c:	bd7ff91e 	bne	r23,r21,1de24 <__alt_mem_nios_system_shared_memory+0xfffdde24>
   1de40:	00800034 	movhi	r2,0
   1de44:	10800004 	addi	r2,r2,0
   1de48:	10000926 	beq	r2,zero,1de70 <__call_exitprocs+0xc4>
   1de4c:	a0800117 	ldw	r2,4(r20)
   1de50:	1000301e 	bne	r2,zero,1df14 <__call_exitprocs+0x168>
   1de54:	a0800017 	ldw	r2,0(r20)
   1de58:	10003226 	beq	r2,zero,1df24 <__call_exitprocs+0x178>
   1de5c:	a009883a 	mov	r4,r20
   1de60:	98800015 	stw	r2,0(r19)
   1de64:	00000000 	call	0 <__reset>
   1de68:	9d000017 	ldw	r20,0(r19)
   1de6c:	a03fe41e 	bne	r20,zero,1de00 <__alt_mem_nios_system_shared_memory+0xfffdde00>
   1de70:	dfc00a17 	ldw	ra,40(sp)
   1de74:	df000917 	ldw	fp,36(sp)
   1de78:	ddc00817 	ldw	r23,32(sp)
   1de7c:	dd800717 	ldw	r22,28(sp)
   1de80:	dd400617 	ldw	r21,24(sp)
   1de84:	dd000517 	ldw	r20,20(sp)
   1de88:	dcc00417 	ldw	r19,16(sp)
   1de8c:	dc800317 	ldw	r18,12(sp)
   1de90:	dc400217 	ldw	r17,8(sp)
   1de94:	dc000117 	ldw	r16,4(sp)
   1de98:	dec00b04 	addi	sp,sp,44
   1de9c:	f800283a 	ret
   1dea0:	a0800117 	ldw	r2,4(r20)
   1dea4:	80c00017 	ldw	r3,0(r16)
   1dea8:	10bfffc4 	addi	r2,r2,-1
   1deac:	15c01426 	beq	r2,r23,1df00 <__call_exitprocs+0x154>
   1deb0:	80000015 	stw	zero,0(r16)
   1deb4:	183fde26 	beq	r3,zero,1de30 <__alt_mem_nios_system_shared_memory+0xfffdde30>
   1deb8:	95c8983a 	sll	r4,r18,r23
   1debc:	a0806217 	ldw	r2,392(r20)
   1dec0:	a5800117 	ldw	r22,4(r20)
   1dec4:	2084703a 	and	r2,r4,r2
   1dec8:	10000b26 	beq	r2,zero,1def8 <__call_exitprocs+0x14c>
   1decc:	a0806317 	ldw	r2,396(r20)
   1ded0:	2088703a 	and	r4,r4,r2
   1ded4:	20000c1e 	bne	r4,zero,1df08 <__call_exitprocs+0x15c>
   1ded8:	89400017 	ldw	r5,0(r17)
   1dedc:	d9000017 	ldw	r4,0(sp)
   1dee0:	183ee83a 	callr	r3
   1dee4:	a0800117 	ldw	r2,4(r20)
   1dee8:	15bfbf1e 	bne	r2,r22,1dde8 <__alt_mem_nios_system_shared_memory+0xfffddde8>
   1deec:	98800017 	ldw	r2,0(r19)
   1def0:	153fcf26 	beq	r2,r20,1de30 <__alt_mem_nios_system_shared_memory+0xfffdde30>
   1def4:	003fbc06 	br	1dde8 <__alt_mem_nios_system_shared_memory+0xfffddde8>
   1def8:	183ee83a 	callr	r3
   1defc:	003ff906 	br	1dee4 <__alt_mem_nios_system_shared_memory+0xfffddee4>
   1df00:	a5c00115 	stw	r23,4(r20)
   1df04:	003feb06 	br	1deb4 <__alt_mem_nios_system_shared_memory+0xfffddeb4>
   1df08:	89000017 	ldw	r4,0(r17)
   1df0c:	183ee83a 	callr	r3
   1df10:	003ff406 	br	1dee4 <__alt_mem_nios_system_shared_memory+0xfffddee4>
   1df14:	a0800017 	ldw	r2,0(r20)
   1df18:	a027883a 	mov	r19,r20
   1df1c:	1029883a 	mov	r20,r2
   1df20:	003fb606 	br	1ddfc <__alt_mem_nios_system_shared_memory+0xfffdddfc>
   1df24:	0005883a 	mov	r2,zero
   1df28:	003ffb06 	br	1df18 <__alt_mem_nios_system_shared_memory+0xfffddf18>

0001df2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1df2c:	defffd04 	addi	sp,sp,-12
   1df30:	df000215 	stw	fp,8(sp)
   1df34:	df000204 	addi	fp,sp,8
   1df38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1df3c:	0001883a 	nop
   1df40:	e0bfff17 	ldw	r2,-4(fp)
   1df44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1df48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1df4c:	10000226 	beq	r2,zero,1df58 <_exit+0x2c>
    ALT_SIM_FAIL();
   1df50:	002af070 	cmpltui	zero,zero,43969
   1df54:	00000106 	br	1df5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1df58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1df5c:	003fff06 	br	1df5c <__alt_mem_nios_system_shared_memory+0xfffddf5c>
